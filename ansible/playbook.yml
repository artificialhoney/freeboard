---
- name: Freeboard
  hosts: all
  vars:
    config_path: /boot/firmware/config.txt
    cmdline_path: /boot/firmware/cmdline.txt
  tasks:
    - name: Make sure distro package of Docker is absent
      ansible.builtin.apt:
        name:
          - docker
          - docker-engine
          - docker.io
          - containerd
          - runc
          - docker-compose
        state: absent

    - name: Add Docker apt key (x86)
      ansible.builtin.apt_key:
        url: https://download.docker.com/linux/debian/gpg
        state: present
      when: ansible_architecture == "x86_64"
      tags:
        - docker

    - name: Add Docker apt key (Raspberry Pi)
      ansible.builtin.apt_key:
        url: https://download.docker.com/linux/raspbian/gpg
        state: present
      when: |
        ansible_architecture == "aarch64" or
        ansible_architecture == "armv7l" or
        ansible_architecture == "armv6l"
      tags:
        - docker

    - name: Get Debian name
      ansible.builtin.command: lsb_release -cs
      register: debian_name
      changed_when: false
      tags:
        - docker

    - name: Set architecture
      ansible.builtin.set_fact:
        architecture: "{{ 'amd64' if ansible_architecture == 'x86_64' else 'armhf' }}"
      tags:
        - docker

    - name: Add Docker repo
      ansible.builtin.lineinfile:
        path: /etc/apt/sources.list.d/docker.list
        create: true
        line: "deb [arch={{ architecture }}] https://download.docker.com/linux/debian {{ debian_name.stdout }} stable"
        state: present
        owner: root
        group: root
        mode: "0644"
      tags:
        - docker

    - name: Install Docker
      ansible.builtin.apt:
        name:
          - docker-ce:{{ architecture }}
          - docker-ce-cli:{{ architecture }}
          - docker-compose-plugin:{{ architecture }}
        update_cache: true
        install_recommends: false
      tags:
        - docker

    - name: Add user to Docker group (all platforms)
      ansible.builtin.user:
        name: "{{ lookup('env', 'USER') }}"
        group: "{{ lookup('env', 'USER') }}"
        groups:
          - docker
          - adm
          - sudo
          - video
          - plugdev
          - users
          - input
          - netdev
          - dialout
      tags:
        - docker

    - name: Add user to Docker group (Raspberry Pi)
      ansible.builtin.user:
        name: "{{ lookup('env', 'USER') }}"
        group: "{{ lookup('env', 'USER') }}"
        groups:
          - docker
          - adm
          - sudo
          - video
          - plugdev
          - users
          - input
          - netdev
          - gpio
          - dialout
      when: |
        ansible_architecture == "aarch64" or
        ansible_architecture == "armv7l" or
        ansible_architecture == "armv6l"
      tags:
        - docker

    - name: Installs splashscreen dependencies
      ansible.builtin.apt:
        name:
          - plymouth
          - plymouth-themes
          - plymouth-label
      tags:
        - splashscreen

    - name: Copy plymouth theme
      ansible.builtin.copy:
        src: "{{ item }}"
        dest: /usr/share/plymouth/themes/freeboard/
        mode: "0644"
        owner: root
        group: root
      with_items:
        - freeboard.plymouth
        - freeboard.script
        - splashscreen.png
      tags:
        - splashscreen

    - name: Get current plymouth theme
      ansible.builtin.command: plymouth-set-default-theme
      register: plymouth_theme
      changed_when: false
      tags:
        - splashscreen

    - name: Set splashscreen
      ansible.builtin.command: plymouth-set-default-theme -R freeboard
      changed_when: plymouth_theme.stdout != "freeboard"
      tags:
        - splashscreen

    - name: Check NOOBS
      ansible.builtin.command: cat {{ config_path }}
      register: config_txt
      changed_when: false
      tags:
        - system

    - name: Make sure we have proper framebuffer depth
      ansible.builtin.lineinfile:
        dest: "{{ config_path }}"
        regexp: ^framebuffer_depth=
        line: framebuffer_depth=32
      tags:
        - system

    - name: Fix framebuffer bug
      ansible.builtin.lineinfile:
        dest: "{{ config_path }}"
        regexp: ^framebuffer_ignore_alpha=
        line: framebuffer_ignore_alpha=1
      tags:
        - system

    - name: Add gpu_mem_256 in config.txt if it doesn't exist
      ansible.builtin.lineinfile:
        path: "{{ config_path }}"
        line: gpu_mem_256=96
      when: config_txt.stdout.find('gpu_mem_256') == -1
      tags:
        - system

    - name: Add gpu_mem_512 in config.txt if it doesn't exist
      ansible.builtin.lineinfile:
        path: "{{ config_path }}"
        line: gpu_mem_512=128
      when: config_txt.stdout.find('gpu_mem_512') == -1
      tags:
        - system

    - name: Add gpu_mem_1024 in config.txt if it doesn't exist
      ansible.builtin.lineinfile:
        path: "{{ config_path }}"
        line: gpu_mem_1024=196
      when: config_txt.stdout.find('gpu_mem_1024') == -1
      tags:
        - system

    - name: Add pi4 section in config.txt if it doesn't exist
      ansible.builtin.lineinfile:
        path: "{{ config_path }}"
        line: "\n[pi4]"
      when: config_txt.stdout.find('[pi4]') == -1
      tags:
        - system

    - name: Uncomment out the original dtoverlay config.
      ansible.builtin.replace:
        dest: "{{ config_path }}"
        regexp: '^#\s*(dtoverlay=vc4-kms-v3d)'
        replace: '\1'
      tags:
        - system

    - name: Remove the FKMS config for all devices.
      ansible.builtin.lineinfile:
        path: "{{ config_path }}"
        state: absent
        regexp: "^dtoverlay=vc4-fkms-v3d$"
      tags:
        - system

    - name: Backup kernel boot args
      ansible.builtin.copy:
        src: "{{ cmdline_path }}"
        dest: "{{ cmdline_path }}.orig"
        owner: root
        group: root
        mode: "0755"
        force: false
      tags:
        - system

    - name: Copy cmdline.txt.orig to cmdline.txt
      ansible.builtin.copy:
        src: "{{ cmdline_path }}.orig"
        dest: "{{ cmdline_path }}"
        owner: root
        group: root
        mode: "0755"
        force: true
      tags:
        - system

    - name: For splash screen using Plymouth
      ansible.builtin.replace:
        dest: "{{ cmdline_path }}"
        regexp: (^(?!$)((?!splash).)*$)
        replace: \1 splash
      tags:
        - system

    - name: Remove blinking cursor
      ansible.builtin.replace:
        dest: "{{ cmdline_path }}"
        regexp: (^(?!$)((?!vt.global_cursor_default=0).)*$)
        replace: \1 vt.global_cursor_default=0
      tags:
        - system

    - name: Plymouth ignore serial consoles
      ansible.builtin.replace:
        dest: "{{ cmdline_path }}"
        regexp: (^(?!$)((?!plymouth.ignore-serial-consoles).)*$)
        replace: \1 plymouth.ignore-serial-consoles
      tags:
        - system

    - name: Use Systemd as init and quiet boot process
      ansible.builtin.replace:
        dest: "{{ cmdline_path }}"
        regexp: (^(?!$)((?!quiet init=/lib/systemd/systemd).)*$)
        replace: \1 quiet init=/lib/systemd/systemd
      tags:
        - system

    - name: Set ethN/wlanN names for interfaces
      ansible.builtin.replace:
        dest: "{{ cmdline_path }}"
        regexp: (^(?!$)((?!net\.ifnames=0).)*$)
        replace: \1 net.ifnames=0
      tags:
        - system

    - name: Set cgroup_enable required by containerd for OOM
      ansible.builtin.replace:
        dest: "{{ cmdline_path }}"
        regexp: (^(?!$)((?!cgroup_enable=memory).)*$)
        replace: \1 cgroup_enable=memory
      tags:
        - system

    - name: Set cgroup_memory required by containerd for OOM
      ansible.builtin.replace:
        dest: "{{ cmdline_path }}"
        regexp: (^(?!$)((?!cgroup_memory=1).)*$)
        replace: \1 cgroup_memory=1
      tags:
        - system

    - name: Copy in rc.local
      ansible.builtin.copy:
        src: rc.local
        dest: /etc/rc.local
        mode: "0755"
        owner: root
        group: root
      tags:
        - system

    - name: Disable swap
      ansible.builtin.command: /sbin/swapoff --all removes=/var/swap
      tags:
        - system

    - name: Remove swapfile from disk
      ansible.builtin.file:
        path: /var/swap
        state: absent
      tags:
        - system

    - name: Install player dependencies
      ansible.builtin.apt:
        name:
          - xinit
          - feh
          - chromium-browser
        state: present
      tags:
        - player

    - name: Backup Xwrapper.config
      ansible.builtin.copy:
        src: "{{ item }}"
        dest: "{{ item }}.orig"
        owner: root
        group: root
        mode: "0755"
        force: true
      with_items:
        - /etc/X11/Xwrapper.config
        - /etc/X11/xorg.conf
      tags:
        - player

    - name: Copy Xwrapper.config
      ansible.builtin.copy:
        src: "{{ item | basename }}"
        dest: "{{ item }}"
        mode: "0644"
        owner: root
        group: root
      with_items:
        - /etc/X11/Xwrapper.config
        - /etc/X11/xorg.conf
      tags:
        - player

    - name: Create Unit file
      ansible.builtin.copy:
        src: freeboard.service
        dest: /lib/systemd/system/freeboard.service
        mode: "0644"
        owner: root
        group: root
      tags:
        - player

    - name: Start service
      ansible.builtin.systemd:
        name: freeboard.service
        state: started
        enabled: true
        daemon_reload: true
      tags:
        - player
