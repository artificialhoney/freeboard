{
  "opDocs": [
      {
          "name": "Ops.Anim.AnimNumber",
          "content": "",
          "attachmentFiles": [],
          "summary": "Always animates to the current value",
          "id": "e5b0b016-9663-4c9d-9365-f54ae3c5fbb6",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "exe"
                  },
                  {
                      "type": 0,
                      "name": "Value",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "duration",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "easing index",
                      "subType": "integer"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  },
                  {
                      "type": 0,
                      "name": "result",
                      "subType": "number"
                  },
                  {
                      "type": 1,
                      "name": "Finished"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "exe",
                      "text": "Trigger in"
                  },
                  {
                      "name": "Value",
                      "text": "The value you want to alter"
                  },
                  {
                      "name": "duration",
                      "text": "How long it takes for the value to reach the current value"
                  },
                  {
                      "name": "Next",
                      "text": "Trigger out"
                  },
                  {
                      "name": "result",
                      "text": "Calculated result!"
                  },
                  {
                      "name": "Finished",
                      "text": "Sends a trigger out when the value is reached"
                  }
              ]
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1519730689749,
          "exampleProjectId": "lntUQx",
          "shortName": "AnimNumber",
          "hasScreenshot": true,
          "namespace": "Ops.Anim",
          "shortNameDisplay": "AnimNumber",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Anim.AnimNumber",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false,
          "namespaceTitle": "Ops.Anim",
          "namespaceSummary": "Animations"
      },
      {
          "name": "Ops.Anim.Bang",
          "content": "<p>... also helpful for animated scene transitions: <a href=\"https://cables.gl/p/o4_6Bo\">https://cables.gl/p/o4_6Bo</a></p>\n",
          "attachmentFiles": [],
          "summary": "trigger a simple bang animation going from 1 to 0",
          "id": "92ca45a7-5b4b-4238-956e-23d79bdc659f",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "update"
                  },
                  {
                      "type": 1,
                      "name": "Bang"
                  },
                  {
                      "type": 0,
                      "name": "Duration",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Invert",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Trigger Out"
                  },
                  {
                      "type": 0,
                      "name": "Value",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "update",
                      "text": "Trigger the op"
                  },
                  {
                      "name": "Bang",
                      "text": "Trigger once to start animation from `1` to `0`"
                  },
                  {
                      "name": "Duration",
                      "text": "The amount of time it takes to get from `1` to `0`"
                  },
                  {
                      "name": "Value",
                      "text": "The animated number"
                  }
              ]
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1504988853711,
          "exampleProjectId": "TctR5r",
          "shortName": "Bang",
          "hasScreenshot": true,
          "namespace": "Ops.Anim",
          "shortNameDisplay": "Bang",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Anim.Bang",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Anim.BoolAnim",
          "content": "<p>This op allows you to create simple animations with a definable animation time and easing mode. Try combining it with the ToggleBool op.</p>\n",
          "attachmentFiles": [],
          "summary": "Animate between two numbers based on a boolean value",
          "id": "06ad9d35-ccf5-4d31-889c-e23fa062588a",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "exe"
                  },
                  {
                      "type": 0,
                      "name": "bool",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "easing index",
                      "group": "Animation",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "duration",
                      "group": "Animation",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Direction index",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "value false",
                      "group": "Values",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "value true",
                      "group": "Values",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "trigger"
                  },
                  {
                      "type": 0,
                      "name": "value",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "finished",
                      "subType": "boolean"
                  },
                  {
                      "type": 1,
                      "name": "Finished Trigger"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "exe",
                      "text": "Trigger the op"
                  },
                  {
                      "name": "bool",
                      "text": "Required to trigger an animation"
                  },
                  {
                      "name": "duration",
                      "text": "How long it takes for the animation to occur"
                  },
                  {
                      "name": "value false",
                      "text": "The value to animate to when `Bool input` evaluates to `false`"
                  },
                  {
                      "name": "value true",
                      "text": "The value to animate to when `Bool input` evaluates to `true`"
                  },
                  {
                      "name": "trigger",
                      "text": "Trigger out "
                  },
                  {
                      "name": "value",
                      "text": "The current value of the animation"
                  },
                  {
                      "name": "Finished Trigger",
                      "text": "Outputs a trigger when the animation has finished"
                  }
              ]
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1518522798910,
          "exampleProjectId": "ofPcTo",
          "shortName": "BoolAnim",
          "hasScreenshot": true,
          "namespace": "Ops.Anim",
          "shortNameDisplay": "BoolAnim",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Anim.BoolAnim",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Anim.FrameRangeAnimSwitcher",
          "content": "",
          "attachmentFiles": [],
          "summary": "switch between multiple anim ranges of a keyframed 3d scene",
          "id": "d801703b-af5f-4988-af90-39d57706c4b6",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "Index",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Duration",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "easing index",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Value 0",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Value 1",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Value 2",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Value 3",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Value 4",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Value 5",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Value 6",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Value 7",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Value 8",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Value 9",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "Time 1",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Time Fade",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Time 2",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1520948924590,
          "exampleProjectId": "",
          "shortName": "FrameRangeAnimSwitcher",
          "hasScreenshot": false,
          "namespace": "Ops.Anim",
          "shortNameDisplay": "FrameRangeAnimSwitcher",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Anim.FrameRangeAnimSwitcher",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Anim.FrameRangeAnim_v2",
          "content": "<p>enter comma seperated frames or frameranges\ne.g.:\n<code>1,2,3,10-15</code> expands to frames <code>1,2,3,10,11,12,13,14,15</code></p>\n<p><code>time</code> input will set <code>result time</code> output as an interpolated time value.</p>\n<p>time interpolation is linear if frames are consecutive, otherwise absolute</p>\n",
          "attachmentFiles": [],
          "summary": "parses string containing ranges of frames and play as coherent animation",
          "id": "c0613f9e-5ddb-479e-bc90-4ffc23f97860",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "Time",
                      "subType": "number"
                  },
                  {
                      "type": 5,
                      "name": "Frames"
                  },
                  {
                      "type": 0,
                      "name": "Loop",
                      "subType": "boolean"
                  },
                  {
                      "type": 1,
                      "name": "Rewind"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "result time",
                      "subType": "number"
                  },
                  {
                      "type": 3,
                      "name": "Expanded Frames"
                  },
                  {
                      "type": 0,
                      "name": "Finished",
                      "subType": "boolean"
                  },
                  {
                      "type": 1,
                      "name": "Finished Trigger"
                  },
                  {
                      "type": 0,
                      "name": "Anim Length",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Progress",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "Frames",
                      "text": "frame range (ex. \"0-10\")"
                  }
              ]
          },
          "license": "MIT",
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1615829783108,
          "exampleProjectId": "",
          "shortName": "FrameRangeAnim_v2",
          "hasScreenshot": false,
          "namespace": "Ops.Anim",
          "shortNameDisplay": "FrameRangeAnim",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Anim.FrameRangeAnim",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Anim.FrameRangeAnim_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Anim.InOutInAnim",
          "content": "",
          "attachmentFiles": [],
          "summary": "animates after a trigger from 1 to 0 to 1",
          "id": "ae46d30d-9ea6-417b-968b-e7b5726afdde",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Update"
                  },
                  {
                      "type": 0,
                      "name": "Duration In",
                      "group": "In Anim",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Easing In index",
                      "group": "In Anim",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Value In",
                      "group": "In Anim",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Hold duration",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Duration Out",
                      "group": "Out Anim",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Easing Out index",
                      "group": "Out Anim",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Value Out",
                      "group": "Out Anim",
                      "subType": "number"
                  },
                  {
                      "type": 1,
                      "name": "Start"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  },
                  {
                      "type": 0,
                      "name": "Result",
                      "subType": "number"
                  },
                  {
                      "type": 1,
                      "name": "Started"
                  },
                  {
                      "type": 1,
                      "name": "Middle"
                  },
                  {
                      "type": 1,
                      "name": "finished"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1510654829404,
          "exampleProjectId": "HwVRrT",
          "shortName": "InOutInAnim",
          "hasScreenshot": true,
          "namespace": "Ops.Anim",
          "shortNameDisplay": "InOutInAnim",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Anim.InOutInAnim",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Anim.LFO_v3",
          "content": "<p>Use this op to generate different different oscillation patterns based upon a timer signal. Standard output is -1 to 1.</p>\n",
          "attachmentFiles": [],
          "summary": "Low-frequency oscillation for animations",
          "id": "5bdbe26b-dea3-4266-850c-1b66ed29936e",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "Time",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Frequency",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Type index",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Phase",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Range Min",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Range Max",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "Result",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1723816290994,
          "exampleProjectId": "9EOrS8",
          "shortName": "LFO_v3",
          "hasScreenshot": true,
          "namespace": "Ops.Anim",
          "shortNameDisplay": "LFO",
          "version": 3,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Anim.LFO",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Anim.LFO_v2",
                  "versionString": "_v2",
                  "version": 2
              },
              {
                  "name": "Ops.Anim.LFO_v3",
                  "versionString": "_v3",
                  "version": 3
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Anim.RandomAnim_v2",
          "content": "",
          "attachmentFiles": [],
          "summary": "Animates between random values defined by a min and max value",
          "id": "05581579-1cdc-4eaf-8557-9726c6f9a843",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "exe"
                  },
                  {
                      "type": 0,
                      "name": "min",
                      "group": "Value",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "max",
                      "group": "Value",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "duration",
                      "group": "Timing",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "pause between",
                      "group": "Timing",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "easing index",
                      "subType": "integer"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  },
                  {
                      "type": 0,
                      "name": "result",
                      "subType": "number"
                  },
                  {
                      "type": 1,
                      "name": "Looped"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "exe",
                      "text": "Trigger the op"
                  },
                  {
                      "name": "min",
                      "text": "Minimum random value that can be generated"
                  },
                  {
                      "name": "max",
                      "text": "Maximum random value that can be generated"
                  },
                  {
                      "name": "duration",
                      "text": "How long it takes to animate from the random min and max values"
                  },
                  {
                      "name": "pause between",
                      "text": "Define a pause between each random animation cycle"
                  },
                  {
                      "name": "Next",
                      "text": "Trigger out"
                  },
                  {
                      "name": "result",
                      "text": "The random animated value"
                  },
                  {
                      "name": "Looped",
                      "text": "Trigger out each time the animation reaches its end"
                  }
              ]
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1727106010525,
          "exampleProjectId": "nCSoG8",
          "shortName": "RandomAnim_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Anim",
          "shortNameDisplay": "RandomAnim",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Anim.RandomAnim",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Anim.RandomAnim_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Anim.SimpleAnim",
          "content": "",
          "attachmentFiles": [],
          "summary": "simple animation between two values",
          "id": "5b244b6e-c505-4743-b2cc-8119ef720028",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "exe"
                  },
                  {
                      "type": 1,
                      "name": "reset"
                  },
                  {
                      "type": 1,
                      "name": "rewind"
                  },
                  {
                      "type": 0,
                      "name": "start",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "end",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "duration",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "loop",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Wait for Reset",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "easing index",
                      "subType": "integer"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  },
                  {
                      "type": 0,
                      "name": "result",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "finished",
                      "subType": "number"
                  },
                  {
                      "type": 1,
                      "name": "Finished Trigger"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "exe",
                      "text": "Trigger the op"
                  },
                  {
                      "name": "reset",
                      "text": "Trigger the animation"
                  },
                  {
                      "name": "rewind",
                      "text": "Rewinds animation to start but only after its finished"
                  },
                  {
                      "name": "start",
                      "text": "starting animation value"
                  },
                  {
                      "name": "end",
                      "text": "ending animation value"
                  },
                  {
                      "name": "duration",
                      "text": "Duration to get from start to end value"
                  },
                  {
                      "name": "loop",
                      "text": "enable to loop animation back and forth"
                  },
                  {
                      "name": "easing",
                      "text": "Easing mode applied to value"
                  },
                  {
                      "name": "Next",
                      "text": "Trigger out"
                  },
                  {
                      "name": "result",
                      "text": "The animated value out"
                  },
                  {
                      "name": "finished",
                      "text": "Outputs true when animation is finished"
                  },
                  {
                      "name": "Finished Trigger",
                      "text": "Outputs a trigger when animation is finished"
                  }
              ]
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1506695249414,
          "exampleProjectId": "dOlV9L",
          "shortName": "SimpleAnim",
          "hasScreenshot": true,
          "namespace": "Ops.Anim",
          "shortNameDisplay": "SimpleAnim",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Anim.SimpleAnim",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Anim.SineAnim",
          "content": "",
          "attachmentFiles": [],
          "summary": "animation in the form of a sine/cosine curve (sinus/cos)",
          "id": "736d3d0e-c920-449e-ade0-f5ca6018fb5c",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "exe"
                  },
                  {
                      "type": 0,
                      "name": "Mode index",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "phase",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "frequency",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "amplitude",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Trigger out"
                  },
                  {
                      "type": 0,
                      "name": "result",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "exe",
                      "text": "Executes the op"
                  },
                  {
                      "name": "phase",
                      "text": "Can be used to shift the animation, e.g. if you use two `SineAnim`-ops which should not be in sync. Should be an angle in radians."
                  },
                  {
                      "name": "frequency",
                      "text": "Make it bigger than `1` to speed the animation up"
                  },
                  {
                      "name": "amplitude",
                      "text": "How small / big the values can become, setting it to `2` e.g. results in an output between `-2` and `2`"
                  },
                  {
                      "name": "Trigger out",
                      "text": "Trigger out"
                  },
                  {
                      "name": "result",
                      "text": "A value cycling between `-Amplitude` and `Amplitude`"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1510907095194,
          "exampleProjectId": "3bbUfp",
          "shortName": "SineAnim",
          "hasScreenshot": true,
          "namespace": "Ops.Anim",
          "shortNameDisplay": "SineAnim",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Anim.SineAnim",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Anim.Smooth",
          "content": "<p>Use this op to smoothly interpolate between differences in values.\nIt has two modes which can be selected with the <code>separate inc/dec</code> option.</p>\n<p>One mode applies the same smooth factor to values which increase or decrease.\nThe other mode allows separate control over the smooth factor for increasing or decreasing values.</p>\n",
          "attachmentFiles": [],
          "summary": "Smooths out jumps in values (AverageInterpolation)",
          "id": "5677b5b5-753a-4fbf-9e91-64c81ec68a2f",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Update"
                  },
                  {
                      "type": 0,
                      "name": "Value",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Inc factor",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Dec factor",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  },
                  {
                      "type": 0,
                      "name": "Result",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "Update",
                      "text": "Trigger the op"
                  },
                  {
                      "name": "Separate inc/dec",
                      "text": "Enable to have separate control over the smoothing when values increase or decrease"
                  },
                  {
                      "name": "Value",
                      "text": "The value to smooth"
                  },
                  {
                      "name": "Inc factor",
                      "text": "Amount of smoothing applied to values that increase from the previous number"
                  },
                  {
                      "name": "Dec factor",
                      "text": "Amount of smoothing applied to values that decrease from the previous number"
                  },
                  {
                      "name": "Next",
                      "text": "Trigger out"
                  },
                  {
                      "name": "Result",
                      "text": "The smoothed result"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [
              "00Rvb749wrc"
          ],
          "created": 1563449330030,
          "exampleProjectId": "c9gqda",
          "shortName": "Smooth",
          "hasScreenshot": true,
          "namespace": "Ops.Anim",
          "shortNameDisplay": "Smooth",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Anim.Smooth",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Anim.Snap",
          "content": "",
          "attachmentFiles": [],
          "summary": "snap at certain points (e.g. while scrolling)",
          "id": "7319d30d-bce2-4e66-8143-e4c0ff5a37a2",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "Delta",
                      "subType": "number"
                  },
                  {
                      "type": 3,
                      "name": "Snap at Values"
                  },
                  {
                      "type": 0,
                      "name": "Snap Distance",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Snap Distance Release",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Slowdown",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Block Input after snap",
                      "subType": "number"
                  },
                  {
                      "type": 1,
                      "name": "Reset"
                  },
                  {
                      "type": 0,
                      "name": "Min",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Max",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Value Mul",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Enabled",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "Result",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Distance",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Snapped",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "was snapped",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "Slowdown",
                      "text": "slows down value increase while near a snappoint"
                  },
                  {
                      "name": "Block Input after snap",
                      "text": "will pause for x seconds when reached a snap point"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1519211223820,
          "exampleProjectId": "7B11U6",
          "shortName": "Snap",
          "hasScreenshot": true,
          "namespace": "Ops.Anim",
          "shortNameDisplay": "Snap",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Anim.Snap",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Anim.Spring",
          "content": "",
          "attachmentFiles": [],
          "summary": "Spring simulation based on input target value.",
          "id": "3ef72802-f192-4955-b93f-800e642cb610",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "exe"
                  },
                  {
                      "type": 0,
                      "name": "value",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "damping",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "stiffness",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "trigger"
                  },
                  {
                      "type": 0,
                      "name": "result",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "lorenzomf",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1686335791917,
          "exampleProjectId": "bsbM2y",
          "shortName": "Spring",
          "hasScreenshot": true,
          "namespace": "Ops.Anim",
          "shortNameDisplay": "Spring",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Anim.Spring",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Anim.StringTypeAnimation_v2",
          "content": "",
          "attachmentFiles": [],
          "summary": "Animates a text/string, like it is being typed out by a person",
          "id": "66723fea-7d5f-4509-98fc-8d892a8f8d89",
          "layout": {
              "portsIn": [
                  {
                      "type": 5,
                      "name": "text"
                  },
                  {
                      "type": 1,
                      "name": "Restart"
                  },
                  {
                      "type": 0,
                      "name": "Speed",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Speed Variation",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Show Cursor",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 5,
                      "name": "Result"
                  },
                  {
                      "type": 1,
                      "name": "Changed"
                  },
                  {
                      "type": 1,
                      "name": "Finished"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "text",
                      "text": "The text/string which will typed out"
                  },
                  {
                      "name": "Restart",
                      "text": "When triggered causes the string to be typed out again"
                  },
                  {
                      "name": "Speed",
                      "text": "Determines the speed that the typing occurs at"
                  },
                  {
                      "name": "Speed Variation",
                      "text": "Creates variations in the typed speed"
                  },
                  {
                      "name": "Result",
                      "text": "The typed out string"
                  },
                  {
                      "name": "Changed",
                      "text": "Triggers out each time a letter is typed"
                  },
                  {
                      "name": "Finished",
                      "text": "Trigger out when animation is finished"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1559028449670,
          "exampleProjectId": "8dB2eH",
          "shortName": "StringTypeAnimation_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Anim",
          "shortNameDisplay": "StringTypeAnimation",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Anim.StringTypeAnimation",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Anim.StringTypeAnimation_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Anim.TimeDelta",
          "content": "<p>Op gives the delta time. The difference in time between each trigger coming in.</p>\n",
          "attachmentFiles": [],
          "summary": "measure the time difference between two triggers",
          "id": "fba0e516-b50e-4372-9a0c-dc605669ffed",
          "layout": {
              "portsIn": [
                  {
                      "type": "1",
                      "name": "exe"
                  },
                  {
                      "type": "0",
                      "name": "Smooth",
                      "subType": "boolean"
                  },
                  {
                      "type": "0",
                      "name": "Seconds",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": "1",
                      "name": "trigger"
                  },
                  {
                      "type": "0",
                      "name": "result",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "exe",
                      "text": "Trigger the op "
                  },
                  {
                      "name": "Seconds",
                      "text": "See difference in time as seconds or milliseconds "
                  },
                  {
                      "name": "trigger",
                      "text": "Trigger out"
                  },
                  {
                      "name": "result",
                      "text": "The difference in time as a number"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1520347835082,
          "exampleProjectId": "omrKQm",
          "shortName": "TimeDelta",
          "hasScreenshot": true,
          "namespace": "Ops.Anim",
          "shortNameDisplay": "TimeDelta",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Anim.TimeDelta",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Anim.Timer_v2",
          "content": "",
          "attachmentFiles": [],
          "summary": "A timer that can be started, paused and reset by triggering",
          "id": "aac7f721-208f-411a-adb3-79adae2e471a",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "Speed",
                      "group": "Controls",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Play",
                      "group": "Controls",
                      "subType": "boolean"
                  },
                  {
                      "type": 1,
                      "name": "Reset",
                      "group": "Controls"
                  },
                  {
                      "type": 0,
                      "name": "Sync to timeline",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "Time",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "Speed",
                      "text": "Multiply time by this amount"
                  },
                  {
                      "name": "Play",
                      "text": "Starts timer when set to true"
                  },
                  {
                      "name": "Reset",
                      "text": "Resets timer to 0"
                  },
                  {
                      "name": "Time",
                      "text": "Time elapsed"
                  }
              ]
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1517953593075,
          "exampleProjectId": "YTuOQm",
          "shortName": "Timer_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Anim",
          "shortNameDisplay": "Timer",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Anim.Timer",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Anim.Timer_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Array.AnglesBetweenPoints",
          "content": "<p>This op will take an incoming array of point locations in 3D space (groups of X,Y,Z coordinates) and output an array of angles between the points. </p>\n",
          "attachmentFiles": [],
          "summary": "Outputs the angle between points in 3D space (degree)",
          "id": "0d9eb214-c1a2-4ef5-8bcb-79b89fcfba57",
          "layout": {
              "portsIn": [
                  {
                      "type": 3,
                      "name": "Points"
                  },
                  {
                      "type": 0,
                      "name": "Theta",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Phi",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 3,
                      "name": "Rotations"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1635325061543,
          "exampleProjectId": "Y2_BIR",
          "shortName": "AnglesBetweenPoints",
          "hasScreenshot": true,
          "namespace": "Ops.Array",
          "shortNameDisplay": "AnglesBetweenPoints",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Array.AnglesBetweenPoints",
                  "versionString": "",
                  "version": 0
              }
          ],
          "namespaceTitle": "Ops.Array",
          "namespaceSummary": "process and manipulate collections (arrays) of data",
          "allowEdit": false
      },
      {
          "name": "Ops.Array.AnimArray_v2",
          "content": "",
          "attachmentFiles": [],
          "summary": "animate values in an array to another array",
          "id": "048e852b-62ea-4314-b6f2-9ac5e7cbb066",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Update"
                  },
                  {
                      "type": 3,
                      "name": "Next Array"
                  },
                  {
                      "type": 0,
                      "name": "Duration",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "easing index",
                      "subType": "integer"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  },
                  {
                      "type": 3,
                      "name": "Matrix"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1629276576965,
          "exampleProjectId": "OwvgkJ",
          "shortName": "AnimArray_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Array",
          "shortNameDisplay": "AnimArray",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Array.AnimArray",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Array.AnimArray_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Array.Array1toX",
          "content": "",
          "attachmentFiles": [],
          "summary": "convert an array1 to array2,3,4 by choosing content for new axis",
          "id": "6a8947be-79c8-4998-9853-1e0912654800",
          "layout": {
              "portsIn": [
                  {
                      "type": 3,
                      "name": "Array1x"
                  },
                  {
                      "type": 0,
                      "name": "Format index",
                      "subType": "integer"
                  },
                  {
                      "type": 5,
                      "name": "Format"
                  },
                  {
                      "type": 0,
                      "name": "A index",
                      "subType": "integer"
                  },
                  {
                      "type": 5,
                      "name": "A"
                  },
                  {
                      "type": 0,
                      "name": "B index",
                      "subType": "integer"
                  },
                  {
                      "type": 5,
                      "name": "B"
                  },
                  {
                      "type": 0,
                      "name": "C index",
                      "subType": "integer"
                  },
                  {
                      "type": 5,
                      "name": "C"
                  },
                  {
                      "type": 0,
                      "name": "D index",
                      "subType": "integer"
                  },
                  {
                      "type": 5,
                      "name": "D"
                  }
              ],
              "portsOut": [
                  {
                      "type": 3,
                      "name": "Array3x"
                  },
                  {
                      "type": 0,
                      "name": "Total points",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Array length",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1610634355312,
          "exampleProjectId": "omZrLu",
          "shortName": "Array1toX",
          "hasScreenshot": true,
          "namespace": "Ops.Array",
          "shortNameDisplay": "Array1toX",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Array.Array1toX",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Array.Array2To3",
          "content": "<p><code>[1,2,3,4]</code> becomes <code>[1,2,0,3,4,0]</code></p>\n",
          "attachmentFiles": [],
          "summary": "inserts zeroes every third item",
          "id": "9854162e-d415-4300-a47b-173772b454e9",
          "layout": {
              "portsIn": [
                  {
                      "type": 3,
                      "name": "Array2x"
                  }
              ],
              "portsOut": [
                  {
                      "type": 3,
                      "name": "Array3x"
                  },
                  {
                      "type": 0,
                      "name": "Total points",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Array length",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1513099458683,
          "exampleProjectId": "xAg8P6",
          "shortName": "Array2To3",
          "hasScreenshot": true,
          "namespace": "Ops.Array",
          "shortNameDisplay": "Array2To3",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Array.Array2To3",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Array.Array3",
          "content": "<p>result will look like this: <code>[XYZXYZXYZXYZ.....]</code></p>\n",
          "attachmentFiles": [],
          "summary": "create an array of num triplets set to default values xyz  ",
          "id": "2766606a-3ea0-4204-8613-b8950a124435",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "Num Triplets",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "X",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Y",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Z",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 3,
                      "name": "Array"
                  },
                  {
                      "type": 0,
                      "name": "Total points",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Array length",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1559031714224,
          "exampleProjectId": "lmn5Og",
          "shortName": "Array3",
          "hasScreenshot": true,
          "namespace": "Ops.Array",
          "shortNameDisplay": "Array3",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Array.Array3",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Array.Array3GetAverage",
          "content": "",
          "attachmentFiles": [],
          "summary": "average x,y,z values of an array3x",
          "id": "9643edc7-e479-4b26-9f7a-343cdcdc81f4",
          "layout": {
              "portsIn": [
                  {
                      "type": 3,
                      "name": "Array"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "Average X",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Average Y",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Average Z",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "Array",
                      "text": "The xyz array to analyze"
                  },
                  {
                      "name": "Average X",
                      "text": "The average of the x component"
                  },
                  {
                      "name": "Average Y",
                      "text": "The average of the y component"
                  },
                  {
                      "name": "Average Z",
                      "text": "The average of the z component"
                  }
              ]
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1512653759876,
          "exampleProjectId": "lmn5Og",
          "shortName": "Array3GetAverage",
          "hasScreenshot": true,
          "namespace": "Ops.Array",
          "shortNameDisplay": "Array3GetAverage",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Array.Array3GetAverage",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Array.Array3GetNumbers",
          "content": "<p>If an array contains :\n0,1,2,3,4,5,6,7,8</p>\n<p>Putting index to 2 returns 3 values\n6,7,8</p>\n",
          "attachmentFiles": [],
          "summary": "get 3 values XYZ from an array",
          "id": "56882cc4-c40d-4dc0-bf7c-db1b5a7acad0",
          "layout": {
              "portsIn": [
                  {
                      "type": 3,
                      "name": "Array"
                  },
                  {
                      "type": 0,
                      "name": "Index",
                      "subType": "integer"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "X",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Y",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Z",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "Array",
                      "text": "The array to get the values from"
                  },
                  {
                      "name": "Index",
                      "text": "The index to look up"
                  },
                  {
                      "name": "X",
                      "text": "The X component from the index look up"
                  },
                  {
                      "name": "Y",
                      "text": "The Y component from the index look up"
                  },
                  {
                      "name": "Z",
                      "text": "The Z component from the index look up"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1542698784091,
          "exampleProjectId": "5LhTLJ",
          "shortName": "Array3GetNumbers",
          "hasScreenshot": true,
          "namespace": "Ops.Array",
          "shortNameDisplay": "Array3GetNumbers",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Array.Array3GetNumbers",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Array.Array3InterpolateDistributed",
          "content": "<p>the arrays do not have to be the same length, smaller array will be distributed on the larger array in random order</p>\n",
          "attachmentFiles": [],
          "summary": "interpolate between two arrays",
          "id": "a004a6e9-a05f-42dc-91d3-69aa88e67a87",
          "layout": {
              "portsIn": [
                  {
                      "type": "1",
                      "name": "Update"
                  },
                  {
                      "type": "3",
                      "name": "Array 1"
                  },
                  {
                      "type": "3",
                      "name": "Array 2"
                  },
                  {
                      "type": "0",
                      "name": "Progress",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": "3",
                      "name": "Result"
                  },
                  {
                      "type": "0",
                      "name": "Array length",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1517242634176,
          "exampleProjectId": "2UuCa6",
          "shortName": "Array3InterpolateDistributed",
          "hasScreenshot": true,
          "namespace": "Ops.Array",
          "shortNameDisplay": "Array3InterpolateDistributed",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Array.Array3InterpolateDistributed",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Array.Array3Iterator",
          "content": "",
          "attachmentFiles": [],
          "summary": "Iterates over an array in steps of three and outputs three values",
          "id": "3f7db864-7409-418f-8c03-b2c966c050b3",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Execute"
                  },
                  {
                      "type": 3,
                      "name": "Array"
                  },
                  {
                      "type": 0,
                      "name": "Step",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Trigger"
                  },
                  {
                      "type": 0,
                      "name": "Index",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Value 1",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Value 2",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Value 3",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "Execute",
                      "text": "Starts the iteration"
                  },
                  {
                      "name": "Array",
                      "text": "The array to iterate over"
                  },
                  {
                      "name": "Step",
                      "text": "If bigger then `1`, values will be skipped, e.g. when `Step` is `2` every other triplet will be skipped"
                  },
                  {
                      "name": "Trigger",
                      "text": "Triggers for every iteration step (triplet in the array)"
                  },
                  {
                      "name": "Index",
                      "text": "The index of the triplet"
                  },
                  {
                      "name": "Value 1",
                      "text": "First value of the current triplet (e.g. x)"
                  },
                  {
                      "name": "Value 2",
                      "text": "Second value of the current triplet (e.g. y)"
                  },
                  {
                      "name": "Value 3",
                      "text": "Third value of the current triplet (e.g. z)"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1513865904150,
          "exampleProjectId": "Ubwk3u",
          "shortName": "Array3Iterator",
          "hasScreenshot": true,
          "namespace": "Ops.Array",
          "shortNameDisplay": "Array3Iterator",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Array.Array3Iterator",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Array.Array3Multiply",
          "content": "<p>Use this op to to multiply individual components of an array</p>\n",
          "attachmentFiles": [],
          "summary": "multiply every XYZ member of array3x",
          "id": "a1e4d85f-0955-4ada-819c-c597cec40365",
          "layout": {
              "portsIn": [
                  {
                      "type": 3,
                      "name": "Array3x"
                  },
                  {
                      "type": 0,
                      "name": "Mul X",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Mul Y",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Mul Z",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 3,
                      "name": "Result"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "Array3x",
                      "text": "3x array in"
                  },
                  {
                      "name": "Mul X",
                      "text": "Multiply x component by this number"
                  },
                  {
                      "name": "Mul Y",
                      "text": "Multiply y component by this number"
                  },
                  {
                      "name": "Mul Z",
                      "text": "Multiply z component by this number"
                  },
                  {
                      "name": "Result",
                      "text": "Calculated array output"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1515878597720,
          "exampleProjectId": "8FxmVJ",
          "shortName": "Array3Multiply",
          "hasScreenshot": true,
          "namespace": "Ops.Array",
          "shortNameDisplay": "Array3Multiply",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Array.Array3Multiply",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Array.Array3PushNumbers_v2",
          "content": "",
          "attachmentFiles": [],
          "summary": "Push three numbers to the end of an array (was ArrayPushValue3x)",
          "id": "e898374c-5651-4f43-82d5-f06c7695444b",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Execute"
                  },
                  {
                      "type": 3,
                      "name": "Array"
                  },
                  {
                      "type": 0,
                      "name": "Value 1",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Value 2",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Value 3",
                      "subType": "number"
                  },
                  {
                      "type": 1,
                      "name": "Reset"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  },
                  {
                      "type": 3,
                      "name": "Result Array"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1619892949713,
          "exampleProjectId": "uOzMH7",
          "shortName": "Array3PushNumbers_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Array",
          "shortNameDisplay": "Array3PushNumbers",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Array.Array3PushNumbers",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Array.Array3PushNumbers_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Array.Array3RandomSelection",
          "content": "<p>This op works with a xyz array. \nSetting elements to 5 on an array with 60 values will extract random 5 xyz values from the array.\nSeed changes which numbers are extracted.</p>\n",
          "attachmentFiles": [],
          "summary": "extract definable amount of random xyz points from an array",
          "id": "c6967443-9d2a-4d3a-8d8c-eab529f52518",
          "layout": {
              "portsIn": [
                  {
                      "type": 3,
                      "name": "Array"
                  },
                  {
                      "type": 0,
                      "name": "Elements",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Seed",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 3,
                      "name": "Result"
                  },
                  {
                      "type": 0,
                      "name": "Total points",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Array length",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "Array",
                      "text": "The array in to extract random values from "
                  },
                  {
                      "name": "Elements",
                      "text": "How many xyz elements to extract"
                  },
                  {
                      "name": "Seed",
                      "text": "Random number seed. 0 is always different on a reload. Set to a number to keep a fixed seed."
                  },
                  {
                      "name": "Result",
                      "text": "A new array with a length determined by the elements paramater."
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1518457012267,
          "exampleProjectId": "1qNz98",
          "shortName": "Array3RandomSelection",
          "hasScreenshot": true,
          "namespace": "Ops.Array",
          "shortNameDisplay": "Array3RandomSelection",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Array.Array3RandomSelection",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Array.Array3SetNumber",
          "content": "<p>This will creates a new copy of an array.\nOriginal array will be untouched.</p>\n",
          "attachmentFiles": [],
          "summary": "Set three numbers at index in an array",
          "id": "6609bebb-70d0-4464-b22d-4c7780020fd3",
          "layout": {
              "portsIn": [
                  {
                      "type": 3,
                      "name": "Array"
                  },
                  {
                      "type": 0,
                      "name": "Index",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Value X",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Value Y",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Value Z",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 3,
                      "name": "Result"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "Array",
                      "text": "Array in"
                  },
                  {
                      "name": "Index",
                      "text": "index to update with the value"
                  },
                  {
                      "name": "Result",
                      "text": "Modified array out"
                  }
              ]
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1712656396760,
          "exampleProjectId": "t44fQc",
          "shortName": "Array3SetNumber",
          "hasScreenshot": true,
          "namespace": "Ops.Array",
          "shortNameDisplay": "Array3SetNumber",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Array.Array3SetNumber",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false,
          "usedInProject": true
      },
      {
          "name": "Ops.Array.Array3Sum",
          "content": "<p>Use this op to to add values to individual components of an array</p>\n",
          "attachmentFiles": [],
          "summary": "add number to every XYZ member of array3x",
          "id": "5120ca09-6ce3-457a-afc1-79b15a06137c",
          "layout": {
              "portsIn": [
                  {
                      "type": 3,
                      "name": "Array3x"
                  },
                  {
                      "type": 0,
                      "name": "Add X",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Add Y",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Add Z",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 3,
                      "name": "Result"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "Array3x",
                      "text": "3x array in"
                  },
                  {
                      "name": "Result",
                      "text": "Calculated array output"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1668507350444,
          "exampleProjectId": "D-pQHj",
          "shortName": "Array3Sum",
          "hasScreenshot": true,
          "namespace": "Ops.Array",
          "shortNameDisplay": "Array3Sum",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Array.Array3Sum",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Array.Array3To2",
          "content": "<p><code>[xyzxyz]</code> becomes <code>[xyxyxy]</code></p>\n",
          "attachmentFiles": [],
          "summary": "remove every 3rd item of an array - changes array length",
          "id": "c451ee12-67f4-4dc9-8fb8-7a6cc4295a4c",
          "layout": {
              "portsIn": [
                  {
                      "type": 3,
                      "name": "Array3x"
                  }
              ],
              "portsOut": [
                  {
                      "type": 3,
                      "name": "Array2x"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "Array3x",
                      "text": "The XYZ array in"
                  },
                  {
                      "name": "Array2x",
                      "text": "the XY array out"
                  }
              ]
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1519807674289,
          "exampleProjectId": "lmn5Og",
          "shortName": "Array3To2",
          "hasScreenshot": true,
          "namespace": "Ops.Array",
          "shortNameDisplay": "Array3To2",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Array.Array3To2",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Array.Array3To4",
          "content": "",
          "attachmentFiles": [],
          "summary": "Converts an array3 to an array4 by filling it up with 1",
          "id": "91fc24d6-ecba-4f35-8986-8d13087d2370",
          "layout": {
              "portsIn": [
                  {
                      "type": 3,
                      "name": "Array3x"
                  }
              ],
              "portsOut": [
                  {
                      "type": 3,
                      "name": "Array4x"
                  },
                  {
                      "type": 0,
                      "name": "Total points",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Array length",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1651571325549,
          "exampleProjectId": "h_Dbm4",
          "shortName": "Array3To4",
          "hasScreenshot": true,
          "namespace": "Ops.Array",
          "shortNameDisplay": "Array3To4",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Array.Array3To4",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Array.Array3VectorLength",
          "content": "<p>Array length must be divisible by 3.\nAn array in with a length of 48 will return an array with a length of 16.\nThe length is one number per point.</p>\n",
          "attachmentFiles": [],
          "summary": "Returns the length of a vector from an array 3 ",
          "id": "2218a974-c3d0-4fcb-9689-3113914edb8e",
          "layout": {
              "portsIn": [
                  {
                      "type": "3",
                      "name": "Array in"
                  }
              ],
              "portsOut": [
                  {
                      "type": "3",
                      "name": "Array out"
                  },
                  {
                      "type": "0",
                      "name": "Array lengths",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "andro",
          "docs": {
              "ports": [
                  {
                      "name": "Array in",
                      "text": "Array in "
                  },
                  {
                      "name": "Array out",
                      "text": "Array out "
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1561043705179,
          "exampleProjectId": "L9tsRJ",
          "shortName": "Array3VectorLength",
          "hasScreenshot": true,
          "namespace": "Ops.Array",
          "shortNameDisplay": "Array3VectorLength",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Array.Array3VectorLength",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Array.Array4",
          "content": "<p>result will look like this: <code>[XYZWXYZWXYZWXYZW.....]</code></p>\n",
          "attachmentFiles": [],
          "summary": "create an array of num quadruples set to default values xyz  ",
          "id": "28607c74-fa98-423e-a6b6-14305d159eac",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "Num Quadruplets",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "X",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Y",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Z",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "W",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 3,
                      "name": "Array"
                  },
                  {
                      "type": 0,
                      "name": "Total Quadruplets",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Array length",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1712655589997,
          "exampleProjectId": "HjHdQc",
          "shortName": "Array4",
          "hasScreenshot": true,
          "namespace": "Ops.Array",
          "shortNameDisplay": "Array4",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Array.Array4",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Array.Array4GetNumbers",
          "content": "<p>If an array contains :\n0,1,2,3,4,5,6,7,8,9,10,11,12,13</p>\n<p>Putting index to 2 returns 4 values\n8,9,10,11</p>\n",
          "attachmentFiles": [],
          "summary": "get 4 values from an array",
          "id": "95e5c82e-6cc2-4cd3-9f68-f94062e620fa",
          "layout": {
              "portsIn": [
                  {
                      "type": 3,
                      "name": "Array"
                  },
                  {
                      "type": 0,
                      "name": "Index",
                      "subType": "integer"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "X",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Y",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Z",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "W",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "Array",
                      "text": "The array to get the values from"
                  },
                  {
                      "name": "Index",
                      "text": "The index to look up"
                  },
                  {
                      "name": "X",
                      "text": "The X component from the index look up"
                  },
                  {
                      "name": "Y",
                      "text": "The Y component from the index look up"
                  },
                  {
                      "name": "Z",
                      "text": "The Z component from the index look up"
                  }
              ]
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1612281216856,
          "exampleProjectId": "tI0COg",
          "shortName": "Array4GetNumbers",
          "hasScreenshot": true,
          "namespace": "Ops.Array",
          "shortNameDisplay": "Array4GetNumbers",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Array.Array4GetNumbers",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Array.Array4SetNumber",
          "content": "<p>This will creates a new copy of an array.\nOriginal array will be untouched.</p>\n",
          "attachmentFiles": [],
          "summary": "set four numbers at index in an array",
          "id": "b0913a75-6e11-4e5b-aa7c-a5d066d4d0e0",
          "layout": {
              "portsIn": [
                  {
                      "type": 3,
                      "name": "Array"
                  },
                  {
                      "type": 0,
                      "name": "Index",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Value X",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Value Y",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Value Z",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Value W",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 3,
                      "name": "Result"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "Array",
                      "text": "Array in"
                  },
                  {
                      "name": "Index",
                      "text": "index to update with the value"
                  },
                  {
                      "name": "Result",
                      "text": "Modified array out"
                  }
              ]
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1712655957332,
          "exampleProjectId": "HjHdQc",
          "shortName": "Array4SetNumber",
          "hasScreenshot": true,
          "namespace": "Ops.Array",
          "shortNameDisplay": "Array4SetNumber",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Array.Array4SetNumber",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Array.Array4toArray3",
          "content": "<p>example: <code>[rgbargbargba]</code> becomes <code>[rgbrgbrgb]</code></p>\n",
          "attachmentFiles": [],
          "summary": "convert an array4 to array3 by dropping every 4th number",
          "id": "a3315052-fd88-43c8-94c1-ebae0be05848",
          "layout": {
              "portsIn": [
                  {
                      "type": 3,
                      "name": "Array"
                  }
              ],
              "portsOut": [
                  {
                      "type": 3,
                      "name": "Result"
                  },
                  {
                      "type": 0,
                      "name": "Array length",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1560078628347,
          "exampleProjectId": "SZdOet",
          "shortName": "Array4toArray3",
          "hasScreenshot": true,
          "namespace": "Ops.Array",
          "shortNameDisplay": "Array4toArray3",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Array.Array4toArray3",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Array.ArrayAbs",
          "content": "",
          "attachmentFiles": [],
          "summary": "Converts array contents to absolute values - converts all negative numbers to positive numbers",
          "id": "f3629406-f393-4b2d-970e-cf47a0c5ca75",
          "layout": {
              "portsIn": [
                  {
                      "type": 3,
                      "name": "In"
                  }
              ],
              "portsOut": [
                  {
                      "type": 3,
                      "name": "Result"
                  }
              ]
          },
          "authorName": "andro",
          "docs": {
              "ports": [
                  {
                      "name": "In",
                      "text": "The array to process"
                  },
                  {
                      "name": "Result",
                      "text": "The modified array out"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1549532668282,
          "exampleProjectId": "Jdij7z",
          "shortName": "ArrayAbs",
          "hasScreenshot": true,
          "namespace": "Ops.Array",
          "shortNameDisplay": "ArrayAbs",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Array.ArrayAbs",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Array.ArrayAppendArray",
          "content": "<p>If you have an array with the values \n<code>[0,1,2]</code>\npressing join 3 times will result in the following array\n<code>[0,1,2,0,1,2,0,1,2,]</code>\npressing reset empties the array and sets it to null</p>\n",
          "attachmentFiles": [],
          "summary": "Append an array to an existing array ",
          "id": "c2bbf5a7-0e98-416b-aadf-49d09242821c",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Join"
                  },
                  {
                      "type": 3,
                      "name": "Array"
                  },
                  {
                      "type": 1,
                      "name": "Reset"
                  }
              ],
              "portsOut": [
                  {
                      "type": 3,
                      "name": "Result"
                  },
                  {
                      "type": 0,
                      "name": "Array length",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "Join",
                      "text": "Append array to existing array"
                  },
                  {
                      "name": "Array",
                      "text": "ArrayIn"
                  },
                  {
                      "name": "Reset",
                      "text": "Reset the array"
                  },
                  {
                      "name": "Result",
                      "text": "Array out"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1514997061949,
          "exampleProjectId": "quYUvH",
          "shortName": "ArrayAppendArray",
          "hasScreenshot": true,
          "namespace": "Ops.Array",
          "shortNameDisplay": "ArrayAppendArray",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Array.ArrayAppendArray",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Array.ArrayBuffer",
          "content": "<p>first element that goes in will be removed first, when buffer size becomes greater than <code>max length</code>\nCheck the example file for the <a href=\"/op/Ops.Array.ArrayBuffer3\" target=\"_blank\">Ops.Array.ArrayBuffer3</a> op to see a visual version of this op.</p>\n",
          "attachmentFiles": [],
          "summary": "stores values in an array / fifo array buffer",
          "id": "332174c6-af8f-4c4a-9ea2-a0be249ecd72",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "exec"
                  },
                  {
                      "type": 0,
                      "name": "Value",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Max Length",
                      "subType": "integer"
                  },
                  {
                      "type": 1,
                      "name": "Reset"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Trigger out"
                  },
                  {
                      "type": 3,
                      "name": "Result"
                  },
                  {
                      "type": 0,
                      "name": "Array length",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "exec",
                      "text": "Trigger the op"
                  },
                  {
                      "name": "Value",
                      "text": "The value to write into the new indexes of the array"
                  },
                  {
                      "name": "Max Length",
                      "text": "The maximum length of the array"
                  },
                  {
                      "name": "Result",
                      "text": "The fifo array out"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1519807797759,
          "exampleProjectId": "_ZPEnB",
          "shortName": "ArrayBuffer",
          "hasScreenshot": true,
          "namespace": "Ops.Array",
          "shortNameDisplay": "ArrayBuffer",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Array.ArrayBuffer",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Array.ArrayBuffer3",
          "content": "",
          "attachmentFiles": [],
          "summary": "circular buffer for xyz values",
          "id": "156762c6-1c10-4e9b-9cca-8dbc329a82bd",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "exec"
                  },
                  {
                      "type": 0,
                      "name": "Max Num Elements",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Value X",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Value Y",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Value Z",
                      "subType": "number"
                  },
                  {
                      "type": 1,
                      "name": "Reset"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Trigger out"
                  },
                  {
                      "type": 3,
                      "name": "Result"
                  },
                  {
                      "type": 0,
                      "name": "Array length",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "exec",
                      "text": "Trigger in"
                  },
                  {
                      "name": "Max Num Elements",
                      "text": "Maximum length of array"
                  },
                  {
                      "name": "Value X",
                      "text": "Number 0 to write to X component of array"
                  },
                  {
                      "name": "Value Y",
                      "text": "Number 1 to write to Y component of array"
                  },
                  {
                      "name": "Value Z",
                      "text": "Number 2 to write to Z component of array"
                  },
                  {
                      "name": "Reset",
                      "text": "Reset array"
                  },
                  {
                      "name": "Result",
                      "text": "Array out"
                  }
              ]
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1511273095896,
          "exampleProjectId": "TNwIZC",
          "shortName": "ArrayBuffer3",
          "hasScreenshot": true,
          "namespace": "Ops.Array",
          "shortNameDisplay": "ArrayBuffer3",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Array.ArrayBuffer3",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Array.ArrayCeil",
          "content": "<p>Use to convert floating point values to integers\nAn array with the values [0.5,1.2,4.8]\nWill become [1,2,5]</p>\n",
          "attachmentFiles": [],
          "summary": "Round numbers up",
          "id": "a21f03eb-e5a5-44e2-bc0d-a76359ed1cf1",
          "layout": {
              "portsIn": [
                  {
                      "type": 3,
                      "name": "In"
                  }
              ],
              "portsOut": [
                  {
                      "type": 3,
                      "name": "Result"
                  }
              ]
          },
          "authorName": "andro",
          "docs": {
              "ports": [
                  {
                      "name": "In",
                      "text": "Array in"
                  },
                  {
                      "name": "Result",
                      "text": "Array out"
                  }
              ]
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1557300925128,
          "exampleProjectId": "7xdJrG",
          "shortName": "ArrayCeil",
          "hasScreenshot": true,
          "namespace": "Ops.Array",
          "shortNameDisplay": "ArrayCeil",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Array.ArrayCeil",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Array.ArrayChunk",
          "content": "<p>Creates a new array with <code>Chunk Size</code> elements starting from <code>Start Index</code>, copies the values from the input array (shallow copy).\nIf there are less elements in the array than <code>Chunk Size</code>, the size of the output array may be smaller.  </p>\n<p>*Example 1: *  </p>\n<ul>\n<li>Input Array: <code>1, 2, 3, 4, 5</code></li>\n<li>Start Index: <code>2</code></li>\n<li>Chunk Size: <code>3</code></li>\n<li>Output Array: <code>3, 4, 5</code></li>\n</ul>\n<p>*Example 2: *  </p>\n<ul>\n<li>Input Array: <code>1, 2, 3, 4, 5</code></li>\n<li>Start Index: <code>3</code></li>\n<li>Chunk Size: <code>3</code></li>\n<li>Output Array: <code>4, 5</code></li>\n</ul>\n<p>ArrayChunk has a special mode – <code>Circular</code> – when set to <code>true</code>, elements from the beginning of the array will be included:</p>\n<p>Example 3:  </p>\n<ul>\n<li>Input Array: <code>1, 2, 3</code></li>\n<li>Start Index: <code>1</code></li>\n<li>Chunk Size: <code>3</code></li>\n<li>Circular: <code>true</code></li>\n<li>Output Array: <code>2, 3, 1</code></li>\n</ul>\n",
          "attachmentFiles": [],
          "summary": "Extracts x elements from an array",
          "id": "c7ee6c6e-ca88-4c24-b289-78bb922bf5f7",
          "layout": {
              "portsIn": [
                  {
                      "type": 3,
                      "name": "Input Array"
                  },
                  {
                      "type": 0,
                      "name": "Begin Index",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Chunk Size",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Circular",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 3,
                      "name": "Output Array"
                  },
                  {
                      "type": 0,
                      "name": "Array length",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "tim",
          "docs": {
              "ports": [
                  {
                      "name": "Input Array",
                      "text": "The array to get a chunk out of"
                  },
                  {
                      "name": "Begin Index",
                      "text": "The index where the chunk should begin"
                  },
                  {
                      "name": "Chunk Size",
                      "text": "How big the chunk should be, if there are not enough elements at the end of the `Input Array` the chunk will be smaller"
                  },
                  {
                      "name": "Circular",
                      "text": "If true, values from the beginning will be taken when end reached"
                  },
                  {
                      "name": "Output Array",
                      "text": "Included `Chunk Size` elements or less"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1519665635782,
          "exampleProjectId": "yGR5GA",
          "shortName": "ArrayChunk",
          "hasScreenshot": true,
          "namespace": "Ops.Array",
          "shortNameDisplay": "ArrayChunk",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Array.ArrayChunk",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Array.ArrayChunkDuplicate",
          "content": "<p>For example:</p>\n<p>with setting chunk to 3 and repeats to 3:</p>\n<p><code>1,2,3,4,5,6,7,8,9</code></p>\n<p>this will result to:</p>\n<p><code>1,2,3,1,2,3,1,2,3,4,5,6,4,5,6,4,5,6,7,8,9,7,8,9,7,8,9</code></p>\n",
          "attachmentFiles": [],
          "summary": "repeat chunks of an array multiple times",
          "id": "a3425fda-2c3c-42a4-b943-122d0a9b3c7e",
          "layout": {
              "portsIn": [
                  {
                      "type": 3,
                      "name": "Array"
                  },
                  {
                      "type": 0,
                      "name": "Chunk Size",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Repeats",
                      "subType": "integer"
                  }
              ],
              "portsOut": [
                  {
                      "type": 3,
                      "name": "Result"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1660476806978,
          "exampleProjectId": "Vu22bf",
          "shortName": "ArrayChunkDuplicate",
          "hasScreenshot": true,
          "namespace": "Ops.Array",
          "shortNameDisplay": "ArrayChunkDuplicate",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Array.ArrayChunkDuplicate",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Array.ArrayClamp",
          "content": "",
          "attachmentFiles": [],
          "summary": "Clamp the values of an array to a min and max value",
          "id": "29ff1261-5dfb-4628-893d-288bcefddc97",
          "layout": {
              "portsIn": [
                  {
                      "type": 3,
                      "name": "Array In"
                  },
                  {
                      "type": 0,
                      "name": "Min",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Max",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 3,
                      "name": "Array Out"
                  }
              ]
          },
          "authorName": "andro",
          "docs": {
              "ports": [
                  {
                      "name": "Array In",
                      "text": "Array in"
                  },
                  {
                      "name": "Min",
                      "text": "Minimum value to clamp to"
                  },
                  {
                      "name": "Max",
                      "text": "Maximum value to clamp to"
                  },
                  {
                      "name": "Array Out",
                      "text": "Clamped array out"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1566556568413,
          "exampleProjectId": "tyxvSP",
          "shortName": "ArrayClamp",
          "hasScreenshot": true,
          "namespace": "Ops.Array",
          "shortNameDisplay": "ArrayClamp",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Array.ArrayClamp",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Array.ArrayContains_v2",
          "content": "",
          "attachmentFiles": [],
          "summary": "check if array contains a number (find,search,indexOf)",
          "id": "b982d7e3-c9cf-41dd-aead-66daad785fa8",
          "layout": {
              "portsIn": [
                  {
                      "type": 3,
                      "name": "Array"
                  },
                  {
                      "type": 0,
                      "name": "SearchValue",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "Found",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Index",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "simod",
          "docs": {
              "ports": [
                  {
                      "name": "Array",
                      "text": "Array in that will be searched through"
                  },
                  {
                      "name": "SearchValue",
                      "text": "the string to look for"
                  },
                  {
                      "name": "Found",
                      "text": "Returns `true` if string is in array otherwise `false`"
                  },
                  {
                      "name": "Index",
                      "text": "The index number where the string was found in the array"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1619617451517,
          "exampleProjectId": "8pZ8GA",
          "shortName": "ArrayContains_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Array",
          "shortNameDisplay": "ArrayContains",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Array.ArrayContains",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Array.ArrayContains_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Array.ArrayDivide",
          "content": "",
          "attachmentFiles": [],
          "summary": " Divides all values in an array by one number",
          "id": "e9406477-1f1c-4cf3-8a64-f6009df05c7c",
          "layout": {
              "portsIn": [
                  {
                      "type": 3,
                      "name": "Array In"
                  },
                  {
                      "type": 0,
                      "name": "Value",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Mode index",
                      "values": [
                          "Array/x",
                          "x/Array"
                      ],
                      "subType": "integer"
                  }
              ],
              "portsOut": [
                  {
                      "type": 3,
                      "name": "Array Out"
                  }
              ]
          },
          "authorName": "andro",
          "docs": {
              "ports": [
                  {
                      "name": "Array In",
                      "text": "The array to divide"
                  },
                  {
                      "name": "Value",
                      "text": "The number that all array values are divided by "
                  },
                  {
                      "name": "Array Out",
                      "text": "Divided array out"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1540902073883,
          "exampleProjectId": "uIYNcn",
          "shortName": "ArrayDivide",
          "hasScreenshot": true,
          "namespace": "Ops.Array",
          "shortNameDisplay": "ArrayDivide",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Array.ArrayDivide",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Array.ArrayFloor",
          "content": "<p>5.95 becomes 5\n5.05 becomes 5\n-5.05 becomes -6</p>\n",
          "attachmentFiles": [],
          "summary": "Round numbers down",
          "id": "6ddbb878-5c95-4e4d-a068-760ff5bcf1f6",
          "layout": {
              "portsIn": [
                  {
                      "type": 3,
                      "name": "In"
                  }
              ],
              "portsOut": [
                  {
                      "type": 3,
                      "name": "Result"
                  }
              ]
          },
          "authorName": "andro",
          "docs": {
              "ports": [
                  {
                      "name": "In",
                      "text": "Array In"
                  },
                  {
                      "name": "Result",
                      "text": "Array out"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1557390407507,
          "exampleProjectId": "7xdJrG",
          "shortName": "ArrayFloor",
          "hasScreenshot": true,
          "namespace": "Ops.Array",
          "shortNameDisplay": "ArrayFloor",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Array.ArrayFloor",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Array.ArrayFract",
          "content": "<p>Only works with positive numbers\n5.2 becomes 0.2\n1001.786 becomes 0.786</p>\n",
          "attachmentFiles": [],
          "summary": "Returns the fractional remainder of all values in an array",
          "id": "c23dcb59-a533-4c41-8d26-82ecbdd3c558",
          "layout": {
              "portsIn": [
                  {
                      "type": 3,
                      "name": "In"
                  }
              ],
              "portsOut": [
                  {
                      "type": 3,
                      "name": "Result"
                  }
              ]
          },
          "authorName": "andro",
          "docs": {
              "ports": [
                  {
                      "name": "In",
                      "text": "Array in"
                  },
                  {
                      "name": "Result",
                      "text": "Array out"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1557391398992,
          "exampleProjectId": "uVzImG",
          "shortName": "ArrayFract",
          "hasScreenshot": true,
          "namespace": "Ops.Array",
          "shortNameDisplay": "ArrayFract",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Array.ArrayFract",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Array.ArrayFromNumbers",
          "content": "",
          "attachmentFiles": [],
          "summary": "simple way to create small arrays of numbers",
          "id": "fb698158-3cf8-49d6-805e-6ea38fdab8c1",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Update"
                  },
                  {
                      "type": 0,
                      "name": "Limit",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Slider",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Index 0",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Index 1",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Index 2",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Index 3",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Index 4",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Index 5",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Index 6",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Index 7",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Index 8",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Index 9",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Index 10",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Index 11",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Index 12",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Index 13",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Index 14",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Index 15",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Index 16",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Index 17",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Index 18",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Index 19",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Index 20",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Index 21",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Index 22",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Index 23",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Index 24",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Index 25",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Index 26",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Index 27",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Index 28",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Index 29",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  },
                  {
                      "type": 3,
                      "name": "Array"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "Update",
                      "text": "operator must be updated any time you change values in it, or connected to the mainloop op"
                  },
                  {
                      "name": "Limit",
                      "text": "range is 1-30"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [
              "iXKo7mU422M"
          ],
          "created": 1620389428061,
          "exampleProjectId": "ZNPh2B",
          "shortName": "ArrayFromNumbers",
          "hasScreenshot": true,
          "namespace": "Ops.Array",
          "shortNameDisplay": "ArrayFromNumbers",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Array.ArrayFromNumbers",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Array.ArrayGetArray",
          "content": "",
          "attachmentFiles": [],
          "summary": "get an array from an array of arrays",
          "id": "b9d3f42b-3fbf-4522-9df2-a5c769a92d66",
          "layout": {
              "portsIn": [
                  {
                      "type": 3,
                      "name": "Array of Arrays"
                  },
                  {
                      "type": 0,
                      "name": "Index",
                      "subType": "integer"
                  }
              ],
              "portsOut": [
                  {
                      "type": 3,
                      "name": "Result Array"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "Array of Arrays",
                      "text": "must contain an array of only arrays"
                  }
              ]
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1519807916880,
          "exampleProjectId": "yU2Pet",
          "shortName": "ArrayGetArray",
          "hasScreenshot": true,
          "namespace": "Ops.Array",
          "shortNameDisplay": "ArrayGetArray",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Array.ArrayGetArray",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Array.ArrayGetNumber",
          "content": "<p>Example: If you have an array <code>[100, 200, 300]</code> setting the <code>Index</code> to <code>1</code> will return <code>200</code>. Please note that the first index is <code>0</code>, not <code>1</code>!</p>\n",
          "attachmentFiles": [],
          "summary": "Returns a value from an array",
          "id": "d1189078-70cf-437d-9a37-b2ebe89acdaf",
          "layout": {
              "portsIn": [
                  {
                      "type": 3,
                      "name": "array"
                  },
                  {
                      "type": 0,
                      "name": "index",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Value Invalid Index",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "value",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Valid Index",
                      "subType": "boolean"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "array",
                      "text": "The array-data, e.g. `[100, 200, 300]`"
                  },
                  {
                      "name": "index",
                      "text": "The index of the array you want to get, `0` is the first element"
                  },
                  {
                      "name": "value",
                      "text": "The value of the array at position `Index`"
                  }
              ]
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1509636003597,
          "exampleProjectId": "38AIji",
          "shortName": "ArrayGetNumber",
          "hasScreenshot": true,
          "namespace": "Ops.Array",
          "shortNameDisplay": "ArrayGetNumber",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Array.ArrayGetNumber",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Array.ArrayGetObject",
          "content": "<p>Returns a single object from an array based upon the index.</p>\n",
          "attachmentFiles": [],
          "summary": "get an object from an array",
          "id": "44d34542-174c-47c6-b9c6-adde6fc371ac",
          "layout": {
              "portsIn": [
                  {
                      "type": 3,
                      "name": "array"
                  },
                  {
                      "type": 0,
                      "name": "index",
                      "subType": "integer"
                  }
              ],
              "portsOut": [
                  {
                      "type": 2,
                      "name": "value"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "array",
                      "text": "must contain only objects"
                  },
                  {
                      "name": "index",
                      "text": "The index of the array containing the object"
                  },
                  {
                      "name": "value",
                      "text": "The object out from the index"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1506588207288,
          "exampleProjectId": "7npL_M",
          "shortName": "ArrayGetObject",
          "hasScreenshot": true,
          "namespace": "Ops.Array",
          "shortNameDisplay": "ArrayGetObject",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Array.ArrayGetObject",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Array.ArrayGetString",
          "content": "<p>Returns one string from an array based upon index.</p>\n",
          "attachmentFiles": [],
          "summary": "get a string from an array at [index]",
          "id": "be8f16c0-0c8a-48a2-a92b-45dbf88c76c1",
          "layout": {
              "portsIn": [
                  {
                      "type": 3,
                      "name": "array"
                  },
                  {
                      "type": 0,
                      "name": "index",
                      "subType": "integer"
                  }
              ],
              "portsOut": [
                  {
                      "type": 5,
                      "name": "result"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "array",
                      "text": "The string array in"
                  },
                  {
                      "name": "index",
                      "text": "The index to look up. Starts at 0"
                  },
                  {
                      "name": "result",
                      "text": "The returned string based upon index lookup"
                  }
              ]
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1544359151655,
          "exampleProjectId": "aHNk8i",
          "shortName": "ArrayGetString",
          "hasScreenshot": true,
          "namespace": "Ops.Array",
          "shortNameDisplay": "ArrayGetString",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Array.ArrayGetString",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Array.ArrayGetTexture",
          "content": "",
          "attachmentFiles": [],
          "summary": "get texture from array at index",
          "id": "afea522b-ab72-4574-b721-5d37f5abaf77",
          "layout": {
              "portsIn": [
                  {
                      "type": 3,
                      "name": "array"
                  },
                  {
                      "type": 0,
                      "name": "index",
                      "subType": "integer"
                  }
              ],
              "portsOut": [
                  {
                      "type": 2,
                      "name": "value",
                      "objType": "texture"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1595494061794,
          "exampleProjectId": "jFv097",
          "shortName": "ArrayGetTexture",
          "hasScreenshot": true,
          "namespace": "Ops.Array",
          "shortNameDisplay": "ArrayGetTexture",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Array.ArrayGetTexture",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Array.ArrayGetValuesByIndexArray",
          "content": "<h4>Base example</h4>\n<pre><code class=\"language-js\">const input_array = [&#39;I&#39;, &#39;love&#39;, &#39;not&#39;, &#39;cables&#39;];\nconst array_stride = 1;\nconst index_array = [0, 1, 3];\n\nconst result = [&#39;I&#39;, &#39;love&#39;, &#39;cables&#39;];\n</code></pre>\n<h4>Advanced case, changing the input stride</h4>\n<p>Changing the stride is helpful to pick values from Array2, Array3 or Array4. </p>\n<pre><code class=\"language-js\">const input_array = [0,0,0, 1,1,1, 2,2,2];\nconst stride = 3;\nconst index_array = [0, 2];\n\nconst result = [0,0,0, 2,2,2];\n</code></pre>\n",
          "attachmentFiles": [],
          "summary": "Pick values from input array at given indices and stride",
          "id": "fe4e2125-f533-4fcf-9cca-cf5691dfb268",
          "layout": {
              "portsIn": [
                  {
                      "type": 3,
                      "name": "Array"
                  },
                  {
                      "type": 0,
                      "name": "Array Stride index",
                      "subType": "integer"
                  },
                  {
                      "type": 3,
                      "name": "Indices"
                  }
              ],
              "portsOut": [
                  {
                      "type": 3,
                      "name": "Results"
                  }
              ]
          },
          "authorName": "kikohs",
          "docs": {
              "ports": [
                  {
                      "name": "Array",
                      "text": "Input array with all values"
                  },
                  {
                      "name": "Array Stride index",
                      "text": "1,2,3,4"
                  },
                  {
                      "name": "Indices",
                      "text": "List of indices to pick"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1678108947352,
          "exampleProjectId": "bOBgTq",
          "shortName": "ArrayGetValuesByIndexArray",
          "hasScreenshot": true,
          "namespace": "Ops.Array",
          "shortNameDisplay": "ArrayGetValuesByIndexArray",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Array.ArrayGetValuesByIndexArray",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Array.ArrayIndexBetween",
          "content": "",
          "attachmentFiles": [],
          "summary": "output index where value is greater than number and smaller then next number ",
          "id": "69faf293-140d-4a2c-ab2e-7e5577ab113d",
          "layout": {
              "portsIn": [
                  {
                      "type": 3,
                      "name": "Array"
                  },
                  {
                      "type": 0,
                      "name": "Value",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "Index",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1612134620395,
          "exampleProjectId": "kH4xLu",
          "shortName": "ArrayIndexBetween",
          "hasScreenshot": false,
          "namespace": "Ops.Array",
          "shortNameDisplay": "ArrayIndexBetween",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Array.ArrayIndexBetween",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Array.ArrayIndexMinMax",
          "content": "",
          "attachmentFiles": [],
          "summary": "find lowest/highest numbers in an array",
          "id": "240172a6-7dde-4dcc-b862-bbe764aec3f3",
          "layout": {
              "portsIn": [
                  {
                      "type": 3,
                      "name": "Array"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "Max",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Index Max",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Min",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Index Min",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1613572064918,
          "exampleProjectId": "gamucI",
          "shortName": "ArrayIndexMinMax",
          "hasScreenshot": true,
          "namespace": "Ops.Array",
          "shortNameDisplay": "ArrayIndexMinMax",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Array.ArrayIndexMinMax",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Array.ArrayIteratorArray",
          "content": "",
          "attachmentFiles": [],
          "summary": "iterate over an array of arrays",
          "id": "0efcd325-0ccf-452b-a87e-3c44d42f9165",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "exe"
                  },
                  {
                      "type": 3,
                      "name": "array"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "trigger"
                  },
                  {
                      "type": 0,
                      "name": "index",
                      "subType": "number"
                  },
                  {
                      "type": 3,
                      "name": "Result"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1516900237605,
          "exampleProjectId": "xFKQet",
          "shortName": "ArrayIteratorArray",
          "hasScreenshot": true,
          "namespace": "Ops.Array",
          "shortNameDisplay": "ArrayIteratorArray",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Array.ArrayIteratorArray",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Array.ArrayIteratorNumbers",
          "content": "<p>Similar to the repeat op but then for all values in an array</p>\n",
          "attachmentFiles": [],
          "summary": "Loop over every element of an array",
          "id": "ec280011-1190-4333-9a68-adb4904fca1a",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "exe"
                  },
                  {
                      "type": 3,
                      "name": "array"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "trigger"
                  },
                  {
                      "type": 0,
                      "name": "index",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "value",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "exe",
                      "text": "Trigger the op"
                  },
                  {
                      "name": "array",
                      "text": "The array to iterate over"
                  },
                  {
                      "name": "trigger",
                      "text": "Triggers all child ops array.length times"
                  },
                  {
                      "name": "index",
                      "text": "Index of the array `0 to array.length`"
                  },
                  {
                      "name": "value",
                      "text": "Value of the current index in the array"
                  }
              ]
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1540826805478,
          "exampleProjectId": "Ubwk3u",
          "shortName": "ArrayIteratorNumbers",
          "hasScreenshot": true,
          "namespace": "Ops.Array",
          "shortNameDisplay": "ArrayIteratorNumbers",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Array.ArrayIteratorNumbers",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Array.ArrayIteratorObjects",
          "content": "",
          "attachmentFiles": [],
          "summary": "iterate over an array of objects",
          "id": "481d2d8f-b9ee-42a0-a905-caf9dc23a63f",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "exe"
                  },
                  {
                      "type": 3,
                      "name": "array"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "trigger"
                  },
                  {
                      "type": 1,
                      "name": "finished"
                  },
                  {
                      "type": 0,
                      "name": "index",
                      "subType": "number"
                  },
                  {
                      "type": 2,
                      "name": "value"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "exe",
                      "text": "Trigger the op"
                  },
                  {
                      "name": "array",
                      "text": "Array in containing objects"
                  },
                  {
                      "name": "trigger",
                      "text": "Trigger out"
                  },
                  {
                      "name": "index",
                      "text": "Index out of current object"
                  },
                  {
                      "name": "value",
                      "text": "The object out"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1513580689408,
          "exampleProjectId": "UlL2G1",
          "shortName": "ArrayIteratorObjects",
          "hasScreenshot": true,
          "namespace": "Ops.Array",
          "shortNameDisplay": "ArrayIteratorObjects",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Array.ArrayIteratorObjects",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Array.ArrayIteratorStrings",
          "content": "<p>Similar to the repeat op but then for all values in an array</p>\n",
          "attachmentFiles": [],
          "summary": "Loop over every element of an array",
          "id": "0f8ee026-e094-484d-8403-547c92293be9",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Exe"
                  },
                  {
                      "type": 3,
                      "name": "Array"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Trigger"
                  },
                  {
                      "type": 0,
                      "name": "Index",
                      "subType": "number"
                  },
                  {
                      "type": 5,
                      "name": "Value"
                  }
              ]
          },
          "authorName": "stephan",
          "docs": {
              "ports": [
                  {
                      "name": "Exe",
                      "text": "trigger"
                  },
                  {
                      "name": "Array",
                      "text": "the array to iteratie over"
                  },
                  {
                      "name": "Trigger",
                      "text": "next trigger"
                  },
                  {
                      "name": "Index",
                      "text": "the index of the current element"
                  },
                  {
                      "name": "Value",
                      "text": "the value of the current element"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1620740481047,
          "exampleProjectId": "53WCcI",
          "shortName": "ArrayIteratorStrings",
          "hasScreenshot": true,
          "namespace": "Ops.Array",
          "shortNameDisplay": "ArrayIteratorStrings",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Array.ArrayIteratorStrings",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Array.ArrayIteratorTextures",
          "content": "",
          "attachmentFiles": [],
          "summary": "iterate over an array of objects",
          "id": "dc000b9e-74c4-4284-851d-55cc79d7f76b",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "exe"
                  },
                  {
                      "type": 3,
                      "name": "array"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "trigger"
                  },
                  {
                      "type": 1,
                      "name": "finished"
                  },
                  {
                      "type": 0,
                      "name": "index",
                      "subType": "number"
                  },
                  {
                      "type": 2,
                      "name": "value",
                      "objType": "texture"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "exe",
                      "text": "Trigger the op"
                  },
                  {
                      "name": "array",
                      "text": "Array in containing objects"
                  },
                  {
                      "name": "trigger",
                      "text": "Trigger out"
                  },
                  {
                      "name": "index",
                      "text": "Index out of current object"
                  },
                  {
                      "name": "value",
                      "text": "The object out"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1686309644983,
          "exampleProjectId": "vS5fjz",
          "shortName": "ArrayIteratorTextures",
          "hasScreenshot": true,
          "namespace": "Ops.Array",
          "shortNameDisplay": "ArrayIteratorTextures",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Array.ArrayIteratorTextures",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Array.ArrayLength_v2",
          "content": "",
          "attachmentFiles": [],
          "summary": "Number of items in an array",
          "id": "6f665caa-96ed-45d8-8620-e34f0f8e062c",
          "layout": {
              "portsIn": [
                  {
                      "type": 3,
                      "name": "array"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "length",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "array",
                      "text": "Array in"
                  },
                  {
                      "name": "length",
                      "text": "The length of the array/ amount of items in the array returned as a number"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1695634884437,
          "exampleProjectId": "P4qAz6",
          "shortName": "ArrayLength_v2",
          "hasScreenshot": false,
          "namespace": "Ops.Array",
          "shortNameDisplay": "ArrayLength",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Array.ArrayLength",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Array.ArrayLength_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Array.ArrayLogic",
          "content": "<p>The following operations are available\nIf any of the following evaluates to true then the output is 1 else 0</p>\n<pre><code>&gt; \n&lt;\n&gt;=\n&lt;=\n==\n!=\n</code></pre>\n<p>Pass modes, if they evaluate to true then the value is passed through else 0</p>\n<pre><code>&gt;pass\n&lt;pass\n&gt;=pass\n&lt;=pass\n==pass\n!=pass\n</code></pre>\n",
          "attachmentFiles": [],
          "summary": "Performs logical comparison operations on a single array of numbers",
          "id": "502083f2-8ade-4cb5-b1c5-e5b60eb3255f",
          "layout": {
              "portsIn": [
                  {
                      "type": 3,
                      "name": "array 0"
                  },
                  {
                      "type": 0,
                      "name": "Comparison mode index",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Number for comparison",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "value if true",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "value if false",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 3,
                      "name": "Array result"
                  },
                  {
                      "type": 0,
                      "name": "Array length",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "andro",
          "docs": {
              "ports": [
                  {
                      "name": "array 0",
                      "text": "Array in"
                  },
                  {
                      "name": "Number for comparison",
                      "text": "The number used to apply a logical comparison operator to all the numbers in the array"
                  },
                  {
                      "name": "Comparison mode",
                      "text": "Pick the mode here - see docs for full list and explanation"
                  },
                  {
                      "name": "Array result",
                      "text": "Array out"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1560432521791,
          "exampleProjectId": "D3DmbJ",
          "shortName": "ArrayLogic",
          "hasScreenshot": true,
          "namespace": "Ops.Array",
          "shortNameDisplay": "ArrayLogic",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Array.ArrayLogic",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Array.ArrayLogicArray",
          "content": "<p>The following operations are available, if they evaluate to true then the value becomes 1 else 0 :</p>\n<pre><code>&gt;\n&lt;\n&gt;=\n&lt;=\n==\n!=\n</code></pre>\n<p>With the pass mode if the test evaluates to true then array 0 is passed through</p>\n<pre><code>&gt;pass\n&lt;pass\n&gt;=pass\n&lt;=pass\n==pass\n!=pass\n</code></pre>\n",
          "attachmentFiles": [],
          "summary": "Performs logical comparison operations on two arrays",
          "id": "850a40f5-f623-438f-9ff8-461b1a9aeefc",
          "layout": {
              "portsIn": [
                  {
                      "type": 3,
                      "name": "array 0"
                  },
                  {
                      "type": 3,
                      "name": "array 1"
                  },
                  {
                      "type": 0,
                      "name": "value if true",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "value if false",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Comparison mode index",
                      "subType": "integer"
                  }
              ],
              "portsOut": [
                  {
                      "type": 3,
                      "name": "Array result"
                  },
                  {
                      "type": 0,
                      "name": "Array length",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "andro",
          "docs": {
              "ports": [
                  {
                      "name": "array 0",
                      "text": "Array 0 in"
                  },
                  {
                      "name": "array 1",
                      "text": "Array 1 in"
                  },
                  {
                      "name": "value if true",
                      "text": "default 1 - set your own value if it evaluates to true"
                  },
                  {
                      "name": "value if false",
                      "text": "default 0 - set your own value if it evaluates to false"
                  },
                  {
                      "name": "Comparison mode",
                      "text": "Comparison mode"
                  },
                  {
                      "name": "Array result",
                      "text": "Array out"
                  },
                  {
                      "name": "Array length",
                      "text": "Length of array out "
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1560526792360,
          "exampleProjectId": "T_-NmJ",
          "shortName": "ArrayLogicArray",
          "hasScreenshot": true,
          "namespace": "Ops.Array",
          "shortNameDisplay": "ArrayLogicArray",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Array.ArrayLogicArray",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Array.ArrayLogicBetween_v2",
          "content": "<p>It&#39;s also possible to pass values through when between min and max</p>\n",
          "attachmentFiles": [],
          "summary": "If value of array is between min and max then the value is 1 else 0",
          "id": "c109a5d0-3338-4d7b-9dac-7c948d4663b8",
          "layout": {
              "portsIn": [
                  {
                      "type": 3,
                      "name": "Array"
                  },
                  {
                      "type": 0,
                      "name": "Min",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Max",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "pass value when true",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 3,
                      "name": "Result"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "pass value when true",
                      "text": "When enabled values between are passed through instead of being 1"
                  }
              ]
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1586171360228,
          "exampleProjectId": "jTqRet",
          "shortName": "ArrayLogicBetween_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Array",
          "shortNameDisplay": "ArrayLogicBetween",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Array.ArrayLogicBetween",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Array.ArrayLogicBetween_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Array.ArrayLookup",
          "content": "",
          "attachmentFiles": [],
          "summary": "Create an array that is filled with values looked up by index from another array",
          "id": "45800d01-7c07-41b8-b392-a3924d256549",
          "layout": {
              "portsIn": [
                  {
                      "type": 3,
                      "name": "Indices"
                  },
                  {
                      "type": 3,
                      "name": "Values"
                  },
                  {
                      "type": 0,
                      "name": "Stride",
                      "subType": "integer"
                  }
              ],
              "portsOut": [
                  {
                      "type": 3,
                      "name": "Result"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1716371614685,
          "exampleProjectId": "cwJBEe",
          "shortName": "ArrayLookup",
          "hasScreenshot": true,
          "namespace": "Ops.Array",
          "shortNameDisplay": "ArrayLookup",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Array.ArrayLookup",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Array.ArrayMath",
          "content": "<p>The op has a dropdown menu which allows easy switching between multiple mathematical modes. A single number is used for the mathematical operations on all values in the array.</p>\n",
          "attachmentFiles": [],
          "summary": "Pick from multiple mathematical modes which can all be applied to a single array",
          "id": "c7617717-3114-452f-9625-e4fefd841e88",
          "layout": {
              "portsIn": [
                  {
                      "type": 3,
                      "name": "array 0"
                  },
                  {
                      "type": 0,
                      "name": "Number for math",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Math function index",
                      "subType": "integer"
                  }
              ],
              "portsOut": [
                  {
                      "type": 3,
                      "name": "Array result"
                  },
                  {
                      "type": 0,
                      "name": "Array length",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "andro",
          "docs": {
              "ports": [
                  {
                      "name": "array 0",
                      "text": "Array in"
                  },
                  {
                      "name": "Number for math",
                      "text": "The number used for the math operation on all values in the array"
                  },
                  {
                      "name": "Math function",
                      "text": "The different mathematical functions"
                  },
                  {
                      "name": "Array result",
                      "text": "Array out"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1558533231686,
          "exampleProjectId": "7E1hqH",
          "shortName": "ArrayMath",
          "hasScreenshot": true,
          "namespace": "Ops.Array",
          "shortNameDisplay": "ArrayMath",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Array.ArrayMath",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Array.ArrayMathArray",
          "content": "<p>This op allows a math operation to be performed on two arrays which must have the same length.\nThe following math operations are available\n<code>+ - * / % min max</code></p>\n",
          "attachmentFiles": [],
          "summary": "performs a math operations on two arrays",
          "id": "f31a1764-ce14-41de-9b3f-dc2fe249bb52",
          "layout": {
              "portsIn": [
                  {
                      "type": 3,
                      "name": "array 0"
                  },
                  {
                      "type": 3,
                      "name": "array 1"
                  },
                  {
                      "type": 0,
                      "name": "Math function index",
                      "subType": "integer"
                  }
              ],
              "portsOut": [
                  {
                      "type": 3,
                      "name": "Array result"
                  },
                  {
                      "type": 0,
                      "name": "Array length",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "andro",
          "docs": {
              "ports": [
                  {
                      "name": "array 0",
                      "text": "Array in"
                  },
                  {
                      "name": "array 1",
                      "text": "Array in"
                  },
                  {
                      "name": "Math function",
                      "text": "Pick a math function to apply to both arrays"
                  },
                  {
                      "name": "Array result",
                      "text": "Calculated array out "
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1537345902425,
          "exampleProjectId": "uIYNcn",
          "shortName": "ArrayMathArray",
          "hasScreenshot": true,
          "namespace": "Ops.Array",
          "shortNameDisplay": "ArrayMathArray",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Array.ArrayMathArray",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Array.ArrayMathExpression",
          "content": "<p>Use this op to write your own mathematical functions.</p>\n<p>Inputs can be arrays and numbers. Arrays need to be the same length, else the resulting output is <code>null</code>.</p>\n<p>Use the inputs&#39; lower-case letters in your expression, i.e:</p>\n<p><code>b*c+sin(a) - x</code></p>\n<p>There are 2 more variables availible for your expression: <code>i</code> and <code>len</code></p>\n<p>i - the current index\nlen - the arrays&#39; length</p>\n<p>For a reference of mathematical functions availible, please refer to the Javascript Math object: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math</a></p>\n",
          "attachmentFiles": [],
          "summary": "Calculates a user defined mathematical expression",
          "id": "663e32a2-45a1-4141-a387-d8a44d4977d5",
          "layout": {
              "portsIn": [
                  {
                      "type": 3,
                      "name": "A",
                      "group": "Parameters"
                  },
                  {
                      "type": 3,
                      "name": "B",
                      "group": "Parameters"
                  },
                  {
                      "type": 3,
                      "name": "C",
                      "group": "Parameters"
                  },
                  {
                      "type": 0,
                      "name": "X",
                      "group": "Parameters",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Y",
                      "group": "Parameters",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Z",
                      "group": "Parameters",
                      "subType": "number"
                  },
                  {
                      "type": 5,
                      "name": "Expression",
                      "group": "Expression"
                  }
              ],
              "portsOut": [
                  {
                      "type": 3,
                      "name": "Result Array"
                  },
                  {
                      "type": 0,
                      "name": "Array Length",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Expression Valid",
                      "subType": "boolean"
                  }
              ]
          },
          "authorName": "simod",
          "docs": {
              "ports": [
                  {
                      "name": "A",
                      "text": "first input array - use a in your expression"
                  },
                  {
                      "name": "B",
                      "text": "second input array - use b in your expression"
                  },
                  {
                      "name": "C",
                      "text": "third input array - use c in your expression"
                  },
                  {
                      "name": "X",
                      "text": "first number input - use x in your expression"
                  },
                  {
                      "name": "Y",
                      "text": "second number input - use y in your expression"
                  },
                  {
                      "name": "Z",
                      "text": "third number input - use z in your expression"
                  },
                  {
                      "name": "Expression",
                      "text": "the mathematical expression to be calculated"
                  },
                  {
                      "name": "Result Array",
                      "text": "the resulting array"
                  },
                  {
                      "name": "Array Length",
                      "text": "the resulting array's length"
                  },
                  {
                      "name": "Expression Valid",
                      "text": "true if the expression is valid, false otherwise"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1595496771056,
          "exampleProjectId": "_o2Mue",
          "shortName": "ArrayMathExpression",
          "hasScreenshot": true,
          "namespace": "Ops.Array",
          "shortNameDisplay": "ArrayMathExpression",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Array.ArrayMathExpression",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false,
          "usedInProject": true
      },
      {
          "name": "Ops.Array.ArrayMathExpressionTrigger",
          "content": "<p>Use this op to write your own mathematical functions.</p>\n<p>Inputs can be arrays and numbers. Arrays need to be the same length, else the resulting output is <code>null</code>.</p>\n<p>Use the inputs&#39; lower-case letters in your expression, i.e:</p>\n<p><code>b*c+sin(a) - x</code></p>\n<p>There are 2 more variables availible for your expression: <code>i</code> and <code>len</code></p>\n<p>i - the current index\nlen - the arrays&#39; length</p>\n<p>For a reference of mathematical functions availible, please refer to the Javascript Math object: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math</a></p>\n",
          "attachmentFiles": [],
          "summary": "Calculates a user defined mathematical expression",
          "id": "e0d5da32-8463-4dfb-89f5-0d755167cd49",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Update"
                  },
                  {
                      "type": 3,
                      "name": "A",
                      "group": "Parameters"
                  },
                  {
                      "type": 3,
                      "name": "B",
                      "group": "Parameters"
                  },
                  {
                      "type": 3,
                      "name": "C",
                      "group": "Parameters"
                  },
                  {
                      "type": 0,
                      "name": "X",
                      "group": "Parameters",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Y",
                      "group": "Parameters",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Z",
                      "group": "Parameters",
                      "subType": "number"
                  },
                  {
                      "type": 5,
                      "name": "Expression",
                      "group": "Expression"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  },
                  {
                      "type": 3,
                      "name": "Result Array"
                  },
                  {
                      "type": 0,
                      "name": "Array Length",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Expression Valid",
                      "subType": "boolean"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "A",
                      "text": "first input array - use a in your expression"
                  },
                  {
                      "name": "B",
                      "text": "second input array - use b in your expression"
                  },
                  {
                      "name": "C",
                      "text": "third input array - use c in your expression"
                  },
                  {
                      "name": "X",
                      "text": "first number input - use x in your expression"
                  },
                  {
                      "name": "Y",
                      "text": "second number input - use y in your expression"
                  },
                  {
                      "name": "Z",
                      "text": "third number input - use z in your expression"
                  },
                  {
                      "name": "Expression",
                      "text": "the mathematical expression to be calculated"
                  },
                  {
                      "name": "Result Array",
                      "text": "the resulting array"
                  },
                  {
                      "name": "Array Length",
                      "text": "the resulting array's length"
                  },
                  {
                      "name": "Expression Valid",
                      "text": "true if the expression is valid, false otherwise"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1664273671849,
          "exampleProjectId": "_o2Mue",
          "shortName": "ArrayMathExpressionTrigger",
          "hasScreenshot": true,
          "namespace": "Ops.Array",
          "shortNameDisplay": "ArrayMathExpressionTrigger",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Array.ArrayMathExpressionTrigger",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Array.ArrayMax",
          "content": "",
          "attachmentFiles": [],
          "summary": " Applies a max operation to all values in an array",
          "id": "3bf1ead6-e8d2-43dd-a631-93f7a15fc270",
          "layout": {
              "portsIn": [
                  {
                      "type": 3,
                      "name": "Array In"
                  },
                  {
                      "type": 0,
                      "name": "Value",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 3,
                      "name": "Array Out"
                  }
              ]
          },
          "authorName": "andro",
          "docs": {
              "ports": [
                  {
                      "name": "Array In",
                      "text": "Array in"
                  },
                  {
                      "name": "Value",
                      "text": "The value to test "
                  },
                  {
                      "name": "Array Out",
                      "text": "Array out"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1540369896196,
          "exampleProjectId": "bc0xTn",
          "shortName": "ArrayMax",
          "hasScreenshot": true,
          "namespace": "Ops.Array",
          "shortNameDisplay": "ArrayMax",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Array.ArrayMax",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Array.ArrayMergeTrigger",
          "content": "",
          "attachmentFiles": [],
          "summary": "merge /concatinate arrays by trigger",
          "id": "f45fdd5e-b20a-4553-a83b-57eed8a98c80",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Merge"
                  },
                  {
                      "type": 3,
                      "name": "Array 0"
                  },
                  {
                      "type": 3,
                      "name": "Array 1"
                  },
                  {
                      "type": 3,
                      "name": "Array 2"
                  },
                  {
                      "type": 3,
                      "name": "Array 3"
                  },
                  {
                      "type": 3,
                      "name": "Array 4"
                  },
                  {
                      "type": 3,
                      "name": "Array 5"
                  },
                  {
                      "type": 3,
                      "name": "Array 6"
                  },
                  {
                      "type": 3,
                      "name": "Array 7"
                  },
                  {
                      "type": 3,
                      "name": "Array 8"
                  },
                  {
                      "type": 3,
                      "name": "Array 9"
                  },
                  {
                      "type": 3,
                      "name": "Array 10"
                  },
                  {
                      "type": 3,
                      "name": "Array 11"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  },
                  {
                      "type": 3,
                      "name": "Result"
                  },
                  {
                      "type": 0,
                      "name": "Array length",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1618323456249,
          "exampleProjectId": "",
          "shortName": "ArrayMergeTrigger",
          "hasScreenshot": false,
          "namespace": "Ops.Array",
          "shortNameDisplay": "ArrayMergeTrigger",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Array.ArrayMergeTrigger",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false,
          "usedInProject": true
      },
      {
          "name": "Ops.Array.ArrayMerge_v3",
          "content": "<p>Merge multiple arrays - in consecutive order</p>\n",
          "attachmentFiles": [],
          "summary": "Merge multiple arrays - in consecutive order",
          "id": "753d053a-04a3-44c7-abf0-ae2676ced13e",
          "layout": {
              "portsIn": [
                  {
                      "type": 3,
                      "name": "Array 0"
                  },
                  {
                      "type": 3,
                      "name": "Array 1"
                  },
                  {
                      "type": 3,
                      "name": "Array 2"
                  },
                  {
                      "type": 3,
                      "name": "Array 3"
                  },
                  {
                      "type": 3,
                      "name": "Array 4"
                  },
                  {
                      "type": 3,
                      "name": "Array 5"
                  },
                  {
                      "type": 3,
                      "name": "Array 6"
                  },
                  {
                      "type": 3,
                      "name": "Array 7"
                  }
              ],
              "portsOut": [
                  {
                      "type": 3,
                      "name": "Result"
                  },
                  {
                      "type": 0,
                      "name": "Array length",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1601641308208,
          "exampleProjectId": "P7siGA",
          "shortName": "ArrayMerge_v3",
          "hasScreenshot": true,
          "namespace": "Ops.Array",
          "shortNameDisplay": "ArrayMerge",
          "version": 3,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Array.ArrayMerge",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Array.ArrayMerge_v2",
                  "versionString": "_v2",
                  "version": 2
              },
              {
                  "name": "Ops.Array.ArrayMerge_v3",
                  "versionString": "_v3",
                  "version": 3
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Array.ArrayMin",
          "content": "",
          "attachmentFiles": [],
          "summary": "Applies a min operation to all values in an array",
          "id": "fbb78acc-c004-4669-a277-98c47eb59598",
          "layout": {
              "portsIn": [
                  {
                      "type": 3,
                      "name": "Array In"
                  },
                  {
                      "type": 0,
                      "name": "Value",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 3,
                      "name": "Array Out"
                  }
              ]
          },
          "authorName": "andro",
          "docs": {
              "ports": [
                  {
                      "name": "Array In",
                      "text": "The array in"
                  },
                  {
                      "name": "Value",
                      "text": "The value to test the min operation with"
                  },
                  {
                      "name": "Array Out",
                      "text": "Array out returning the minimum value"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1540369903561,
          "exampleProjectId": "bc0xTn",
          "shortName": "ArrayMin",
          "hasScreenshot": true,
          "namespace": "Ops.Array",
          "shortNameDisplay": "ArrayMin",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Array.ArrayMin",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Array.ArrayModulo",
          "content": "",
          "attachmentFiles": [],
          "summary": "Applies a modulo operation to all values in an array",
          "id": "30a5568b-31da-4504-9525-578ee404993c",
          "layout": {
              "portsIn": [
                  {
                      "type": 3,
                      "name": "Array In"
                  },
                  {
                      "type": 0,
                      "name": "Value",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 3,
                      "name": "Array Out"
                  }
              ]
          },
          "authorName": "andro",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1540902055226,
          "exampleProjectId": "uIYNcn",
          "shortName": "ArrayModulo",
          "hasScreenshot": true,
          "namespace": "Ops.Array",
          "shortNameDisplay": "ArrayModulo",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Array.ArrayModulo",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Array.ArrayMultiply",
          "content": "",
          "attachmentFiles": [],
          "summary": "Multiply every number in an array",
          "id": "a01c344b-4129-4b01-9c8f-36cefe86d7cc",
          "layout": {
              "portsIn": [
                  {
                      "type": 3,
                      "name": "In"
                  },
                  {
                      "type": 0,
                      "name": "Value",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 3,
                      "name": "Result"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1517320302537,
          "exampleProjectId": "xmNqci",
          "shortName": "ArrayMultiply",
          "hasScreenshot": true,
          "namespace": "Ops.Array",
          "shortNameDisplay": "ArrayMultiply",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Array.ArrayMultiply",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Array.ArrayNumberRamp_v2",
          "content": "",
          "attachmentFiles": [],
          "summary": "Create an array that contains X numbers between start and end values",
          "id": "a28591ba-e219-4537-bb6f-d96f83e9b0df",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "Start Value",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "End Value",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Entries",
                      "subType": "integer"
                  }
              ],
              "portsOut": [
                  {
                      "type": 3,
                      "name": "Result"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1730305012425,
          "exampleProjectId": "LfNG9t",
          "shortName": "ArrayNumberRamp_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Array",
          "shortNameDisplay": "ArrayNumberRamp",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Array.ArrayNumberRamp",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Array.ArrayNumberRamp_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Array.ArrayOfArrays",
          "content": "",
          "attachmentFiles": [],
          "summary": "Create an array filled with other arrays",
          "id": "7a7b84c7-39e9-4e00-84cc-a8d7049d8247",
          "layout": {
              "portsIn": [
                  {
                      "type": "1",
                      "name": "Update"
                  },
                  {
                      "type": "3",
                      "name": "Array 0"
                  },
                  {
                      "type": "3",
                      "name": "Array 1"
                  },
                  {
                      "type": "3",
                      "name": "Array 2"
                  },
                  {
                      "type": "3",
                      "name": "Array 3"
                  },
                  {
                      "type": "3",
                      "name": "Array 4"
                  },
                  {
                      "type": "3",
                      "name": "Array 5"
                  },
                  {
                      "type": "3",
                      "name": "Array 6"
                  },
                  {
                      "type": "3",
                      "name": "Array 7"
                  },
                  {
                      "type": "3",
                      "name": "Array 8"
                  },
                  {
                      "type": "3",
                      "name": "Array 9"
                  }
              ],
              "portsOut": [
                  {
                      "type": "3",
                      "name": "Result"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "Update",
                      "text": "combine all arrays"
                  },
                  {
                      "name": "Result",
                      "text": "array of arrays out"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1592211587535,
          "exampleProjectId": "iId8ve",
          "shortName": "ArrayOfArrays",
          "hasScreenshot": true,
          "namespace": "Ops.Array",
          "shortNameDisplay": "ArrayOfArrays",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Array.ArrayOfArrays",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Array.ArrayOfObjectsFilterByKeyValue",
          "content": "<p>Use this op to &quot;slim&quot; an array of objects.</p>\n<p>Only keep objects that have specified key-value pair!</p>\n<pre><code>var arr = [\n  { animal: &quot;dog&quot;, food: &quot;veggies&quot; }, \n  { animal: &quot;cat&quot;, food: &quot;bird&quot; }, \n  { animal: &quot;bird&quot;, food: &quot;veggies&quot; }\n];\n\n// specifying key value pair food, veggies, the resulting array becomes\n\narr = [{ animal: &quot;dog&quot;, food: &quot;veggies&quot; }, { animal: &quot;bird&quot;, food: &quot;veggies&quot;}];\n\n// inverting the operation, the array becomes\n\narr = [{ animal: &quot;cat&quot;, food: &quot;bird&quot; }];\n</code></pre>\n",
          "attachmentFiles": [],
          "summary": "filter key value pairs in objects in an array of objects",
          "id": "0d4b9bba-2c00-49f7-b486-86e4cde2428e",
          "layout": {
              "portsIn": [
                  {
                      "type": 3,
                      "name": "Array"
                  },
                  {
                      "type": 5,
                      "name": "Filter Key"
                  },
                  {
                      "type": 5,
                      "name": "Filter Value"
                  },
                  {
                      "type": 0,
                      "name": "Invert Filter",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 3,
                      "name": "arrayOut"
                  }
              ]
          },
          "authorName": "simod",
          "docs": {
              "ports": [
                  {
                      "name": "Array",
                      "text": "Array input"
                  },
                  {
                      "name": "Filter Key",
                      "text": "key to use"
                  },
                  {
                      "name": "Filter Value",
                      "text": "value to use"
                  },
                  {
                      "name": "Invert Filter",
                      "text": "invert result (discard all objects that have key-value pair)"
                  },
                  {
                      "name": "arrayOut",
                      "text": "output array"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1586863771940,
          "exampleProjectId": "HFRsU5",
          "shortName": "ArrayOfObjectsFilterByKeyValue",
          "hasScreenshot": true,
          "namespace": "Ops.Array",
          "shortNameDisplay": "ArrayOfObjectsFilterByKeyValue",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Array.ArrayOfObjectsFilterByKeyValue",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Array.ArrayOfObjectsFilterKeys",
          "content": "<p>Use this op on an array of objects to &quot;slim out&quot; objects.</p>\n<pre><code>var obj = { animal: &quot;dog&quot;, humanoid: &quot;arnold from terminator 2&quot;, lunch: &quot;pasta&quot; };\n\n// specify keys humanoid &amp; lunch, the resulting object becomes\nobj = { humanoid: &quot;arnold from terminator 2&quot;, lunch: &quot;pasta&quot; }\n\n// inverting the filter, the resulting object becomes\nobj = { animal: &quot;dog&quot; }\n</code></pre>\n",
          "attachmentFiles": [],
          "summary": "remove key-value pairs from objects in an array of objects",
          "id": "8c9a7621-51c7-46b7-934b-1924cb0ff0b6",
          "layout": {
              "portsIn": [
                  {
                      "type": 3,
                      "name": "Array"
                  },
                  {
                      "type": 5,
                      "name": "Keys"
                  },
                  {
                      "type": 5,
                      "name": "Seperator"
                  },
                  {
                      "type": 0,
                      "name": "Invert Filter",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 3,
                      "name": "Array Out"
                  }
              ]
          },
          "authorName": "simod",
          "docs": {
              "ports": [
                  {
                      "name": "Array",
                      "text": "array of objects input"
                  },
                  {
                      "name": "Keys",
                      "text": "keys to keep in the objects"
                  },
                  {
                      "name": "Seperator",
                      "text": "the character to seperate the keys"
                  },
                  {
                      "name": "Invert Filter",
                      "text": "inverts the operation, drops all specified keys"
                  },
                  {
                      "name": "Array Out",
                      "text": "the resulting array of objects"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1586866968147,
          "exampleProjectId": "HFRsU5",
          "shortName": "ArrayOfObjectsFilterKeys",
          "hasScreenshot": true,
          "namespace": "Ops.Array",
          "shortNameDisplay": "ArrayOfObjectsFilterKeys",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Array.ArrayOfObjectsFilterKeys",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Array.ArrayOfObjectsToString",
          "content": "<p>This op converts an array of objects to a string.</p>\n<p>Objects are sperated by a new line.</p>\n<p>A handy op for debugging API data.</p>\n",
          "attachmentFiles": [],
          "summary": "convert an array of objects into readable string format",
          "id": "1593cd67-2a90-43ab-b95e-ad6bbe9af37e",
          "layout": {
              "portsIn": [
                  {
                      "type": "3",
                      "name": "Array In"
                  }
              ],
              "portsOut": [
                  {
                      "type": "5",
                      "name": "String"
                  }
              ]
          },
          "authorName": "simod",
          "docs": {
              "ports": [
                  {
                      "name": "Array In",
                      "text": "array of objects input"
                  },
                  {
                      "name": "String",
                      "text": "string output"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1587052732489,
          "exampleProjectId": "HFRsU5",
          "shortName": "ArrayOfObjectsToString",
          "hasScreenshot": true,
          "namespace": "Ops.Array",
          "shortNameDisplay": "ArrayOfObjectsToString",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Array.ArrayOfObjectsToString",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Array.ArrayPack",
          "content": "<p>This is slower than ArrayPack2,ArrayPack3,ArrayPack4</p>\n<p>You should only use this if it&#39;s not executed for animations (e.g. for loading data once)</p>\n<p>Example:</p>\n<p>Array 0 is <code>[0,0,0,0,0]</code>\nArray 1 is <code>[1,1,1,1,1]</code></p>\n<p>resulting Array will be: Array 1 is <code>[0,1,0,1,0,1,0,1,0,1]</code></p>\n",
          "attachmentFiles": [],
          "summary": "Packs multiple arrays into a new array",
          "id": "51df396d-87be-4890-8fbd-c8bb3d364d3b",
          "layout": {
              "portsIn": [
                  {
                      "type": 3,
                      "name": "Array 0"
                  },
                  {
                      "type": 3,
                      "name": "Array 1"
                  },
                  {
                      "type": 3,
                      "name": "Array 2"
                  },
                  {
                      "type": 3,
                      "name": "Array 3"
                  },
                  {
                      "type": 3,
                      "name": "Array 4"
                  },
                  {
                      "type": 3,
                      "name": "Array 5"
                  },
                  {
                      "type": 3,
                      "name": "Array 6"
                  },
                  {
                      "type": 3,
                      "name": "Array 7"
                  }
              ],
              "portsOut": [
                  {
                      "type": 3,
                      "name": "Result"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1571074804477,
          "exampleProjectId": "fT3AeT",
          "shortName": "ArrayPack",
          "hasScreenshot": true,
          "namespace": "Ops.Array",
          "shortNameDisplay": "ArrayPack",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Array.ArrayPack",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Array.ArrayPack2",
          "content": "",
          "attachmentFiles": [],
          "summary": "Packs two individual arrays into a new array",
          "id": "0db296db-e4a7-4356-9593-858f7e1bc7f3",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Trigger in"
                  },
                  {
                      "type": 3,
                      "name": "Array 1"
                  },
                  {
                      "type": 3,
                      "name": "Array 2"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Trigger out"
                  },
                  {
                      "type": 3,
                      "name": "Array out"
                  },
                  {
                      "type": 0,
                      "name": "Array length",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "andro",
          "docs": {
              "ports": [
                  {
                      "name": "Trigger in",
                      "text": "Trigger in"
                  },
                  {
                      "name": "Array 1",
                      "text": "array 1 in"
                  },
                  {
                      "name": "Array 2",
                      "text": "array 2 in"
                  },
                  {
                      "name": "Trigger out",
                      "text": "Trigger out"
                  },
                  {
                      "name": "Array out",
                      "text": "Packed array"
                  },
                  {
                      "name": "Array length",
                      "text": "Length of array"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1565089672003,
          "exampleProjectId": "WaPiSP",
          "shortName": "ArrayPack2",
          "hasScreenshot": true,
          "namespace": "Ops.Array",
          "shortNameDisplay": "ArrayPack2",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Array.ArrayPack2",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Array.ArrayPack2Simple",
          "content": "",
          "attachmentFiles": [],
          "summary": "Packs 2 individual arrays into an array2 - without needing a trigger",
          "id": "6248877c-9509-483f-9e44-0061d0447acf",
          "layout": {
              "portsIn": [
                  {
                      "type": 3,
                      "name": "Array 1"
                  },
                  {
                      "type": 3,
                      "name": "Array 2"
                  }
              ],
              "portsOut": [
                  {
                      "type": 3,
                      "name": "Array out"
                  },
                  {
                      "type": 0,
                      "name": "Num Points",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Array length",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1692281968282,
          "exampleProjectId": "Udb6eG",
          "shortName": "ArrayPack2Simple",
          "hasScreenshot": true,
          "namespace": "Ops.Array",
          "shortNameDisplay": "ArrayPack2Simple",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Array.ArrayPack2Simple",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Array.ArrayPack3",
          "content": "",
          "attachmentFiles": [],
          "summary": "Packs 3 individual arrays into a xyz array",
          "id": "2bcf32fe-3cbd-48fd-825a-61255bebda9b",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Trigger in"
                  },
                  {
                      "type": 3,
                      "name": "Array 1"
                  },
                  {
                      "type": 3,
                      "name": "Array 2"
                  },
                  {
                      "type": 3,
                      "name": "Array 3"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Trigger out"
                  },
                  {
                      "type": 3,
                      "name": "Array out"
                  },
                  {
                      "type": 0,
                      "name": "Num Points",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Array length",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "Trigger in",
                      "text": "Trigger the op"
                  },
                  {
                      "name": "Array 1",
                      "text": "x array"
                  },
                  {
                      "name": "Array 2",
                      "text": "y array"
                  },
                  {
                      "name": "Array 3",
                      "text": "z array"
                  },
                  {
                      "name": "Trigger out",
                      "text": "Trigger out"
                  },
                  {
                      "name": "Array out",
                      "text": "The combined xyz array"
                  },
                  {
                      "name": "Num Points",
                      "text": "Amount of xyz points in the array"
                  }
              ]
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1546962264012,
          "exampleProjectId": "As6p8i",
          "shortName": "ArrayPack3",
          "hasScreenshot": true,
          "namespace": "Ops.Array",
          "shortNameDisplay": "ArrayPack3",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Array.ArrayPack3",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Array.ArrayPack3Simple",
          "content": "",
          "attachmentFiles": [],
          "summary": "Packs 3 individual arrays into an array3 - without needing a trigger",
          "id": "9c48785b-4cac-472c-a70f-dbd3c240b782",
          "layout": {
              "portsIn": [
                  {
                      "type": 3,
                      "name": "Array 1"
                  },
                  {
                      "type": 3,
                      "name": "Array 2"
                  },
                  {
                      "type": 3,
                      "name": "Array 3"
                  }
              ],
              "portsOut": [
                  {
                      "type": 3,
                      "name": "Array out"
                  },
                  {
                      "type": 0,
                      "name": "Num Points",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Array length",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1612448050260,
          "exampleProjectId": "Hx09v4",
          "shortName": "ArrayPack3Simple",
          "hasScreenshot": true,
          "namespace": "Ops.Array",
          "shortNameDisplay": "ArrayPack3Simple",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Array.ArrayPack3Simple",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Array.ArrayPack4",
          "content": "",
          "attachmentFiles": [],
          "summary": "Pack 4 arrays into one array",
          "id": "68ea2c83-05fc-47a7-aba8-3c400f1dd737",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Trigger in"
                  },
                  {
                      "type": 3,
                      "name": "Array 1"
                  },
                  {
                      "type": 3,
                      "name": "Array 2"
                  },
                  {
                      "type": 3,
                      "name": "Array 3"
                  },
                  {
                      "type": 3,
                      "name": "Array 4"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Trigger out"
                  },
                  {
                      "type": 3,
                      "name": "Array out"
                  },
                  {
                      "type": 0,
                      "name": "Array length",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "andro",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1558530554864,
          "exampleProjectId": "zgbOqH",
          "shortName": "ArrayPack4",
          "hasScreenshot": true,
          "namespace": "Ops.Array",
          "shortNameDisplay": "ArrayPack4",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Array.ArrayPack4",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Array.ArrayPack4Simple",
          "content": "",
          "attachmentFiles": [],
          "summary": "Packs 3 individual arrays into an array3 - without needing a trigger",
          "id": "6fe2bb0e-4bfc-42c1-8bc1-19fda052e091",
          "layout": {
              "portsIn": [
                  {
                      "type": 3,
                      "name": "Array 1"
                  },
                  {
                      "type": 3,
                      "name": "Array 2"
                  },
                  {
                      "type": 3,
                      "name": "Array 3"
                  },
                  {
                      "type": 3,
                      "name": "Array 4"
                  }
              ],
              "portsOut": [
                  {
                      "type": 3,
                      "name": "Array out"
                  },
                  {
                      "type": 0,
                      "name": "Num Points",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Array length",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1654169851126,
          "exampleProjectId": "Hx09v4",
          "shortName": "ArrayPack4Simple",
          "hasScreenshot": true,
          "namespace": "Ops.Array",
          "shortNameDisplay": "ArrayPack4Simple",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Array.ArrayPack4Simple",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Array.ArrayPow",
          "content": "",
          "attachmentFiles": [],
          "summary": "Applies a Pow function to an array",
          "id": "d60b6c52-d142-41dd-a38d-d185148be33f",
          "layout": {
              "portsIn": [
                  {
                      "type": 3,
                      "name": "Array in"
                  },
                  {
                      "type": 0,
                      "name": "Pow factor",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 3,
                      "name": "Array out"
                  }
              ]
          },
          "authorName": "andro",
          "docs": {
              "ports": [
                  {
                      "name": "Array in",
                      "text": "The array to apply the pow function to"
                  },
                  {
                      "name": "Pow factor",
                      "text": "Values below 0 are not accepted. 1 = Array in is unaltered"
                  },
                  {
                      "name": "Array out",
                      "text": "The modified array out"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1549530778262,
          "exampleProjectId": "nakc7z",
          "shortName": "ArrayPow",
          "hasScreenshot": true,
          "namespace": "Ops.Array",
          "shortNameDisplay": "ArrayPow",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Array.ArrayPow",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Array.ArrayPushString",
          "content": "",
          "attachmentFiles": [],
          "summary": "Push/Append a string to the end of an array",
          "id": "074034c9-9698-4984-897a-849bcb2b9b62",
          "layout": {
              "portsIn": [
                  {
                      "type": "3",
                      "name": "Array"
                  },
                  {
                      "type": "5",
                      "name": "String"
                  }
              ],
              "portsOut": [
                  {
                      "type": "3",
                      "name": "Result"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1597311849437,
          "exampleProjectId": "",
          "shortName": "ArrayPushString",
          "hasScreenshot": true,
          "namespace": "Ops.Array",
          "shortNameDisplay": "ArrayPushString",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Array.ArrayPushString",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Array.ArrayQuantizer",
          "content": "",
          "attachmentFiles": [],
          "summary": "quantize input to nearest number in array",
          "id": "fc05b6ed-6584-4e37-aec2-fc659012ff60",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "Value",
                      "subType": "number"
                  },
                  {
                      "type": 3,
                      "name": "Constraints Array Input"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "Quantized Value",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Quantization Error",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "simod",
          "docs": {
              "ports": [
                  {
                      "name": "Value",
                      "text": "input number"
                  },
                  {
                      "name": "Constraints Array Input",
                      "text": "array of numbers to which the input should be quantized (so called constraints)"
                  },
                  {
                      "name": "Quantized Value",
                      "text": "the quantized number"
                  },
                  {
                      "name": "Quantization Error",
                      "text": "the difference between the quantized and unquantized number"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1612890431341,
          "exampleProjectId": "0yr3cu",
          "shortName": "ArrayQuantizer",
          "hasScreenshot": true,
          "namespace": "Ops.Array",
          "shortNameDisplay": "ArrayQuantizer",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Array.ArrayQuantizer",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Array.ArrayRandomSelection",
          "content": "<p>Setting elements to 5 on an array with 60 values will extract random 5 values from the array.\nSeed changes which numbers are extracted.</p>\n",
          "attachmentFiles": [],
          "summary": "Extract a definable amount of values from an array",
          "id": "3dc059c8-bcb3-4d63-b806-ce81215da3b5",
          "layout": {
              "portsIn": [
                  {
                      "type": 3,
                      "name": "Array"
                  },
                  {
                      "type": 0,
                      "name": "Elements",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Seed",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 3,
                      "name": "Result"
                  },
                  {
                      "type": 0,
                      "name": "Array length",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "andro",
          "docs": {
              "ports": [
                  {
                      "name": "Array",
                      "text": "The array in to extract random values from"
                  },
                  {
                      "name": "Elements",
                      "text": "Amount of elements to extract"
                  },
                  {
                      "name": "Seed",
                      "text": "Random number seed. 0 is always different on a reload. Set to a number to keep a fixed seed."
                  },
                  {
                      "name": "Result",
                      "text": "Array Out"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1558451659688,
          "exampleProjectId": "ZYDYpH",
          "shortName": "ArrayRandomSelection",
          "hasScreenshot": true,
          "namespace": "Ops.Array",
          "shortNameDisplay": "ArrayRandomSelection",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Array.ArrayRandomSelection",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Array.ArrayReverse",
          "content": "",
          "attachmentFiles": [],
          "summary": "Reverses an array",
          "id": "88d8662f-2c01-42e6-943d-4d3cf90657b0",
          "layout": {
              "portsIn": [
                  {
                      "type": 3,
                      "name": "Input"
                  },
                  {
                      "type": 0,
                      "name": "Active",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 3,
                      "name": "Result"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1506588523258,
          "exampleProjectId": "UGUp8i",
          "shortName": "ArrayReverse",
          "hasScreenshot": true,
          "namespace": "Ops.Array",
          "shortNameDisplay": "ArrayReverse",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Array.ArrayReverse",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Array.ArrayRound",
          "content": "<p>Use to convert floating point values to integers\nAn array with the values [0.5,1.2,4.8]\nWill become [1,2,5]</p>\n",
          "attachmentFiles": [],
          "summary": "Round numbers up",
          "id": "e20fd46f-0644-49ee-bc10-0cf7525627a8",
          "layout": {
              "portsIn": [
                  {
                      "type": 3,
                      "name": "In"
                  },
                  {
                      "type": 0,
                      "name": "Method index",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Decimal Places",
                      "subType": "integer"
                  }
              ],
              "portsOut": [
                  {
                      "type": 3,
                      "name": "Result"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "In",
                      "text": "Array in"
                  },
                  {
                      "name": "Result",
                      "text": "Array out"
                  }
              ]
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1701169925086,
          "exampleProjectId": "7xdJrG",
          "shortName": "ArrayRound",
          "hasScreenshot": true,
          "namespace": "Ops.Array",
          "shortNameDisplay": "ArrayRound",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Array.ArrayRound",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Array.ArraySetNumber_v3",
          "content": "<p>This will creates a new copy of an array.\nOriginal array will be untouched.</p>\n",
          "attachmentFiles": [],
          "summary": "set a number at index in an array",
          "id": "1a71327d-fe88-4796-9ebd-5a1c1cd083af",
          "layout": {
              "portsIn": [
                  {
                      "type": 3,
                      "name": "Array"
                  },
                  {
                      "type": 0,
                      "name": "Index",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Number",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 3,
                      "name": "Result"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "Execute",
                      "text": "Trigger to set the value at the index"
                  },
                  {
                      "name": "Array",
                      "text": "Array in"
                  },
                  {
                      "name": "Index",
                      "text": "index to update with the value"
                  },
                  {
                      "name": "Number",
                      "text": "number that will be set to the selected index"
                  },
                  {
                      "name": "Reset",
                      "text": "Reverts array to it's original state"
                  },
                  {
                      "name": "Result",
                      "text": "Modified array out"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1687272676383,
          "exampleProjectId": "bJrH16",
          "shortName": "ArraySetNumber_v3",
          "hasScreenshot": true,
          "namespace": "Ops.Array",
          "shortNameDisplay": "ArraySetNumber",
          "version": 3,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Array.ArraySetNumber",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Array.ArraySetNumber_v2",
                  "versionString": "_v2",
                  "version": 2
              },
              {
                  "name": "Ops.Array.ArraySetNumber_v3",
                  "versionString": "_v3",
                  "version": 3
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Array.ArraySetString",
          "content": "<p>This will creates a new copy of an array.\nOriginal array will be untouched.</p>\n",
          "attachmentFiles": [],
          "summary": "set a string at index in an array",
          "id": "3af6abc2-0c64-46f8-bf49-04714722cc3b",
          "layout": {
              "portsIn": [
                  {
                      "type": 3,
                      "name": "Array"
                  },
                  {
                      "type": 0,
                      "name": "Index",
                      "subType": "integer"
                  },
                  {
                      "type": 5,
                      "name": "Value"
                  }
              ],
              "portsOut": [
                  {
                      "type": 3,
                      "name": "Result"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "Array",
                      "text": "Array in"
                  },
                  {
                      "name": "Index",
                      "text": "index to update with the value"
                  },
                  {
                      "name": "Result",
                      "text": "Modified array out"
                  }
              ]
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1717747756037,
          "exampleProjectId": "b0vNrh",
          "shortName": "ArraySetString",
          "hasScreenshot": true,
          "namespace": "Ops.Array",
          "shortNameDisplay": "ArraySetString",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Array.ArraySetString",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Array.ArraySin",
          "content": "",
          "attachmentFiles": [],
          "summary": "Performs a sin or cos operation on the contents of an array",
          "id": "ded44bae-a24e-48c5-9585-4cb31f331ab6",
          "layout": {
              "portsIn": [
                  {
                      "type": 3,
                      "name": "array in"
                  },
                  {
                      "type": 0,
                      "name": "Math function index",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Phase",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Frequency",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Amplitude",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 3,
                      "name": "Array result"
                  }
              ]
          },
          "authorName": "andro",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1540286211135,
          "exampleProjectId": "x1Hqrq",
          "shortName": "ArraySin",
          "hasScreenshot": true,
          "namespace": "Ops.Array",
          "shortNameDisplay": "ArraySin",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Array.ArraySin",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Array.ArraySmoothStep",
          "content": "<p>The fancy way of saying it is\nPerform Hermite interpolation between two values</p>\n",
          "attachmentFiles": [],
          "summary": "Applies a smoothstep function to the contents of an array ",
          "id": "eb95b563-937b-4189-a8c9-ba6776971719",
          "layout": {
              "portsIn": [
                  {
                      "type": 3,
                      "name": "Array In"
                  },
                  {
                      "type": 0,
                      "name": "Min",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Max",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 3,
                      "name": "Array out"
                  }
              ]
          },
          "authorName": "andro",
          "docs": {
              "ports": [
                  {
                      "name": "Array In",
                      "text": "The array in to modify"
                  },
                  {
                      "name": "Min",
                      "text": "min interpolation point"
                  },
                  {
                      "name": "Max",
                      "text": "max interpolation point"
                  },
                  {
                      "name": "Array out",
                      "text": "The modified array "
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1549533987803,
          "exampleProjectId": "Cyvm7z",
          "shortName": "ArraySmoothStep",
          "hasScreenshot": true,
          "namespace": "Ops.Array",
          "shortNameDisplay": "ArraySmoothStep",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Array.ArraySmoothStep",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Array.ArraySqrt",
          "content": "",
          "attachmentFiles": [],
          "summary": "Returns the square root of all values in the array",
          "id": "93f3dc25-a1e7-46f5-9069-527c1bd2c3a3",
          "layout": {
              "portsIn": [
                  {
                      "type": 3,
                      "name": "In"
                  }
              ],
              "portsOut": [
                  {
                      "type": 3,
                      "name": "Result"
                  }
              ]
          },
          "authorName": "andro",
          "docs": {
              "ports": [
                  {
                      "name": "In",
                      "text": "Array in"
                  },
                  {
                      "name": "Result",
                      "text": "Array out"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1567002458698,
          "exampleProjectId": "g7ulSP",
          "shortName": "ArraySqrt",
          "hasScreenshot": true,
          "namespace": "Ops.Array",
          "shortNameDisplay": "ArraySqrt",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Array.ArraySqrt",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Array.ArraySubtract",
          "content": "",
          "attachmentFiles": [],
          "summary": " Subtracts one number from all values in an array",
          "id": "af78ab59-75d5-4ead-9a8d-27a63e1cbf3f",
          "layout": {
              "portsIn": [
                  {
                      "type": 3,
                      "name": "Array In"
                  },
                  {
                      "type": 0,
                      "name": "Value",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Mode index",
                      "values": [
                          "Array-x",
                          "x-Array"
                      ],
                      "subType": "integer"
                  }
              ],
              "portsOut": [
                  {
                      "type": 3,
                      "name": "Array Out"
                  }
              ]
          },
          "authorName": "andro",
          "docs": {
              "ports": [
                  {
                      "name": "Array In",
                      "text": "Array in"
                  },
                  {
                      "name": "Value",
                      "text": "The number to subtract from all numbers in the array"
                  },
                  {
                      "name": "Array Out",
                      "text": "Array out"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1540902068741,
          "exampleProjectId": "uIYNcn",
          "shortName": "ArraySubtract",
          "hasScreenshot": true,
          "namespace": "Ops.Array",
          "shortNameDisplay": "ArraySubtract",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Array.ArraySubtract",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Array.ArraySum",
          "content": "",
          "attachmentFiles": [],
          "summary": "Adds one number to all values in an array",
          "id": "c6b5bf63-0be8-4eea-acc0-9d32973e665a",
          "layout": {
              "portsIn": [
                  {
                      "type": 3,
                      "name": "In"
                  },
                  {
                      "type": 0,
                      "name": "Value",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 3,
                      "name": "Result"
                  }
              ]
          },
          "authorName": "andro",
          "docs": {
              "ports": [
                  {
                      "name": "In",
                      "text": "Array in"
                  },
                  {
                      "name": "Value",
                      "text": "The number to add to all numbers in the array"
                  },
                  {
                      "name": "Result",
                      "text": "Array out"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1540461245768,
          "exampleProjectId": "uIYNcn",
          "shortName": "ArraySum",
          "hasScreenshot": true,
          "namespace": "Ops.Array",
          "shortNameDisplay": "ArraySum",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Array.ArraySum",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Array.ArraySumPrevious",
          "content": "",
          "attachmentFiles": [],
          "summary": "Sum up every number in an array with the sum of the previous ",
          "id": "71494407-e618-425f-890b-dcf6c3d46cf1",
          "layout": {
              "portsIn": [
                  {
                      "type": 3,
                      "name": "Array"
                  },
                  {
                      "type": 0,
                      "name": "Padding",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 3,
                      "name": "Result"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1612131200890,
          "exampleProjectId": "udsvLu",
          "shortName": "ArraySumPrevious",
          "hasScreenshot": true,
          "namespace": "Ops.Array",
          "shortNameDisplay": "ArraySumPrevious",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Array.ArraySumPrevious",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Array.ArraySumUp",
          "content": "<p>add up all numbers in an array and returns the total</p>\n",
          "attachmentFiles": [],
          "summary": "sum of every number in an array",
          "id": "5593ea29-19d3-4161-af0c-b8d62079487d",
          "layout": {
              "portsIn": [
                  {
                      "type": 3,
                      "name": "Array"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "Sum",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "Array",
                      "text": "Array in"
                  },
                  {
                      "name": "Sum",
                      "text": "The total number from all values being added together"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1513581508546,
          "exampleProjectId": "U4M4J5",
          "shortName": "ArraySumUp",
          "hasScreenshot": true,
          "namespace": "Ops.Array",
          "shortNameDisplay": "ArraySumUp",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Array.ArraySumUp",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Array.ArraySwizzle",
          "content": "",
          "attachmentFiles": [],
          "summary": "manage/re-order components of an array (stride)",
          "id": "888b76dd-40ee-4d79-9a1b-410612b4eb06",
          "layout": {
              "portsIn": [
                  {
                      "type": 3,
                      "name": "Array"
                  },
                  {
                      "type": 0,
                      "name": "Array Stride index",
                      "values": [
                          "1",
                          "2",
                          "3",
                          "4"
                      ],
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Result Stride index",
                      "values": [
                          "1",
                          "2",
                          "3",
                          "4"
                      ],
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "X index",
                      "values": [
                          "X",
                          "Y",
                          "Z",
                          "W",
                          "0",
                          "1",
                          "0,1,2..",
                          "0-1"
                      ],
                      "group": "Content Result",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Y index",
                      "values": [
                          "X",
                          "Y",
                          "Z",
                          "W",
                          "0",
                          "1",
                          "0,1,2..",
                          "0-1"
                      ],
                      "group": "Content Result",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Z index",
                      "values": [
                          "X",
                          "Y",
                          "Z",
                          "W",
                          "0",
                          "1",
                          "0,1,2..",
                          "0-1"
                      ],
                      "group": "Content Result",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "W index",
                      "values": [
                          "X",
                          "Y",
                          "Z",
                          "W",
                          "0",
                          "1",
                          "0,1,2..",
                          "0-1"
                      ],
                      "group": "Content Result",
                      "subType": "integer"
                  }
              ],
              "portsOut": [
                  {
                      "type": 3,
                      "name": "Result"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1675766658011,
          "exampleProjectId": "MFv6cy",
          "shortName": "ArraySwizzle",
          "hasScreenshot": true,
          "namespace": "Ops.Array",
          "shortNameDisplay": "ArraySwizzle",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Array.ArraySwizzle",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Array.ArrayToArrays",
          "content": "<p>e.g. stride of 2: <code>[a,b,c,d,e,f]</code> becomes <code>[[a,b],[c,d],[e,f]]</code></p>\n",
          "attachmentFiles": [],
          "summary": "splits an array up into an array of arrays",
          "id": "037a9886-c185-4ab2-8c7e-b9f85b1e678c",
          "layout": {
              "portsIn": [
                  {
                      "type": "3",
                      "name": "Array"
                  },
                  {
                      "type": "0",
                      "name": "Stride",
                      "subType": "integer"
                  }
              ],
              "portsOut": [
                  {
                      "type": "3",
                      "name": "Result"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1667658460529,
          "exampleProjectId": "Bpx7ck",
          "shortName": "ArrayToArrays",
          "hasScreenshot": true,
          "namespace": "Ops.Array",
          "shortNameDisplay": "ArrayToArrays",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Array.ArrayToArrays",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Array.ArrayToByteBuffer",
          "content": "",
          "attachmentFiles": [],
          "summary": "convert an array to a byte buffer (Uint8ClampedArray)",
          "id": "e826fe40-69b5-4a63-adfa-db8267bd56d1",
          "layout": {
              "portsIn": [
                  {
                      "type": "3",
                      "name": "Array"
                  }
              ],
              "portsOut": [
                  {
                      "type": "2",
                      "name": "Buffer"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1558119140117,
          "exampleProjectId": "",
          "shortName": "ArrayToByteBuffer",
          "hasScreenshot": false,
          "namespace": "Ops.Array",
          "shortNameDisplay": "ArrayToByteBuffer",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Array.ArrayToByteBuffer",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Array.ArrayToString_v3",
          "content": "",
          "attachmentFiles": [],
          "summary": "Join array values to a string (concat)",
          "id": "7b539bb3-8e86-4367-9e00-a637d3cfd87a",
          "layout": {
              "portsIn": [
                  {
                      "type": "3",
                      "name": "Array"
                  },
                  {
                      "type": "5",
                      "name": "Seperator"
                  },
                  {
                      "type": "0",
                      "name": "New Line",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": "5",
                      "name": "Result"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1565717348413,
          "exampleProjectId": "U4M4J5",
          "shortName": "ArrayToString_v3",
          "hasScreenshot": true,
          "namespace": "Ops.Array",
          "shortNameDisplay": "ArrayToString",
          "version": 3,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Array.ArrayToString",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Array.ArrayToString_v2",
                  "versionString": "_v2",
                  "version": 2
              },
              {
                  "name": "Ops.Array.ArrayToString_v3",
                  "versionString": "_v3",
                  "version": 3
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Array.ArrayTrigger",
          "content": "<p>Array is only sent out when op is triggered.</p>\n",
          "attachmentFiles": [],
          "summary": "Trigger an array",
          "id": "c1d7a502-5d91-4528-9833-3bf27a546d25",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Exec"
                  },
                  {
                      "type": 3,
                      "name": "Array"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Trigger out"
                  },
                  {
                      "type": 3,
                      "name": "Result"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "Exec",
                      "text": "Trigger the op"
                  },
                  {
                      "name": "Array",
                      "text": "Array in"
                  },
                  {
                      "name": "Result",
                      "text": "Array output when op is triggered."
                  }
              ]
          },
          "license": "MIT",
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1518520568550,
          "exampleProjectId": "",
          "shortName": "ArrayTrigger",
          "hasScreenshot": false,
          "namespace": "Ops.Array",
          "shortNameDisplay": "ArrayTrigger",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Array.ArrayTrigger",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Array.ArrayUnique",
          "content": "<p>when given an array with &quot;non&quot; unique items, like:</p>\n<pre><code class=\"language-javascript\">const a = [\n  &quot;maus&quot;,\n  &quot;hund&quot;,\n  &quot;maus&quot;,\n  &quot;katze&quot;,\n  &quot;maus&quot;,\n];\n</code></pre>\n<p>will return only the unique values in that array, as a new array, so:</p>\n<pre><code class=\"language-javascript\">const a = [\n  &quot;hund&quot;,\n  &quot;katze&quot;,\n  &quot;maus&quot;,\n];\n</code></pre>\n",
          "attachmentFiles": [],
          "summary": "filters an array for duplicate items and returns all unique items in a new array",
          "id": "81204fcc-c416-4948-9cba-2218763db4fc",
          "layout": {
              "portsIn": [
                  {
                      "type": "3",
                      "name": "array"
                  },
                  {
                      "type": "0",
                      "name": "Format index",
                      "subType": "integer"
                  },
                  {
                      "type": "5",
                      "name": "Format"
                  }
              ],
              "portsOut": [
                  {
                      "type": "3",
                      "name": "arrayOut"
                  },
                  {
                      "type": "0",
                      "name": "Array Length Out",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "array",
                      "text": "input array"
                  },
                  {
                      "name": "Format index",
                      "text": "choose between 3 different unique modes: x, xy, xyz"
                  },
                  {
                      "name": "Format",
                      "text": "choose between 3 different unique modes: x, xy, xyz"
                  },
                  {
                      "name": "arrayOut",
                      "text": "deduped array output"
                  },
                  {
                      "name": "Array Length Out",
                      "text": "length of the new array"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1576853657478,
          "exampleProjectId": "vIQlS-",
          "shortName": "ArrayUnique",
          "hasScreenshot": true,
          "namespace": "Ops.Array",
          "shortNameDisplay": "ArrayUnique",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Array.ArrayUnique",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Array.ArrayUniqueItemInfo",
          "content": "<p>when given an array with &quot;non&quot; unique items, like:</p>\n<pre><code class=\"language-javascript\">const a = [\n  &quot;maus&quot;,\n  &quot;hund&quot;,\n  &quot;maus&quot;,\n  &quot;katze&quot;,\n  &quot;maus&quot;,\n];\n</code></pre>\n<p>will return an object with information on the ocurrences of every unique value, so:</p>\n<pre><code class=\"language-javascript\">{\n  &quot;hund&quot; : 1,\n  &quot;katze&quot;: 1,\n  &quot;maus&quot;: 3,\n};\n</code></pre>\n",
          "attachmentFiles": [],
          "summary": "will give you information about the count of \"duplicates\" in an array, as an object",
          "id": "6c6927e6-abd3-4427-92b2-4095f6f0b1c0",
          "layout": {
              "portsIn": [
                  {
                      "type": 3,
                      "name": "array"
                  }
              ],
              "portsOut": [
                  {
                      "type": 2,
                      "name": "objectOut"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "In",
                      "text": "an array of arbitrary values"
                  },
                  {
                      "name": "Result",
                      "text": "an array with all the unique values in the input-array"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1576853663819,
          "exampleProjectId": "72VpS-",
          "shortName": "ArrayUniqueItemInfo",
          "hasScreenshot": true,
          "namespace": "Ops.Array",
          "shortNameDisplay": "ArrayUniqueItemInfo",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Array.ArrayUniqueItemInfo",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Array.ArrayUnpack2",
          "content": "",
          "attachmentFiles": [],
          "summary": "Unpacks an xy array into separate arrays",
          "id": "3f789664-9937-4478-ba28-63ccb67e5114",
          "layout": {
              "portsIn": [
                  {
                      "type": 3,
                      "name": "Array in xyz"
                  }
              ],
              "portsOut": [
                  {
                      "type": 3,
                      "name": "Array 1 out"
                  },
                  {
                      "type": 3,
                      "name": "Array 2 out"
                  },
                  {
                      "type": 0,
                      "name": "Array lengths",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "andro",
          "docs": {
              "ports": [
                  {
                      "name": "Array in xyz",
                      "text": "Array in"
                  },
                  {
                      "name": "Array 1 out",
                      "text": "X component out "
                  },
                  {
                      "name": "Array 2 out",
                      "text": "Y component out "
                  },
                  {
                      "name": "Array lengths",
                      "text": "Length of arrays"
                  }
              ]
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1568370362003,
          "exampleProjectId": "N00tci",
          "shortName": "ArrayUnpack2",
          "hasScreenshot": true,
          "namespace": "Ops.Array",
          "shortNameDisplay": "ArrayUnpack2",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Array.ArrayUnpack2",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Array.ArrayUnpack3",
          "content": "<p>An array of xyz is split into 3 individual arrays. \nUse <a href=\"/op/Ops.Array.ArrayPack3\" target=\"_blank\">Ops.Array.ArrayPack3</a> to join them together again.</p>\n",
          "attachmentFiles": [],
          "summary": "splits a xyz array into 3 individual arrays",
          "id": "fa671f66-6957-41e6-ac35-d615b7c29285",
          "layout": {
              "portsIn": [
                  {
                      "type": 3,
                      "name": "Array in xyz"
                  }
              ],
              "portsOut": [
                  {
                      "type": 3,
                      "name": "Array 1 out"
                  },
                  {
                      "type": 3,
                      "name": "Array 2 out"
                  },
                  {
                      "type": 3,
                      "name": "Array 3 out"
                  },
                  {
                      "type": 0,
                      "name": "Array lengths",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "andro",
          "docs": {
              "ports": [
                  {
                      "name": "Array in xyz",
                      "text": "The array to unpack"
                  },
                  {
                      "name": "Array 1 out",
                      "text": "array x out"
                  },
                  {
                      "name": "Array 2 out",
                      "text": "array y out"
                  },
                  {
                      "name": "Array 3 out",
                      "text": "array z out"
                  }
              ]
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1547231076202,
          "exampleProjectId": "lmn5Og",
          "shortName": "ArrayUnpack3",
          "hasScreenshot": true,
          "namespace": "Ops.Array",
          "shortNameDisplay": "ArrayUnpack3",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Array.ArrayUnpack3",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Array.ArrayUnpack4",
          "content": "<p>An array of xyzw is split into 4 individual arrays.</p>\n",
          "attachmentFiles": [],
          "summary": "Splits a xyzw array into 4 individual arrays",
          "id": "8d2127d8-f3e4-4036-8cd8-75c6a404b582",
          "layout": {
              "portsIn": [
                  {
                      "type": 3,
                      "name": "Array in xyzw"
                  }
              ],
              "portsOut": [
                  {
                      "type": 3,
                      "name": "Array 1 out"
                  },
                  {
                      "type": 3,
                      "name": "Array 2 out"
                  },
                  {
                      "type": 3,
                      "name": "Array 3 out"
                  },
                  {
                      "type": 3,
                      "name": "Array 4 out"
                  },
                  {
                      "type": 0,
                      "name": "Array lengths",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "andro",
          "docs": {
              "ports": [
                  {
                      "name": "Array in xyzw",
                      "text": "Array in xyzw"
                  },
                  {
                      "name": "Array 1 out",
                      "text": "array x out"
                  },
                  {
                      "name": "Array 2 out",
                      "text": "array y out"
                  },
                  {
                      "name": "Array 3 out",
                      "text": "array z out"
                  },
                  {
                      "name": "Array 4 out",
                      "text": "array w out"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1547460504469,
          "exampleProjectId": "vl1N_M",
          "shortName": "ArrayUnpack4",
          "hasScreenshot": true,
          "namespace": "Ops.Array",
          "shortNameDisplay": "ArrayUnpack4",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Array.ArrayUnpack4",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Array.ArrayUnshiftString",
          "content": "",
          "attachmentFiles": [],
          "summary": "insert/add/unshift a string to the beginning of an array",
          "id": "b6b78f4f-487e-4372-bd35-aaaa097083ff",
          "layout": {
              "portsIn": [
                  {
                      "type": 3,
                      "name": "Array"
                  },
                  {
                      "type": 5,
                      "name": "String"
                  }
              ],
              "portsOut": [
                  {
                      "type": 3,
                      "name": "Result"
                  }
              ]
          },
          "authorName": "stephan",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1631106579359,
          "exampleProjectId": "Ckkk7M",
          "shortName": "ArrayUnshiftString",
          "hasScreenshot": true,
          "namespace": "Ops.Array",
          "shortNameDisplay": "ArrayUnshiftString",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Array.ArrayUnshiftString",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Array.Array_v3",
          "content": "<p>This op has three modes\n<code>Number</code> - This fills the whole array with one number\n<code>1,2,3,4</code> - Fills array with incrementing numbers up to array length\n<code>normalize</code> fills an array with values going from <code>0.0</code> to <code>1.0</code>, <code>1.0</code> not included.\n&#39;normalize reverse&#39; fills an array with values going from <code>1.0</code> to <code>0.0</code>, <code>0.0</code> not included.</p>\n<p>This op has replaced the old Array and ContinuousNumberArray ops</p>\n",
          "attachmentFiles": [],
          "summary": "Can generate 3 kinds of arrays. Number - 1,2,3,4 - Normalized - (ContinuousNumberArray)",
          "id": "e4d31a46-bf64-42a8-be34-4cbb2bbc2600",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "Array length",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Mode select index",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Default Value",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Reverse",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 3,
                      "name": "Array"
                  },
                  {
                      "type": 0,
                      "name": "Array length out",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "Array length",
                      "text": "The length of the array"
                  },
                  {
                      "name": "Default Value",
                      "text": "Varies depending on selected mode - see docs for more details"
                  },
                  {
                      "name": "Array",
                      "text": "Array out"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1655191858020,
          "exampleProjectId": "P4qAz6",
          "shortName": "Array_v3",
          "hasScreenshot": true,
          "namespace": "Ops.Array",
          "shortNameDisplay": "Array",
          "version": 3,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Array.Array",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Array.Array_v2",
                  "versionString": "_v2",
                  "version": 2
              },
              {
                  "name": "Ops.Array.Array_v3",
                  "versionString": "_v3",
                  "version": 3
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Array.AverageArray",
          "content": "",
          "attachmentFiles": [],
          "summary": "smooth/average values in an array",
          "id": "40011294-10c4-4174-aa18-1b891826f436",
          "layout": {
              "portsIn": [
                  {
                      "type": 3,
                      "name": "Array"
                  },
                  {
                      "type": 0,
                      "name": "Iterations",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Mode index",
                      "subType": "integer"
                  }
              ],
              "portsOut": [
                  {
                      "type": 3,
                      "name": "Smoothed array"
                  },
                  {
                      "type": 0,
                      "name": "Array length",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "andro",
          "docs": {
              "ports": [
                  {
                      "name": "Array",
                      "text": "The array in to smooth"
                  },
                  {
                      "name": "Iterations",
                      "text": "How many iterations to apply - doesn't change array length"
                  },
                  {
                      "name": "Mode",
                      "text": "`Repeat` or `Clamp` start and end value in array"
                  },
                  {
                      "name": "Smoothed array",
                      "text": "Array out "
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1537345553481,
          "exampleProjectId": "t8uSdn",
          "shortName": "AverageArray",
          "hasScreenshot": true,
          "namespace": "Ops.Array",
          "shortNameDisplay": "AverageArray",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Array.AverageArray",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Array.BoolStateArray",
          "content": "<p>Outputs an array where only one element is <code>1</code>, the other elements are <code>0</code>. By changing the <code>Active Index</code> port you can decide which of the elements is the <code>1</code>.</p>\n<p>E.g.:<br><code>Active Index</code> is <code>2</code>: <code>[0, 0, 1, 0, 0, 0, 0, 0, 0, 0]</code></p>\n<p>you can also set the inactive value and active value to change the <code>0</code> and <code>1</code> to something else like <code>9.5</code> and <code>0.1</code></p>\n",
          "attachmentFiles": [],
          "summary": "Array filled with `0`, only one can be `1`",
          "id": "f8c30313-4251-4d39-bff3-fb1cc9234d54",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "Array Length",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Active Index",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Inactive Value",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Active Value",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 3,
                      "name": "State Array"
                  }
              ]
          },
          "authorName": "tim",
          "docs": {
              "ports": [
                  {
                      "name": "Array Length",
                      "text": "How long the array should be"
                  },
                  {
                      "name": "Active Index",
                      "text": "Which element is the `1`"
                  },
                  {
                      "name": "Inactive Value",
                      "text": "Zeroes are set to this number"
                  },
                  {
                      "name": "Active Value",
                      "text": "Ones are set to this number"
                  },
                  {
                      "name": "State Array",
                      "text": "The array containing elements with `0`, and one element with `1`"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1520268708150,
          "exampleProjectId": "9oowlJ",
          "shortName": "BoolStateArray",
          "hasScreenshot": true,
          "namespace": "Ops.Array",
          "shortNameDisplay": "BoolStateArray",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Array.BoolStateArray",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Array.CopyArray",
          "content": "",
          "attachmentFiles": [],
          "summary": "Copy an array with a trigger, reset to use a default array",
          "id": "2f9b834e-c357-4dc7-ac2e-966b11735ef8",
          "layout": {
              "portsIn": [
                  {
                      "type": "1",
                      "name": "Exec"
                  },
                  {
                      "type": "3",
                      "name": "Array"
                  },
                  {
                      "type": "1",
                      "name": "Reset"
                  },
                  {
                      "type": "3",
                      "name": "Default"
                  }
              ],
              "portsOut": [
                  {
                      "type": "3",
                      "name": "Result"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "Exec",
                      "text": "Trigger the op - make a copy"
                  },
                  {
                      "name": "Array",
                      "text": "Array in to copy"
                  },
                  {
                      "name": "Reset",
                      "text": "Reset the op - initialize to default array"
                  },
                  {
                      "name": "Default",
                      "text": "Default array if reset is triggered"
                  },
                  {
                      "name": "Result",
                      "text": "Array out"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1578780947125,
          "exampleProjectId": "JqSoH-",
          "shortName": "CopyArray",
          "hasScreenshot": true,
          "namespace": "Ops.Array",
          "shortNameDisplay": "CopyArray",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Array.CopyArray",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Array.CopyArraySimple",
          "content": "",
          "attachmentFiles": [],
          "summary": "create a copy of an array",
          "id": "06b6e567-a9c6-4da2-b853-cb13be66505c",
          "layout": {
              "portsIn": [
                  {
                      "type": 3,
                      "name": "Input"
                  }
              ],
              "portsOut": [
                  {
                      "type": 3,
                      "name": "Result"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1693484923412,
          "exampleProjectId": "",
          "shortName": "CopyArraySimple",
          "hasScreenshot": false,
          "namespace": "Ops.Array",
          "shortNameDisplay": "CopyArraySimple",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Array.CopyArraySimple",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Array.CropArray",
          "content": "",
          "attachmentFiles": [],
          "summary": "Crops an array",
          "id": "d8deecd3-418f-43dd-8edb-dfe238b5327c",
          "layout": {
              "portsIn": [
                  {
                      "type": 3,
                      "name": "Source Array"
                  },
                  {
                      "type": 0,
                      "name": "Start Index",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "New Length",
                      "subType": "integer"
                  }
              ],
              "portsOut": [
                  {
                      "type": 3,
                      "name": "Cropped Array"
                  },
                  {
                      "type": 0,
                      "name": "Array length",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "tim",
          "docs": {
              "ports": [
                  {
                      "name": "Source Array",
                      "text": "The array to crop"
                  },
                  {
                      "name": "New Length",
                      "text": "The length the new array should have"
                  },
                  {
                      "name": "Cropped Array",
                      "text": "The cropped array with new length, the source array stays untouched"
                  }
              ]
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1519667584199,
          "exampleProjectId": "UuuJH-",
          "shortName": "CropArray",
          "hasScreenshot": true,
          "namespace": "Ops.Array",
          "shortNameDisplay": "CropArray",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Array.CropArray",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Array.CutArray",
          "content": "",
          "attachmentFiles": [],
          "summary": "Remove elements from an array from the beginning and/or the end",
          "id": "9e6ea32a-3f5d-417a-b437-05c59d47c56e",
          "layout": {
              "portsIn": [
                  {
                      "type": "3",
                      "name": "Source Array"
                  },
                  {
                      "type": "0",
                      "name": "Remove from Start",
                      "subType": "integer"
                  },
                  {
                      "type": "0",
                      "name": "Remove From End",
                      "subType": "integer"
                  }
              ],
              "portsOut": [
                  {
                      "type": "3",
                      "name": "Cut Array"
                  },
                  {
                      "type": "0",
                      "name": "Array Length",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "simod",
          "docs": {
              "ports": [
                  {
                      "name": "Source Array",
                      "text": "input array"
                  },
                  {
                      "name": "Remove from Start",
                      "text": "amount of elements to be removed from the beginning of array"
                  },
                  {
                      "name": "Remove From End",
                      "text": "amount of elements to be removed from the end of array"
                  },
                  {
                      "name": "Cut Array",
                      "text": "cut array output"
                  },
                  {
                      "name": "Array Length",
                      "text": "length output"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1600181584430,
          "exampleProjectId": "VbqZTh",
          "shortName": "CutArray",
          "hasScreenshot": true,
          "namespace": "Ops.Array",
          "shortNameDisplay": "CutArray",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Array.CutArray",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Array.EaseArray",
          "content": "",
          "attachmentFiles": [],
          "summary": "apply easing curve to numbers in an array",
          "id": "3bda237e-819a-43d8-9fb8-0f32bd3f7cc8",
          "layout": {
              "portsIn": [
                  {
                      "type": 3,
                      "name": "Array"
                  },
                  {
                      "type": 0,
                      "name": "Min",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Max",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Easing index",
                      "subType": "integer"
                  }
              ],
              "portsOut": [
                  {
                      "type": 3,
                      "name": "Result Array"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1655191351855,
          "exampleProjectId": "Mbwkf6",
          "shortName": "EaseArray",
          "hasScreenshot": true,
          "namespace": "Ops.Array",
          "shortNameDisplay": "EaseArray",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Array.EaseArray",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Array.EmptyArray",
          "content": "",
          "attachmentFiles": [],
          "summary": "An Empty Array",
          "id": "4b5d1e60-460d-41be-8de0-e70b75801b70",
          "layout": {
              "portsIn": [],
              "portsOut": [
                  {
                      "type": "3",
                      "name": "Result"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1706777747148,
          "exampleProjectId": "",
          "shortName": "EmptyArray",
          "hasScreenshot": false,
          "namespace": "Ops.Array",
          "shortNameDisplay": "EmptyArray",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Array.EmptyArray",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Array.FillArrayRandomDuplicates_v2",
          "content": "<p>example\nyou have an array with 3 values [0,1,2]\nand you want to have an array of with a length of 9 with these values\nYou pass the smaller array into FillArrayRandomDuplicates and define a length of 9\nYou&#39;ll then get something like [0,1,2,0,1,2,2,0,0]</p>\n<p>Note that the original array that&#39;s passed in will always be in the start of the new array. In this case the 1st 3 values will always be 0,1,2</p>\n",
          "attachmentFiles": [],
          "summary": "Fill an array with random duplicates",
          "id": "cbf5f595-9fbe-45a9-a324-5089665e8e51",
          "layout": {
              "portsIn": [
                  {
                      "type": 3,
                      "name": "Array"
                  },
                  {
                      "type": 0,
                      "name": "Num Elements",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Random seed",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 3,
                      "name": "Result"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "Array",
                      "text": "The array used to get random values from"
                  },
                  {
                      "name": "Num Elements",
                      "text": "The length of the new array"
                  },
                  {
                      "name": "Result",
                      "text": "The generated array with the new values."
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1669208812091,
          "exampleProjectId": "z4S3dz",
          "shortName": "FillArrayRandomDuplicates_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Array",
          "shortNameDisplay": "FillArrayRandomDuplicates",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Array.FillArrayRandomDuplicates",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Array.FillArrayRandomDuplicates_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Array.FilterArray",
          "content": "<p>filter an array of arbitrary stride by one set of elements and output the filtered array</p>\n",
          "attachmentFiles": [],
          "summary": "compare elements from an array and remove not matching ones",
          "id": "ea396c36-c070-44d8-ae0b-fd0bffa56b35",
          "layout": {
              "portsIn": [
                  {
                      "type": 3,
                      "name": "Array"
                  },
                  {
                      "type": 0,
                      "name": "Stride index",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Compare Element index",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Filter Method index",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Compare to",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 3,
                      "name": "Result"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "Stride index",
                      "text": "the type of the array (Array3, Array2, ...)"
                  },
                  {
                      "name": "Compare Element index",
                      "text": "which element to compare (see stride)"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1642852079169,
          "exampleProjectId": "Z2dVoX",
          "shortName": "FilterArray",
          "hasScreenshot": true,
          "namespace": "Ops.Array",
          "shortNameDisplay": "FilterArray",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Array.FilterArray",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Array.FilterValidArray",
          "content": "",
          "attachmentFiles": [],
          "summary": "Filter valid arrays",
          "id": "f2669593-eb06-48a6-b94c-4bc243747ee1",
          "layout": {
              "portsIn": [
                  {
                      "type": 3,
                      "name": "Array"
                  },
                  {
                      "type": 0,
                      "name": "Invalid when length is 0",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 3,
                      "name": "Last Valid Array"
                  },
                  {
                      "type": 0,
                      "name": "Is Valid",
                      "subType": "boolean"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1587048972966,
          "exampleProjectId": "",
          "shortName": "FilterValidArray",
          "hasScreenshot": false,
          "namespace": "Ops.Array",
          "shortNameDisplay": "FilterValidArray",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Array.FilterValidArray",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Array.FlattenArray",
          "content": "<p>e.g. <code>[1,2,[3,4,5,[6,7]]]</code> will become <code>[1,2,3,4,5,6,7]</code></p>\n",
          "attachmentFiles": [],
          "summary": "Creates a new array with all sub-array selements concatenated into it",
          "id": "bd5f43cf-7a69-4bff-85b3-08df62b899b4",
          "layout": {
              "portsIn": [
                  {
                      "type": "3",
                      "name": "Array"
                  }
              ],
              "portsOut": [
                  {
                      "type": "3",
                      "name": "Result"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1570640962169,
          "exampleProjectId": "x6HFeT",
          "shortName": "FlattenArray",
          "hasScreenshot": true,
          "namespace": "Ops.Array",
          "shortNameDisplay": "FlattenArray",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Array.FlattenArray",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Array.FreezeArray",
          "content": "",
          "attachmentFiles": [],
          "summary": "capture the current input and copy it to the output, even after a reload",
          "id": "340fb9e2-27ab-47f0-b3cc-2ef001f485c5",
          "layout": {
              "portsIn": [
                  {
                      "type": 3,
                      "name": "Number"
                  },
                  {
                      "type": 1,
                      "name": "Button"
                  }
              ],
              "portsOut": [
                  {
                      "type": 3,
                      "name": "Frozen Array"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "Number",
                      "text": "current input value"
                  },
                  {
                      "name": "Button",
                      "text": "freeze the output value"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1644069519267,
          "exampleProjectId": "MuPepX",
          "shortName": "FreezeArray",
          "hasScreenshot": true,
          "namespace": "Ops.Array",
          "shortNameDisplay": "FreezeArray",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Array.FreezeArray",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Array.GateArray_v2",
          "content": "",
          "attachmentFiles": [],
          "summary": "Only allows an array through if pass through is true",
          "id": "e28a489c-46b6-4279-928c-6b0cbaaaae2a",
          "layout": {
              "portsIn": [
                  {
                      "type": 3,
                      "name": "Array in"
                  },
                  {
                      "type": 0,
                      "name": "Pass Through",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "When False index",
                      "values": [
                          "keep last array",
                          "null"
                      ],
                      "subType": "integer"
                  }
              ],
              "portsOut": [
                  {
                      "type": 3,
                      "name": "Array Out"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [
              "gT1jXP5As9A"
          ],
          "created": 1600364124077,
          "exampleProjectId": "gOaDAH",
          "shortName": "GateArray_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Array",
          "shortNameDisplay": "GateArray",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Array.GateArray",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Array.GateArray_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Array.GetValuesFromArrayOfObjects",
          "content": "<p>example:</p>\n<pre><code>[\n {a:1,b:2,c:3},\n {a:4,b:5,c:6},\n {a:7,b:8,c:9},\n]\n</code></pre>\n<p>Key <code>a</code> would output <code>1,4,7</code>\nKey <code>b</code> would output <code>2,5,8</code>\nKey <code>c</code> would output <code>3,6,9</code></p>\n",
          "attachmentFiles": [],
          "summary": "Get an array of values by key of objects in an array",
          "id": "e068629a-7963-48b0-853f-a89348d03654",
          "layout": {
              "portsIn": [
                  {
                      "type": 3,
                      "name": "Array"
                  },
                  {
                      "type": 5,
                      "name": "Key"
                  },
                  {
                      "type": 0,
                      "name": "Numbers Only",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Remove empty/invalid",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 3,
                      "name": "Result"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1571058175202,
          "exampleProjectId": "KQGGeT",
          "shortName": "GetValuesFromArrayOfObjects",
          "hasScreenshot": false,
          "namespace": "Ops.Array",
          "shortNameDisplay": "GetValuesFromArrayOfObjects",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Array.GetValuesFromArrayOfObjects",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Array.HSBtoRGBArray",
          "content": "<p>Create a 4-tuple RGBA array from 4 array inputs.</p>\n",
          "attachmentFiles": [],
          "summary": "generates RGBA array from up to 4 arrays (HSBA)",
          "id": "0f552671-7431-4031-97e3-211f2cf9f111",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Trigger Input"
                  },
                  {
                      "type": 3,
                      "name": "In Hue Array"
                  },
                  {
                      "type": 3,
                      "name": "In Saturation Array"
                  },
                  {
                      "type": 3,
                      "name": "In Brightness Array"
                  },
                  {
                      "type": 3,
                      "name": "In Alpha Array"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Trigger Output"
                  },
                  {
                      "type": 3,
                      "name": "Result Array"
                  },
                  {
                      "type": 0,
                      "name": "Array Length",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "RGBA Tuple Length",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "simod",
          "docs": {
              "ports": [
                  {
                      "name": "Trigger Input",
                      "text": "Trigger input"
                  },
                  {
                      "name": "In Hue Array",
                      "text": "Hue In Array with range`[0, 1]`"
                  },
                  {
                      "name": "In Saturation Array",
                      "text": "Saturation In Array with range`[0, 1]` - if not connected, default output value is `0.5`"
                  },
                  {
                      "name": "In Brightness Array",
                      "text": "Brightness In Array with range`[0, 1]` - if not connected, default output value is `1`"
                  },
                  {
                      "name": "In Alpha Array",
                      "text": "Alpha/Opacity In Array with range`[0, 1]` - if not connected, default output value is `1`"
                  },
                  {
                      "name": "Trigger Output",
                      "text": "Trigger output"
                  },
                  {
                      "name": "Result Array",
                      "text": "Resulting RGBA array output"
                  },
                  {
                      "name": "Array Length",
                      "text": "Total length of the array"
                  },
                  {
                      "name": "RGBA Tuple Length",
                      "text": "amount of RGBA tuples"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1573749804856,
          "exampleProjectId": "jFyRM-",
          "shortName": "HSBtoRGBArray",
          "hasScreenshot": true,
          "namespace": "Ops.Array",
          "shortNameDisplay": "HSBtoRGBArray",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Array.HSBtoRGBArray",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Array.InfoArray",
          "content": "",
          "attachmentFiles": [],
          "summary": "get the min, max and average value from an array",
          "id": "1db230c8-212f-4679-87d6-3531659363da",
          "layout": {
              "portsIn": [
                  {
                      "type": 3,
                      "name": "Array"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "Min",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Max",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Average",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "Array",
                      "text": "Array in"
                  },
                  {
                      "name": "Min",
                      "text": "The lowest value in the array "
                  },
                  {
                      "name": "Max",
                      "text": "The largest value in the array"
                  },
                  {
                      "name": "Average",
                      "text": "The average value of all numbers in the array"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1542698747467,
          "exampleProjectId": "qySZQx",
          "shortName": "InfoArray",
          "hasScreenshot": true,
          "namespace": "Ops.Array",
          "shortNameDisplay": "InfoArray",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Array.InfoArray",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Array.InfoArray2",
          "content": "",
          "attachmentFiles": [],
          "summary": "min,max and average values of an array2",
          "id": "0ea5fb62-94e7-4a1b-928f-bdcab373c022",
          "layout": {
              "portsIn": [
                  {
                      "type": 3,
                      "name": "Array"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "Num Items",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Min X",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Max X",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Average X",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Min Y",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Max Y",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Average Y",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1571059160676,
          "exampleProjectId": "",
          "shortName": "InfoArray2",
          "hasScreenshot": false,
          "namespace": "Ops.Array",
          "shortNameDisplay": "InfoArray2",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Array.InfoArray2",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Array.InfoArray3",
          "content": "<p>Check the example file <a href=\"/op/Ops.Array.InfoArray\" target=\"_blank\">Ops.Array.InfoArray</a> for a simplified version of infoArray3</p>\n",
          "attachmentFiles": [],
          "summary": "min,max and average values of an array3",
          "id": "e2ace702-eed6-4b40-86f6-cea716ba8579",
          "layout": {
              "portsIn": [
                  {
                      "type": 3,
                      "name": "Array"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "Num Items",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Min X",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Max X",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Average X",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Min Y",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Max Y",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Average Y",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Min Z",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Max Z",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Average Z",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "Num Items",
                      "text": "Number of items in the array"
                  },
                  {
                      "name": "Min X",
                      "text": "Minimum value of the x component in the array"
                  },
                  {
                      "name": "Max X",
                      "text": "Maximum value of the x component in the array"
                  },
                  {
                      "name": "Average X",
                      "text": "Average of all the values in the x component"
                  },
                  {
                      "name": "Min Y",
                      "text": "Minimum value of the y component in the array"
                  },
                  {
                      "name": "Max Y",
                      "text": "Maximum value of the y component in the array"
                  },
                  {
                      "name": "Average Y",
                      "text": "Average of all the values in the y component"
                  },
                  {
                      "name": "Min Z",
                      "text": "Minimum value of the z component in the array"
                  },
                  {
                      "name": "Max Z",
                      "text": "Maximum value of the z component in the array"
                  },
                  {
                      "name": "Average Z",
                      "text": "Average of all the values in the z component"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1513154928260,
          "exampleProjectId": "tg7cRx",
          "shortName": "InfoArray3",
          "hasScreenshot": true,
          "namespace": "Ops.Array",
          "shortNameDisplay": "InfoArray3",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Array.InfoArray3",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Array.InterpolateArrays",
          "content": "<p>interpolates between every number in the array.</p>\n<p>for example:</p>\n<p>[0,0,0,0] and [1,1,1,1] with a <code>perc</code> of 0.5 results in [0.5,0.5,0.5,0.5]</p>\n",
          "attachmentFiles": [],
          "summary": "interpolate between two arrays (lerp) - linear interpolation",
          "id": "09296117-7312-4f80-982b-7b4a81d22cf8",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Exe"
                  },
                  {
                      "type": 3,
                      "name": "Array 1"
                  },
                  {
                      "type": 3,
                      "name": "Array 2"
                  },
                  {
                      "type": 0,
                      "name": "perc",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  },
                  {
                      "type": 3,
                      "name": "Result"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "Exe",
                      "text": "Trigger the op"
                  },
                  {
                      "name": "Array 1",
                      "text": "Array 1 in"
                  },
                  {
                      "name": "Array 2",
                      "text": "array 2 in"
                  },
                  {
                      "name": "perc",
                      "text": "Interpolation value between both arrays. Range `0-1`"
                  },
                  {
                      "name": "Next",
                      "text": "Trigger out"
                  },
                  {
                      "name": "Result",
                      "text": "The interpolated array out"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1513177459868,
          "exampleProjectId": "qU2GB3",
          "shortName": "InterpolateArrays",
          "hasScreenshot": true,
          "namespace": "Ops.Array",
          "shortNameDisplay": "InterpolateArrays",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Array.InterpolateArrays",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Array.InterpolateArraysRange",
          "content": "",
          "attachmentFiles": [],
          "summary": "interpolate between two arrays, only a few numbers at the same time",
          "id": "f89f5664-7cfa-4598-b09c-e4320b588b45",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Exe"
                  },
                  {
                      "type": 3,
                      "name": "Array 1"
                  },
                  {
                      "type": 3,
                      "name": "Array 2"
                  },
                  {
                      "type": 0,
                      "name": "Pos",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Width",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Easing index",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Reverse",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  },
                  {
                      "type": 3,
                      "name": "Result"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1518451074145,
          "exampleProjectId": "3GIOe6",
          "shortName": "InterpolateArraysRange",
          "hasScreenshot": true,
          "namespace": "Ops.Array",
          "shortNameDisplay": "InterpolateArraysRange",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Array.InterpolateArraysRange",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Array.InterpolateNumbersArray",
          "content": "<p>Can be used to create controllable animation sequences.</p>\n<p>Use the index position to interpolate between values in an array.\nAn array with the values\n10.0 , 0.0 , 20.0 , 5.0\nindex 0.25 returns \n7.5\nindex 3 returns \n5.0</p>\n",
          "attachmentFiles": [],
          "summary": "interpolate between all values of an array",
          "id": "d0894a6b-f921-4542-aafc-3f1b21615a44",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "Index Position",
                      "subType": "number"
                  },
                  {
                      "type": 3,
                      "name": "Array"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "result",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "andro",
          "docs": {
              "ports": [
                  {
                      "name": "Index Position",
                      "text": "Index position of array - integers return a non interpolated number"
                  },
                  {
                      "name": "Array",
                      "text": "Array in"
                  },
                  {
                      "name": "result",
                      "text": "Number out"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1562762828530,
          "exampleProjectId": "dbUc-L",
          "shortName": "InterpolateNumbersArray",
          "hasScreenshot": true,
          "namespace": "Ops.Array",
          "shortNameDisplay": "InterpolateNumbersArray",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Array.InterpolateNumbersArray",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Array.InterpolateNumbersArray3",
          "content": "<p>e.g. <code>1.5</code> - interpolated XYZ values between index 1 and 2</p>\n",
          "attachmentFiles": [],
          "summary": "get interpolated values between the indices of an array3x",
          "id": "1feb4565-32c5-4fb9-b869-88502b461256",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "Index Position",
                      "subType": "number"
                  },
                  {
                      "type": 3,
                      "name": "Array"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "X",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Y",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Z",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "Index Position",
                      "text": "The lookup number which returns the interpolated value"
                  },
                  {
                      "name": "Array",
                      "text": "The array in "
                  },
                  {
                      "name": "X",
                      "text": "X component from lookup with 'index position'"
                  },
                  {
                      "name": "Y",
                      "text": "Y component from lookup with 'index position'"
                  },
                  {
                      "name": "Z",
                      "text": "Z component from lookup with 'index position'"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1519731691788,
          "exampleProjectId": "Oqy2n7",
          "shortName": "InterpolateNumbersArray3",
          "hasScreenshot": true,
          "namespace": "Ops.Array",
          "shortNameDisplay": "InterpolateNumbersArray3",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Array.InterpolateNumbersArray3",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Array.LissajouseSpline",
          "content": "",
          "attachmentFiles": [],
          "summary": "generate spline using lissajous formulas",
          "id": "b4be3f11-20ed-43a0-865d-2b88f0879a6f",
          "layout": {
              "portsIn": [
                  {
                      "type": "0",
                      "name": "Formula index",
                      "subType": "integer"
                  },
                  {
                      "type": "0",
                      "name": "A",
                      "subType": "integer"
                  },
                  {
                      "type": "0",
                      "name": "B",
                      "subType": "integer"
                  },
                  {
                      "type": "0",
                      "name": "C",
                      "subType": "integer"
                  },
                  {
                      "type": "0",
                      "name": "D",
                      "subType": "integer"
                  }
              ],
              "portsOut": [
                  {
                      "type": "3",
                      "name": "Result"
                  },
                  {
                      "type": "0",
                      "name": "Total points",
                      "subType": "number"
                  },
                  {
                      "type": "0",
                      "name": "Array length",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "Formula",
                      "text": "Pick 1 of 3 formulas"
                  },
                  {
                      "name": "A",
                      "text": "Frequency parameter A"
                  },
                  {
                      "name": "B",
                      "text": "Frequency parameter B"
                  },
                  {
                      "name": "C",
                      "text": "Frequency parameter C"
                  },
                  {
                      "name": "D",
                      "text": "Frequency parameter D"
                  },
                  {
                      "name": "Result",
                      "text": "ArrayOut"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1515970216234,
          "exampleProjectId": "Wa8TS3",
          "shortName": "LissajouseSpline",
          "hasScreenshot": true,
          "namespace": "Ops.Array",
          "shortNameDisplay": "LissajouseSpline",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Array.LissajouseSpline",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Array.LoopArray3",
          "content": "",
          "attachmentFiles": [],
          "summary": "makes the 1st and last point of an array the same, good for closing splines and shapes",
          "id": "9a911a46-af51-47c4-acb6-4f7ad026caab",
          "layout": {
              "portsIn": [
                  {
                      "type": 3,
                      "name": "Array in"
                  }
              ],
              "portsOut": [
                  {
                      "type": 3,
                      "name": "Array out"
                  }
              ]
          },
          "authorName": "andro",
          "docs": {
              "ports": [
                  {
                      "name": "Array in",
                      "text": "Array in"
                  },
                  {
                      "name": "Array out",
                      "text": "Looped array out"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1563287080906,
          "exampleProjectId": "-x_dxN",
          "shortName": "LoopArray3",
          "hasScreenshot": true,
          "namespace": "Ops.Array",
          "shortNameDisplay": "LoopArray3",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Array.LoopArray3",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Array.MapRangeArray",
          "content": "",
          "attachmentFiles": [],
          "summary": "Maps values in an Array from one range into another.",
          "id": "20f921bf-adc2-45fb-b387-834af4f5e19b",
          "layout": {
              "portsIn": [
                  {
                      "type": 3,
                      "name": "array"
                  },
                  {
                      "type": 0,
                      "name": "old min",
                      "group": "Input Range",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "old max",
                      "group": "Input Range",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "new min",
                      "group": "Output Range",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "new max",
                      "group": "Output Range",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Easing index",
                      "subType": "integer"
                  }
              ],
              "portsOut": [
                  {
                      "type": 3,
                      "name": "result"
                  }
              ]
          },
          "authorName": "stephan",
          "docs": {
              "ports": [
                  {
                      "name": "array",
                      "text": "the array of values you want to map"
                  },
                  {
                      "name": "old min",
                      "text": "The minimum of the old range"
                  },
                  {
                      "name": "old max",
                      "text": "The maximum of the old range"
                  },
                  {
                      "name": "new min",
                      "text": "The minimum of the new range"
                  },
                  {
                      "name": "new max",
                      "text": "The maximum of the new range"
                  },
                  {
                      "name": "result",
                      "text": "Array of newly mapped values"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [
              "SKYXdzHYwdI"
          ],
          "created": 1572450648277,
          "exampleProjectId": "ZQI6sU",
          "shortName": "MapRangeArray",
          "hasScreenshot": true,
          "namespace": "Ops.Array",
          "shortNameDisplay": "MapRangeArray",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Array.MapRangeArray",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Array.NumbersToArrayMultiPort",
          "content": "",
          "attachmentFiles": [],
          "summary": "Create an array from multiple number inputs",
          "id": "d63e564f-55bd-49fc-ae75-d20096f18b01",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "Numbers_0",
                      "group": "Numbers",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Numbers_1",
                      "uititle": "add port",
                      "group": "Numbers",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 3,
                      "name": "Result"
                  },
                  {
                      "type": 0,
                      "name": "Num Values",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1716805378771,
          "exampleProjectId": "mCTLrh",
          "shortName": "NumbersToArrayMultiPort",
          "hasScreenshot": true,
          "namespace": "Ops.Array",
          "shortNameDisplay": "NumbersToArrayMultiPort",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Array.NumbersToArrayMultiPort",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Array.PaletteLibrary",
          "content": "<p>500 palettes are stored in this op as one array.\nUse array chunk to extract a single palette with chunk size set to 5.\nFor example can be used with the palette texture op.</p>\n",
          "attachmentFiles": [],
          "summary": "Contains a collection of color palettes in groups of 5 in an array",
          "id": "a96020ac-0832-478e-bbb7-d6246d0eeedf",
          "layout": {
              "portsOut": [
                  {
                      "type": "3",
                      "name": "Palette Array out"
                  }
              ]
          },
          "authorName": "andro",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1566548812010,
          "exampleProjectId": "zpLrSP",
          "shortName": "PaletteLibrary",
          "hasScreenshot": true,
          "namespace": "Ops.Array",
          "shortNameDisplay": "PaletteLibrary",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Array.PaletteLibrary",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Array.PerlinArray",
          "content": "",
          "attachmentFiles": [],
          "summary": "Creates An array filled with Perlin noise values",
          "id": "ed55556e-f319-47cc-bce6-ea015b45650b",
          "layout": {
              "portsIn": [
                  {
                      "type": 3,
                      "name": "Array in X"
                  },
                  {
                      "type": 3,
                      "name": "Array time"
                  },
                  {
                      "type": 0,
                      "name": "Time in Y",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Seed 0-1",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Frequency",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 3,
                      "name": "Array out"
                  },
                  {
                      "type": 0,
                      "name": "Array length out",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "andro",
          "docs": {
              "ports": [
                  {
                      "name": "Array in X",
                      "text": "X domain"
                  },
                  {
                      "name": "Array time",
                      "text": "Time domain"
                  },
                  {
                      "name": "Time in Y",
                      "text": "Y domain"
                  },
                  {
                      "name": "Seed 0-1",
                      "text": "setting to 0 creates a different seed each time the patch is loaded - must be between `0 1`"
                  },
                  {
                      "name": "Frequency",
                      "text": "Noise frequency"
                  },
                  {
                      "name": "Array out",
                      "text": "Array out"
                  },
                  {
                      "name": "Array length out",
                      "text": "Length of array"
                  }
              ]
          },
          "hasExample": true,
          "libs": [
              "perlin.js"
          ],
          "youtubeids": [],
          "created": 1562316087824,
          "exampleProjectId": "Vm8fhL",
          "shortName": "PerlinArray",
          "hasScreenshot": true,
          "namespace": "Ops.Array",
          "shortNameDisplay": "PerlinArray",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Array.PerlinArray",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Array.Phyllotaxis",
          "content": "",
          "attachmentFiles": [],
          "summary": "coordinate generation like arrangement of leaves in some plants",
          "id": "312b5220-c0f9-4003-9072-e400f216251a",
          "layout": {
              "portsIn": [
                  {
                      "type": "1",
                      "name": "Render"
                  },
                  {
                      "type": "0",
                      "name": "Num",
                      "subType": "integer"
                  },
                  {
                      "type": "0",
                      "name": "Scale",
                      "subType": "number"
                  },
                  {
                      "type": "0",
                      "name": "Param",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": "3",
                      "name": "Coordinates"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1524565048864,
          "exampleProjectId": "1Pu9Tb",
          "shortName": "Phyllotaxis",
          "hasScreenshot": true,
          "namespace": "Ops.Array",
          "shortNameDisplay": "Phyllotaxis",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Array.Phyllotaxis",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Array.PointArray.Array3AreaRemove",
          "content": "",
          "attachmentFiles": [],
          "summary": "remove points from an array3 with different shapes",
          "id": "db93f8c7-6bad-467e-b38f-333e84838d1d",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "In Trigger"
                  },
                  {
                      "type": 3,
                      "name": "In Array"
                  },
                  {
                      "type": 0,
                      "name": "Mode index",
                      "group": "Settings",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Size",
                      "group": "Settings",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Invert",
                      "group": "Settings",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "X",
                      "group": "Position",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Y",
                      "group": "Position",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Z",
                      "group": "Position",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Out Trigger"
                  },
                  {
                      "type": 3,
                      "name": "Out Array"
                  },
                  {
                      "type": 0,
                      "name": "Array Length",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Out X",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Out Y",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Out Z",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "simod",
          "docs": {
              "ports": [
                  {
                      "name": "In Trigger",
                      "text": "trigger input"
                  },
                  {
                      "name": "In Array",
                      "text": "array input"
                  },
                  {
                      "name": "Mode index",
                      "text": "choose on of following removal modes: \"Sphere, Box, Axis X, Axis Y, Axis Z, Axis X Infinite, Axis Y Infinite, Axis Z Infinite\" "
                  },
                  {
                      "name": "Mode",
                      "text": "choose on of following removal modes: \"Sphere, Box, Axis X, Axis Y, Axis Z, Axis X Infinite, Axis Y Infinite, Axis Z Infinite\" "
                  },
                  {
                      "name": "Size",
                      "text": "size of the removal area"
                  },
                  {
                      "name": "Invert",
                      "text": "invert the removal area "
                  },
                  {
                      "name": "X",
                      "text": "x position"
                  },
                  {
                      "name": "Y",
                      "text": "y position"
                  },
                  {
                      "name": "Z",
                      "text": "z position"
                  },
                  {
                      "name": "Out Trigger",
                      "text": "trigger output"
                  },
                  {
                      "name": "Out Array",
                      "text": "array output with removed coordinates"
                  },
                  {
                      "name": "Array Length",
                      "text": "length of the new array"
                  },
                  {
                      "name": "Out X",
                      "text": "x position out"
                  },
                  {
                      "name": "Out Y",
                      "text": "y position out"
                  },
                  {
                      "name": "Out Z",
                      "text": "z position out"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1600853813835,
          "exampleProjectId": "sfikWi",
          "shortName": "Array3AreaRemove",
          "hasScreenshot": true,
          "namespace": "Ops.Array.PointArray",
          "shortNameDisplay": "Array3AreaRemove",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Array.PointArray.Array3AreaRemove",
                  "versionString": "",
                  "version": 0
              }
          ],
          "namespaceTitle": "Ops.Array.PointArray",
          "namespaceSummary": "process and manipulate collections (arrays) of data",
          "allowEdit": false
      },
      {
          "name": "Ops.Array.PointArray.Array3PointEditor",
          "content": "",
          "attachmentFiles": [],
          "summary": "visually edit positions in an array  of point coordinates",
          "id": "8c837c80-9d1d-4860-99b0-bd1aeac0a021",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Execute"
                  },
                  {
                      "type": 0,
                      "name": "Total Points",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Edit",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Index",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Copy From Index",
                      "group": "Copy",
                      "subType": "integer"
                  },
                  {
                      "type": 1,
                      "name": "Copy Coordinates",
                      "group": "Copy"
                  },
                  {
                      "type": 1,
                      "name": "Reset"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  },
                  {
                      "type": 3,
                      "name": "Coordinates"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1710851959386,
          "exampleProjectId": "2Bhet7",
          "shortName": "Array3PointEditor",
          "hasScreenshot": true,
          "namespace": "Ops.Array.PointArray",
          "shortNameDisplay": "Array3PointEditor",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Array.PointArray.Array3PointEditor",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false,
          "usedInProject": true
      },
      {
          "name": "Ops.Array.PointArray.Array3RepeatTransform",
          "content": "",
          "attachmentFiles": [],
          "summary": "Repeat an array by transforming it x times",
          "id": "28cd4fcb-1a9d-4c1d-a41c-67ac34bbd0a6",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Trigger"
                  },
                  {
                      "type": 3,
                      "name": "Array"
                  },
                  {
                      "type": 0,
                      "name": "Times",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Translate X",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Translate Y",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Translate Z",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Scale X",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Scale Y",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Scale Z",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Rotation X",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Rotation Y",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Rotation Z",
                      "subType": "number"
                  },
                  {
                      "type": 3,
                      "name": "Position Array"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  },
                  {
                      "type": 3,
                      "name": "Result"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1722164634125,
          "exampleProjectId": "9nSWVj",
          "shortName": "Array3RepeatTransform",
          "hasScreenshot": true,
          "namespace": "Ops.Array.PointArray",
          "shortNameDisplay": "Array3RepeatTransform",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Array.PointArray.Array3RepeatTransform",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Array.PointArray.Array3VectorDistance",
          "content": "<p>Returns a single number with the distance between each point from 2 arrays</p>\n",
          "attachmentFiles": [],
          "summary": "Returns the distance between 2 points from an array",
          "id": "d8f245ef-4639-4c76-aa87-b9101f666d9e",
          "layout": {
              "portsIn": [
                  {
                      "type": 3,
                      "name": "Array in 1"
                  },
                  {
                      "type": 3,
                      "name": "Array in 2"
                  }
              ],
              "portsOut": [
                  {
                      "type": 3,
                      "name": "Array out"
                  }
              ]
          },
          "authorName": "andro",
          "docs": {
              "ports": [
                  {
                      "name": "Array in 1",
                      "text": "Array in 1"
                  },
                  {
                      "name": "Array in 2",
                      "text": "Array in 2"
                  },
                  {
                      "name": "Array out",
                      "text": "Distance between each point"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1563379319924,
          "exampleProjectId": "Tbb8xN",
          "shortName": "Array3VectorDistance",
          "hasScreenshot": true,
          "namespace": "Ops.Array.PointArray",
          "shortNameDisplay": "Array3VectorDistance",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Array.PointArray.Array3VectorDistance",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Array.PointArray.ArraySpray",
          "content": "<p>Creates a kind of spray like effect which outputs 2 arrays for position and scale.</p>\n",
          "attachmentFiles": [],
          "summary": "Particle Spray simulation",
          "id": "27023519-9e88-4b85-9fcf-b316847e0df7",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "exe"
                  },
                  {
                      "type": 0,
                      "name": "time",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "num",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Size X",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Size Y",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Size Z",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "movement x",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "movement y",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "movement z",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Center X",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Center Y",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Center Z",
                      "subType": "boolean"
                  },
                  {
                      "type": 1,
                      "name": "Reset"
                  },
                  {
                      "type": 0,
                      "name": "lifetime",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Lifetime Minimum",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Trigger Out"
                  },
                  {
                      "type": 3,
                      "name": "Positions"
                  },
                  {
                      "type": 3,
                      "name": "Lifetime"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "exe",
                      "text": "Trigger in"
                  },
                  {
                      "name": "time",
                      "text": "Timer to animate the cubes movement"
                  },
                  {
                      "name": "num",
                      "text": "Array length/amount of particles"
                  },
                  {
                      "name": "Size X",
                      "text": "Size of the particle on the x axis"
                  },
                  {
                      "name": "Size Y",
                      "text": "Size of the particle on the y axis"
                  },
                  {
                      "name": "Size Z",
                      "text": "Size of the particle on the z axis"
                  },
                  {
                      "name": "movement x",
                      "text": "The direction to move the spray in on the x axis"
                  },
                  {
                      "name": "movement y",
                      "text": "The direction to move the spray in on the y axis"
                  },
                  {
                      "name": "movement z",
                      "text": "The direction to move the spray in on the z axis"
                  },
                  {
                      "name": "Reset",
                      "text": "Reset state"
                  },
                  {
                      "name": "lifetime",
                      "text": "Amount of time before a particle dies out and is reborn"
                  },
                  {
                      "name": "Lifetime Minimum",
                      "text": "Minimum lifetime of particle"
                  },
                  {
                      "name": "Trigger Out",
                      "text": "Trigger out"
                  },
                  {
                      "name": "Positions",
                      "text": "Positional array out"
                  },
                  {
                      "name": "Lifetime",
                      "text": "LifeTime array out"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1569418566706,
          "exampleProjectId": "hY5lAw",
          "shortName": "ArraySpray",
          "hasScreenshot": true,
          "namespace": "Ops.Array.PointArray",
          "shortNameDisplay": "ArraySpray",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Array.PointArray.ArraySpray",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Array.PointArray.CircularPoints_v2",
          "content": "",
          "attachmentFiles": [],
          "summary": "create arrays for circular shapes, helix,circle etc",
          "id": "5d2de367-c2b8-4702-abf0-b16bbeb22f37",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "Radius",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Round Segments",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Rounds",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Radius Add Round",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Radius Add Point",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Offset",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Point Offset XY",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Point Offset Z",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Offset rotation",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Plane index",
                      "values": [
                          "XY",
                          "XZ",
                          "YZ"
                      ],
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Loop",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Rotation Direction index",
                      "values": [
                          "Clockwise",
                          "Anticlockwise"
                      ],
                      "subType": "integer"
                  }
              ],
              "portsOut": [
                  {
                      "type": 3,
                      "name": "Points"
                  },
                  {
                      "type": 3,
                      "name": "Rotation"
                  },
                  {
                      "type": 0,
                      "name": "Total points",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Array lengths",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1667504163826,
          "exampleProjectId": "V34dYh",
          "shortName": "CircularPoints_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Array.PointArray",
          "shortNameDisplay": "CircularPoints",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Array.PointArray.CircularPoints",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Array.PointArray.CircularPoints_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Array.PointArray.FillPointArrayDuplicates",
          "content": "",
          "attachmentFiles": [],
          "summary": "fill a XYZ array with existing duplicate points until it reaches the length ",
          "id": "dae7416d-b130-487e-bdd3-ca5a18278d47",
          "layout": {
              "portsIn": [
                  {
                      "type": 3,
                      "name": "Array"
                  },
                  {
                      "type": 0,
                      "name": "Num Elements",
                      "subType": "integer"
                  },
                  {
                      "type": 1,
                      "name": "Calculate"
                  }
              ],
              "portsOut": [
                  {
                      "type": 3,
                      "name": "Result"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1548778392795,
          "exampleProjectId": "",
          "shortName": "FillPointArrayDuplicates",
          "hasScreenshot": false,
          "namespace": "Ops.Array.PointArray",
          "shortNameDisplay": "FillPointArrayDuplicates",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Array.PointArray.FillPointArrayDuplicates",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false,
          "usedInProject": true
      },
      {
          "name": "Ops.Array.PointArray.PointsCube",
          "content": "<p>Generates a 3d point field. Use the xyz parameters to define how points are created. \nAll num parameters must have at least a setting of 1 for this op to work.</p>\n",
          "attachmentFiles": [],
          "summary": "Generates a 3d point field with controllable amount of xyz points (was PointsField3d)",
          "id": "6030193b-089c-4565-a7b8-d837501ded52",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "num x",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "num y",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "num z",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "mul",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "center",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 3,
                      "name": "Array out"
                  },
                  {
                      "type": 0,
                      "name": "Total points",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Array length",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "andro",
          "docs": {
              "ports": [
                  {
                      "name": "num x",
                      "text": "Amount of points generated on the X axis"
                  },
                  {
                      "name": "num y",
                      "text": "Amount of points generated on the Y axis"
                  },
                  {
                      "name": "num z",
                      "text": "Amount of points generated on the Z axis"
                  },
                  {
                      "name": "mul",
                      "text": "Default 1. Amount of space between each point"
                  },
                  {
                      "name": "center",
                      "text": "If true the origin is the center, otherwise its from the starting corner"
                  },
                  {
                      "name": "Array out",
                      "text": "The pointfield out. XYZ array"
                  },
                  {
                      "name": "Total points",
                      "text": "Total amount of xyz points"
                  }
              ]
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [
              "tVphEMCXDb4"
          ],
          "created": 1552466843918,
          "exampleProjectId": "_SC2JB",
          "shortName": "PointsCube",
          "hasScreenshot": true,
          "namespace": "Ops.Array.PointArray",
          "shortNameDisplay": "PointsCube",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Array.PointArray.PointsCube",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Array.PointArray.PointsHexagonGrid",
          "content": "",
          "attachmentFiles": [],
          "summary": "generate coordinates for a hexagon grid, outputs array3x",
          "id": "989c4d70-8567-47f2-8df3-85c68d422107",
          "layout": {
              "portsIn": [
                  {
                      "type": "0",
                      "name": "Rows",
                      "group": "Dimensions",
                      "subType": "integer"
                  },
                  {
                      "type": "0",
                      "name": "Colums",
                      "group": "Dimensions",
                      "subType": "integer"
                  },
                  {
                      "type": "0",
                      "name": "Hex facing index",
                      "subType": "integer"
                  },
                  {
                      "type": "5",
                      "name": "Hex facing",
                      "group": "Orientation"
                  },
                  {
                      "type": "0",
                      "name": "Flip corners",
                      "group": "Orientation",
                      "subType": "boolean"
                  },
                  {
                      "type": "0",
                      "name": "Tile X offset",
                      "group": "Spacing",
                      "subType": "number"
                  },
                  {
                      "type": "0",
                      "name": "Tile Y offset",
                      "group": "Spacing",
                      "subType": "number"
                  },
                  {
                      "type": "0",
                      "name": "Multiplier",
                      "group": "Spacing",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": "3",
                      "name": "Array out"
                  }
              ]
          },
          "authorName": "andro",
          "docs": {
              "ports": [
                  {
                      "name": "Rows",
                      "text": "amount of rows"
                  },
                  {
                      "name": "Colums",
                      "text": "amount of columns"
                  },
                  {
                      "name": "Hex facing",
                      "text": "choose between pointy or topped facing"
                  },
                  {
                      "name": "Tile X offset",
                      "text": "offset hexagon points on x axis"
                  },
                  {
                      "name": "Tile Y offset",
                      "text": "offset hexagon points on y axis"
                  },
                  {
                      "name": "Multiplier",
                      "text": "scale both offsets"
                  },
                  {
                      "name": "Array out",
                      "text": "the resulting array with 3d points of a hexagon grid"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1602064299856,
          "exampleProjectId": "GLLdrn",
          "shortName": "PointsHexagonGrid",
          "hasScreenshot": true,
          "namespace": "Ops.Array.PointArray",
          "shortNameDisplay": "PointsHexagonGrid",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Array.PointArray.PointsHexagonGrid",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Array.PointArray.PointsPlane_v2",
          "content": "<p>Used to generate a field of points/2d array of 3d points.</p>\n",
          "attachmentFiles": [],
          "summary": "Generate coordinates for a rectangular field / grid of points",
          "id": "d453f898-17d4-4e2c-b8c7-7b7b34c0ff68",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "Rows",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Columns",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Width",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Height",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Row Offset",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Center",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 3,
                      "name": "Result"
                  },
                  {
                      "type": 0,
                      "name": "Total points",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Array length",
                      "subType": "number"
                  },
                  {
                      "type": 3,
                      "name": "Row Numbers"
                  },
                  {
                      "type": 3,
                      "name": "Column Numbers"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1599741475800,
          "exampleProjectId": "icchV5",
          "shortName": "PointsPlane_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Array.PointArray",
          "shortNameDisplay": "PointsPlane",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Array.PointArray.PointsPlane",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Array.PointArray.PointsPlane_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Array.PointArray.PointsRectangle_v2",
          "content": "",
          "attachmentFiles": [],
          "summary": "generate an array of XYZ coordinates of an rectangle",
          "id": "12b71b15-3d0b-45b6-b7fc-6204b5e4d94b",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "Line Strip",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Segments",
                      "group": "Size",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "width",
                      "group": "Size",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "height",
                      "group": "Size",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "border radius",
                      "group": "Size",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Loop",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Top Left",
                      "group": "Round Corner",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Top Right",
                      "group": "Round Corner",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Bottom Left",
                      "group": "Round Corner",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Bottom Right",
                      "group": "Round Corner",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 3,
                      "name": "Points"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1715182551624,
          "exampleProjectId": "l1KQN8",
          "shortName": "PointsRectangle_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Array.PointArray",
          "shortNameDisplay": "PointsRectangle",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Array.PointArray.PointsRectangle",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Array.PointArray.PointsRectangle_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Array.PointArray.PointsSphereRandom",
          "content": "<p>A point field of xyz coordinates is generated and mapped to a sphere with some randomness applied to the position.\nThe thickness of the sphere can also be altered.\nThere are also 3 different distribution modes.</p>\n",
          "attachmentFiles": [],
          "summary": "Generates a point field mapped to the surface of a sphere",
          "id": "1ea17de7-adad-4053-943a-4874bccf54e9",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "Amount of points",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Sphere size",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Random seed",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Random distance from sphere",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Distribution index",
                      "subType": "integer"
                  }
              ],
              "portsOut": [
                  {
                      "type": 3,
                      "name": "Array out"
                  },
                  {
                      "type": 0,
                      "name": "Total points",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Array length",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "andro",
          "docs": {
              "ports": [
                  {
                      "name": "Amount of points",
                      "text": "Amount of xyz coordinates generated"
                  },
                  {
                      "name": "Sphere size",
                      "text": "Size of the sphere to map to"
                  },
                  {
                      "name": "Random seed",
                      "text": "Seed number. 0 is always a different seed on reload"
                  },
                  {
                      "name": "Random distance from sphere",
                      "text": "Alters the random distance of the position from the sphere surface"
                  },
                  {
                      "name": "Distribution",
                      "text": "Distribution modes. Uniform - over the whole sphere. Poles - mainly at the top and bottom. Half - only half of the sphere generates points"
                  },
                  {
                      "name": "Array out",
                      "text": "The array/point field output"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1549533492983,
          "exampleProjectId": "yBeQUy",
          "shortName": "PointsSphereRandom",
          "hasScreenshot": true,
          "namespace": "Ops.Array.PointArray",
          "shortNameDisplay": "PointsSphereRandom",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Array.PointArray.PointsSphereRandom",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Array.PointArray.RedistributeSplinePoints",
          "content": "",
          "attachmentFiles": [],
          "summary": "recalculate a spline / change number of points of a spline",
          "id": "f17bae71-6047-49ea-af17-f7690e6e4d36",
          "layout": {
              "portsIn": [
                  {
                      "type": 3,
                      "name": "Array3x"
                  },
                  {
                      "type": 0,
                      "name": "Num Points",
                      "subType": "integer"
                  },
                  {
                      "type": 1,
                      "name": "Calculate"
                  },
                  {
                      "type": 0,
                      "name": "Normalized",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 3,
                      "name": "Result"
                  },
                  {
                      "type": 0,
                      "name": "Spline Length",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1544389546763,
          "exampleProjectId": "",
          "shortName": "RedistributeSplinePoints",
          "hasScreenshot": false,
          "namespace": "Ops.Array.PointArray",
          "shortNameDisplay": "RedistributeSplinePoints",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Array.PointArray.RedistributeSplinePoints",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Array.PointArray.SortArray3ByDistance",
          "content": "<p>Sorts an array with the following rules:</p>\n<ul>\n<li>Get the 1st point position</li>\n<li>Go through the entire array and calculate the distance of every point to the 1st</li>\n<li>Get the index which has the smallest distance</li>\n<li>this index now becomes the new previous point</li>\n<li>remove the previous position from sorting algorithm</li>\n</ul>\n<p>repeats until the entire array has been sorted.</p>\n",
          "attachmentFiles": [],
          "summary": "sort an array3, by the distance of each point to the previous point",
          "id": "d67e094b-0206-4ab6-b97f-98a1242b334c",
          "layout": {
              "portsIn": [
                  {
                      "type": 3,
                      "name": "Array"
                  }
              ],
              "portsOut": [
                  {
                      "type": 3,
                      "name": "Result"
                  },
                  {
                      "type": 3,
                      "name": "Result Index"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "Array",
                      "text": "Array in"
                  },
                  {
                      "name": "Result",
                      "text": "Sorted array out"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1542753950596,
          "exampleProjectId": "7C6DlJ",
          "shortName": "SortArray3ByDistance",
          "hasScreenshot": true,
          "namespace": "Ops.Array.PointArray",
          "shortNameDisplay": "SortArray3ByDistance",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Array.PointArray.SortArray3ByDistance",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Array.PointArray.SplinePositionAtDistanceArray3",
          "content": "",
          "attachmentFiles": [],
          "summary": "get position in array3/spline at distance from start",
          "id": "02100bb5-fe07-4c1b-8792-67f9add7afff",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Calculate"
                  },
                  {
                      "type": 3,
                      "name": "Array3x"
                  },
                  {
                      "type": 0,
                      "name": "Distance",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Normalized",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  },
                  {
                      "type": 0,
                      "name": "X",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Y",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Z",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Spline Length",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "Calculate",
                      "text": "Trigger in "
                  },
                  {
                      "name": "Array3x",
                      "text": "Array in"
                  },
                  {
                      "name": "Distance",
                      "text": "Point to lookup in the spline"
                  },
                  {
                      "name": "Normalized",
                      "text": "if true distance input is in the range 0-1"
                  },
                  {
                      "name": "Next",
                      "text": "Trigger out"
                  },
                  {
                      "name": "X",
                      "text": "X position - based upon point in the spline from the distance parameter"
                  },
                  {
                      "name": "Y",
                      "text": "Y position - based upon point in the spline from the distance parameter"
                  },
                  {
                      "name": "Z",
                      "text": "Z position - based upon point in the spline from the distance parameter"
                  },
                  {
                      "name": "Spline Length",
                      "text": "Total length of the spline"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1519999019701,
          "exampleProjectId": "6XhHR7",
          "shortName": "SplinePositionAtDistanceArray3",
          "hasScreenshot": true,
          "namespace": "Ops.Array.PointArray",
          "shortNameDisplay": "SplinePositionAtDistanceArray3",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Array.PointArray.SplinePositionAtDistanceArray3",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Array.PointArray.SubdivideArray3_v2",
          "content": "",
          "attachmentFiles": [],
          "summary": "For subdividing splines, smoothing lines using cubic bezier interpolation",
          "id": "d8bb5727-35e4-4e2a-999b-112ebc659720",
          "layout": {
              "portsIn": [
                  {
                      "type": 3,
                      "name": "Points"
                  },
                  {
                      "type": 0,
                      "name": "Num Subdivs",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Smooth",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Loop",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Bezier Start/End Points",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 3,
                      "name": "Result"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "Points",
                      "text": "The array in to subdivide"
                  },
                  {
                      "name": "Num Subdivs",
                      "text": "Amount of subdivisions applied to the array in"
                  },
                  {
                      "name": "Smooth",
                      "text": "Enable to smooth out differences in the array"
                  },
                  {
                      "name": "Result",
                      "text": "The subdivided array out"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1514999086269,
          "exampleProjectId": "uywtvc",
          "shortName": "SubdivideArray3_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Array.PointArray",
          "shortNameDisplay": "SubdivideArray3",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Array.PointArray.SubdivideArray3_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Array.PointArray.TransformArray3",
          "content": "",
          "attachmentFiles": [],
          "summary": "transform (translate,rotate,scale) positions in an array3x ",
          "id": "b18040d6-13d7-4f55-950f-3f95cafa4e90",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Transform"
                  },
                  {
                      "type": 3,
                      "name": "Array"
                  },
                  {
                      "type": 0,
                      "name": "Translate X",
                      "group": "Translation",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Translate Y",
                      "group": "Translation",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Translate Z",
                      "group": "Translation",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Scale X",
                      "group": "Scale",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Scale Y",
                      "group": "Scale",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Scale Z",
                      "group": "Scale",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Rotation X",
                      "group": "Rotation",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Rotation Y",
                      "group": "Rotation",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Rotation Z",
                      "group": "Rotation",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  },
                  {
                      "type": 3,
                      "name": "Result"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1517322111948,
          "exampleProjectId": "NenSet",
          "shortName": "TransformArray3",
          "hasScreenshot": true,
          "namespace": "Ops.Array.PointArray",
          "shortNameDisplay": "TransformArray3",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Array.PointArray.TransformArray3",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Array.RandomNumbersArray_v4",
          "content": "<p>This op lets you create an array of random values. You can choose between 1, 2, 3 or 4 dimensions. </p>\n<p>You can set min and max ranges per component!</p>\n<p>Example use cases:</p>\n<ol>\n<li>Mode AB: Create 2-dimensional coordinates <code>[x1, y1, x2, y2, z1, z2, ...]</code></li>\n<li>Mode ABC: Create 3-dimensional coordinates <code>[x1, y1, z1, x2, y2, z2, ...]</code></li>\n<li>Mode ABC: Create RGB values <code>[r1, g1, b1, r2, g2, b2, ...]</code></li>\n<li>Mode ABCD: Create RGBA values <code>[r1, g1, b1, a1, r2, g2, b2, a2, ...]</code></li>\n</ol>\n<p>Random seed of 0 will be different every page load</p>\n",
          "attachmentFiles": [],
          "summary": "create a random array of 1 to 4 dimensions",
          "id": "8a9fa2c6-c229-49a9-9dc8-247001539217",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "Num Values",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Mode index",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Random Seed ",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Integer",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Last == First",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Min A",
                      "group": "Value Range A",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Max A",
                      "group": "Value Range A",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Min B",
                      "group": "Value Range B",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Max B",
                      "group": "Value Range B",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Min C",
                      "group": "Value Range C",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Max C",
                      "group": "Value Range C",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Min D",
                      "group": "Value Range D",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Max D",
                      "group": "Value Range D",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 3,
                      "name": "Array Out"
                  },
                  {
                      "type": 0,
                      "name": "Chunks Amount",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Array length",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "simod",
          "docs": {
              "ports": [
                  {
                      "name": "Num Values",
                      "text": "amount of chunks "
                  },
                  {
                      "name": "Random Seed ",
                      "text": "seed for number distribution"
                  },
                  {
                      "name": "Integer",
                      "text": "Check to set values to integers"
                  },
                  {
                      "name": "Min A",
                      "text": "minimum value for A"
                  },
                  {
                      "name": "Max A",
                      "text": "maximum value for A"
                  },
                  {
                      "name": "Min B",
                      "text": "minimum value for B"
                  },
                  {
                      "name": "Max B",
                      "text": "maximum value for B"
                  },
                  {
                      "name": "Min C",
                      "text": "minimum value for C"
                  },
                  {
                      "name": "Max C",
                      "text": "maximum value for C"
                  },
                  {
                      "name": "Min D",
                      "text": "minimum value for D"
                  },
                  {
                      "name": "Max D",
                      "text": "maximum value for D"
                  },
                  {
                      "name": "Array Out",
                      "text": "Output of the constructed array"
                  },
                  {
                      "name": "Chunks Amount",
                      "text": "number of chunks "
                  },
                  {
                      "name": "Array length",
                      "text": "length of the array"
                  }
              ]
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1574160241045,
          "exampleProjectId": "jmm7N-",
          "shortName": "RandomNumbersArray_v4",
          "hasScreenshot": true,
          "namespace": "Ops.Array",
          "shortNameDisplay": "RandomNumbersArray",
          "version": 4,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Array.RandomNumbersArray",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Array.RandomNumbersArray_v2",
                  "versionString": "_v2",
                  "version": 2
              },
              {
                  "name": "Ops.Array.RandomNumbersArray_v3",
                  "versionString": "_v3",
                  "version": 3
              },
              {
                  "name": "Ops.Array.RandomNumbersArray_v4",
                  "versionString": "_v4",
                  "version": 4
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Array.RandomWordsArray",
          "content": "",
          "attachmentFiles": [],
          "summary": "Generates an array filled with random english words",
          "id": "98057c3a-f6ec-48a6-8e8a-4b8316a0dcf1",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "Random Seed",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Content index",
                      "subType": "integer"
                  }
              ],
              "portsOut": [
                  {
                      "type": 3,
                      "name": "Words"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "Words",
                      "text": "The array with random words"
                  }
              ]
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1518601905096,
          "exampleProjectId": "VHW78i",
          "shortName": "RandomWordsArray",
          "hasScreenshot": true,
          "namespace": "Ops.Array",
          "shortNameDisplay": "RandomWordsArray",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Array.RandomWordsArray",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Array.ReduceArray3_v3",
          "content": "<p>Xth Mode: Copies only every x point from an array</p>\n<p>Creates a new array which contains every xth value triplet of the source array, e.g. when your source array is [x1, y1, z1, x2, y2, z2, x3, y3, z3] and Every Xth Item is set to 2, the resulting array will be [x1, y1, z1, x3, y3, z3]</p>\n",
          "attachmentFiles": [],
          "summary": "Remove Points from an array, e.g. xth points, random, duplicates",
          "id": "5ba30060-2e42-4441-8b15-49279dc3bb67",
          "layout": {
              "portsIn": [
                  {
                      "type": 3,
                      "name": "Array"
                  },
                  {
                      "type": 0,
                      "name": "Remove index",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Every xth Item",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Threshold",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Seed",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 3,
                      "name": "Result Array"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "Array",
                      "text": "The source array"
                  },
                  {
                      "name": "Every xth Item",
                      "text": "When set to 1 source and result array will be identical, when set to 2 result array contains half the number of items of the source array and so on"
                  },
                  {
                      "name": "Result Array",
                      "text": "The new array containing only a subset of elements"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1588934644794,
          "exampleProjectId": "vgRDeT",
          "shortName": "ReduceArray3_v3",
          "hasScreenshot": true,
          "namespace": "Ops.Array",
          "shortNameDisplay": "ReduceArray3",
          "version": 3,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Array.ReduceArray3_v2",
                  "versionString": "_v2",
                  "version": 2
              },
              {
                  "name": "Ops.Array.ReduceArray3_v3",
                  "versionString": "_v3",
                  "version": 3
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Array.ReverseArray3",
          "content": "<p>E.g. <code>[x1, y1, z1, ..., x9, y9, z9]</code> —&gt; <code>[x9, y9, z9, ..., x1, y1, z1]</code>\nor: <code>[1, 2, 3, 4, 5, 6]</code> —&gt; <code>[4, 5, 6, 1, 2, 3]</code>\nIf the input array has a bad length (not dividable by 3), e.g. <code>[1, 2, 3, 4, 5, 6, 7]</code> (length:&nbsp;4) or <code>[1, 2, 3, 4, 5, 6, 7, 8]</code> (length: 5), the last values which cannot form a triple will be cut off, in both cases the reversed array would be <code>[4, 5, 6, 1, 2, 3]</code> (trimmed).</p>\n<p>If the array does not consist of triplets you probably want to use the regular <a href=\"/op/Ops.Array.ArrayReverse\" target=\"_blank\">Ops.Array.ArrayReverse</a> op.</p>\n",
          "attachmentFiles": [],
          "summary": "Reverses an array with value triplets [x, y, z, ...]",
          "id": "5b0feea0-06ee-4e9d-befb-41793ab4fa2c",
          "layout": {
              "portsIn": [
                  {
                      "type": 3,
                      "name": "Array"
                  }
              ],
              "portsOut": [
                  {
                      "type": 3,
                      "name": "Reversed Array"
                  }
              ]
          },
          "authorName": "tim",
          "docs": {
              "ports": [
                  {
                      "name": "Array",
                      "text": "The Array you want to reverse (containing triplets)"
                  },
                  {
                      "name": "Reversed Array",
                      "text": "The reversed Array"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1513090331836,
          "exampleProjectId": "1QJiVJ",
          "shortName": "ReverseArray3",
          "hasScreenshot": true,
          "namespace": "Ops.Array",
          "shortNameDisplay": "ReverseArray3",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Array.ReverseArray3",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false,
          "usedInProject": true
      },
      {
          "name": "Ops.Array.RingBuffer",
          "content": "<p>See also <a href=\"https://en.wikipedia.org/wiki/Circular_buffer\">wikipedia.org/wiki/Circular_buffer</a>.</p>\n",
          "attachmentFiles": [],
          "summary": "Array of fixed size, index is automatically incremented and restarts after reaching the end",
          "id": "38b77ea5-b44b-48b3-9433-09a83753a209",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "Value",
                      "subType": "number"
                  },
                  {
                      "type": 1,
                      "name": "Write"
                  },
                  {
                      "type": 0,
                      "name": "Length",
                      "subType": "integer"
                  },
                  {
                      "type": 1,
                      "name": "Reset Index"
                  }
              ],
              "portsOut": [
                  {
                      "type": 3,
                      "name": "Result"
                  },
                  {
                      "type": 0,
                      "name": "Index",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "Value",
                      "text": "The value to add"
                  },
                  {
                      "name": "Write",
                      "text": "Writes the value to the array"
                  },
                  {
                      "name": "Length",
                      "text": "The length of the array"
                  },
                  {
                      "name": "Reset Index",
                      "text": "Resets the index, so the next time `Write` is triggered it will write to the beginning of the buffer"
                  },
                  {
                      "name": "Result",
                      "text": "The output array"
                  },
                  {
                      "name": "Index",
                      "text": "The index of the last element which has been written to the buffer"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1519509686054,
          "exampleProjectId": "NwwS97",
          "shortName": "RingBuffer",
          "hasScreenshot": true,
          "namespace": "Ops.Array",
          "shortNameDisplay": "RingBuffer",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Array.RingBuffer",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Array.RotateArray",
          "content": "<p>An array of \n[0,1,2,3,4]\nrotated by 2 will result in\n[2,3,4,0,1]</p>\n",
          "attachmentFiles": [],
          "summary": "Shift array contents based upon rotate amount",
          "id": "e435d07b-8545-4469-befb-868510adcb76",
          "layout": {
              "portsIn": [
                  {
                      "type": 3,
                      "name": "Array in"
                  },
                  {
                      "type": 0,
                      "name": "Rotate amount",
                      "subType": "integer"
                  }
              ],
              "portsOut": [
                  {
                      "type": 3,
                      "name": "ArrayOut"
                  }
              ]
          },
          "authorName": "andro",
          "docs": {
              "ports": [
                  {
                      "name": "Array in",
                      "text": "Array in to modify"
                  },
                  {
                      "name": "Rotate amount",
                      "text": "Rotates array contents - accepts negative and positive numbers"
                  },
                  {
                      "name": "ArrayOut",
                      "text": "The modified array out"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1549535288470,
          "exampleProjectId": "r7Av7z",
          "shortName": "RotateArray",
          "hasScreenshot": true,
          "namespace": "Ops.Array",
          "shortNameDisplay": "RotateArray",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Array.RotateArray",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Array.RouteArray",
          "content": "<p>If no array is plugged into the default array port then the output is null</p>\n",
          "attachmentFiles": [],
          "summary": "Route an array to an output port",
          "id": "6597c011-7b2a-4d7c-93f5-40fcc2047cfe",
          "layout": {
              "portsIn": [
                  {
                      "type": "0",
                      "name": "index",
                      "subType": "integer"
                  },
                  {
                      "type": "3",
                      "name": "array in"
                  },
                  {
                      "type": "3",
                      "name": "default array"
                  }
              ],
              "portsOut": [
                  {
                      "type": "3",
                      "name": "Index 0 array"
                  },
                  {
                      "type": "3",
                      "name": "Index 1 array"
                  },
                  {
                      "type": "3",
                      "name": "Index 2 array"
                  },
                  {
                      "type": "3",
                      "name": "Index 3 array"
                  },
                  {
                      "type": "3",
                      "name": "Index 4 array"
                  },
                  {
                      "type": "3",
                      "name": "Index 5 array"
                  },
                  {
                      "type": "3",
                      "name": "Index 6 array"
                  },
                  {
                      "type": "3",
                      "name": "Index 7 array"
                  },
                  {
                      "type": "3",
                      "name": "Index 8 array"
                  },
                  {
                      "type": "3",
                      "name": "Index 9 array"
                  }
              ]
          },
          "authorName": "andro",
          "docs": {
              "ports": [
                  {
                      "name": "index",
                      "text": "Port to route to"
                  },
                  {
                      "name": "array in",
                      "text": "Array to route"
                  },
                  {
                      "name": "default array",
                      "text": "Default array of all other ports"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1587983880963,
          "exampleProjectId": "pDYxX8",
          "shortName": "RouteArray",
          "hasScreenshot": true,
          "namespace": "Ops.Array",
          "shortNameDisplay": "RouteArray",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Array.RouteArray",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Array.SetNumberArray",
          "content": "",
          "attachmentFiles": [],
          "summary": "Change the Number of an array at an index",
          "id": "ed39fd33-1b8d-4d04-a44d-4a22e4477a0a",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "exe"
                  },
                  {
                      "type": 3,
                      "name": "array"
                  },
                  {
                      "type": 0,
                      "name": "index",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "value",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  },
                  {
                      "type": 3,
                      "name": "values"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "exe",
                      "text": "Trigger in"
                  },
                  {
                      "name": "array",
                      "text": "Array in"
                  },
                  {
                      "name": "index",
                      "text": "Index to modify"
                  },
                  {
                      "name": "value",
                      "text": "Number in - changes index to this number"
                  },
                  {
                      "name": "values",
                      "text": "Array out"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1509640177213,
          "exampleProjectId": "WRrXSn",
          "shortName": "SetNumberArray",
          "hasScreenshot": true,
          "namespace": "Ops.Array",
          "shortNameDisplay": "SetNumberArray",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Array.SetNumberArray",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Array.SetNumbersArray3",
          "content": "",
          "attachmentFiles": [],
          "summary": "set three values at position index in an array",
          "id": "c3b2d0c9-0aa5-4605-948a-a53784fa8f1a",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "exe"
                  },
                  {
                      "type": 3,
                      "name": "array"
                  },
                  {
                      "type": 0,
                      "name": "index",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Value 1",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Value 2",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Value 3",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 3,
                      "name": "values"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "exe",
                      "text": "Trigger in "
                  },
                  {
                      "name": "array",
                      "text": "Array in "
                  },
                  {
                      "name": "index",
                      "text": "Index to change"
                  },
                  {
                      "name": "Value 1",
                      "text": "Value 1 to change at index"
                  },
                  {
                      "name": "Value 2",
                      "text": "Value 2 to change at index"
                  },
                  {
                      "name": "Value 3",
                      "text": "Value 3 to change at index"
                  },
                  {
                      "name": "values",
                      "text": "Array out"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1519813558455,
          "exampleProjectId": "El3nlJ",
          "shortName": "SetNumbersArray3",
          "hasScreenshot": true,
          "namespace": "Ops.Array",
          "shortNameDisplay": "SetNumbersArray3",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Array.SetNumbersArray3",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Array.ShuffleArray3_v3",
          "content": "<p>Shuffles a triplet array based upon a random seed.</p>\n<p>e.g. <code>0,0,0,1,1,1,2,2,2</code> could become <code>1,1,1,2,2,2,0,0,0</code></p>\n",
          "attachmentFiles": [],
          "summary": "Shuffles/Randomizes the order of an array of triplets",
          "id": "4b0e42bf-380b-4504-8857-08e1d451df07",
          "layout": {
              "portsIn": [
                  {
                      "type": 3,
                      "name": "Array3"
                  },
                  {
                      "type": 0,
                      "name": "Seed",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 3,
                      "name": "Result"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1711377098200,
          "exampleProjectId": "tbdwsh",
          "shortName": "ShuffleArray3_v3",
          "hasScreenshot": true,
          "namespace": "Ops.Array",
          "shortNameDisplay": "ShuffleArray3",
          "version": 3,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Array.ShuffleArray3",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Array.ShuffleArray3_v2",
                  "versionString": "_v2",
                  "version": 2
              },
              {
                  "name": "Ops.Array.ShuffleArray3_v3",
                  "versionString": "_v3",
                  "version": 3
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Array.ShuffleArray_v3",
          "content": "",
          "attachmentFiles": [],
          "summary": "Randomizes the order of elements inside an array",
          "id": "b4d68c30-1546-4812-8f5a-9ad04b4e90b7",
          "layout": {
              "portsIn": [
                  {
                      "type": 3,
                      "name": "Array3"
                  },
                  {
                      "type": 0,
                      "name": "Seed",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 3,
                      "name": "Result"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1711376925107,
          "exampleProjectId": "doUssh",
          "shortName": "ShuffleArray_v3",
          "hasScreenshot": true,
          "namespace": "Ops.Array",
          "shortNameDisplay": "ShuffleArray",
          "version": 3,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Array.ShuffleArray",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Array.ShuffleArray_v2",
                  "versionString": "_v2",
                  "version": 2
              },
              {
                  "name": "Ops.Array.ShuffleArray_v3",
                  "versionString": "_v3",
                  "version": 3
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Array.SimplexArray",
          "content": "",
          "attachmentFiles": [],
          "summary": "Creates An array filled with Simplex noise values (Range: -1, 1)",
          "id": "094af2fe-c511-4c89-b384-4cc7c4c7b626",
          "layout": {
              "portsIn": [
                  {
                      "type": 3,
                      "name": "Array in X "
                  },
                  {
                      "type": 3,
                      "name": "Array time"
                  },
                  {
                      "type": 0,
                      "name": "Time in Y",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Seed 0-1",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Frequency",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 3,
                      "name": "Array out"
                  },
                  {
                      "type": 0,
                      "name": "Array length out",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "andro",
          "docs": {
              "ports": [
                  {
                      "name": "Array in X ",
                      "text": "X domain"
                  },
                  {
                      "name": "Array time",
                      "text": "Time domain"
                  },
                  {
                      "name": "Time in Y",
                      "text": "Y domain"
                  },
                  {
                      "name": "Seed 0-1",
                      "text": "setting to 0 creates a different seed each time the patch is loaded - must be between `0 1`"
                  },
                  {
                      "name": "Frequency",
                      "text": "Noise frequency"
                  },
                  {
                      "name": "Array out",
                      "text": "Array out"
                  }
              ]
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [
              "perlin.js"
          ],
          "youtubeids": [],
          "created": 1562317126233,
          "exampleProjectId": "rNAlhL",
          "shortName": "SimplexArray",
          "hasScreenshot": true,
          "namespace": "Ops.Array",
          "shortNameDisplay": "SimplexArray",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Array.SimplexArray",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Array.SmoothArray",
          "content": "<p>Use this op to smoothly interpolate between differences in the values of an array.\nIt has two modes which can be selected with the <code>separate inc/dec</code> option.</p>\n<p>One mode applies the same smooth factor to values which increase or decrease.\nThe other mode allows separate control over the smooth factor for increasing or decreasing values.</p>\n",
          "attachmentFiles": [],
          "summary": "Smooths out changes in values of an array",
          "id": "8fd2ed9b-02e5-4349-b7bc-6665ca240ffa",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Execute"
                  },
                  {
                      "type": 3,
                      "name": "Array In"
                  },
                  {
                      "type": 0,
                      "name": "Separate inc/dec",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Inc factor",
                      "uititle": "Inc factor",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Dec factor",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  },
                  {
                      "type": 3,
                      "name": "Array Out"
                  }
              ]
          },
          "authorName": "andro",
          "docs": {
              "ports": [
                  {
                      "name": "Array In",
                      "text": "The array to interpolate"
                  },
                  {
                      "name": "Next",
                      "text": "Trigger out"
                  },
                  {
                      "name": "Array Out",
                      "text": "Interpolated array"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1561449111438,
          "exampleProjectId": "BgtGZK",
          "shortName": "SmoothArray",
          "hasScreenshot": true,
          "namespace": "Ops.Array",
          "shortNameDisplay": "SmoothArray",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Array.SmoothArray",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Array.SortArray",
          "content": "",
          "attachmentFiles": [],
          "summary": "Sorts an array of numbers with one of two modes - ascending or descending",
          "id": "9ab49d2c-b4e4-4fc2-9e6e-8e664e094369",
          "layout": {
              "portsIn": [
                  {
                      "type": 3,
                      "name": "Array to sort"
                  },
                  {
                      "type": 0,
                      "name": "Sorting mode index",
                      "values": [
                          "Sort ascending",
                          "Sort descending"
                      ],
                      "subType": "integer"
                  }
              ],
              "portsOut": [
                  {
                      "type": 3,
                      "name": "Sorted array"
                  }
              ]
          },
          "authorName": "andro",
          "docs": {
              "ports": [
                  {
                      "name": "Array to sort",
                      "text": "Array in"
                  },
                  {
                      "name": "Sorting mode",
                      "text": "Sorting mode. Ascending or descending"
                  },
                  {
                      "name": "Sorted array",
                      "text": "Sorted array out"
                  }
              ]
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1561021084385,
          "exampleProjectId": "M2f7RJ",
          "shortName": "SortArray",
          "hasScreenshot": true,
          "namespace": "Ops.Array",
          "shortNameDisplay": "SortArray",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Array.SortArray",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Array.SortArray3",
          "content": "<p>If we have an array with the following values:\n<code>[ 4,1,2, 3,8,8, 1,2,3 ]</code></p>\n<p>And  pick the x component to sort the triplets by.</p>\n<p>The new array would become\n<code>[ 1,2,3, 3,8,8, 4,1,2 ]</code></p>\n",
          "attachmentFiles": [],
          "summary": "Sorts an array with the lowest values of the selected component.",
          "id": "b0fbc366-09a8-4695-87b3-5946210bf722",
          "layout": {
              "portsIn": [
                  {
                      "type": 3,
                      "name": "Array"
                  },
                  {
                      "type": 0,
                      "name": "What index",
                      "subType": "integer"
                  }
              ],
              "portsOut": [
                  {
                      "type": 3,
                      "name": "Result"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "Array",
                      "text": "The array3 to sort"
                  },
                  {
                      "name": "What",
                      "text": "What to sort the array by – `x` (the first element of the triplet), `y` (the second element), `z` (the third element) or `xyz` (sum of all three values together)"
                  },
                  {
                      "name": "Result",
                      "text": "The sorted array (new array)"
                  }
              ]
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1513100341975,
          "exampleProjectId": "QS8qVJ",
          "shortName": "SortArray3",
          "hasScreenshot": true,
          "namespace": "Ops.Array",
          "shortNameDisplay": "SortArray3",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Array.SortArray3",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Array.SortArrayWithIndices_v2",
          "content": "",
          "attachmentFiles": [],
          "summary": "Sorts an array of numbers and also get sorted indices ",
          "id": "92555a62-b644-4bc5-9242-8eaa741965e3",
          "layout": {
              "portsIn": [
                  {
                      "type": 3,
                      "name": "Array to sort"
                  },
                  {
                      "type": 0,
                      "name": "Sorting mode index",
                      "subType": "integer"
                  }
              ],
              "portsOut": [
                  {
                      "type": 3,
                      "name": "Sorted array"
                  },
                  {
                      "type": 3,
                      "name": "Sorted Indices"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "Array to sort",
                      "text": "Array in"
                  },
                  {
                      "name": "Sorting mode",
                      "text": "Sorting mode. Ascending or descending"
                  },
                  {
                      "name": "Sorted array",
                      "text": "Sorted array out"
                  }
              ]
          },
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1683713842635,
          "exampleProjectId": "",
          "shortName": "SortArrayWithIndices_v2",
          "hasScreenshot": false,
          "namespace": "Ops.Array",
          "shortNameDisplay": "SortArrayWithIndices",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Array.SortArrayWithIndices",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Array.SortArrayWithIndices_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Array.SplineLengthArray3",
          "content": "",
          "attachmentFiles": [],
          "summary": "Returns a number with the total distance between the points/items in an array3",
          "id": "894db700-f220-427d-99fe-553db0a60034",
          "layout": {
              "portsIn": [
                  {
                      "type": "3",
                      "name": "Array3x"
                  },
                  {
                      "type": "1",
                      "name": "Calculate"
                  }
              ],
              "portsOut": [
                  {
                      "type": "0",
                      "name": "Length",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "Array3x",
                      "text": "The array in that is analysed for it's length"
                  },
                  {
                      "name": "Calculate",
                      "text": "Trigger the op"
                  },
                  {
                      "name": "Length",
                      "text": "Total length of the spline points from the array returned as a single number"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1519997721513,
          "exampleProjectId": "uOzMH7",
          "shortName": "SplineLengthArray3",
          "hasScreenshot": true,
          "namespace": "Ops.Array",
          "shortNameDisplay": "SplineLengthArray3",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Array.SplineLengthArray3",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Array.SplinesToLineStripArray",
          "content": "<p>input format is:\n<code>[[x1,y1,z1,x2,y2,z2,x3,y3,z3],[x4,y4,z4,x5,y5,z5,x6,y7,z7]]</code></p>\n<p>output would be:</p>\n<p><code>[x1,y1,z1,x2,y2,z2,x2,y2,z2,x3,y3,z3,x4,y4,z4,x5,y5,z5,x5,y5,z5,x6,y6,z6]</code></p>\n<p>when connected to simplespline this will draw 2 lines, each consting of 3 points ( in one draw call)</p>\n",
          "attachmentFiles": [],
          "summary": "convert an array of splines to one \"line stripped\" array",
          "id": "0877ac11-4ebc-484c-aa10-276040756d0a",
          "layout": {
              "portsIn": [
                  {
                      "type": 3,
                      "name": "Array"
                  }
              ],
              "portsOut": [
                  {
                      "type": 3,
                      "name": "Result"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "Array",
                      "text": "Array in"
                  },
                  {
                      "name": "Result",
                      "text": "Array out"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1573761684200,
          "exampleProjectId": "_UiSmX",
          "shortName": "SplinesToLineStripArray",
          "hasScreenshot": true,
          "namespace": "Ops.Array",
          "shortNameDisplay": "SplinesToLineStripArray",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Array.SplinesToLineStripArray",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Array.StringToArray_v2",
          "content": "<p>Let’s you enter multiple values as an array in the editor. The result can then be used by e.g. <a href=\"/op/Ops.Array.ArrayGetValue\" target=\"_blank\">Ops.Array.ArrayGetValue</a>.</p>\n",
          "attachmentFiles": [],
          "summary": "Parse a string into an array (create, split string, stringToArray)",
          "id": "c974de41-4ce4-4432-b94d-724741109c71",
          "layout": {
              "portsIn": [
                  {
                      "type": 5,
                      "name": "text"
                  },
                  {
                      "type": 5,
                      "name": "separator"
                  },
                  {
                      "type": 0,
                      "name": "Numbers",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Trim",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Split Lines",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 3,
                      "name": "array"
                  },
                  {
                      "type": 1,
                      "name": "Parsed"
                  },
                  {
                      "type": 0,
                      "name": "length",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "text",
                      "text": "The array-data you want to use, e.g. `100,200,300`"
                  },
                  {
                      "name": "separator",
                      "text": "The separator to use, e.g. `,` (comma) when your text is `foo,bar,baz`"
                  },
                  {
                      "name": "Numbers",
                      "text": "If set, the values inside the array will be interpreted as numbers (not strings)"
                  },
                  {
                      "name": "Parsed",
                      "text": "Triggers once the array has been parsed"
                  },
                  {
                      "name": "array",
                      "text": "The parsed array"
                  },
                  {
                      "name": "length",
                      "text": "The number of elements in the resulting array"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [
              "Y3qX41TB0bg"
          ],
          "created": 1548108515570,
          "exampleProjectId": "U4M4J5",
          "shortName": "StringToArray_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Array",
          "shortNameDisplay": "StringToArray",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Array.StringToArray",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Array.StringToArray_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Array.StringToCharArray",
          "content": "",
          "attachmentFiles": [],
          "summary": "Turns a string into an array of single characters or ASCII numbers",
          "id": "02ca1ecb-b087-4000-90f9-de96dca2f459",
          "layout": {
              "portsIn": [
                  {
                      "type": 5,
                      "name": "String"
                  },
                  {
                      "type": 0,
                      "name": "Convert to numbers",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 3,
                      "name": "Array out"
                  }
              ]
          },
          "authorName": "andro",
          "docs": {
              "ports": [
                  {
                      "name": "String",
                      "text": "String in"
                  },
                  {
                      "name": "Convert to numbers",
                      "text": "Convert to array of ASCII numbers"
                  },
                  {
                      "name": "Array out",
                      "text": "Array out"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1597848388840,
          "exampleProjectId": "30a1rn",
          "shortName": "StringToCharArray",
          "hasScreenshot": true,
          "namespace": "Ops.Array",
          "shortNameDisplay": "StringToCharArray",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Array.StringToCharArray",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Array.StringToLineNumberArray",
          "content": "",
          "attachmentFiles": [],
          "summary": "outputs an array containing a line number for every character",
          "id": "d008270a-6375-4fbc-9a2b-7b6d71239071",
          "layout": {
              "portsIn": [
                  {
                      "type": 5,
                      "name": "String"
                  }
              ],
              "portsOut": [
                  {
                      "type": 3,
                      "name": "Result"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1675783933584,
          "exampleProjectId": "",
          "shortName": "StringToLineNumberArray",
          "hasScreenshot": false,
          "namespace": "Ops.Array",
          "shortNameDisplay": "StringToLineNumberArray",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Array.StringToLineNumberArray",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Array.SubdivideArray1",
          "content": "<p>This version of the op works on a single array.</p>\n",
          "attachmentFiles": [],
          "summary": "For subdividing splines, smoothing lines using cubic bezier interpolation",
          "id": "fa10c94d-d14e-41d3-b690-26d7cac5f146",
          "layout": {
              "portsIn": [
                  {
                      "type": 3,
                      "name": "Points"
                  },
                  {
                      "type": 0,
                      "name": "Num Subdivs",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Smooth",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Bezier Start/End Points",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 3,
                      "name": "Result"
                  }
              ]
          },
          "authorName": "andro",
          "docs": {
              "ports": [
                  {
                      "name": "Points",
                      "text": "The array in to subdivide"
                  },
                  {
                      "name": "Num Subdivs",
                      "text": "Amount of subdivisions applied to the array in"
                  },
                  {
                      "name": "Smooth",
                      "text": "Enable to smooth out differences in the array"
                  },
                  {
                      "name": "Result",
                      "text": "Subdivided array out"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1561395625188,
          "exampleProjectId": "RJiCqH",
          "shortName": "SubdivideArray1",
          "hasScreenshot": true,
          "namespace": "Ops.Array",
          "shortNameDisplay": "SubdivideArray1",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Array.SubdivideArray1",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Array.SwitchArray",
          "content": "",
          "attachmentFiles": [],
          "summary": "switch between multiple arrays",
          "id": "3fab881c-c2cf-42a0-9c42-2d8edfd93f57",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "Index",
                      "subType": "integer"
                  },
                  {
                      "type": 3,
                      "name": "Array 0"
                  },
                  {
                      "type": 3,
                      "name": "Array 1"
                  },
                  {
                      "type": 3,
                      "name": "Array 2"
                  },
                  {
                      "type": 3,
                      "name": "Array 3"
                  },
                  {
                      "type": 3,
                      "name": "Array 4"
                  },
                  {
                      "type": 3,
                      "name": "Array 5"
                  },
                  {
                      "type": 3,
                      "name": "Array 6"
                  },
                  {
                      "type": 3,
                      "name": "Array 7"
                  },
                  {
                      "type": 3,
                      "name": "Array 8"
                  },
                  {
                      "type": 3,
                      "name": "Array 9"
                  }
              ],
              "portsOut": [
                  {
                      "type": 3,
                      "name": "Result"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "Index",
                      "text": "The array to send to array out "
                  },
                  {
                      "name": "Array 0",
                      "text": "Array in"
                  },
                  {
                      "name": "Array 1",
                      "text": "Array in"
                  },
                  {
                      "name": "Array 2",
                      "text": "Array in"
                  },
                  {
                      "name": "Array 3",
                      "text": "Array in"
                  },
                  {
                      "name": "Array 4",
                      "text": "Array in"
                  },
                  {
                      "name": "Array 5",
                      "text": "Array in"
                  },
                  {
                      "name": "Array 6",
                      "text": "Array in"
                  },
                  {
                      "name": "Array 7",
                      "text": "Array in"
                  },
                  {
                      "name": "Array 8",
                      "text": "Array in"
                  },
                  {
                      "name": "Array 9",
                      "text": "Array in"
                  },
                  {
                      "name": "Result",
                      "text": "The selected array out"
                  }
              ]
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [
              "TdHgjqOLpnM"
          ],
          "created": 1535465590797,
          "exampleProjectId": "4J2o8i",
          "shortName": "SwitchArray",
          "hasScreenshot": true,
          "namespace": "Ops.Array",
          "shortNameDisplay": "SwitchArray",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Array.SwitchArray",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Array.SwitchArrayMultiPort",
          "content": "",
          "attachmentFiles": [],
          "summary": "Switch between multiple input arrays",
          "id": "01290762-1a13-4636-861f-46a630527384",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "Index",
                      "subType": "integer"
                  },
                  {
                      "type": 3,
                      "name": "Arrays_0",
                      "group": "Arrays"
                  },
                  {
                      "type": 3,
                      "name": "Arrays_1",
                      "uititle": "add port",
                      "group": "Arrays"
                  }
              ],
              "portsOut": [
                  {
                      "type": 3,
                      "name": "Number"
                  },
                  {
                      "type": 0,
                      "name": "Num Values",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1716885055606,
          "exampleProjectId": "L7sKrh",
          "shortName": "SwitchArrayMultiPort",
          "hasScreenshot": true,
          "namespace": "Ops.Array",
          "shortNameDisplay": "SwitchArrayMultiPort",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Array.SwitchArrayMultiPort",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Array.SwitchArrayOnTrigger",
          "content": "",
          "attachmentFiles": [],
          "summary": "switch between multiple arrays",
          "id": "08e0cc91-8fda-48c1-a98e-2bf7265d6683",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Trigger 1"
                  },
                  {
                      "type": 3,
                      "name": "Array 1"
                  },
                  {
                      "type": 1,
                      "name": "Trigger 2"
                  },
                  {
                      "type": 3,
                      "name": "Array 2"
                  },
                  {
                      "type": 1,
                      "name": "Trigger 3"
                  },
                  {
                      "type": 3,
                      "name": "Array 3"
                  },
                  {
                      "type": 1,
                      "name": "Trigger 4"
                  },
                  {
                      "type": 3,
                      "name": "Array 4"
                  },
                  {
                      "type": 1,
                      "name": "Trigger 5"
                  },
                  {
                      "type": 3,
                      "name": "Array 5"
                  },
                  {
                      "type": 1,
                      "name": "Trigger 6"
                  },
                  {
                      "type": 3,
                      "name": "Array 6"
                  },
                  {
                      "type": 1,
                      "name": "Trigger 7"
                  },
                  {
                      "type": 3,
                      "name": "Array 7"
                  },
                  {
                      "type": 1,
                      "name": "Trigger 8"
                  },
                  {
                      "type": 3,
                      "name": "Array 8"
                  }
              ],
              "portsOut": [
                  {
                      "type": 3,
                      "name": "Out Array"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1514985074946,
          "exampleProjectId": "",
          "shortName": "SwitchArrayOnTrigger",
          "hasScreenshot": false,
          "namespace": "Ops.Array",
          "shortNameDisplay": "SwitchArrayOnTrigger",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Array.SwitchArrayOnTrigger",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Array.TextureBufferArray",
          "content": "<p>Similar to <a href=\"/op/Ops.Array.RingBuffer\" target=\"_blank\">Ops.Array.RingBuffer</a> but for textures.</p>\n",
          "attachmentFiles": [],
          "summary": "Stores various textures in an array, starts at the beginning again when end reached",
          "id": "04dc13d2-e339-4e1d-82c5-9c9ff1b175b8",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Write"
                  },
                  {
                      "type": 2,
                      "name": "Texture",
                      "objType": "texture"
                  },
                  {
                      "type": 0,
                      "name": "Num",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Order",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Clear",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 3,
                      "name": "Result"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "Write",
                      "text": "Writes the `Texture` to the buffer"
                  },
                  {
                      "name": "Texture",
                      "text": "The texture to add to the buffer"
                  },
                  {
                      "name": "Num",
                      "text": "The size of the ring buffer (how many textures it can hold)"
                  },
                  {
                      "name": "Result",
                      "text": "The array containing the textures"
                  }
              ]
          },
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1519509615864,
          "exampleProjectId": "",
          "shortName": "TextureBufferArray",
          "hasScreenshot": false,
          "namespace": "Ops.Array",
          "shortNameDisplay": "TextureBufferArray",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Array.TextureBufferArray",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Array.WeaveArrays",
          "content": "",
          "attachmentFiles": [],
          "summary": "Weaves two arrays together (combine, join, merge)",
          "id": "ad6d77b7-d81d-4115-a2f2-5160adaaef3a",
          "layout": {
              "portsIn": [
                  {
                      "type": 3,
                      "name": "Array 1"
                  },
                  {
                      "type": 3,
                      "name": "Array 2"
                  },
                  {
                      "type": 0,
                      "name": "Chunk Size",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 3,
                      "name": "Combined Array"
                  }
              ]
          },
          "authorName": "tim",
          "docs": {
              "ports": [
                  {
                      "name": "Array 1",
                      "text": "The first array"
                  },
                  {
                      "name": "Array 2",
                      "text": "The second array"
                  },
                  {
                      "name": "Chunk Size",
                      "text": "How many elements will be used from each array in a chunk, e.g. when set to `1` the resulting array will contain one element from `Array 1`, one from `Array 2`, then one from `Array 1` again and so on"
                  },
                  {
                      "name": "Combined Array",
                      "text": "The combined (weaved) array"
                  }
              ]
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1518102453401,
          "exampleProjectId": "HSGq8i",
          "shortName": "WeaveArrays",
          "hasScreenshot": true,
          "namespace": "Ops.Array",
          "shortNameDisplay": "WeaveArrays",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Array.WeaveArrays",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Audio.BpmTap",
          "content": "",
          "attachmentFiles": [],
          "summary": "Let’s you tap in a beat, useful to synchronise visuals to music (VJ, sync, sound)",
          "id": "86096ee6-08f7-4463-b7c3-41cf7bc80de7",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "exe"
                  },
                  {
                      "type": 1,
                      "name": "tap"
                  },
                  {
                      "type": 1,
                      "name": "sync"
                  },
                  {
                      "type": 1,
                      "name": "nudgeLeft"
                  },
                  {
                      "type": 1,
                      "name": "nudgeRight"
                  },
                  {
                      "type": 0,
                      "name": "Active",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "beat"
                  },
                  {
                      "type": 0,
                      "name": "Bpm",
                      "subType": "number"
                  },
                  {
                      "type": 3,
                      "name": "States"
                  },
                  {
                      "type": 0,
                      "name": "Beat Index",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "tim",
          "docs": {
              "ports": [
                  {
                      "name": "exe",
                      "text": "Executes the op"
                  },
                  {
                      "name": "tap",
                      "text": "Press the `tap`-button multiple times to tap in a beat. Once you stopped `BpmTap` will start to send out values on its own after one bar"
                  },
                  {
                      "name": "sync",
                      "text": "If `BpmTap` is out of sync with your music, press `sync` once on the start of a beat to reset the start beat"
                  },
                  {
                      "name": "nudgeLeft",
                      "text": "To fine-tune the `bpm` value press `nudgeLeft` various times, the `bpm`-value will decrease"
                  },
                  {
                      "name": "nudgeRight",
                      "text": "To fine-tune the `bpm` value press `nudgeRight` various times, the `bpm`-value will increase"
                  },
                  {
                      "name": "beat",
                      "text": "Triggers on every beat – *1, 2, 3, 4*."
                  },
                  {
                      "name": "Bpm",
                      "text": "The resulting BPM (beats per minute)"
                  },
                  {
                      "name": "States",
                      "text": "An array of length 4, e.g. `[1, 0, 0, 0]` —> first beat"
                  },
                  {
                      "name": "Beat Index",
                      "text": "Either `1`, `2`, `3` or `4`"
                  }
              ]
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1519733673023,
          "exampleProjectId": "vwdfqX",
          "shortName": "BpmTap",
          "hasScreenshot": true,
          "namespace": "Ops.Audio",
          "shortNameDisplay": "BpmTap",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Audio.BpmTap",
                  "versionString": "",
                  "version": 0
              }
          ],
          "namespaceTitle": "Ops.Audio",
          "namespaceSummary": "",
          "allowEdit": false
      },
      {
          "name": "Ops.Audio.MidiJson",
          "content": "<p>also see: <a href=\"/op/Ops.Audio.MidiJsonNote\" target=\"_blank\">Ops.Audio.MidiJsonNote</a></p>\n",
          "attachmentFiles": [],
          "summary": "read MIDI information at time x",
          "id": "695aef03-8ab0-48a1-b3ee-2c6c01a21640",
          "layout": {
              "portsIn": [
                  {
                      "type": 2,
                      "name": "MidiJson"
                  },
                  {
                      "type": 0,
                      "name": "Time",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "Beat",
                      "subType": "number"
                  },
                  {
                      "type": 3,
                      "name": "Track Names"
                  },
                  {
                      "type": 3,
                      "name": "Names"
                  },
                  {
                      "type": 3,
                      "name": "Progress"
                  },
                  {
                      "type": 3,
                      "name": "Velocity"
                  },
                  {
                      "type": 0,
                      "name": "Num Tracks",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "BPM",
                      "subType": "number"
                  },
                  {
                      "type": 2,
                      "name": "Data"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1504962897297,
          "exampleProjectId": "yJPMCV",
          "shortName": "MidiJson",
          "hasScreenshot": true,
          "namespace": "Ops.Audio",
          "shortNameDisplay": "MidiJson",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Audio.MidiJson",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Audio.MidiJsonNote_v2",
          "content": "<p>see also <a href=\"/op/Ops.Audio.MidiJson\" target=\"_blank\">Ops.Audio.MidiJson</a></p>\n",
          "attachmentFiles": [],
          "summary": "Filter MidiJson for notes",
          "id": "979df145-edc2-4014-9d7e-1e66ce1c4b06",
          "layout": {
              "portsIn": [
                  {
                      "type": 2,
                      "name": "Data"
                  },
                  {
                      "type": 5,
                      "name": "Note"
                  },
                  {
                      "type": 0,
                      "name": "Channel",
                      "subType": "string"
                  },
                  {
                      "type": 0,
                      "name": "Beat Start",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Beat End",
                      "subType": "integer"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "Count",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Progress",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Time since last",
                      "subType": "number"
                  },
                  {
                      "type": 1,
                      "name": "Trigger"
                  },
                  {
                      "type": 1,
                      "name": "Reseted"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1648126657222,
          "exampleProjectId": "",
          "shortName": "MidiJsonNote_v2",
          "hasScreenshot": false,
          "namespace": "Ops.Audio",
          "shortNameDisplay": "MidiJsonNote",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Audio.MidiJsonNote",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Audio.MidiJsonNote_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Boolean.And",
          "content": "<table>\n<thead>\n<tr>\n<th>Bool1</th>\n<th>Bool2</th>\n<th>Result</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n</tr>\n<tr>\n<td>0</td>\n<td>1</td>\n<td>0</td>\n</tr>\n<tr>\n<td>1</td>\n<td>0</td>\n<td>0</td>\n</tr>\n<tr>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n</tr>\n</tbody></table>\n",
          "attachmentFiles": [],
          "summary": "Outputs `true` if both input values are `true` (boolean)",
          "id": "c26e6ce0-8047-44bb-9bc8-5a4f911ed8ad",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "bool 1",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "bool 2",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "result",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "bool 1",
                      "text": "The first boolean value"
                  },
                  {
                      "name": "bool 2",
                      "text": "The second boolean value"
                  },
                  {
                      "name": "result",
                      "text": "The result, only `true` when both input values are `true`"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1542698826538,
          "exampleProjectId": "_B91Ms",
          "shortName": "And",
          "hasScreenshot": true,
          "namespace": "Ops.Boolean",
          "shortNameDisplay": "And",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Boolean.And",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false,
          "namespaceTitle": "Ops.Boolean",
          "namespaceSummary": ""
      },
      {
          "name": "Ops.Boolean.BoolByTrigger",
          "content": "",
          "attachmentFiles": [],
          "summary": "trigger true or false values",
          "id": "31f65abe-9d6c-4ba6-a291-ef2de41d2087",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "True"
                  },
                  {
                      "type": 1,
                      "name": "false"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "Result",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1521804228732,
          "exampleProjectId": "",
          "shortName": "BoolByTrigger",
          "hasScreenshot": false,
          "namespace": "Ops.Boolean",
          "shortNameDisplay": "BoolByTrigger",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Boolean.BoolByTrigger",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Boolean.BoolToNumber_v2",
          "content": "<p>Per default <code>Value 0</code> will go through to the output port. \nWhen <code>Use Value 1</code> is checked / set to <code>true</code>, <code>Value 1</code> will be outputted.</p>\n",
          "attachmentFiles": [],
          "summary": "Switches two number values using a boolean",
          "id": "400eea7d-5a68-4dda-a94d-2bb2ee7c2331",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "Use Value 1",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Value 0",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Value 1",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "Out Value",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "Value 0",
                      "text": "The default value which will be used (when `Use Value 1` is not set)."
                  },
                  {
                      "name": "Value 1",
                      "text": "The value to be used (when `Use Value 1` is checked)."
                  },
                  {
                      "name": "Use Value 1",
                      "text": "When `false` `Value 0` will be used, `Value 1` otherwise"
                  },
                  {
                      "name": "Out Value",
                      "text": "Either `Value 0` or `Value 1`"
                  }
              ]
          },
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1558014712164,
          "exampleProjectId": "",
          "shortName": "BoolToNumber_v2",
          "hasScreenshot": false,
          "namespace": "Ops.Boolean",
          "shortNameDisplay": "BoolToNumber",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Boolean.BoolToNumber",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Boolean.BoolToNumber_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Boolean.BoolToString",
          "content": "",
          "attachmentFiles": [],
          "summary": "convert boolean to string",
          "id": "22a734aa-8b08-4db7-929b-393d4704e1d6",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "Boolean",
                      "subType": "boolean"
                  },
                  {
                      "type": 5,
                      "name": "False"
                  },
                  {
                      "type": 5,
                      "name": "True"
                  }
              ],
              "portsOut": [
                  {
                      "type": 5,
                      "name": "String"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1587370283039,
          "exampleProjectId": "kmXCm6",
          "shortName": "BoolToString",
          "hasScreenshot": true,
          "namespace": "Ops.Boolean",
          "shortNameDisplay": "BoolToString",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Boolean.BoolToString",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Boolean.Boolean",
          "content": "<p>If you use bool-value on multiple positions in your patch it is handy to just write it down once and connect the op to various other ops which use the value.<br>The output port will mirror the input port.</p>\n",
          "attachmentFiles": [],
          "summary": "Stores a boolean value",
          "id": "83e2d74c-9741-41aa-a4d7-1bda4ef55fb3",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "value",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "result",
                      "subType": "boolean"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "value",
                      "text": "Boolean value which will be copied to the output port"
                  },
                  {
                      "name": "result",
                      "text": "Same as the input port `Value`"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1541052012961,
          "exampleProjectId": "1dAfW2",
          "shortName": "Boolean",
          "hasScreenshot": true,
          "namespace": "Ops.Boolean",
          "shortNameDisplay": "Boolean",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Boolean.Boolean",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Boolean.DelayBooleanSimple",
          "content": "",
          "attachmentFiles": [],
          "summary": "Delay the input/output of a boolean by x seconds",
          "id": "4516be54-9077-490f-a094-83696b9011ba",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "Value",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Delay True",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Delay False",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "Out Value",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1613050107456,
          "exampleProjectId": "VBa0ft",
          "shortName": "DelayBooleanSimple",
          "hasScreenshot": true,
          "namespace": "Ops.Boolean",
          "shortNameDisplay": "DelayBooleanSimple",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Boolean.DelayBooleanSimple",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Boolean.IfFalseThen",
          "content": "<p>Basically the same as <a href=\"/op/Ops.Boolean.IfTrueThen\" target=\"_blank\">Ops.Boolean.IfTrueThen</a>, the only difference is that the output ports are switched. </p>\n<p>You can also input non-boolean values, <code>0</code>, <code>0.0</code>, <code>&#39;&#39;</code> (empty string) will all evaluate to <code>false</code>. On the contrary <code>1.234</code>, &#39;5&#39; or &#39;lalala&#39; will evaluate to <code>true</code>.</p>\n<p>You can use it in two ways: If <code>Exe</code> is connected <code>Then</code> / <code>Else</code> will be triggered every time <code>Exe</code> is triggered. If <code>Exe</code> is not connection <code>Then</code> / <code>Else</code> will be triggered every time <code>Boolean</code> changes. This way you can convert a bool to a trigger (function).</p>\n",
          "attachmentFiles": [],
          "summary": "Triggers if input value is `false`",
          "id": "91cf65f1-94ac-423f-a536-af71eed08440",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Exe"
                  },
                  {
                      "type": 0,
                      "name": "Boolean",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "then"
                  },
                  {
                      "type": 1,
                      "name": "else"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "Exe",
                      "text": "Executes the op"
                  },
                  {
                      "name": "Boolean",
                      "text": "The boolean value to check for falsiness"
                  },
                  {
                      "name": "then",
                      "text": "Triggers when the input value is `false`"
                  },
                  {
                      "name": "else",
                      "text": "Triggers when the input value is `true`"
                  }
              ]
          },
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1512653307685,
          "exampleProjectId": "",
          "shortName": "IfFalseThen",
          "hasScreenshot": false,
          "namespace": "Ops.Boolean",
          "shortNameDisplay": "IfFalseThen",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Boolean.IfFalseThen",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Boolean.IfTrueThen_v2",
          "content": "<p>Can be used as a switch. If the input <code>Boolean</code> is <code>true</code>/ <code>1</code> the output port <code>Then</code> will be triggered. If <code>Boolean</code> is <code>false</code> / <code>0</code> the output port <code>Else</code> will be triggered.  </p>\n<p>You can also input non-boolean values, <code>0</code>, <code>0.0</code>, <code>&#39;&#39;</code> (empty string) will all evaluate to <code>false</code>. On the contrary <code>1.234</code>, &#39;5&#39; or &#39;lalala&#39; will evaluate to <code>true</code>.</p>\n<p>You can use it in two ways: If <code>Exe</code> is connected <code>Then</code> / <code>Else</code> will be triggered every time <code>Exe</code> is triggered. If <code>Exe</code> is not connection <code>Then</code> / <code>Else</code> will be triggered every time <code>Boolean</code> changes. This way you can convert a bool to a trigger (function).</p>\n",
          "attachmentFiles": [],
          "summary": "Switch, trigger one or the other trigger port based on the input value",
          "id": "9549e2ed-a544-4d33-a672-05c7854ccf5d",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "exe"
                  },
                  {
                      "type": 0,
                      "name": "boolean",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "then"
                  },
                  {
                      "type": 1,
                      "name": "else"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [
              "3dYztfuw4lA"
          ],
          "created": 1587451965997,
          "exampleProjectId": "F9tjX8",
          "shortName": "IfTrueThen_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Boolean",
          "shortNameDisplay": "IfTrueThen",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Boolean.IfTrueThen",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Boolean.IfTrueThen_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Boolean.IsOne",
          "content": "<p>Only returns <code>true</code> if the input <code>Value</code> is <code>1</code>. Returns <code>false</code> in all other cases, e.g. when input value is <code>0</code>, <code>-1</code> or <code>2</code>.</p>\n",
          "attachmentFiles": [],
          "summary": "Returns `true` if input value is `1`",
          "id": "695d35e2-ffe6-498d-9242-12dc4bcb3c2d",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "Value",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "Result",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "Value",
                      "text": "The value to check for if it is one"
                  },
                  {
                      "name": "Result",
                      "text": "`True` when input is `1`, false otherwise"
                  }
              ]
          },
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1542699231847,
          "exampleProjectId": "",
          "shortName": "IsOne",
          "hasScreenshot": false,
          "namespace": "Ops.Boolean",
          "shortNameDisplay": "IsOne",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Boolean.IsOne",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Boolean.IsZero",
          "content": "<p>Only returns <code>true</code> if the input Value is <code>0</code>. Returns <code>false</code> in all other cases, e.g. when input value is <code>1</code>, <code>-1</code> or <code>2</code>.</p>\n",
          "attachmentFiles": [],
          "summary": "Returns `true` if input value is `0`",
          "id": "76d37c73-3c32-47bd-8b4a-4229db7e57f1",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "Value",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "Result",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "Value",
                      "text": "The number to check if it is `0`"
                  },
                  {
                      "name": "Result",
                      "text": "`true` if input `Value` is `0`, `false` otherwise"
                  }
              ]
          },
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1542699279469,
          "exampleProjectId": "",
          "shortName": "IsZero",
          "hasScreenshot": false,
          "namespace": "Ops.Boolean",
          "shortNameDisplay": "IsZero",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Boolean.IsZero",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Boolean.MonoFlop",
          "content": "<p>Imagine a light switch (often found in staircases): Once you press the light switch the light goes on for x seconds, then automatically turns off on its own.</p>\n<p>Make sure to connect the <code>Trigger</code> port in a meaningful way (not directly to <code>MainLoop</code>), as it would set the output to <code>1</code> all the time.</p>\n",
          "attachmentFiles": [],
          "summary": "Sets output to `1` when triggered, turns back to `0` automatically after x seconds",
          "id": "3a4b0a78-4172-41c7-8248-95cb0856ecc8",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Trigger"
                  },
                  {
                      "type": 0,
                      "name": "Duration",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Value True",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Value False",
                      "subType": "number"
                  },
                  {
                      "type": 1,
                      "name": "Reset"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Activated"
                  },
                  {
                      "type": 1,
                      "name": "Ended"
                  },
                  {
                      "type": 0,
                      "name": "Result",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "Trigger",
                      "text": "When triggered, `Result` is set to `Value True`"
                  },
                  {
                      "name": "Duration",
                      "text": "Duration in seconds when to automatically reset the `Result` to `Value False`"
                  },
                  {
                      "name": "Value True",
                      "text": "The value to use when `Trigger` is triggered"
                  },
                  {
                      "name": "Value False",
                      "text": "The value to use after the time is over"
                  },
                  {
                      "name": "Result",
                      "text": "Either `1` (directly after `Trigger` was triggered), or `0`"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1511644281921,
          "exampleProjectId": "F3r9L5",
          "shortName": "MonoFlop",
          "hasScreenshot": true,
          "namespace": "Ops.Boolean",
          "shortNameDisplay": "MonoFlop",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Boolean.MonoFlop",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Boolean.Not",
          "content": "",
          "attachmentFiles": [],
          "summary": "result is false if input is true and vice versa (negate/toggle/switch/!=)",
          "id": "6d123c9f-7485-4fd9-a5c2-76e59dcbeb34",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "Boolean",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "Result",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1521803894495,
          "exampleProjectId": "1dAfW2",
          "shortName": "Not",
          "hasScreenshot": true,
          "namespace": "Ops.Boolean",
          "shortNameDisplay": "Not",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Boolean.Not",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Boolean.Or",
          "content": "<p>Performs a logical OR operation. If one of the input ports evaluates to <code>true</code> (not <code>0</code>), the <code>Result</code> will be <code>true</code> as well, <code>false</code> otherwise.</p>\n<table>\n<thead>\n<tr>\n<th>Bool1</th>\n<th>Bool2</th>\n<th>Result</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n</tr>\n<tr>\n<td>0</td>\n<td>1</td>\n<td>1</td>\n</tr>\n<tr>\n<td>1</td>\n<td>0</td>\n<td>1</td>\n</tr>\n<tr>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n</tr>\n</tbody></table>\n",
          "attachmentFiles": [],
          "summary": "Returns `true` if one or more of the input booleans are `true`",
          "id": "b3b36238-4592-4e11-afe3-8361c4fd6be5",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "bool 1",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "bool 2",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "bool 3",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "bool 4",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "bool 5",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "bool 6",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "bool 7",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "bool 8",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "bool 9",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "bool 10",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "result",
                      "subType": "boolean"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "result",
                      "text": "`True` if one or more of the input ports is `true`, `false` otherwise"
                  }
              ]
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1520261823005,
          "exampleProjectId": "1dAfW2",
          "shortName": "Or",
          "hasScreenshot": true,
          "namespace": "Ops.Boolean",
          "shortNameDisplay": "Or",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Boolean.Or",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Boolean.OrNumber_v2",
          "content": "",
          "attachmentFiles": [],
          "summary": "Output another number if input number is zero",
          "id": "1f634c57-fb61-485a-8d78-9b8ef2319b2e",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "Number",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Number 2",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Number 3",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Number 4",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Number 5",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Number 6",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Number 7",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Number 8",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "Result",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1729845206491,
          "exampleProjectId": "J4cYet",
          "shortName": "OrNumber_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Boolean",
          "shortNameDisplay": "OrNumber",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Boolean.OrNumber",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Boolean.OrNumber_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Boolean.ParseBoolean_v2",
          "content": "<p>Converts a string / number to a boolean, outputs <code>false</code> when value equals <code>0</code>, <code>false</code>, <code>null</code> or <code>undefined</code>.\nPlease note that entering something in the input box will most likely result in <code>true</code>, because when you enter something it will be interpreted as a string / number.</p>\n",
          "attachmentFiles": [],
          "summary": "parse boolean from string/number",
          "id": "b436e831-36f5-4e0c-838e-4a82c4b07ec0",
          "layout": {
              "portsIn": [
                  {
                      "type": 5,
                      "name": "String"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "Result",
                      "subType": "boolean"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1582794993082,
          "exampleProjectId": "2nXYet",
          "shortName": "ParseBoolean_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Boolean",
          "shortNameDisplay": "ParseBoolean",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Boolean.ParseBoolean",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Boolean.ParseBoolean_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Boolean.RouteBoolean",
          "content": "<p>If nothing is plugged into default then the output is false by default</p>\n",
          "attachmentFiles": [],
          "summary": "Route a boolean to an output port",
          "id": "88b3f5ec-0e45-4651-89ca-33173d001ab6",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "Index",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Boolean in",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Default boolean",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "Index 0 boolean",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Index 1 boolean",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Index 2 boolean",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Index 3 boolean",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Index 4 boolean",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Index 5 boolean",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Index 6 boolean",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Index 7 boolean",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Index 8 boolean",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Index 9 boolean",
                      "subType": "boolean"
                  }
              ]
          },
          "authorName": "andro",
          "docs": {
              "ports": [
                  {
                      "name": "Index",
                      "text": "port to route to"
                  },
                  {
                      "name": "Boolean in",
                      "text": "Boolean to route"
                  },
                  {
                      "name": "Default boolean",
                      "text": "Default value of all other ports"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1587993796311,
          "exampleProjectId": "mS8CX8",
          "shortName": "RouteBoolean",
          "hasScreenshot": true,
          "namespace": "Ops.Boolean",
          "shortNameDisplay": "RouteBoolean",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Boolean.RouteBoolean",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Boolean.ToggleBool_v2",
          "content": "<p>Outputs a boolean value which changes state every time <code>Trigger</code> is executed, this will result in an output like <code>true</code> -&gt; <code>false</code> -&gt; <code>true</code> -&gt; <code>false</code> …  </p>\n",
          "attachmentFiles": [],
          "summary": "Toggle a boolean value by triggering",
          "id": "4313d9bb-96b6-43bc-9190-6068cfb2593c",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "trigger"
                  },
                  {
                      "type": 1,
                      "name": "reset"
                  },
                  {
                      "type": 0,
                      "name": "Default",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  },
                  {
                      "type": 0,
                      "name": "result",
                      "subType": "boolean"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "trigger",
                      "text": "When triggered the output value will be toggled from true to false and the other way around."
                  },
                  {
                      "name": "reset",
                      "text": "Resets the `Result` to `false`"
                  },
                  {
                      "name": "result",
                      "text": "Either `true` or `false`"
                  }
              ]
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1669884037218,
          "exampleProjectId": "UxJNHj",
          "shortName": "ToggleBool_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Boolean",
          "shortNameDisplay": "ToggleBool",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Boolean.ToggleBool",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Boolean.ToggleBool_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Boolean.TriggerChangedFalse",
          "content": "<p>When the input <code>Value</code> changes from <code>true</code> to <code>false</code> <code>Next</code> is triggered once.</p>\n",
          "attachmentFiles": [],
          "summary": "Triggers next only after value has changed to `false`",
          "id": "6387bcb0-6091-4199-8ab7-f96ad4aa3c7d",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "Value",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "Value",
                      "text": "The boolean value to watch for change"
                  },
                  {
                      "name": "Next",
                      "text": "Triggers when `Value` changed to `false`"
                  }
              ]
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1518604069266,
          "exampleProjectId": "UWCvS8",
          "shortName": "TriggerChangedFalse",
          "hasScreenshot": true,
          "namespace": "Ops.Boolean",
          "shortNameDisplay": "TriggerChangedFalse",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Boolean.TriggerChangedFalse",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Boolean.TriggerChangedTrue",
          "content": "<p>When the input Value changes from <code>false</code> to <code>true</code> <code>Next</code> is triggered once.</p>\n",
          "attachmentFiles": [],
          "summary": "Triggers next only after value has changed to `true`",
          "id": "385197e1-8b34-4d1c-897f-d1386d99e3b3",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "Value",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "Value",
                      "text": "The boolean value to watch for change"
                  },
                  {
                      "name": "Next",
                      "text": "Triggers when `Value` changed to `false`"
                  }
              ]
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1518604076114,
          "exampleProjectId": "UWCvS8",
          "shortName": "TriggerChangedTrue",
          "hasScreenshot": true,
          "namespace": "Ops.Boolean",
          "shortNameDisplay": "TriggerChangedTrue",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Boolean.TriggerChangedTrue",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Boolean.TriggerOnChangeBoolean",
          "content": "<p>When <code>Value</code> changed from <code>true</code> to <code>false</code> the <code>False</code> trigger port triggers once, when value changed from <code>false</code> to <code>true</code> the <code>True</code> trigger port triggers once.</p>\n",
          "attachmentFiles": [],
          "summary": "Triggers when boolean value has changed",
          "id": "dba19c07-e3c4-4971-a991-c9e6212ca1c8",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "Value",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "True"
                  },
                  {
                      "type": 1,
                      "name": "False"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "Value",
                      "text": "The boolean value to watch for change"
                  },
                  {
                      "name": "True",
                      "text": "Triggers when `Value` became `true`"
                  },
                  {
                      "name": "False",
                      "text": "Triggers when `Value` became `false`"
                  }
              ]
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1512038541068,
          "exampleProjectId": "UWCvS8",
          "shortName": "TriggerOnChangeBoolean",
          "hasScreenshot": true,
          "namespace": "Ops.Boolean",
          "shortNameDisplay": "TriggerOnChangeBoolean",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Boolean.TriggerOnChangeBoolean",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Cables.AssetPathURL",
          "content": "<p>use this if you want to generate filenames in a patch</p>\n",
          "attachmentFiles": [],
          "summary": "outputs the path to the assets",
          "id": "e502ae39-c87e-4516-9e78-cb71333bcfff",
          "layout": {
              "portsIn": [
                  {
                      "type": 5,
                      "name": "Filename"
                  }
              ],
              "portsOut": [
                  {
                      "type": 5,
                      "name": "Path"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1550675501300,
          "exampleProjectId": "mwhthf",
          "shortName": "AssetPathURL",
          "hasScreenshot": true,
          "namespace": "Ops.Cables",
          "shortNameDisplay": "AssetPathURL",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Cables.AssetPathURL",
                  "versionString": "",
                  "version": 0
              }
          ],
          "namespaceTitle": "Ops.Cables",
          "namespaceSummary": "",
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Cables.CallBack_v2",
          "content": "<p>Useful when a cables patch is embedded into a website. All parameters (<code>Value 1</code>, <code>Value 2</code>, <code>Value 3</code> will be send as a parameter array. So e.g. if <code>Callback Name</code> is <code>foo</code> cables would call:</p>\n<pre><code>CABLES.patch.config.foo([Value 1, Value 2, Value 3])\n</code></pre>\n",
          "attachmentFiles": [],
          "summary": "Executes an external function (external javascript)",
          "id": "cfc87cb1-a74b-482f-9fad-e1777cb7ffd4",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "exe"
                  },
                  {
                      "type": 5,
                      "name": "Callback Name"
                  },
                  {
                      "type": 5,
                      "name": "Parameter 1"
                  },
                  {
                      "type": 5,
                      "name": "Parameter 2"
                  },
                  {
                      "type": 5,
                      "name": "Parameter 3"
                  }
              ],
              "portsOut": []
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "exe",
                      "text": "Calls the external function / executes the callback"
                  },
                  {
                      "name": "Callback Name",
                      "text": "Name of the function to call"
                  }
              ]
          },
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1576746522269,
          "exampleProjectId": "",
          "shortName": "CallBack_v2",
          "hasScreenshot": false,
          "namespace": "Ops.Cables",
          "shortNameDisplay": "CallBack",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Cables.CallBack",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Cables.CallBack_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Cables.FPS_v2",
          "content": "",
          "attachmentFiles": [],
          "summary": "output current frames per second",
          "id": "6dbb866c-b57a-4875-9f1d-22172162eaa8",
          "layout": {
              "portsOut": [
                  {
                      "type": 0,
                      "name": "FPS",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "MS",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1600117397013,
          "exampleProjectId": "KhFA8i",
          "shortName": "FPS_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Cables",
          "shortNameDisplay": "FPS",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Cables.FPS",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Cables.FPS_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Cables.Function_v2",
          "content": "<p>Execute / trigger from an external script, useful when embedding a cables-patch into a website.</p>\n<p>e.g: Function Name is <code>myFunction</code>, then you can trigger ops connected to <code>Next</code> via this javascript code:</p>\n<p><code>myPatch.config.myFunction()</code></p>\n",
          "attachmentFiles": [],
          "summary": "trigger from external function when embedded into a website",
          "id": "39043a11-1ae0-4568-93a7-ec1493df2662",
          "layout": {
              "portsIn": [
                  {
                      "type": 5,
                      "name": "Function Name"
                  },
                  {
                      "type": 1,
                      "name": "Trigger"
                  },
                  {
                      "type": 5,
                      "name": "Default Parameter 1"
                  },
                  {
                      "type": 5,
                      "name": "Default Parameter 2"
                  },
                  {
                      "type": 5,
                      "name": "Default Parameter 3"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  },
                  {
                      "type": 5,
                      "name": "Parameter 1"
                  },
                  {
                      "type": 5,
                      "name": "Parameter 2"
                  },
                  {
                      "type": 5,
                      "name": "Parameter 3"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "Function Name",
                      "text": "The name of the function you want to define, e.g. when you name the function `myFunction` you can trigger it from your JavaScript-Code using `CABLES.patch.config.myFunction();`"
                  },
                  {
                      "name": "Trigger",
                      "text": "run the function from inside the cables patch"
                  },
                  {
                      "name": "Default Parameter 1",
                      "text": "parameter default value if external function does not define it"
                  },
                  {
                      "name": "Default Parameter 2",
                      "text": "parameter default value if external function does not define it"
                  },
                  {
                      "name": "Default Parameter 3",
                      "text": "parameter default value if external function does not define it"
                  },
                  {
                      "name": "Next",
                      "text": "triggered when function has been called"
                  },
                  {
                      "name": "Parameter 1",
                      "text": "first parameter of the called function, or default"
                  },
                  {
                      "name": "Parameter 2",
                      "text": "second parameter of the called function, or default"
                  },
                  {
                      "name": "Parameter 3",
                      "text": "third parameter of the called function, or default"
                  }
              ]
          },
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1616137341833,
          "exampleProjectId": "",
          "shortName": "Function_v2",
          "hasScreenshot": false,
          "namespace": "Ops.Cables",
          "shortNameDisplay": "Function",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Cables.Function",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Cables.Function_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Cables.GetSubPatchName",
          "content": "",
          "attachmentFiles": [],
          "summary": "Outputs the current subpatch op name",
          "id": "e828a0e1-cd24-4dfb-a0cf-6c944ca88ed4",
          "layout": {
              "portsOut": [
                  {
                      "type": 5,
                      "name": "Name"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1716289161901,
          "exampleProjectId": "20tMrh",
          "shortName": "GetSubPatchName",
          "hasScreenshot": true,
          "namespace": "Ops.Cables",
          "shortNameDisplay": "GetSubPatchName",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Cables.GetSubPatchName",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Cables.LoadingStatus_v2",
          "content": "",
          "attachmentFiles": [],
          "summary": "trigger events / get information about asset-loading status",
          "id": "e62f7f4c-7436-437e-8451-6bc3c28545f7",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "exe"
                  },
                  {
                      "type": 0,
                      "name": "Play Timeline",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  },
                  {
                      "type": 0,
                      "name": "Finished Initial Loading",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Loading",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Progress",
                      "subType": "number"
                  },
                  {
                      "type": 3,
                      "name": "Jobs"
                  },
                  {
                      "type": 1,
                      "name": "Trigger Loading Finished "
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1617722414517,
          "exampleProjectId": "5FQ08W",
          "shortName": "LoadingStatus_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Cables",
          "shortNameDisplay": "LoadingStatus",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Cables.LoadingStatus",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Cables.LoadingStatus_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Cables.PatchInfo_v2",
          "content": "",
          "attachmentFiles": [],
          "summary": "read patch config when embedding on another page",
          "id": "7187c2f2-67a9-479e-92c4-0e415443f504",
          "layout": {
              "portsIn": [],
              "portsOut": [
                  {
                      "type": 2,
                      "name": "Config"
                  },
                  {
                      "type": 5,
                      "name": "Name"
                  },
                  {
                      "type": 5,
                      "name": "Patch Id"
                  },
                  {
                      "type": 5,
                      "name": "Namespace"
                  },
                  {
                      "type": 0,
                      "name": "Last Saved",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Last Exported",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "Config",
                      "text": "an object with the patch configuration"
                  },
                  {
                      "name": "Name",
                      "text": "the name of the patch"
                  },
                  {
                      "name": "Patch Id",
                      "text": "the id of the patch"
                  },
                  {
                      "name": "Namespace",
                      "text": "namespace of the patch, if available"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1625058870561,
          "exampleProjectId": "3hkdqX",
          "shortName": "PatchInfo_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Cables",
          "shortNameDisplay": "PatchInfo",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Cables.PatchInfo",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Cables.PatchInfo_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Cables.UIMode",
          "content": "<p>This op is useful to find out if the patch is viewed from inside the cables editor UI or embedded into a website.<br>This can be helpful, e.g. if you want to display debug information only when working on the patch, but not when it is shown publicly (outside the editor).</p>\n<p>Canvas Mode is 0 for default, 1 for patch background mode (ctrl+shift+enter), 2 for fullscreen (ctrl+enter)</p>\n",
          "attachmentFiles": [],
          "summary": "Outputs `true` if patch is executed in the cables editor (UI)",
          "id": "7c110d60-829f-4b06-b3e4-0af911550570",
          "layout": {
              "portsIn": [],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "UI",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Overlay Mode",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Remote Viewer",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Is Standalone",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Canvas Mode",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Patch Field Visible",
                      "subType": "boolean"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "UI",
                      "text": "`True` if the patch is viewed inside the cables editor"
                  },
                  {
                      "name": "Remote Viewer",
                      "text": "`True` if the patch is viewed inside the cables remote viewer"
                  }
              ]
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1540834918658,
          "exampleProjectId": "vyqgR3",
          "shortName": "UIMode",
          "hasScreenshot": true,
          "namespace": "Ops.Cables",
          "shortNameDisplay": "UIMode",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Cables.UIMode",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Cables.UploadAsset",
          "content": "<p>this op only works when running in the cables.gl editor ui, and only if you have patch write access.</p>\n",
          "attachmentFiles": [],
          "summary": "Upload a file into the cables patch assets using a base64 string",
          "id": "97d1b76e-6fbd-44c6-a1bb-e88e823c7916",
          "layout": {
              "portsIn": [
                  {
                      "type": 5,
                      "name": "Filename"
                  },
                  {
                      "type": 5,
                      "name": "Base64 String"
                  },
                  {
                      "type": 1,
                      "name": "Upload"
                  }
              ],
              "portsOut": [
                  {
                      "type": 5,
                      "name": "Result"
                  },
                  {
                      "type": 0,
                      "name": "Error",
                      "subType": "boolean"
                  },
                  {
                      "type": 1,
                      "name": "Finished"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1711106597194,
          "exampleProjectId": "6vDCsh",
          "shortName": "UploadAsset",
          "hasScreenshot": true,
          "namespace": "Ops.Cables",
          "shortNameDisplay": "UploadAsset",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Cables.UploadAsset",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Color.ColorArraySort",
          "content": "",
          "attachmentFiles": [],
          "summary": "Sort an array of colors by saturation/lightness etc.",
          "id": "ee97fe25-7600-42b9-9649-bc5c6bb94e43",
          "layout": {
              "portsIn": [
                  {
                      "type": 3,
                      "name": "Colors"
                  },
                  {
                      "type": 0,
                      "name": "Sort index",
                      "values": [
                          "No",
                          "Luminance",
                          "Hue",
                          "Saturation",
                          "Lightness"
                      ],
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Input Format index",
                      "values": [
                          "RGBA",
                          "RGB"
                      ],
                      "subType": "integer"
                  }
              ],
              "portsOut": [
                  {
                      "type": 3,
                      "name": "New Colors"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1728553623769,
          "exampleProjectId": "zKfluu",
          "shortName": "ColorArraySort",
          "hasScreenshot": true,
          "namespace": "Ops.Color",
          "shortNameDisplay": "ColorArraySort",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Color.ColorArraySort",
                  "versionString": "",
                  "version": 0
              }
          ],
          "namespaceTitle": "Ops.Color",
          "namespaceSummary": "",
          "allowEdit": false
      },
      {
          "name": "Ops.Color.ColorPalettes",
          "content": "<p>Outputs a harmonic color pallet. By changing the <code>Index</code> value, you will get another one. The resulting <code>Color Array</code> contains 15 values (5 × 3) – so 5 colors with a red, green and blue value between <code>0</code> and <code>1</code>.\nThe resulting array looks like this: <code>[c1red, c1green, c1blue, c2red, c2green, c2blue, …]</code>.\nYou probably want to connect the <code>Color Array</code> port to an <a href=\"/op/Ops.Array.Array3GetNumbers\" target=\"_blank\">Ops.Array.Array3GetNumbers</a> op, to get the r, g, and b values for one color out of the array.<br>Or use the  <a href=\"/op/Ops.Array.InterpolateNumbersArray3\" target=\"_blank\">Ops.Array.InterpolateNumbersArray3</a> op to interpolate smoothly between the 5 colors</p>\n",
          "attachmentFiles": [],
          "summary": "Contains a collection of nice color palettes output to texture or array via index",
          "id": "31d33a1e-9a0a-49f7-8bc8-9e83ab71e23e",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "Index",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Smooth",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 2,
                      "name": "Texture",
                      "objType": "texture"
                  },
                  {
                      "type": 3,
                      "name": "Color Array"
                  }
              ]
          },
          "authorName": "tim",
          "docs": {
              "ports": [
                  {
                      "name": "Index",
                      "text": "Change it to get another color pallet"
                  },
                  {
                      "name": "Texture",
                      "text": "A texture containing the 5 colors of the current pallet"
                  },
                  {
                      "name": "Color Array",
                      "text": "The color array containing 5 colors (15 values in total, 3 values per color – r, g and b)"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1523828824965,
          "exampleProjectId": "xRvD98",
          "shortName": "ColorPalettes",
          "hasScreenshot": true,
          "namespace": "Ops.Color",
          "shortNameDisplay": "ColorPalettes",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Color.ColorPalettes",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Color.ColorValue",
          "content": "<p>The color can be either picked with the color picker or entered directly.</p>\n",
          "attachmentFiles": [],
          "summary": "Use a color value on multiple places",
          "id": "7caa37c8-f2a7-49f2-a29c-96af362abca0",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "r",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "g",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "b",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "a",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "outr",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "outg",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "outb",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "outa",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Hex",
                      "subType": "number"
                  },
                  {
                      "type": 3,
                      "name": "Array"
                  }
              ]
          },
          "authorName": "tim",
          "docs": {
              "ports": [
                  {
                      "name": "r",
                      "text": "Red color value, between `0.0` and `1.0`"
                  },
                  {
                      "name": "g",
                      "text": "Green color value, between `0.0` and `1.0`"
                  },
                  {
                      "name": "b",
                      "text": "Blue color value, between `0.0` and `1.0`"
                  },
                  {
                      "name": "a",
                      "text": "Alpha value (opacity), between `0.0` and `1.0`"
                  },
                  {
                      "name": "outr",
                      "text": "Red, same as input port `R`"
                  },
                  {
                      "name": "outg",
                      "text": "Green, same as input port `G`"
                  },
                  {
                      "name": "outb",
                      "text": "Blue, same as input port `B`"
                  },
                  {
                      "name": "outa",
                      "text": "Alpha, Same as input port `A`"
                  },
                  {
                      "name": "Hex",
                      "text": "The hex value of the color"
                  },
                  {
                      "name": "Array",
                      "text": "The color components as array"
                  }
              ]
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1517408692744,
          "exampleProjectId": "19KZet",
          "shortName": "ColorValue",
          "hasScreenshot": true,
          "namespace": "Ops.Color",
          "shortNameDisplay": "ColorValue",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Color.ColorValue",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Color.EyeDropper",
          "content": "",
          "attachmentFiles": [],
          "summary": "Native color picker",
          "id": "dd49d53a-ed1f-471d-be0d-be318e4ae512",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Open"
                  }
              ],
              "portsOut": [
                  {
                      "type": 5,
                      "name": "Hex"
                  },
                  {
                      "type": 0,
                      "name": "R",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "G",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "B",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Supported",
                      "subType": "boolean"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1732711413745,
          "exampleProjectId": "kYsAkv",
          "caniusequery": "api_eyedropper",
          "shortName": "EyeDropper",
          "hasScreenshot": true,
          "namespace": "Ops.Color",
          "shortNameDisplay": "EyeDropper",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Color.EyeDropper",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Color.GradientColorArray",
          "content": "<p>This op allows the creation of custom gradients. Click the edit button to get the UI to edit gradient. More colours can be added to the gradient.</p>\n<p>Click on the small squares at the bottom and then the larger square to change the colour of that gradient point.</p>\n<p>Drag the small squares around to change the relationship between the different colours.\nClick once in the thin line at the bottom to add extra squares/gradient points.</p>\n<p>This will produce a datastructure like this, which can also go into the &#39;Gradient Array&#39;-Port:</p>\n<pre><code>[\n  {\n    &quot;pos&quot;: 0,\n    &quot;r&quot;: 0,\n    &quot;g&quot;: 0.19215686274509805,\n    &quot;b&quot;: 0.6705882352941176,\n    &quot;a&quot;: 1\n  },\n  {\n    &quot;pos&quot;: 0.085,\n    &quot;r&quot;: 0.00784313725490196,\n    &quot;g&quot;: 0.20392156862745098,\n    &quot;b&quot;: 0.6941176470588235,\n    &quot;a&quot;: 0.76\n  },\n  ...\n  {\n    &quot;pos&quot;: 1,\n    &quot;r&quot;: 0.9882352941176471,\n    &quot;g&quot;: 0.3215686274509804,\n    &quot;b&quot;: 1,\n    &quot;a&quot;: 0\n  }\n]\n</code></pre>\n",
          "attachmentFiles": [],
          "summary": "texture containing a colour gradient that can be altered with an editor",
          "id": "4fe35363-bf00-40c4-bd15-eb2386fa24a0",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "Gradient",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Direction index",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Smoothstep",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Step",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Flip",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "sRGB",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Oklab",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Size",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Dither",
                      "subType": "number"
                  },
                  {
                      "type": 3,
                      "name": "Gradient Array"
                  },
                  {
                      "type": 1,
                      "name": "Randomize Colors"
                  }
              ],
              "portsOut": [
                  {
                      "type": 3,
                      "name": "Color Array"
                  },
                  {
                      "type": 0,
                      "name": "Width",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Height",
                      "subType": "number"
                  },
                  {
                      "type": 3,
                      "name": "Colors"
                  },
                  {
                      "type": 3,
                      "name": "Colors Pos"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "Gradient",
                      "text": "Click this to open the editor for the gradient. See docs for a more in depth explanation."
                  },
                  {
                      "name": "Smoothstep",
                      "text": "Enable smoothstep on changes in gradients."
                  },
                  {
                      "name": "Size",
                      "text": "The resolution of the gradient in pixels. 256 is a good default value"
                  },
                  {
                      "name": "Gradient Array",
                      "text": "An array of Object containing pos,r,g,b,a information (see documentation for format)"
                  }
              ]
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1734084346358,
          "exampleProjectId": "xAdV8x",
          "shortName": "GradientColorArray",
          "hasScreenshot": true,
          "namespace": "Ops.Color",
          "shortNameDisplay": "GradientColorArray",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Color.GradientColorArray",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false,
          "usedInProject": true
      },
      {
          "name": "Ops.Color.HSLtoRGB",
          "content": "",
          "attachmentFiles": [],
          "summary": "Convert HSL to RGB",
          "id": "77d9a4ce-3d28-4028-84ba-5ca1109f536c",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "Hue",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Saturation",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Lightness",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "R",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "G",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "B",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [
              "chroma.js"
          ],
          "youtubeids": [],
          "created": 1727786023093,
          "exampleProjectId": "3fOpvs",
          "shortName": "HSLtoRGB",
          "hasScreenshot": true,
          "namespace": "Ops.Color",
          "shortNameDisplay": "HSLtoRGB",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Color.HSLtoRGB",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Color.HexToRGB_v2",
          "content": "<p>The resulting colors will be in range <code>[0..1]</code>.\nIf <code>Bytes</code> is set to <code>true</code> the colors will be in range <code>[0..255]</code>.</p>\n",
          "attachmentFiles": [],
          "summary": "Converts a hex color like `#ff0000` to number values",
          "id": "9877f198-8dac-48e5-9310-244ef1a8dec5",
          "layout": {
              "portsIn": [
                  {
                      "type": 5,
                      "name": "Hex"
                  },
                  {
                      "type": 0,
                      "name": "Bytes",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "R",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "G",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "B",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "Hex",
                      "text": "A hex color, e.g. `#ff0000` or `00ff00` (you can omit the `#` character if you want)"
                  },
                  {
                      "name": "Bytes",
                      "text": "If `true` the output will be in range `[0..255]`, otherwise `[0..1]`"
                  }
              ]
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1543861514673,
          "exampleProjectId": "IBX1ft",
          "shortName": "HexToRGB_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Color",
          "shortNameDisplay": "HexToRGB",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Color.HexToRGB",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Color.HexToRGB_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Color.LuminanceContrast",
          "content": "",
          "attachmentFiles": [],
          "summary": "Calculate the luminance contrast between two colors",
          "id": "4e2ca01b-ba87-40f3-9437-4588dc821474",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "R 1",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "G 1",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "B 1",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "R 2",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "G 2",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "B 2",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "Contrast",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1727787564060,
          "exampleProjectId": "lFzrvs",
          "shortName": "LuminanceContrast",
          "hasScreenshot": true,
          "namespace": "Ops.Color",
          "shortNameDisplay": "LuminanceContrast",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Color.LuminanceContrast",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Color.RGBLuminance",
          "content": "",
          "attachmentFiles": [],
          "summary": "Calculate the luminance of a RGB color",
          "id": "e144f418-2fc4-436a-a9b7-c16c598fe9e7",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "R",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "G",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "B",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "Luminance",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1727787401117,
          "exampleProjectId": "Du0rvs",
          "shortName": "RGBLuminance",
          "hasScreenshot": true,
          "namespace": "Ops.Color",
          "shortNameDisplay": "RGBLuminance",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Color.RGBLuminance",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Color.RGBToCMYK",
          "content": "",
          "attachmentFiles": [],
          "summary": "Output the CMYK value of a RGB color",
          "id": "aaab7bb4-1193-450a-bf3e-e34d234ec877",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "R",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "G",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "B",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "C",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "M",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Y",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "K",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [
              "chroma.js"
          ],
          "youtubeids": [],
          "created": 1727873067897,
          "exampleProjectId": "Du0rvs",
          "shortName": "RGBToCMYK",
          "hasScreenshot": true,
          "namespace": "Ops.Color",
          "shortNameDisplay": "RGBToCMYK",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Color.RGBToCMYK",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Color.RGBtoHSB",
          "content": "",
          "attachmentFiles": [],
          "summary": "convert RGB color to HSB Hue, Saturation, Brightness",
          "id": "22dd3a12-79ff-49ce-abe6-d3b5a3b06ff3",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "R",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "G",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "B",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "Hue",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Saturation",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Brightness",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1563310785990,
          "exampleProjectId": "Up7r8i",
          "shortName": "RGBtoHSB",
          "hasScreenshot": true,
          "namespace": "Ops.Color",
          "shortNameDisplay": "RGBtoHSB",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Color.RGBtoHSB",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Color.RGBtoHSL",
          "content": "",
          "attachmentFiles": [],
          "summary": "Convert RGB color to HSL values",
          "id": "dfaa03d8-dc03-4f36-bd0b-248a4eb2b722",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "R",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "G",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "B",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "Hue",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Saturation",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Lightness",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [
              "chroma.js"
          ],
          "youtubeids": [],
          "created": 1727786352874,
          "exampleProjectId": "Du0rvs",
          "shortName": "RGBtoHSL",
          "hasScreenshot": true,
          "namespace": "Ops.Color",
          "shortNameDisplay": "RGBtoHSL",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Color.RGBtoHSL",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Color.RgbToHex",
          "content": "",
          "attachmentFiles": [],
          "summary": "convert RGB float values to HEX color String",
          "id": "c0233dfa-ef4c-4451-b86e-3b2aadc8e9a5",
          "layout": {
              "portsIn": [
                  {
                      "type": "0",
                      "name": "r",
                      "subType": "number"
                  },
                  {
                      "type": "0",
                      "name": "g",
                      "subType": "number"
                  },
                  {
                      "type": "0",
                      "name": "b",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": "5",
                      "name": "Result"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1607441777367,
          "exampleProjectId": "Up7r8i",
          "shortName": "RgbToHex",
          "hasScreenshot": true,
          "namespace": "Ops.Color",
          "shortNameDisplay": "RgbToHex",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Color.RgbToHex",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Data.Compose.Array.CompArray",
          "content": "",
          "attachmentFiles": [],
          "summary": "Compose an Array",
          "id": "16f1ce37-9e0d-4632-a9ba-dfd42c4eb254",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Update"
                  },
                  {
                      "type": 0,
                      "name": "Active",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Clear",
                      "subType": "boolean"
                  },
                  {
                      "type": 1,
                      "name": "Reset"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  },
                  {
                      "type": 3,
                      "name": "Result"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1680617369758,
          "exampleProjectId": "RLvmjz",
          "shortName": "CompArray",
          "hasScreenshot": true,
          "namespace": "Ops.Data.Compose.Array",
          "shortNameDisplay": "CompArray",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Data.Compose.Array.CompArray",
                  "versionString": "",
                  "version": 0
              }
          ],
          "namespaceTitle": "Ops.Data.Compose.Array",
          "namespaceSummary": "",
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Data.Compose.Array.CompArrayPopNumber",
          "content": "",
          "attachmentFiles": [],
          "summary": "pop/remove the last number from an array",
          "id": "638a9336-15f3-4228-b5db-88aa25c3d16f",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Update"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  },
                  {
                      "type": 0,
                      "name": "Result",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1680618157701,
          "exampleProjectId": "",
          "shortName": "CompArrayPopNumber",
          "hasScreenshot": false,
          "namespace": "Ops.Data.Compose.Array",
          "shortNameDisplay": "CompArrayPopNumber",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Data.Compose.Array.CompArrayPopNumber",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Data.Compose.Array.CompArrayPushArray",
          "content": "",
          "attachmentFiles": [],
          "summary": "push/append an array to an array",
          "id": "7f9724de-4d81-4aeb-ae5e-8d566a3abf3e",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Update"
                  },
                  {
                      "type": 3,
                      "name": "Array"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1680619066020,
          "exampleProjectId": "",
          "shortName": "CompArrayPushArray",
          "hasScreenshot": false,
          "namespace": "Ops.Data.Compose.Array",
          "shortNameDisplay": "CompArrayPushArray",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Data.Compose.Array.CompArrayPushArray",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Data.Compose.Array.CompArrayPushArrayItems",
          "content": "",
          "attachmentFiles": [],
          "summary": "push/append an array to an array",
          "id": "4107c3c2-40ad-4bee-b809-022377bf5601",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Update"
                  },
                  {
                      "type": 3,
                      "name": "Array"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1709304953396,
          "exampleProjectId": "ADSKWn",
          "shortName": "CompArrayPushArrayItems",
          "hasScreenshot": true,
          "namespace": "Ops.Data.Compose.Array",
          "shortNameDisplay": "CompArrayPushArrayItems",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Data.Compose.Array.CompArrayPushArrayItems",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Data.Compose.Array.CompArrayPushNumber",
          "content": "",
          "attachmentFiles": [],
          "summary": "push/append a number to an array",
          "id": "49741334-d249-4f62-96ea-3ff582f38598",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Update"
                  },
                  {
                      "type": 0,
                      "name": "Number",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1680617920957,
          "exampleProjectId": "RLvmjz",
          "shortName": "CompArrayPushNumber",
          "hasScreenshot": true,
          "namespace": "Ops.Data.Compose.Array",
          "shortNameDisplay": "CompArrayPushNumber",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Data.Compose.Array.CompArrayPushNumber",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Data.Compose.Array.CompArrayPushNumbers",
          "content": "",
          "attachmentFiles": [],
          "summary": "push/append multiple numbers to an array",
          "id": "d356385a-ad48-4d74-8952-eeaf136b0c8c",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Update"
                  },
                  {
                      "type": 0,
                      "name": "X",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Y",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Z",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "W",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Num index",
                      "values": [
                          "1",
                          "2",
                          "3",
                          "4"
                      ],
                      "subType": "integer"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1686660300185,
          "exampleProjectId": "",
          "shortName": "CompArrayPushNumbers",
          "hasScreenshot": false,
          "namespace": "Ops.Data.Compose.Array",
          "shortNameDisplay": "CompArrayPushNumbers",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Data.Compose.Array.CompArrayPushNumbers",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Data.Compose.Array.CompArrayPushObject",
          "content": "<p>will try to create a copy of an object</p>\n",
          "attachmentFiles": [],
          "summary": "push/append an object to an array",
          "id": "761d75d3-aaae-49ba-8df1-20d8012fb70a",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Update"
                  },
                  {
                      "type": 2,
                      "name": "Object"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1698418579461,
          "exampleProjectId": "SCFZJK",
          "shortName": "CompArrayPushObject",
          "hasScreenshot": true,
          "namespace": "Ops.Data.Compose.Array",
          "shortNameDisplay": "CompArrayPushObject",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Data.Compose.Array.CompArrayPushObject",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Data.Compose.Array.CompArrayPushString",
          "content": "",
          "attachmentFiles": [],
          "summary": "push/append a string to an array",
          "id": "90680e4f-e14e-4708-a53b-420c0ea28913",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Update"
                  },
                  {
                      "type": 5,
                      "name": "String"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1680618224201,
          "exampleProjectId": "",
          "shortName": "CompArrayPushString",
          "hasScreenshot": false,
          "namespace": "Ops.Data.Compose.Array",
          "shortNameDisplay": "CompArrayPushString",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Data.Compose.Array.CompArrayPushString",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Data.Compose.Array.CompArrayShiftNumber",
          "content": "",
          "attachmentFiles": [],
          "summary": "shift/remove the first number from an array",
          "id": "ae75461e-9656-4b32-a5a7-eb4352bac2c3",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Update"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  },
                  {
                      "type": 0,
                      "name": "Result",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1680618025319,
          "exampleProjectId": "",
          "shortName": "CompArrayShiftNumber",
          "hasScreenshot": false,
          "namespace": "Ops.Data.Compose.Array",
          "shortNameDisplay": "CompArrayShiftNumber",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Data.Compose.Array.CompArrayShiftNumber",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Data.Compose.Array.CompArraySnapshot",
          "content": "",
          "attachmentFiles": [],
          "summary": "get a copy of the current state of an array",
          "id": "3703008b-0500-4a54-ae9a-58561a82d8e3",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Update"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  },
                  {
                      "type": 3,
                      "name": "Result"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1686661094980,
          "exampleProjectId": "",
          "shortName": "CompArraySnapshot",
          "hasScreenshot": false,
          "namespace": "Ops.Data.Compose.Array",
          "shortNameDisplay": "CompArraySnapshot",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Data.Compose.Array.CompArraySnapshot",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Data.Compose.Object.CompObject",
          "content": "",
          "attachmentFiles": [],
          "summary": "Compose an Object",
          "id": "c85b449b-fb4e-40b3-928e-5eea6a5d0ebc",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Update"
                  },
                  {
                      "type": 0,
                      "name": "Clear",
                      "subType": "boolean"
                  },
                  {
                      "type": 1,
                      "name": "Reset"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  },
                  {
                      "type": 2,
                      "name": "Result"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1680618476170,
          "exampleProjectId": "Theojz",
          "shortName": "CompObject",
          "hasScreenshot": true,
          "namespace": "Ops.Data.Compose.Object",
          "shortNameDisplay": "CompObject",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Data.Compose.Object.CompObject",
                  "versionString": "",
                  "version": 0
              }
          ],
          "namespaceTitle": "Ops.Data.Compose.Object",
          "namespaceSummary": "",
          "allowEdit": false
      },
      {
          "name": "Ops.Data.Compose.Object.CompObjectFromObject",
          "content": "",
          "attachmentFiles": [],
          "summary": "Set key/values to the current ObjectCompose from an existing object",
          "id": "19285432-bb48-4abe-9664-bfe7e40e175f",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Update"
                  },
                  {
                      "type": 2,
                      "name": "Object"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1719410702480,
          "exampleProjectId": "9ORqOg",
          "shortName": "CompObjectFromObject",
          "hasScreenshot": true,
          "namespace": "Ops.Data.Compose.Object",
          "shortNameDisplay": "CompObjectFromObject",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Data.Compose.Object.CompObjectFromObject",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Data.Compose.Object.CompObjectSetArray",
          "content": "",
          "attachmentFiles": [],
          "summary": "set array as object property",
          "id": "192882bd-17c3-4a7b-a393-d240fa4d9fbf",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Update"
                  },
                  {
                      "type": 5,
                      "name": "Key"
                  },
                  {
                      "type": 3,
                      "name": "Array"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1680627161558,
          "exampleProjectId": "Theojz",
          "shortName": "CompObjectSetArray",
          "hasScreenshot": true,
          "namespace": "Ops.Data.Compose.Object",
          "shortNameDisplay": "CompObjectSetArray",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Data.Compose.Object.CompObjectSetArray",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Data.Compose.Object.CompObjectSetBool",
          "content": "",
          "attachmentFiles": [],
          "summary": "set a boolean as object property",
          "id": "5f0d1ef7-3d41-45df-8d26-6d354b0c0cd8",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Update"
                  },
                  {
                      "type": 5,
                      "name": "Key"
                  },
                  {
                      "type": 0,
                      "name": "Boolean",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  }
              ]
          },
          "authorName": "tob_har",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1699217231147,
          "exampleProjectId": "ggd-JK",
          "shortName": "CompObjectSetBool",
          "hasScreenshot": true,
          "namespace": "Ops.Data.Compose.Object",
          "shortNameDisplay": "CompObjectSetBool",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Data.Compose.Object.CompObjectSetBool",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Data.Compose.Object.CompObjectSetNumber",
          "content": "",
          "attachmentFiles": [],
          "summary": "set number as object property",
          "id": "58a75bf7-6828-4190-a205-3b8037bc24d4",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Update"
                  },
                  {
                      "type": 5,
                      "name": "Key"
                  },
                  {
                      "type": 0,
                      "name": "Number",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1680618732493,
          "exampleProjectId": "Theojz",
          "shortName": "CompObjectSetNumber",
          "hasScreenshot": true,
          "namespace": "Ops.Data.Compose.Object",
          "shortNameDisplay": "CompObjectSetNumber",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Data.Compose.Object.CompObjectSetNumber",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Data.Compose.Object.CompObjectSetObject",
          "content": "",
          "attachmentFiles": [],
          "summary": "set object as object property",
          "id": "1c6974a0-3f70-4a64-8bb6-3d8ac99beab4",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Update"
                  },
                  {
                      "type": 5,
                      "name": "Key"
                  },
                  {
                      "type": 2,
                      "name": "Object"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1686670743687,
          "exampleProjectId": "",
          "shortName": "CompObjectSetObject",
          "hasScreenshot": false,
          "namespace": "Ops.Data.Compose.Object",
          "shortNameDisplay": "CompObjectSetObject",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Data.Compose.Object.CompObjectSetObject",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Data.Compose.Object.CompObjectSetString",
          "content": "",
          "attachmentFiles": [],
          "summary": "set string as object property",
          "id": "b5a24d4c-4b1d-44c7-b6ef-a38cc71b9ad1",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Update"
                  },
                  {
                      "type": 5,
                      "name": "Key"
                  },
                  {
                      "type": 5,
                      "name": "String"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1680618631596,
          "exampleProjectId": "Theojz",
          "shortName": "CompObjectSetString",
          "hasScreenshot": true,
          "namespace": "Ops.Data.Compose.Object",
          "shortNameDisplay": "CompObjectSetString",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Data.Compose.Object.CompObjectSetString",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Data.Compose.String.CompString",
          "content": "",
          "attachmentFiles": [],
          "summary": "Compose a string",
          "id": "a1fde819-2b8e-4520-8086-c08e00e0d2f7",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Update"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  },
                  {
                      "type": 5,
                      "name": "Result"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1689760384412,
          "exampleProjectId": "GUpzJB",
          "shortName": "CompString",
          "hasScreenshot": true,
          "namespace": "Ops.Data.Compose.String",
          "shortNameDisplay": "CompString",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Data.Compose.String.CompString",
                  "versionString": "",
                  "version": 0
              }
          ],
          "namespaceTitle": "Ops.Data.Compose.String",
          "namespaceSummary": "",
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Data.Compose.String.CompStringAppend",
          "content": "",
          "attachmentFiles": [],
          "summary": "Append a string to a string",
          "id": "20ed335d-fb41-459e-b1dc-34d1a92074b5",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Update"
                  },
                  {
                      "type": 0,
                      "name": "Direction index",
                      "values": [
                          "End",
                          "Begin"
                      ],
                      "subType": "integer"
                  },
                  {
                      "type": 5,
                      "name": "String"
                  },
                  {
                      "type": 0,
                      "name": "Add Break",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1689760598014,
          "exampleProjectId": "Yqj7eG",
          "shortName": "CompStringAppend",
          "hasScreenshot": true,
          "namespace": "Ops.Data.Compose.String",
          "shortNameDisplay": "CompStringAppend",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Data.Compose.String.CompStringAppend",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Data.Compose.String.CompStringShorten",
          "content": "",
          "attachmentFiles": [],
          "summary": "Remove characters from the beginning or end of a string",
          "id": "f651619e-6353-4496-8910-cb0d8ea7af17",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Update"
                  },
                  {
                      "type": 0,
                      "name": "Direction index",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Num Chars",
                      "subType": "integer"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1689760770988,
          "exampleProjectId": "Yqj7eG",
          "shortName": "CompStringShorten",
          "hasScreenshot": true,
          "namespace": "Ops.Data.Compose.String",
          "shortNameDisplay": "CompStringShorten",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Data.Compose.String.CompStringShorten",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Data.JsonPath.ArrayGetArrayByPath",
          "content": "<p>useful when working with  nested data structures. </p>\n<p>the path defines the way to the array. the given array will be returned</p>\n<p>given an array like this:</p>\n<pre><code>[\n    [\n        {\n            &quot;firstName&quot;: &quot;Gordon&quot;,\n            &quot;lastName&quot;: &quot;Freeman&quot;\n        }\n   ],\n   [\n        {\n            &quot;firstName&quot;: &quot;Eli&quot;,\n            &quot;lastName&quot;: &quot;Vance&quot;\n        }\n    ]\n]\n</code></pre>\n<p>a path of <code>0</code> will result in this array:</p>\n<pre><code> [\n        {\n            &quot;firstName&quot;: &quot;Gordon&quot;,\n            &quot;lastName&quot;: &quot;Freeman&quot;\n        }\n]\n</code></pre>\n",
          "attachmentFiles": [],
          "summary": "returns the array at the position defined by a path",
          "id": "f8fd1e41-d56a-4046-83a1-2ca194c828fc",
          "layout": {
              "portsIn": [
                  {
                      "type": 3,
                      "name": "Array"
                  },
                  {
                      "type": 5,
                      "name": "Path"
                  }
              ],
              "portsOut": [
                  {
                      "type": 3,
                      "name": "Output"
                  },
                  {
                      "type": 0,
                      "name": "Found",
                      "subType": "boolean"
                  }
              ]
          },
          "authorName": "stephan",
          "docs": {
              "ports": [
                  {
                      "name": "Path",
                      "text": "path to array (i.e. data.numbers)"
                  },
                  {
                      "name": "Output",
                      "text": "array of values"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1610123183069,
          "exampleProjectId": "uqXSWr",
          "shortName": "ArrayGetArrayByPath",
          "hasScreenshot": false,
          "namespace": "Ops.Data.JsonPath",
          "shortNameDisplay": "ArrayGetArrayByPath",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Data.JsonPath.ArrayGetArrayByPath",
                  "versionString": "",
                  "version": 0
              }
          ],
          "namespaceTitle": "Ops.Data.JsonPath",
          "namespaceSummary": "",
          "allowEdit": false
      },
      {
          "name": "Ops.Data.JsonPath.ArrayGetArrayValuesByPath",
          "content": "<p>useful to interate over nested data structures. </p>\n<p>the path defines the way to the first object. this op will then try to iterate over the array that contains the object with the given property and return all the values fo each object in the array.</p>\n<p>given an array like this:</p>\n<pre><code>[\n    [\n        {\n            &quot;firstName&quot;: &quot;Gordon&quot;,\n            &quot;lastName&quot;: &quot;Freeman&quot;\n        },\n        {\n            &quot;firstName&quot;: &quot;Eli&quot;,\n            &quot;lastName&quot;: &quot;Vance&quot;\n        }\n    ],\n    [\n        {\n            &quot;firstName&quot;: &quot;Alyx&quot;,\n            &quot;lastName&quot;: &quot;Vance&quot;\n        },\n        {\n            &quot;firstName&quot;: &quot;G&quot;,\n            &quot;lastName&quot;: &quot;Man&quot;\n        }\n    ]\n]\n</code></pre>\n<p>a path of <code>0.0.firstName</code> will result in this array:</p>\n<pre><code>[\n  &quot;Gordon&quot;,\n  &quot;Alyx&quot;,\n]\n</code></pre>\n",
          "attachmentFiles": [],
          "summary": "Outputs all the values of the properties of an array of objects given a path",
          "id": "f4aa5756-c681-47ac-a997-b4f91760db96",
          "layout": {
              "portsIn": [
                  {
                      "type": 3,
                      "name": "Array"
                  },
                  {
                      "type": 5,
                      "name": "Path"
                  }
              ],
              "portsOut": [
                  {
                      "type": 3,
                      "name": "Output"
                  },
                  {
                      "type": 0,
                      "name": "Found",
                      "subType": "boolean"
                  }
              ]
          },
          "authorName": "stephan",
          "docs": {
              "ports": [
                  {
                      "name": "Path",
                      "text": "path to first array field (i.e. \"data.0.firstName\")"
                  },
                  {
                      "name": "Output",
                      "text": "array of values"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1610123546187,
          "exampleProjectId": "Y3pXWr",
          "shortName": "ArrayGetArrayValuesByPath",
          "hasScreenshot": true,
          "namespace": "Ops.Data.JsonPath",
          "shortNameDisplay": "ArrayGetArrayValuesByPath",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Data.JsonPath.ArrayGetArrayValuesByPath",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Data.JsonPath.ArrayGetNumberByPath",
          "content": "<p>useful when working with nested data structures.</p>\n<p>the path defines the way to the number. the number will be returned</p>\n<p>given an array like this:</p>\n<pre><code>[ 1,2,3,4,5]\n</code></pre>\n<p>a path of 1 will return <code>2</code>:</p>\n",
          "attachmentFiles": [],
          "summary": "finds a number at a position in an array defined by path",
          "id": "9a8ac7c9-dc88-44cb-b4f7-fead5ebb9ed7",
          "layout": {
              "portsIn": [
                  {
                      "type": 3,
                      "name": "Array"
                  },
                  {
                      "type": 5,
                      "name": "Path"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "Output",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Found",
                      "subType": "boolean"
                  }
              ]
          },
          "authorName": "stephan",
          "docs": {
              "ports": [
                  {
                      "name": "Path",
                      "text": "the past (i.e. person.age)"
                  },
                  {
                      "name": "Output",
                      "text": "the number"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1610123204871,
          "exampleProjectId": "7kSVWr",
          "shortName": "ArrayGetNumberByPath",
          "hasScreenshot": true,
          "namespace": "Ops.Data.JsonPath",
          "shortNameDisplay": "ArrayGetNumberByPath",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Data.JsonPath.ArrayGetNumberByPath",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Data.JsonPath.ArrayGetObjectByPath",
          "content": "<p>useful when working with nested data structures. </p>\n<p>the path defines the way to the object . the given object will be returned</p>\n<p>given an array like this:</p>\n<pre><code>[\n    [\n        {\n            &quot;name&quot;: &quot;alyx&quot;\n        },\n        {\n            &quot;name&quot;: &quot;eli&quot;\n        }\n    ],\n    [\n        {\n            &quot;name&quot;: &quot;gordon&quot;\n        }\n    ] \n]\n</code></pre>\n<p>a path of <code>0.1</code> will result in this array:</p>\n<pre><code>[\n    {\n        &quot;name&quot;: &quot;alyx&quot;\n    },\n    {\n        &quot;name&quot;: &quot;eli&quot;\n    }\n]\n</code></pre>\n",
          "attachmentFiles": [],
          "summary": "Returns the object at the position defined by a path",
          "id": "c73970f0-f8fb-4d12-af19-649d17b0195f",
          "layout": {
              "portsIn": [
                  {
                      "type": 3,
                      "name": "Array"
                  },
                  {
                      "type": 5,
                      "name": "Path"
                  }
              ],
              "portsOut": [
                  {
                      "type": 2,
                      "name": "Output"
                  },
                  {
                      "type": 0,
                      "name": "Found",
                      "subType": "boolean"
                  }
              ]
          },
          "authorName": "stephan",
          "docs": {
              "ports": [
                  {
                      "name": "Path",
                      "text": "the path"
                  },
                  {
                      "name": "Output",
                      "text": "the object"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1610123226042,
          "exampleProjectId": "AapUWr",
          "shortName": "ArrayGetObjectByPath",
          "hasScreenshot": true,
          "namespace": "Ops.Data.JsonPath",
          "shortNameDisplay": "ArrayGetObjectByPath",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Data.JsonPath.ArrayGetObjectByPath",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Data.JsonPath.ArrayGetStringByPath",
          "content": "<p>useful when working with nested data structures.</p>\n<p>the path defines the way to the string. the string will be returned</p>\n<p>given an array like this:</p>\n<pre><code>[ &quot;alyx&quot;,&quot;gordon&quot;,&quot;eli&quot;,&quot;g-man&quot;]\n</code></pre>\n<p>a path of 2 will return <code>eli</code>:</p>\n",
          "attachmentFiles": [],
          "summary": "Finds a string at a position in an array defined by path",
          "id": "064fc275-f61d-4c5f-9692-28c2062248bf",
          "layout": {
              "portsIn": [
                  {
                      "type": 3,
                      "name": "Array"
                  },
                  {
                      "type": 5,
                      "name": "Path"
                  },
                  {
                      "type": 0,
                      "name": "Return path if missing",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 5,
                      "name": "Output"
                  },
                  {
                      "type": 0,
                      "name": "Found",
                      "subType": "boolean"
                  }
              ]
          },
          "authorName": "stephan",
          "docs": {
              "ports": [
                  {
                      "name": "Object",
                      "text": "json object"
                  },
                  {
                      "name": "Path",
                      "text": "the path (i.e. data.names)"
                  },
                  {
                      "name": "Output",
                      "text": "the string"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1610120103869,
          "exampleProjectId": "rs0XWr",
          "shortName": "ArrayGetStringByPath",
          "hasScreenshot": true,
          "namespace": "Ops.Data.JsonPath",
          "shortNameDisplay": "ArrayGetStringByPath",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Data.JsonPath.ArrayGetStringByPath",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Data.JsonPath.ObjectGetArrayByPath",
          "content": "<p>useful when working with  nested data structures. </p>\n<p>the path defines the way to the array. the given array will be returned</p>\n<p>given an object like this:</p>\n<pre><code>{\n    &quot;data&quot;: { \n        &quot;persons&quot;: [ \n            {\n                &quot;name&quot;: &quot;alyx&quot;\n            },\n            {\n                &quot;name&quot;: &quot;eli&quot;\n            },\n            {\n                &quot;name&quot;: &quot;gordon&quot;\n            }\n        ] \n    }\n}\n</code></pre>\n<p>a path of <code>data.persons</code> will result in this array:</p>\n<pre><code> [ \n            {\n                &quot;name&quot;: &quot;alyx&quot;\n            },\n            {\n                &quot;name&quot;: &quot;eli&quot;\n            },\n            {\n                &quot;name&quot;: &quot;gordon&quot;\n            }\n        ] \n</code></pre>\n",
          "attachmentFiles": [],
          "summary": "returns the array at the position defined by a path",
          "id": "a9354531-a42d-4216-ad8c-364df989a9a1",
          "layout": {
              "portsIn": [
                  {
                      "type": 2,
                      "name": "Object"
                  },
                  {
                      "type": 5,
                      "name": "Path"
                  }
              ],
              "portsOut": [
                  {
                      "type": 3,
                      "name": "Output"
                  },
                  {
                      "type": 0,
                      "name": "Found",
                      "subType": "boolean"
                  }
              ]
          },
          "authorName": "stephan",
          "docs": {
              "ports": [
                  {
                      "name": "Object",
                      "text": "json object"
                  },
                  {
                      "name": "Path",
                      "text": "path to array (i.e. data.numbers)"
                  },
                  {
                      "name": "Output",
                      "text": "array of values"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1596729437053,
          "exampleProjectId": "oghmln",
          "shortName": "ObjectGetArrayByPath",
          "hasScreenshot": true,
          "namespace": "Ops.Data.JsonPath",
          "shortNameDisplay": "ObjectGetArrayByPath",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Data.JsonPath.ObjectGetArrayByPath",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Data.JsonPath.ObjectGetArrayValuesByPath",
          "content": "<p>useful to interate over nested data structures. </p>\n<p>the path defines the way to the first object. this op will then try to iterate over the array that contains the object with the given property and return all the values fo each object in the array.</p>\n<p>given an object like this:</p>\n<pre><code>{\n    &quot;data&quot;: [\n        {\n            &quot;firstName&quot;: &quot;Gordon&quot;,\n            &quot;lastName&quot;: &quot;Freeman&quot;\n        },\n        {\n            &quot;firstName&quot;: &quot;Eli&quot;,\n            &quot;lastName&quot;: &quot;Vance&quot;\n        },\n        {\n            &quot;firstName&quot;: &quot;Alyx&quot;,\n            &quot;lastName&quot;: &quot;Vance&quot;\n        },\n        {\n            &quot;firstName&quot;: &quot;G&quot;,\n            &quot;lastName&quot;: &quot;Man&quot;\n        }\n    ]\n}\n</code></pre>\n<p>a path of <code>data.0.firstName</code> will result in this array:</p>\n<pre><code>[\n  &quot;Gordon&quot;,\n  &quot;Eli&quot;,\n  &quot;Alyx&quot;,\n  &quot;G&quot;\n]\n</code></pre>\n",
          "attachmentFiles": [],
          "summary": "Outputs all the values of the properties of an array of objects given a path",
          "id": "609a645e-5e24-4a5e-a379-804c5b64f5d5",
          "layout": {
              "portsIn": [
                  {
                      "type": 2,
                      "name": "Object"
                  },
                  {
                      "type": 5,
                      "name": "Path"
                  }
              ],
              "portsOut": [
                  {
                      "type": 3,
                      "name": "Output"
                  },
                  {
                      "type": 0,
                      "name": "Found",
                      "subType": "boolean"
                  }
              ]
          },
          "authorName": "stephan",
          "docs": {
              "ports": [
                  {
                      "name": "Object",
                      "text": "json object"
                  },
                  {
                      "name": "Path",
                      "text": "path to first array field (i.e. \"data.0.firstName\")"
                  },
                  {
                      "name": "Output",
                      "text": "array of values"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1596713958059,
          "exampleProjectId": "fBcgln",
          "shortName": "ObjectGetArrayValuesByPath",
          "hasScreenshot": true,
          "namespace": "Ops.Data.JsonPath",
          "shortNameDisplay": "ObjectGetArrayValuesByPath",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Data.JsonPath.ObjectGetArrayValuesByPath",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Data.JsonPath.ObjectGetNumberByPath",
          "content": "<p>useful when working with nested data structures.</p>\n<p>the path defines the way to the number. the number will be returned</p>\n<p>given an object like this:</p>\n<pre><code>{\n    &quot;data&quot;: { &quot;numbers&quot;: [ 1,2,3,4,5] }\n}\n</code></pre>\n<p>a path of <code>data.numbers.1</code> will return <code>2</code>:</p>\n",
          "attachmentFiles": [],
          "summary": "finds a number at a position in an object defined by path",
          "id": "ec736baf-feb8-4d8d-b04c-173fc197759c",
          "layout": {
              "portsIn": [
                  {
                      "type": 2,
                      "name": "Object"
                  },
                  {
                      "type": 5,
                      "name": "Path"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "Output",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Found",
                      "subType": "boolean"
                  }
              ]
          },
          "authorName": "stephan",
          "docs": {
              "ports": [
                  {
                      "name": "Object",
                      "text": "json object"
                  },
                  {
                      "name": "Path",
                      "text": "the past (i.e. person.age)"
                  },
                  {
                      "name": "Output",
                      "text": "the number"
                  }
              ]
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1596729430591,
          "exampleProjectId": "RrYnln",
          "shortName": "ObjectGetNumberByPath",
          "hasScreenshot": true,
          "namespace": "Ops.Data.JsonPath",
          "shortNameDisplay": "ObjectGetNumberByPath",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Data.JsonPath.ObjectGetNumberByPath",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Data.JsonPath.ObjectGetObjectByPath",
          "content": "<p>useful when working with nested data structures. </p>\n<p>the path defines the way to the object . the given object will be returned</p>\n<p>given an object like this:</p>\n<pre><code>{\n    &quot;data&quot;: { \n        &quot;persons&quot;: [ \n            {\n                &quot;name&quot;: &quot;alyx&quot;\n            },\n            {\n                &quot;name&quot;: &quot;eli&quot;\n            },\n            {\n                &quot;name&quot;: &quot;gordon&quot;\n            }\n        ] \n    }\n}\n</code></pre>\n<p>a path of <code>data.persons.1</code> will result in this object:</p>\n<pre><code>{\n  &quot;name&quot;: &quot;eli&quot;\n}\n</code></pre>\n",
          "attachmentFiles": [],
          "summary": "Returns the object at the position defined by a path",
          "id": "574513c7-472b-433c-bf99-d906d3c737cd",
          "layout": {
              "portsIn": [
                  {
                      "type": 2,
                      "name": "Object"
                  },
                  {
                      "type": 5,
                      "name": "Path"
                  }
              ],
              "portsOut": [
                  {
                      "type": 2,
                      "name": "Output"
                  },
                  {
                      "type": 0,
                      "name": "Found",
                      "subType": "boolean"
                  }
              ]
          },
          "authorName": "stephan",
          "docs": {
              "ports": [
                  {
                      "name": "Object",
                      "text": "json object"
                  },
                  {
                      "name": "Path",
                      "text": "the path"
                  },
                  {
                      "name": "Output",
                      "text": "the object"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1596729422402,
          "exampleProjectId": "-Zlrln",
          "shortName": "ObjectGetObjectByPath",
          "hasScreenshot": true,
          "namespace": "Ops.Data.JsonPath",
          "shortNameDisplay": "ObjectGetObjectByPath",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Data.JsonPath.ObjectGetObjectByPath",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Data.JsonPath.ObjectGetStringByPath",
          "content": "<p>useful when working with nested data structures.</p>\n<p>the path defines the way to the string. the stringwill be returned</p>\n<p>given an object like this:</p>\n<pre><code>{\n    &quot;data&quot;: { &quot;names&quot;: [ &quot;alyx&quot;,&quot;gordon&quot;,&quot;eli&quot;,&quot;g-man&quot;] }\n}\n</code></pre>\n<p>a path of data.names.1 will return <code>gordon</code>:</p>\n",
          "attachmentFiles": [],
          "summary": "Finds a string at a position in an object defined by path",
          "id": "497a6b7c-e33c-45e4-8fb2-a9149d972b5b",
          "layout": {
              "portsIn": [
                  {
                      "type": 2,
                      "name": "Object"
                  },
                  {
                      "type": 5,
                      "name": "Path"
                  },
                  {
                      "type": 0,
                      "name": "Output path if missing",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 5,
                      "name": "Output"
                  },
                  {
                      "type": 0,
                      "name": "Found",
                      "subType": "boolean"
                  }
              ]
          },
          "authorName": "stephan",
          "docs": {
              "ports": [
                  {
                      "name": "Object",
                      "text": "json object"
                  },
                  {
                      "name": "Path",
                      "text": "the path (i.e. data.names)"
                  },
                  {
                      "name": "Output",
                      "text": "the string"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1596729426848,
          "exampleProjectId": "eJIqln",
          "shortName": "ObjectGetStringByPath",
          "hasScreenshot": true,
          "namespace": "Ops.Data.JsonPath",
          "shortNameDisplay": "ObjectGetStringByPath",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Data.JsonPath.ObjectGetStringByPath",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Data.StackValues.StackGetArray",
          "content": "",
          "attachmentFiles": [],
          "summary": "read a value from the stack to use it later in the trigger branch",
          "id": "e021e748-705a-49ab-9c9d-bb66eebca04b",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Trigger"
                  },
                  {
                      "type": 5,
                      "name": "Name"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  },
                  {
                      "type": 3,
                      "name": "Array"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1704960953811,
          "exampleProjectId": "NT30kP",
          "shortName": "StackGetArray",
          "hasScreenshot": true,
          "namespace": "Ops.Data.StackValues",
          "shortNameDisplay": "StackGetArray",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Data.StackValues.StackGetArray",
                  "versionString": "",
                  "version": 0
              }
          ],
          "namespaceTitle": "Ops.Data.StackValues",
          "namespaceSummary": "",
          "allowEdit": false
      },
      {
          "name": "Ops.Data.StackValues.StackGetNumber",
          "content": "",
          "attachmentFiles": [],
          "summary": "read a value from the stack to use it later in the trigger branch",
          "id": "a5583bca-cb79-4713-9a63-db365cb5e1da",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Exec"
                  },
                  {
                      "type": 5,
                      "name": "Name"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  },
                  {
                      "type": 0,
                      "name": "Value",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1704364444905,
          "exampleProjectId": "NT30kP",
          "shortName": "StackGetNumber",
          "hasScreenshot": true,
          "namespace": "Ops.Data.StackValues",
          "shortNameDisplay": "StackGetNumber",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Data.StackValues.StackGetNumber",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Data.StackValues.StackGetTexture",
          "content": "",
          "attachmentFiles": [],
          "summary": "read a value from the stack to use it later in the trigger branch",
          "id": "47608786-0e92-4d75-a183-b228f6849e89",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Exec"
                  },
                  {
                      "type": 5,
                      "name": "Name"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  },
                  {
                      "type": 2,
                      "name": "Texture",
                      "objType": "texture"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1704385300737,
          "exampleProjectId": "NT30kP",
          "shortName": "StackGetTexture",
          "hasScreenshot": true,
          "namespace": "Ops.Data.StackValues",
          "shortNameDisplay": "StackGetTexture",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Data.StackValues.StackGetTexture",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Data.StackValues.StackPushArray",
          "content": "",
          "attachmentFiles": [],
          "summary": "push a value on to the stack to use it later in the trigger branch",
          "id": "75d6582c-90bf-4aff-9047-b05d32ab2c2b",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Trigger"
                  },
                  {
                      "type": 5,
                      "name": "Name"
                  },
                  {
                      "type": 3,
                      "name": "ArrayOps.Team.MEvent_OTjRYN.SidebarEventManagement"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1704960945760,
          "exampleProjectId": "NT30kP",
          "shortName": "StackPushArray",
          "hasScreenshot": true,
          "namespace": "Ops.Data.StackValues",
          "shortNameDisplay": "StackPushArray",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Data.StackValues.StackPushArray",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Data.StackValues.StackPushNumber",
          "content": "",
          "attachmentFiles": [],
          "summary": "push a value on to the stack to use it later in the trigger branch",
          "id": "83cea577-9881-4061-bb30-166e54222585",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Exec"
                  },
                  {
                      "type": 5,
                      "name": "Name"
                  },
                  {
                      "type": 0,
                      "name": "Value",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1704363953940,
          "exampleProjectId": "NT30kP",
          "shortName": "StackPushNumber",
          "hasScreenshot": true,
          "namespace": "Ops.Data.StackValues",
          "shortNameDisplay": "StackPushNumber",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Data.StackValues.StackPushNumber",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Data.StackValues.StackPushTexture",
          "content": "",
          "attachmentFiles": [],
          "summary": "push a value on to the stack to use it later in the trigger branch",
          "id": "57fec2b8-ebb8-4391-bd2c-bd5eae79a562",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Trigger"
                  },
                  {
                      "type": 5,
                      "name": "Name"
                  },
                  {
                      "type": 2,
                      "name": "Texture",
                      "objType": "texture"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1704385288065,
          "exampleProjectId": "NT30kP",
          "shortName": "StackPushTexture",
          "hasScreenshot": true,
          "namespace": "Ops.Data.StackValues",
          "shortNameDisplay": "StackPushTexture",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Data.StackValues.StackPushTexture",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Date.DateAndTime",
          "content": "",
          "attachmentFiles": [],
          "summary": "Returns current date and time and timestamp",
          "id": "beff95ec-7b50-4b6e-80b8-a7e4ab97d8cc",
          "layout": {
              "portsIn": [
                  {
                      "type": "0",
                      "name": "Update Rate",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": "0",
                      "name": "Year",
                      "subType": "number"
                  },
                  {
                      "type": "0",
                      "name": "Month",
                      "subType": "number"
                  },
                  {
                      "type": "0",
                      "name": "Day",
                      "subType": "number"
                  },
                  {
                      "type": "0",
                      "name": "Hours",
                      "subType": "number"
                  },
                  {
                      "type": "0",
                      "name": "Minutes",
                      "subType": "number"
                  },
                  {
                      "type": "0",
                      "name": "Seconds",
                      "subType": "number"
                  },
                  {
                      "type": "0",
                      "name": "Timestamp",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "Update Rate",
                      "text": "How often the op should update the output (in milliseconds)"
                  },
                  {
                      "name": "Year",
                      "text": "The current year"
                  },
                  {
                      "name": "Month",
                      "text": "The current month"
                  },
                  {
                      "name": "Day",
                      "text": "The current day"
                  },
                  {
                      "name": "Hours",
                      "text": "The current hour"
                  },
                  {
                      "name": "Minutes",
                      "text": "The current minute"
                  },
                  {
                      "name": "Seconds",
                      "text": "The current second"
                  },
                  {
                      "name": "Timestamp",
                      "text": "The current timestamp"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1525244144566,
          "exampleProjectId": "GuzKSD",
          "shortName": "DateAndTime",
          "hasScreenshot": true,
          "namespace": "Ops.Date",
          "shortNameDisplay": "DateAndTime",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Date.DateAndTime",
                  "versionString": "",
                  "version": 0
              }
          ],
          "namespaceTitle": "Ops.Date",
          "namespaceSummary": "",
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Date.DateCalc",
          "content": "<p>This Op lets you perform date calculations.\nAdding and subtracting seconds, minutes, hours, days, months or years to the input date.\nNo dependencies.\nSample patch: <a href=\"https://cables.gl/edit/mzfGGl\">https://cables.gl/edit/mzfGGl</a></p>\n",
          "attachmentFiles": [],
          "summary": "Perform date calculations",
          "id": "1420b781-7b09-4102-b1fd-2cb841e57b95",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "timestamp",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "difference",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "type index",
                      "subType": "integer"
                  },
                  {
                      "type": 1,
                      "name": "update"
                  }
              ],
              "portsOut": [
                  {
                      "type": 2,
                      "name": "Date"
                  },
                  {
                      "type": 0,
                      "name": "Timestamp",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "GeertVanDamme",
          "docs": {
              "ports": [
                  {
                      "name": "timestamp",
                      "text": "Unix timestamp. eg. from the DateAndTime op. If empty, current timestamp is used"
                  },
                  {
                      "name": "difference",
                      "text": "Number of days / months / .... to add"
                  },
                  {
                      "name": "type",
                      "text": "The date part that needs to change [\"years\", \"months\", \"days\", \"hours\", \"minutes\", \"seconds\"] "
                  },
                  {
                      "name": "update",
                      "text": "Update time value (not needed if an timestamp input is used)"
                  },
                  {
                      "name": "Date",
                      "text": "The calculated date in JS Date format"
                  },
                  {
                      "name": "Timestamp",
                      "text": "The calculated date in timestamp (milliseconds) format"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1605645541805,
          "exampleProjectId": "mzfGGl",
          "issues": "There is a dependency on moment.js, but it's not used. I can't find where to remove the dependency",
          "shortName": "DateCalc",
          "hasScreenshot": true,
          "namespace": "Ops.Date",
          "shortNameDisplay": "DateCalc",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Date.DateCalc",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Date.DateDifference",
          "content": "",
          "attachmentFiles": [],
          "summary": "Calculates the difference between two timestamps",
          "id": "34cd865c-cc4d-4c58-afb2-626773eb412e",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "Timestamp 1",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Timestamp 2",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Stop at 0",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "Year",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Month",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Day",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Hours",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Minutes",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Seconds",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Milliseconds",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Diff",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "Timestamp 1",
                      "text": "The first timestamp"
                  },
                  {
                      "name": "Timestamp 2",
                      "text": "The second timestamp"
                  },
                  {
                      "name": "Year",
                      "text": "Years of the difference"
                  },
                  {
                      "name": "Month",
                      "text": "Months of the difference"
                  },
                  {
                      "name": "Day",
                      "text": "Days of the difference"
                  },
                  {
                      "name": "Hours",
                      "text": "Hours of the difference"
                  },
                  {
                      "name": "Minutes",
                      "text": "Minutes of the difference"
                  },
                  {
                      "name": "Seconds",
                      "text": "Seconds of the difference"
                  },
                  {
                      "name": "Milliseconds",
                      "text": "Milliseconds of the difference"
                  },
                  {
                      "name": "Diff",
                      "text": "The difference as timestamp"
                  }
              ]
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1511019287735,
          "exampleProjectId": "d1NUet",
          "shortName": "DateDifference",
          "hasScreenshot": true,
          "namespace": "Ops.Date",
          "shortNameDisplay": "DateDifference",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Date.DateDifference",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Date.DateFormatter",
          "content": "<p>This Op takes a Date or Timestamp value and creates a String representation for that date.\nThe formatting is done with moment.js.</p>\n<p><a href=\"https://momentjs.com/docs/#/displaying/\">https://momentjs.com/docs/#/displaying/</a></p>\n<p>e.g.: </p>\n<ul>\n<li>ddd YYYY-MM-DD HH:mm:ss</li>\n<li>YYYY-MM-DD</li>\n<li>HH:mm:ss</li>\n</ul>\n",
          "attachmentFiles": [],
          "summary": "String representation of a date",
          "id": "8933d01f-39ac-428c-a64b-902c534a4fc0",
          "layout": {
              "portsIn": [
                  {
                      "type": "0",
                      "name": "Timestamp",
                      "subType": "number"
                  },
                  {
                      "type": "2",
                      "name": "Date"
                  },
                  {
                      "type": "5",
                      "name": "Format"
                  }
              ],
              "portsOut": [
                  {
                      "type": "5",
                      "name": "StringDate"
                  }
              ]
          },
          "authorName": "GeertVanDamme",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [
              "moment.js"
          ],
          "youtubeids": [],
          "created": 1605644930764,
          "exampleProjectId": "mzfGGl",
          "shortName": "DateFormatter",
          "hasScreenshot": true,
          "namespace": "Ops.Date",
          "shortNameDisplay": "DateFormatter",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Date.DateFormatter",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Date.DateIsoToTimestamp",
          "content": "<p>this is basically a wrapper for javascripts Date.parse(). \ninput something like &quot;2010-05-21 13:37:00&quot; and get 1274441820000.</p>\n",
          "attachmentFiles": [],
          "summary": "parses a date and time in iso format and outputs a millisecond timestamp",
          "id": "cedf9c37-f864-4416-9675-ecc15f07025d",
          "layout": {
              "portsIn": [
                  {
                      "type": "5",
                      "name": "datetime"
                  }
              ],
              "portsOut": [
                  {
                      "type": "0",
                      "name": "timestamp",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "stephan",
          "docs": {
              "ports": [
                  {
                      "name": "datetime",
                      "text": "iso formated date"
                  },
                  {
                      "name": "timestamp",
                      "text": "time in milliseconds since January 1, 1970, 00:00:00 UTC"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1572450058843,
          "exampleProjectId": "nsSRrU",
          "shortName": "DateIsoToTimestamp",
          "hasScreenshot": true,
          "namespace": "Ops.Date",
          "shortNameDisplay": "DateIsoToTimestamp",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Date.DateIsoToTimestamp",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Date.DateTimestamp",
          "content": "",
          "attachmentFiles": [],
          "summary": "Calculates the timestamp of a date by year / month / day / hour / minute",
          "id": "e86a668b-db87-472e-9484-3fd102ccbf8a",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "Year",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Month",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Day",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Hour",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Minute",
                      "subType": "integer"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "Timestamp",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "Year",
                      "text": "The year"
                  },
                  {
                      "name": "Month",
                      "text": "The month"
                  },
                  {
                      "name": "Day",
                      "text": "The day"
                  },
                  {
                      "name": "Hour",
                      "text": "The hour"
                  },
                  {
                      "name": "Minute",
                      "text": "The minute"
                  },
                  {
                      "name": "Timestamp",
                      "text": "The timestamp"
                  }
              ]
          },
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1542699326459,
          "exampleProjectId": "",
          "shortName": "DateTimestamp",
          "hasScreenshot": false,
          "namespace": "Ops.Date",
          "shortNameDisplay": "DateTimestamp",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Date.DateTimestamp",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Date.Milliseconds",
          "content": "<p>OP returns a value since time origin, a standard time which is considered to be the beginning of the current document&#39;s lifetime, with rounding that depends on the security mitigations implemented by the browser.</p>\n<p>Learn more about Time Origin and performance.now() \n<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Performance/now\">https://developer.mozilla.org/en-US/docs/Web/API/Performance/now</a></p>\n",
          "attachmentFiles": [],
          "summary": "Value since the time origin in milliseconds (performance.now())",
          "id": "2f447fcb-3c20-4c2f-9527-84daed3a6b0e",
          "layout": {
              "portsIn": [
                  {
                      "type": "1",
                      "name": "update"
                  }
              ],
              "portsOut": [
                  {
                      "type": "0",
                      "name": "Result",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1578320093120,
          "exampleProjectId": "dJzVbI",
          "shortName": "Milliseconds",
          "hasScreenshot": true,
          "namespace": "Ops.Date",
          "shortNameDisplay": "Milliseconds",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Date.Milliseconds",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Date.TimestampToIsoDate",
          "content": "",
          "attachmentFiles": [],
          "summary": "convert a timestamp to an ISO date string",
          "id": "911db971-5cf3-474c-9cbe-6cc077f969fd",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "Timestamp",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 5,
                      "name": "ISO Date"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1720432210082,
          "exampleProjectId": "MqNl8i",
          "shortName": "TimestampToIsoDate",
          "hasScreenshot": true,
          "namespace": "Ops.Date",
          "shortNameDisplay": "TimestampToIsoDate",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Date.TimestampToIsoDate",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Debug.Console",
          "content": "",
          "attachmentFiles": [],
          "summary": "Shows console log output on the screen",
          "id": "1e650a0b-672f-4dca-bcf0-5df281a2d31e",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "visible",
                      "subType": "boolean"
                  },
                  {
                      "type": 1,
                      "name": "Clear"
                  }
              ],
              "portsOut": [
                  {
                      "type": 2,
                      "name": "Element",
                      "objType": "element"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "visible",
                      "text": "Set to `true` to display the console, set to `false` to hide it"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1512573067018,
          "exampleProjectId": "TVIL7f",
          "shortName": "Console",
          "hasScreenshot": true,
          "namespace": "Ops.Debug",
          "shortNameDisplay": "Console",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Debug.Console",
                  "versionString": "",
                  "version": 0
              }
          ],
          "namespaceTitle": "Ops.Debug",
          "namespaceSummary": "",
          "allowEdit": false
      },
      {
          "name": "Ops.Debug.ConsoleLog",
          "content": "",
          "attachmentFiles": [],
          "summary": "Log incoming values to the console/dev tools",
          "id": "545e7225-73b0-4d40-923b-4b39940403a8",
          "layout": {
              "portsIn": [
                  {
                      "type": "0",
                      "name": "Number",
                      "subType": "number"
                  },
                  {
                      "type": "5",
                      "name": "String"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1586424511965,
          "exampleProjectId": "",
          "shortName": "ConsoleLog",
          "hasScreenshot": false,
          "namespace": "Ops.Debug",
          "shortNameDisplay": "ConsoleLog",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Debug.ConsoleLog",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Debug.CrashOp",
          "content": "",
          "attachmentFiles": [],
          "summary": "Crash the editor in many ways ",
          "id": "33be8bf2-94e9-42e1-9987-9cc4f7448df6",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Async crash"
                  },
                  {
                      "type": 1,
                      "name": "Undefined crash"
                  },
                  {
                      "type": 1,
                      "name": "Throw Exception"
                  },
                  {
                      "type": 0,
                      "name": "Float",
                      "subType": "number"
                  },
                  {
                      "type": 1,
                      "name": "Array Exception"
                  },
                  {
                      "type": 1,
                      "name": "Promise Fail"
                  },
                  {
                      "type": 1,
                      "name": "Shader Error"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1721381123452,
          "exampleProjectId": "9TvUBq",
          "shortName": "CrashOp",
          "hasScreenshot": true,
          "namespace": "Ops.Debug",
          "shortNameDisplay": "CrashOp",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Debug.CrashOp",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Debug.GlLogErrors",
          "content": "",
          "attachmentFiles": [],
          "summary": "execute glGetError after every gl command and log to browser console",
          "id": "26be55ca-23c0-4f22-bdea-0fd4c63b2067",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Exec"
                  },
                  {
                      "type": 0,
                      "name": "Limit Error Logs Num",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Stop trigger after limit",
                      "subType": "boolean"
                  },
                  {
                      "type": 1,
                      "name": "show gl history"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1618901980551,
          "exampleProjectId": "",
          "shortName": "GlLogErrors",
          "hasScreenshot": false,
          "namespace": "Ops.Debug",
          "shortNameDisplay": "GlLogErrors",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Debug.GlLogErrors",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Debug.GlStates",
          "content": "",
          "attachmentFiles": [],
          "summary": "see current gl states and error message",
          "id": "3e2bc72c-8af4-4fdb-a998-555aaf62cc9d",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Update"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  },
                  {
                      "type": 0,
                      "name": "glGetError",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Depthtest",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Stack Depthtest",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Depth Writing",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Stack Depth Writing",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "DepthFunc",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Stack DepthFunc",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Blend",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Blend Stack",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Cull Mode",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Face Culling",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Is Shadowpass",
                      "subType": "boolean"
                  }
              ]
          },
          "authorName": "pandur",
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1518855898265,
          "exampleProjectId": "",
          "shortName": "GlStates",
          "hasScreenshot": false,
          "namespace": "Ops.Debug",
          "shortNameDisplay": "GlStates",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Debug.GlStates",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Debug.ProfileGL",
          "content": "",
          "attachmentFiles": [],
          "summary": "dump all gl commands of one frame to console",
          "id": "498a7c04-a1df-4318-8a60-048a7836710e",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Exec"
                  },
                  {
                      "type": 1,
                      "name": "Debug one Frame"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1522940544501,
          "exampleProjectId": "",
          "shortName": "ProfileGL",
          "hasScreenshot": false,
          "namespace": "Ops.Debug",
          "shortNameDisplay": "ProfileGL",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Debug.ProfileGL",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Debug.StopWatch",
          "content": "",
          "attachmentFiles": [],
          "summary": "Measure the time used to render all child nodes in milliseconds",
          "id": "5dd205e6-b475-4a3b-9a3b-d242847f4b81",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "exec"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "next"
                  },
                  {
                      "type": 0,
                      "name": "Time used",
                      "subType": "number"
                  },
                  {
                      "type": 3,
                      "name": "Times"
                  }
              ]
          },
          "authorName": "pandur",
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1519811102851,
          "exampleProjectId": "",
          "shortName": "StopWatch",
          "hasScreenshot": false,
          "namespace": "Ops.Debug",
          "shortNameDisplay": "StopWatch",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Debug.StopWatch",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Dev.AllTextures",
          "content": "",
          "attachmentFiles": [],
          "summary": "",
          "id": "9463db79-00aa-4dad-8a48-9d6b831c4766",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Update"
                  }
              ],
              "portsOut": [
                  {
                      "type": 3,
                      "name": "Textures"
                  }
              ]
          },
          "authorName": "pandur",
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1686128237989,
          "exampleProjectId": "",
          "shortName": "AllTextures",
          "hasScreenshot": false,
          "namespace": "Ops.Dev",
          "shortNameDisplay": "AllTextures",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Dev.AllTextures",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Dev.Array.ArraySpreadSheet",
          "content": "",
          "attachmentFiles": [],
          "summary": "Give the possibility to create an Array and edit its content in a Spreadsheet view.",
          "id": "e8f8f23c-e7d3-44bf-9f1f-86230f4e533a",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "Default Value index",
                      "values": [
                          "0",
                          "Empty String",
                          "null"
                      ],
                      "subType": "integer"
                  }
              ],
              "portsOut": [
                  {
                      "type": 3,
                      "name": "Array"
                  },
                  {
                      "type": 3,
                      "name": "Column Names"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1612768566040,
          "exampleProjectId": "",
          "shortName": "ArraySpreadSheet",
          "hasScreenshot": false,
          "namespace": "Ops.Dev.Array",
          "shortNameDisplay": "ArraySpreadSheet",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Dev.Array.ArraySpreadSheet",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Dev.BranchProfiler",
          "content": "",
          "attachmentFiles": [],
          "summary": "",
          "id": "5bc375f6-59f6-40f6-bc26-7b23e28d8bf2",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Exec"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  },
                  {
                      "type": 1,
                      "name": "Finished"
                  },
                  {
                      "type": 2,
                      "name": "Profiler Data"
                  },
                  {
                      "type": 0,
                      "name": "Duration",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "license": "MIT",
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1659703310416,
          "exampleProjectId": "",
          "coreLibs": [
              "cgl_branchprofiler"
          ],
          "shortName": "BranchProfiler",
          "hasScreenshot": false,
          "namespace": "Ops.Dev",
          "shortNameDisplay": "BranchProfiler",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Dev.BranchProfiler",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Dev.BranchProfilerBranch",
          "content": "",
          "attachmentFiles": [],
          "summary": "debug",
          "id": "2082b704-0283-4645-b741-1e1955f28b66",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Exec"
                  },
                  {
                      "type": 5,
                      "name": "Branch Name"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  },
                  {
                      "type": 0,
                      "name": "Duration",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1659703012783,
          "exampleProjectId": "",
          "coreLibs": [
              "cgl_branchprofiler"
          ],
          "shortName": "BranchProfilerBranch",
          "hasScreenshot": false,
          "namespace": "Ops.Dev",
          "shortNameDisplay": "BranchProfilerBranch",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Dev.BranchProfilerBranch",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Dev.BranchProfilerBranchEnd",
          "content": "",
          "attachmentFiles": [],
          "summary": "debug",
          "id": "2c5f3947-9962-49ee-b09b-084bf8717f00",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Exec"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1660569979365,
          "exampleProjectId": "",
          "shortName": "BranchProfilerBranchEnd",
          "hasScreenshot": false,
          "namespace": "Ops.Dev",
          "shortNameDisplay": "BranchProfilerBranchEnd",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Dev.BranchProfilerBranchEnd",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Dev.ChromeAi",
          "content": "",
          "attachmentFiles": [],
          "summary": "",
          "id": "c6b2d1a1-d7b4-4c43-9a0b-1f3dc2ea2441",
          "layout": {
              "portsIn": [
                  {
                      "type": 5,
                      "name": "Prompt"
                  },
                  {
                      "type": 1,
                      "name": "Trigger"
                  }
              ],
              "portsOut": [
                  {
                      "type": 5,
                      "name": "Result"
                  },
                  {
                      "type": 0,
                      "name": "Working",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Supported",
                      "subType": "boolean"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1720035181997,
          "exampleProjectId": "fAaHuh",
          "shortName": "ChromeAi",
          "hasScreenshot": true,
          "namespace": "Ops.Dev",
          "shortNameDisplay": "ChromeAi",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Dev.ChromeAi",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Dev.Data.StackValues.StackGetNumber2",
          "content": "",
          "attachmentFiles": [],
          "summary": "read a value from the stack to use it later in the trigger branch",
          "id": "afe29366-2891-41fb-84bc-f57ee66ca330",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Exec"
                  },
                  {
                      "type": 0,
                      "name": "Name Select index",
                      "subType": "integer"
                  },
                  {
                      "type": 5,
                      "name": "Name"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  },
                  {
                      "type": 0,
                      "name": "Value",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1711642361925,
          "exampleProjectId": "",
          "shortName": "StackGetNumber2",
          "hasScreenshot": false,
          "namespace": "Ops.Dev.Data.StackValues",
          "shortNameDisplay": "StackGetNumber2",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Dev.Data.StackValues.StackGetNumber2",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Dev.Debug.GlTextureStack",
          "content": "",
          "attachmentFiles": [
              "att_stackmat.frag"
          ],
          "summary": "debug textures",
          "id": "79d42e8a-139a-4150-9929-7e595877f8e0",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Render"
                  }
              ],
              "portsOut": []
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1687530078186,
          "exampleProjectId": "",
          "shortName": "GlTextureStack",
          "hasScreenshot": false,
          "namespace": "Ops.Dev.Debug",
          "shortNameDisplay": "GlTextureStack",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Dev.Debug.GlTextureStack",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Dev.Devices.Pointer",
          "content": "",
          "attachmentFiles": [],
          "summary": "",
          "id": "721349b7-433c-4da0-9706-b88abf042273",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "Coordinates index",
                      "values": [
                          "-1 to 1",
                          "Pixel Display",
                          "Pixel",
                          "0 to 1"
                      ],
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Area index",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "flip y",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Events index",
                      "values": [
                          "Pointer",
                          "Mouse",
                          "Touch"
                      ],
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Passive Events",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Active",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Prevent Default",
                      "subType": "boolean"
                  },
                  {
                      "type": 2,
                      "name": "Element",
                      "objType": "element"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "x",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "y",
                      "subType": "number"
                  },
                  {
                      "type": 1,
                      "name": "click"
                  },
                  {
                      "type": 1,
                      "name": "click right"
                  },
                  {
                      "type": 0,
                      "name": "Button is down",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Mouse is hovering",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Movement X",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Movement Y",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Is Primary",
                      "subType": "boolean"
                  },
                  {
                      "type": 2,
                      "name": "Event"
                  },
                  {
                      "type": 1,
                      "name": "Moved"
                  }
              ]
          },
          "authorName": "pandur",
          "license": "MIT",
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1720173734886,
          "exampleProjectId": "",
          "shortName": "Pointer",
          "hasScreenshot": false,
          "namespace": "Ops.Dev.Devices",
          "shortNameDisplay": "Pointer",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Dev.Devices.Pointer",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Dev.Gl.Geometry.CopyGeometry",
          "content": "",
          "attachmentFiles": [],
          "summary": "create a copy of a geometry",
          "id": "b15f57c2-4b0c-45de-962b-dd249779addf",
          "layout": {
              "portsIn": [
                  {
                      "type": 2,
                      "name": "Geometry"
                  },
                  {
                      "type": 0,
                      "name": "Scale",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 2,
                      "name": "Result"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1660469559286,
          "exampleProjectId": "",
          "shortName": "CopyGeometry",
          "hasScreenshot": false,
          "namespace": "Ops.Dev.Gl.Geometry",
          "shortNameDisplay": "CopyGeometry",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Dev.Gl.Geometry.CopyGeometry",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Dev.Gl.ImageCompose.SortPixels",
          "content": "",
          "attachmentFiles": [
              "att_scroll.frag"
          ],
          "summary": "",
          "id": "0d210f0b-adb9-46a5-a331-dc5cf212757d",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "render"
                  },
                  {
                      "type": 0,
                      "name": "Structure index",
                      "values": [
                          "Rows",
                          "Columns"
                      ],
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Invert",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Sort index",
                      "values": [
                          "Luminance",
                          "R",
                          "G",
                          "B"
                      ],
                      "subType": "integer"
                  },
                  {
                      "type": 2,
                      "name": "Mask",
                      "objType": "texture"
                  },
                  {
                      "type": 2,
                      "name": "Group",
                      "objType": "texture"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "trigger"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1704730340553,
          "exampleProjectId": "",
          "shortName": "SortPixels",
          "hasScreenshot": false,
          "namespace": "Ops.Dev.Gl.ImageCompose",
          "shortNameDisplay": "SortPixels",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Dev.Gl.ImageCompose.SortPixels",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Dev.Gl.ImageCompose.ToneMap",
          "content": "",
          "attachmentFiles": [
              "att_map.frag"
          ],
          "summary": "",
          "id": "912f9ed1-2dd8-4ac4-af91-bebe5de852fb",
          "layout": {
              "portsIn": [
                  {
                      "type": "1",
                      "name": "render"
                  },
                  {
                      "type": "0",
                      "name": "Active",
                      "subType": "boolean"
                  },
                  {
                      "type": "0",
                      "name": "Mapping index",
                      "subType": "integer"
                  },
                  {
                      "type": "0",
                      "name": "Multiply",
                      "subType": "number"
                  },
                  {
                      "type": "0",
                      "name": "Gamma Correct",
                      "subType": "boolean"
                  },
                  {
                      "type": "0",
                      "name": "Gamma",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": "1",
                      "name": "trigger"
                  },
                  {
                      "type": "5",
                      "name": "Selected Mapping"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1706107072923,
          "exampleProjectId": "",
          "shortName": "ToneMap",
          "hasScreenshot": true,
          "namespace": "Ops.Dev.Gl.ImageCompose",
          "shortNameDisplay": "ToneMap",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Dev.Gl.ImageCompose.ToneMap",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Dev.Gl.OrbitControlsBlueprint",
          "content": "",
          "attachmentFiles": [
              "att_subpatch_json"
          ],
          "summary": "",
          "id": "623ea4d4-3b21-4170-a3ac-20ad218ae141",
          "layout": {
              "portsIn": [
                  {
                      "type": 5,
                      "name": "patchId"
                  }
              ],
              "portsOut": []
          },
          "authorName": "pandur",
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1692972799843,
          "exampleProjectId": "",
          "coreLibs": [
              "subpatchop"
          ],
          "shortName": "OrbitControlsBlueprint",
          "hasScreenshot": false,
          "namespace": "Ops.Dev.Gl",
          "shortNameDisplay": "OrbitControlsBlueprint",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Dev.Gl.OrbitControlsBlueprint",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Dev.Gl.TextureEffects.ChromaKeyAlpha",
          "content": "",
          "attachmentFiles": [
              "att_chromakey.frag"
          ],
          "summary": "replace a color with transparency",
          "id": "5614f8a5-7267-4ed6-9cf9-b4a3c7531f7d",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Render"
                  },
                  {
                      "type": 0,
                      "name": "WeightMul",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "R",
                      "group": "Color",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "G",
                      "group": "Color",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "B",
                      "group": "Color",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1669366610877,
          "exampleProjectId": "",
          "shortName": "ChromaKeyAlpha",
          "hasScreenshot": false,
          "namespace": "Ops.Dev.Gl.TextureEffects",
          "shortNameDisplay": "ChromaKeyAlpha",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Dev.Gl.TextureEffects.ChromaKeyAlpha",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Dev.GlArrayCurlNoise",
          "content": "",
          "attachmentFiles": [
              "att_curlnoise.frag"
          ],
          "summary": "draw perlin noise into an image",
          "id": "25467f40-8f78-4dca-ba6c-951ae49cac59",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Render"
                  },
                  {
                      "type": 2,
                      "name": "GlArray",
                      "objType": "texture"
                  },
                  {
                      "type": 0,
                      "name": "Scale",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Time",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Normalize Speed",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "X",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Y",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Z",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "a",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "offset",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "trigger"
                  },
                  {
                      "type": 2,
                      "name": "Result",
                      "objType": "texture"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1625738171489,
          "exampleProjectId": "",
          "credits": [
              {
                  "title": "GPU-Noise-Lib",
                  "author": "Brian Sharpe",
                  "url": "https://github.com/BrianSharpe/GPU-Noise-Lib",
                  "licence": "Public Domain"
              }
          ],
          "coreLibs": [
              "cgl_texturemath"
          ],
          "shortName": "GlArrayCurlNoise",
          "hasScreenshot": false,
          "namespace": "Ops.Dev",
          "shortNameDisplay": "GlArrayCurlNoise",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Dev.GlArrayCurlNoise",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Dev.GlArrayMath",
          "content": "",
          "attachmentFiles": [
              "att_rgbMath.frag"
          ],
          "summary": "",
          "id": "0204b33a-2917-4eea-9c31-3b185e4fe638",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Render"
                  },
                  {
                      "type": 2,
                      "name": "GlArray",
                      "objType": "texture"
                  },
                  {
                      "type": 0,
                      "name": "Operation index",
                      "subType": "integer"
                  },
                  {
                      "type": 5,
                      "name": "Operation"
                  },
                  {
                      "type": 0,
                      "name": "R Active",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "G Active",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "B Active",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "A Active",
                      "subType": "boolean"
                  },
                  {
                      "type": 2,
                      "name": "Value",
                      "objType": "texture"
                  },
                  {
                      "type": 0,
                      "name": "r",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "g",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "b",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "a",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "trigger"
                  },
                  {
                      "type": 2,
                      "name": "Result",
                      "objType": "texture"
                  }
              ]
          },
          "authorName": "pandur",
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1626170535085,
          "exampleProjectId": "",
          "coreLibs": [
              "cgl_texturemath"
          ],
          "shortName": "GlArrayMath",
          "hasScreenshot": false,
          "namespace": "Ops.Dev",
          "shortNameDisplay": "GlArrayMath",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Dev.GlArrayMath",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Dev.GlArrayModulo",
          "content": "",
          "attachmentFiles": [
              "att_rgbMath.frag"
          ],
          "summary": "",
          "id": "a017cc92-2354-45df-820f-ed6aad3bbb0e",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Render"
                  },
                  {
                      "type": 2,
                      "name": "GlArray",
                      "objType": "texture"
                  },
                  {
                      "type": 0,
                      "name": "X",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Modulo X",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Y",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Modulo Y",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Z",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Modulo Z",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "trigger"
                  },
                  {
                      "type": 2,
                      "name": "Result",
                      "objType": "texture"
                  }
              ]
          },
          "authorName": "pandur",
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1626189206291,
          "exampleProjectId": "",
          "coreLibs": [
              "cgl_texturemath"
          ],
          "shortName": "GlArrayModulo",
          "hasScreenshot": false,
          "namespace": "Ops.Dev",
          "shortNameDisplay": "GlArrayModulo",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Dev.GlArrayModulo",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Dev.GlArrayNormalize",
          "content": "",
          "attachmentFiles": [
              "att_rgbMath.frag"
          ],
          "summary": "",
          "id": "c7ee53af-2d34-4ca9-bcea-5cbf7f5aab4e",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Render"
                  },
                  {
                      "type": 0,
                      "name": "Fade",
                      "subType": "number"
                  },
                  {
                      "type": 2,
                      "name": "GlArray",
                      "objType": "texture"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "trigger"
                  },
                  {
                      "type": 2,
                      "name": "Result",
                      "objType": "texture"
                  }
              ]
          },
          "authorName": "pandur",
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1626189654883,
          "exampleProjectId": "",
          "coreLibs": [
              "cgl_texturemath"
          ],
          "shortName": "GlArrayNormalize",
          "hasScreenshot": false,
          "namespace": "Ops.Dev",
          "shortNameDisplay": "GlArrayNormalize",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Dev.GlArrayNormalize",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Dev.GlArrayRandom",
          "content": "",
          "attachmentFiles": [
              "att_randoms.frag"
          ],
          "summary": "",
          "id": "041f5b18-74b4-4a03-9987-4451bd334464",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Render"
                  },
                  {
                      "type": 0,
                      "name": "Length",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Layout index",
                      "subType": "integer"
                  },
                  {
                      "type": 5,
                      "name": "Layout"
                  },
                  {
                      "type": 0,
                      "name": "X Min",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "X Max",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Y Min",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Y Max",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Z Min",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Z Max",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Seed",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  },
                  {
                      "type": 2,
                      "name": "Result",
                      "objType": "texture"
                  }
              ]
          },
          "authorName": "pandur",
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1626180443073,
          "exampleProjectId": "",
          "coreLibs": [
              "cgl_texturemath"
          ],
          "shortName": "GlArrayRandom",
          "hasScreenshot": false,
          "namespace": "Ops.Dev",
          "shortNameDisplay": "GlArrayRandom",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Dev.GlArrayRandom",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Dev.GlPatch",
          "content": "",
          "attachmentFiles": [],
          "summary": "This render the editor ops in your canvas.",
          "id": "ad6e3e6b-9d88-4378-b09f-6b57999d4f91",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Render"
                  },
                  {
                      "type": 1,
                      "name": "Refresh"
                  },
                  {
                      "type": 1,
                      "name": "debug"
                  },
                  {
                      "type": 1,
                      "name": "Next"
                  }
              ],
              "portsOut": []
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1570876570684,
          "exampleProjectId": "",
          "shortName": "GlPatch",
          "hasScreenshot": false,
          "namespace": "Ops.Dev",
          "shortNameDisplay": "GlPatch",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Dev.GlPatch",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Dev.GltfExplodeNodes",
          "content": "",
          "attachmentFiles": [],
          "summary": "",
          "id": "5652c2ef-2a9f-48f6-80ef-70e154db04b5",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Update"
                  },
                  {
                      "type": 5,
                      "name": "Filter"
                  },
                  {
                      "type": 0,
                      "name": "Seed",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Axis X",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Axis Y",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Axis Z",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Rotation X",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Rotation Y",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Rotation Z",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Random Pivot Offset X",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Random Pivot Offset Y",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Random Pivot Offset Z",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  },
                  {
                      "type": 0,
                      "name": "Found",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1645815823890,
          "exampleProjectId": "",
          "shortName": "GltfExplodeNodes",
          "hasScreenshot": false,
          "namespace": "Ops.Dev",
          "shortNameDisplay": "GltfExplodeNodes",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Dev.GltfExplodeNodes",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Dev.Graphics.Canvas2d.Canvas2dBlendmode",
          "content": "",
          "attachmentFiles": [],
          "summary": "",
          "id": "0fee4f45-b066-4630-90af-368977f79e8a",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Render"
                  },
                  {
                      "type": 0,
                      "name": "Blendmode index",
                      "subType": "integer"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  }
              ]
          },
          "authorName": "pandur",
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1708946349513,
          "exampleProjectId": "",
          "shortName": "Canvas2dBlendmode",
          "hasScreenshot": false,
          "namespace": "Ops.Dev.Graphics.Canvas2d",
          "shortNameDisplay": "Canvas2dBlendmode",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Dev.Graphics.Canvas2d.Canvas2dBlendmode",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Dev.Graphics.Canvas2d.Canvas2dCircle",
          "content": "",
          "attachmentFiles": [],
          "summary": "",
          "id": "d00d7755-516c-4a76-a405-cfce982e459f",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Exec"
                  },
                  {
                      "type": 0,
                      "name": "X",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Y",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Radius",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Start Angle",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "End Angle",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Counterclockwise",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Method index",
                      "values": [
                          "Fill",
                          "Stroke",
                          "Clip"
                      ],
                      "subType": "integer"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  }
              ]
          },
          "authorName": "pandur",
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1708950076481,
          "exampleProjectId": "",
          "shortName": "Canvas2dCircle",
          "hasScreenshot": false,
          "namespace": "Ops.Dev.Graphics.Canvas2d",
          "shortNameDisplay": "Canvas2dCircle",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Dev.Graphics.Canvas2d.Canvas2dCircle",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Dev.Graphics.Canvas2d.Canvas2dCompose",
          "content": "",
          "attachmentFiles": [],
          "summary": "",
          "id": "820bc427-7330-4b90-8fa8-5cc06ebeb9da",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Exec"
                  },
                  {
                      "type": 2,
                      "name": "Canvas Copy",
                      "objType": "element"
                  },
                  {
                      "type": 0,
                      "name": "Width",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Height",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Clear",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  },
                  {
                      "type": 2,
                      "name": "Element",
                      "objType": "element"
                  }
              ]
          },
          "authorName": "pandur",
          "license": "MIT",
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1708357159224,
          "exampleProjectId": "",
          "shortName": "Canvas2dCompose",
          "hasScreenshot": false,
          "namespace": "Ops.Dev.Graphics.Canvas2d",
          "shortNameDisplay": "Canvas2dCompose",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Dev.Graphics.Canvas2d.Canvas2dCompose",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Dev.Graphics.Canvas2d.Canvas2dDrawimage",
          "content": "",
          "attachmentFiles": [],
          "summary": "",
          "id": "c2d2c4f5-66e5-495f-b206-9c5e3e2a451c",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Render"
                  },
                  {
                      "type": 2,
                      "name": "Canvas",
                      "objType": "element"
                  },
                  {
                      "type": 0,
                      "name": "Center",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Smooth",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  }
              ]
          },
          "authorName": "pandur",
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1708944031113,
          "exampleProjectId": "",
          "shortName": "Canvas2dDrawimage",
          "hasScreenshot": false,
          "namespace": "Ops.Dev.Graphics.Canvas2d",
          "shortNameDisplay": "Canvas2dDrawimage",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Dev.Graphics.Canvas2d.Canvas2dDrawimage",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Dev.Graphics.Canvas2d.Canvas2dFillGradient",
          "content": "",
          "attachmentFiles": [],
          "summary": "",
          "id": "8a10631b-c291-499a-8b23-d1c92fab6320",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Exec"
                  },
                  {
                      "type": 0,
                      "name": "r",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "g",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "b",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "X 1",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Y 1",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "X 2",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Y 2",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  }
              ]
          },
          "authorName": "pandur",
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1708423590832,
          "exampleProjectId": "",
          "shortName": "Canvas2dFillGradient",
          "hasScreenshot": false,
          "namespace": "Ops.Dev.Graphics.Canvas2d",
          "shortNameDisplay": "Canvas2dFillGradient",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Dev.Graphics.Canvas2d.Canvas2dFillGradient",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Dev.Graphics.Canvas2d.Canvas2dFillStyle",
          "content": "",
          "attachmentFiles": [],
          "summary": "",
          "id": "3c8bf51e-c676-4d8e-910a-c5bf77953540",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Exec"
                  },
                  {
                      "type": 0,
                      "name": "r",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "g",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "b",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  }
              ]
          },
          "authorName": "pandur",
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1708358266712,
          "exampleProjectId": "",
          "shortName": "Canvas2dFillStyle",
          "hasScreenshot": false,
          "namespace": "Ops.Dev.Graphics.Canvas2d",
          "shortNameDisplay": "Canvas2dFillStyle",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Dev.Graphics.Canvas2d.Canvas2dFillStyle",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Dev.Graphics.Canvas2d.Canvas2dGetColor",
          "content": "",
          "attachmentFiles": [],
          "summary": "",
          "id": "750bc61c-ad56-4d50-b7d2-9e9e990ea9e1",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Exec"
                  },
                  {
                      "type": 0,
                      "name": "X",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Y",
                      "subType": "integer"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  },
                  {
                      "type": 0,
                      "name": "R",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "G",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "B",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "A",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1708360978869,
          "exampleProjectId": "",
          "shortName": "Canvas2dGetColor",
          "hasScreenshot": false,
          "namespace": "Ops.Dev.Graphics.Canvas2d",
          "shortNameDisplay": "Canvas2dGetColor",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Dev.Graphics.Canvas2d.Canvas2dGetColor",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Dev.Graphics.Canvas2d.Canvas2dRect",
          "content": "",
          "attachmentFiles": [],
          "summary": "",
          "id": "fd02622f-989c-4ba9-a27d-a7bf3b49c972",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Exec"
                  },
                  {
                      "type": 0,
                      "name": "Width",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Height",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Roundness",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Center",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Method index",
                      "values": [
                          "Fill",
                          "Stroke",
                          "Clip"
                      ],
                      "subType": "integer"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  }
              ]
          },
          "authorName": "pandur",
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1708357534096,
          "exampleProjectId": "",
          "shortName": "Canvas2dRect",
          "hasScreenshot": false,
          "namespace": "Ops.Dev.Graphics.Canvas2d",
          "shortNameDisplay": "Canvas2dRect",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Dev.Graphics.Canvas2d.Canvas2dRect",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Dev.Graphics.Canvas2d.Canvas2dResetTransform",
          "content": "",
          "attachmentFiles": [],
          "summary": "",
          "id": "e17dd6e1-c167-400e-bc32-dca3898df0a4",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Render"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  }
              ]
          },
          "authorName": "pandur",
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1708960139922,
          "exampleProjectId": "",
          "shortName": "Canvas2dResetTransform",
          "hasScreenshot": false,
          "namespace": "Ops.Dev.Graphics.Canvas2d",
          "shortNameDisplay": "Canvas2dResetTransform",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Dev.Graphics.Canvas2d.Canvas2dResetTransform",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Dev.Graphics.Canvas2d.Canvas2dStrokeStyle",
          "content": "",
          "attachmentFiles": [],
          "summary": "",
          "id": "398dc4c6-9d9b-4983-8cc1-a07c6807281f",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Exec"
                  },
                  {
                      "type": 0,
                      "name": "r",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "g",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "b",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "LineWidth",
                      "subType": "number"
                  },
                  {
                      "type": 5,
                      "name": "LineDash"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  }
              ]
          },
          "authorName": "pandur",
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1708358895732,
          "exampleProjectId": "",
          "shortName": "Canvas2dStrokeStyle",
          "hasScreenshot": false,
          "namespace": "Ops.Dev.Graphics.Canvas2d",
          "shortNameDisplay": "Canvas2dStrokeStyle",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Dev.Graphics.Canvas2d.Canvas2dStrokeStyle",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Dev.Graphics.Canvas2d.Canvas2dTransform",
          "content": "",
          "attachmentFiles": [],
          "summary": "",
          "id": "faf8aae1-bd9c-4522-86b5-34f7a0a3606d",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Render"
                  },
                  {
                      "type": 0,
                      "name": "X",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Y",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Rotate",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Scale",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  }
              ]
          },
          "authorName": "pandur",
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1708944583908,
          "exampleProjectId": "",
          "shortName": "Canvas2dTransform",
          "hasScreenshot": false,
          "namespace": "Ops.Dev.Graphics.Canvas2d",
          "shortNameDisplay": "Canvas2dTransform",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Dev.Graphics.Canvas2d.Canvas2dTransform",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Dev.InstancedModulo",
          "content": "",
          "attachmentFiles": [
              "att_displace.vert",
              "att_displace_head.vert"
          ],
          "summary": "colorize instanced meshes using a texture",
          "id": "7d944e9c-c21a-460b-be18-17aa3233fde3",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Trigger"
                  },
                  {
                      "type": 0,
                      "name": "Width",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Height",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Pos X",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Pos Y",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1611586695364,
          "exampleProjectId": "",
          "coreLibs": [
              "cgl_shadermodifier"
          ],
          "shortName": "InstancedModulo",
          "hasScreenshot": false,
          "namespace": "Ops.Dev",
          "shortNameDisplay": "InstancedModulo",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Dev.InstancedModulo",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Dev.Json.ObjectSpreadSheet",
          "content": "",
          "attachmentFiles": [],
          "summary": "convinient object data editor",
          "id": "09667032-43c9-4f7c-8740-76a90f8ac356",
          "layout": {
              "portsIn": [],
              "portsOut": [
                  {
                      "type": 2,
                      "name": "Result"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1615465511488,
          "exampleProjectId": "",
          "shortName": "ObjectSpreadSheet",
          "hasScreenshot": false,
          "namespace": "Ops.Dev.Json",
          "shortNameDisplay": "ObjectSpreadSheet",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Dev.Json.ObjectSpreadSheet",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Dev.LinesArrayFromTexture",
          "content": "",
          "attachmentFiles": [
              "att_splinetex.vert"
          ],
          "summary": "",
          "id": "bcf8b4f9-d830-4210-9890-908a2d664bf9",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "render"
                  },
                  {
                      "type": 0,
                      "name": "Axis index",
                      "subType": "integer"
                  },
                  {
                      "type": 2,
                      "name": "Texture",
                      "objType": "texture"
                  },
                  {
                      "type": 0,
                      "name": "Normalize",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Trigger"
                  }
              ]
          },
          "authorName": "pandur",
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1626355776170,
          "exampleProjectId": "",
          "coreLibs": [
              "cgl_shadermodifier"
          ],
          "shortName": "LinesArrayFromTexture",
          "hasScreenshot": false,
          "namespace": "Ops.Dev",
          "shortNameDisplay": "LinesArrayFromTexture",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Dev.LinesArrayFromTexture",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Dev.Oit.BlendModeOit",
          "content": "",
          "attachmentFiles": [],
          "summary": "",
          "id": "dee82080-2516-4a2b-8cda-da4f51885e09",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Render"
                  },
                  {
                      "type": 0,
                      "name": "Active",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  }
              ]
          },
          "authorName": "pandur",
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1710610893179,
          "exampleProjectId": "",
          "shortName": "BlendModeOit",
          "hasScreenshot": false,
          "namespace": "Ops.Dev.Oit",
          "shortNameDisplay": "BlendModeOit",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Dev.Oit.BlendModeOit",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Dev.Oit.OitCompose",
          "content": "",
          "attachmentFiles": [
              "att_oit.frag"
          ],
          "summary": "screen space ambient occlusion from depth texture",
          "id": "7d8ed500-5b9c-422b-9a34-4cbb61619813",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Render"
                  },
                  {
                      "type": 0,
                      "name": "Blend Mode index",
                      "group": "Blending",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Amount",
                      "group": "Blending",
                      "subType": "number"
                  },
                  {
                      "type": 2,
                      "name": "OIT Accum",
                      "objType": "texture"
                  },
                  {
                      "type": 2,
                      "name": "OIT Revealage",
                      "objType": "texture"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Trigger"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1710607269736,
          "exampleProjectId": "",
          "coreLibs": [
              "cgl_copytexture"
          ],
          "shortName": "OitCompose",
          "hasScreenshot": false,
          "namespace": "Ops.Dev.Oit",
          "shortNameDisplay": "OitCompose",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Dev.Oit.OitCompose",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Dev.RGBMaxValues",
          "content": "",
          "attachmentFiles": [
              "att_inc_gen_ports.js",
              "att_ports.json",
              "att_subpatch_json"
          ],
          "summary": "",
          "id": "67fe651a-ec8c-4415-8d8f-21cb38b2b710",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "c7eli7o9i",
                      "uititle": "render"
                  },
                  {
                      "type": 2,
                      "name": "s0ibc22vb",
                      "uititle": "Position Texture",
                      "objType": "texture"
                  }
              ],
              "portsOut": [
                  {
                      "type": 2,
                      "name": "iuqdv5507",
                      "uititle": "texture",
                      "objType": "texture"
                  },
                  {
                      "type": 1,
                      "name": "ecq8sxutk",
                      "uititle": "render"
                  }
              ]
          },
          "authorName": "pandur",
          "license": "MIT",
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1731672252166,
          "exampleProjectId": "",
          "coreLibs": [
              "subpatchop"
          ],
          "shortName": "RGBMaxValues",
          "hasScreenshot": false,
          "namespace": "Ops.Dev",
          "shortNameDisplay": "RGBMaxValues",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Dev.RGBMaxValues",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Dev.SortCoords",
          "content": "",
          "attachmentFiles": [
              "att_scroll.frag"
          ],
          "summary": "",
          "id": "deed6b4c-6139-4ae2-b081-f2e3b116cf87",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "render"
                  },
                  {
                      "type": 0,
                      "name": "Sort index",
                      "values": [
                          "Luminance",
                          "R",
                          "G",
                          "B"
                      ],
                      "subType": "integer"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "trigger"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1710435491832,
          "exampleProjectId": "",
          "shortName": "SortCoords",
          "hasScreenshot": false,
          "namespace": "Ops.Dev",
          "shortNameDisplay": "SortCoords",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Dev.SortCoords",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Dev.StackValues.StackValues",
          "content": "",
          "attachmentFiles": [],
          "summary": "",
          "id": "bdae5f2a-f383-4502-b333-5c6cc6579f31",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Exec"
                  },
                  {
                      "type": 0,
                      "name": "Show stack",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 2,
                      "name": "Values"
                  }
              ]
          },
          "authorName": "pandur",
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1704365255309,
          "exampleProjectId": "",
          "shortName": "StackValues",
          "hasScreenshot": false,
          "namespace": "Ops.Dev.StackValues",
          "shortNameDisplay": "StackValues",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Dev.StackValues.StackValues",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Dev.SvgPathToPoints",
          "content": "",
          "attachmentFiles": [],
          "summary": "",
          "id": "43bcfbe3-7460-4b22-9a42-be787adf180d",
          "layout": {
              "portsIn": [
                  {
                      "type": 5,
                      "name": "SVG Path"
                  },
                  {
                      "type": 0,
                      "name": "Bezier Stepsize",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 3,
                      "name": "Points A"
                  },
                  {
                      "type": 3,
                      "name": "Points B"
                  }
              ]
          },
          "authorName": "pandur",
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1642924115561,
          "exampleProjectId": "",
          "shortName": "SvgPathToPoints",
          "hasScreenshot": false,
          "namespace": "Ops.Dev",
          "shortNameDisplay": "SvgPathToPoints",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Dev.SvgPathToPoints",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Dev.TestOp",
          "content": "",
          "attachmentFiles": [],
          "summary": "just testing",
          "id": "274d0d70-00a0-4a19-88ca-e480b5143715",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "name",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "aaabbbbb",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "aaaa",
                      "subType": "number"
                  },
                  {
                      "type": 1,
                      "name": "Render"
                  }
              ],
              "portsOut": [
                  {
                      "type": 2,
                      "name": "Test"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [
              "cannon.js",
              "clmtrackr.js"
          ],
          "youtubeids": [],
          "created": 1559035870179,
          "exampleProjectId": "mSeJ3E",
          "coreLibs": [
              "cgl_wireframes"
          ],
          "shortName": "TestOp",
          "hasScreenshot": true,
          "namespace": "Ops.Dev",
          "shortNameDisplay": "TestOp",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Dev.TestOp",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Dev.VertexTexture.RgbCurlNoise",
          "content": "",
          "attachmentFiles": [
              "att_curl.frag"
          ],
          "summary": "",
          "id": "10bc3a93-47c6-48ea-aebb-20f990153e62",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Render"
                  },
                  {
                      "type": 0,
                      "name": "Scale",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Time",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Pos X",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Pos Y",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Pos Z",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "trigger"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1644943743609,
          "exampleProjectId": "",
          "shortName": "RgbCurlNoise",
          "hasScreenshot": false,
          "namespace": "Ops.Dev.VertexTexture",
          "shortNameDisplay": "RgbCurlNoise",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Dev.VertexTexture.RgbCurlNoise",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Dev.VizBranchProfiler",
          "content": "",
          "attachmentFiles": [],
          "summary": "",
          "id": "236fb6ea-4e98-4039-b831-98dc2ff2844b",
          "layout": {
              "portsIn": [
                  {
                      "type": 2,
                      "name": "Profiler Data"
                  },
                  {
                      "type": 0,
                      "name": "Render index",
                      "values": [
                          "Patch",
                          "Canvas",
                          "Both"
                      ],
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Width",
                      "group": "Canvas",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Height",
                      "group": "Canvas",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Expand elements",
                      "subType": "boolean"
                  },
                  {
                      "type": 1,
                      "name": "Update"
                  }
              ],
              "portsOut": [
                  {
                      "type": 2,
                      "name": "Canvas",
                      "objType": "element"
                  },
                  {
                      "type": 0,
                      "name": "Duration",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "license": "MIT",
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1660311352788,
          "exampleProjectId": "",
          "shortName": "VizBranchProfiler",
          "hasScreenshot": false,
          "namespace": "Ops.Dev",
          "shortNameDisplay": "VizBranchProfiler",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Dev.VizBranchProfiler",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Dev.WebAudioContextStart",
          "content": "",
          "attachmentFiles": [],
          "summary": "",
          "id": "0a4741d4-92d7-4ac6-a5c4-05af73b050f2",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Start"
                  }
              ],
              "portsOut": [
                  {
                      "type": 5,
                      "name": "Audiocontext State"
                  }
              ]
          },
          "authorName": "pandur",
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1675886251547,
          "exampleProjectId": "",
          "shortName": "WebAudioContextStart",
          "hasScreenshot": false,
          "namespace": "Ops.Dev",
          "shortNameDisplay": "WebAudioContextStart",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Dev.WebAudioContextStart",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Devices.Browser.BrowserInfo_v3",
          "content": "<p>Performs a browser check. Some ops only work with certain browsers, you can use this op to create fallbacks.</p>\n<p>iOS detection is not very reliable, there is no safe and futureproof way to detect it anymore.</p>\n",
          "attachmentFiles": [],
          "summary": "Reports the browser being used",
          "id": "ec3e0121-b2c2-4c31-bbda-a6982080f73f",
          "layout": {
              "portsIn": [],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "Is Mobile",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Is Touchscreen",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Is IE",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Is Edge",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Is Chrome",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Is Firefox",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Is Opera",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Is Safari",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Is Windows",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Is Linux",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Is Mac",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Is iOS",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Is Android",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Is Electron",
                      "subType": "boolean"
                  },
                  {
                      "type": 5,
                      "name": "Operating System"
                  },
                  {
                      "type": 5,
                      "name": "Browser Name"
                  },
                  {
                      "type": 5,
                      "name": "Browser Version"
                  },
                  {
                      "type": 5,
                      "name": "OS Version"
                  },
                  {
                      "type": 5,
                      "name": "Language"
                  },
                  {
                      "type": 5,
                      "name": "User Agent"
                  },
                  {
                      "type": 2,
                      "name": "Platform Object"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "Is Mobile",
                      "text": "true if mobile platform, false if not"
                  },
                  {
                      "name": "Is IE",
                      "text": "True if the browser is any of IE 9, IE 10, IE 11"
                  },
                  {
                      "name": "Is Edge",
                      "text": "True if the browser is Edge "
                  },
                  {
                      "name": "Is Chrome",
                      "text": "True if the browser is Chrome or Chrome Mobile"
                  },
                  {
                      "name": "Is Firefox",
                      "text": "True if the browser is Firefox or Firefox mobile"
                  },
                  {
                      "name": "Is Opera",
                      "text": "True if the browser is Opera"
                  },
                  {
                      "name": "Is Safari",
                      "text": "True if the browser is Safari (iOS & macOS & OS X)"
                  },
                  {
                      "name": "Is Windows",
                      "text": "true if operating system is windows"
                  },
                  {
                      "name": "Is Linux",
                      "text": "true if operating system is linux "
                  },
                  {
                      "name": "Is Mac",
                      "text": "true if operating system is mac"
                  },
                  {
                      "name": "Is iOS",
                      "text": "true if operating system is iOS"
                  },
                  {
                      "name": "Is Android",
                      "text": "true if operating system is Android"
                  },
                  {
                      "name": "Is Electron",
                      "text": "true if cables electron app is used"
                  },
                  {
                      "name": "Operating System",
                      "text": "exact name of the operating system"
                  },
                  {
                      "name": "Browser Name",
                      "text": "name of the browser"
                  },
                  {
                      "name": "OS Version",
                      "text": "version of the os"
                  },
                  {
                      "name": "Language",
                      "text": "browser language"
                  },
                  {
                      "name": "User Agent",
                      "text": "current user agent "
                  }
              ]
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [
              "platform.js"
          ],
          "youtubeids": [],
          "created": 1602760318455,
          "exampleProjectId": "YOJiIk",
          "shortName": "BrowserInfo_v3",
          "hasScreenshot": true,
          "namespace": "Ops.Devices.Browser",
          "shortNameDisplay": "BrowserInfo",
          "version": 3,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Devices.Browser.BrowserInfo",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Devices.Browser.BrowserInfo_v2",
                  "versionString": "_v2",
                  "version": 2
              },
              {
                  "name": "Ops.Devices.Browser.BrowserInfo_v3",
                  "versionString": "_v3",
                  "version": 3
              }
          ],
          "allowEdit": false,
          "namespaceTitle": "Ops.Devices.Browser",
          "namespaceSummary": "",
          "usedInProject": true
      },
      {
          "name": "Ops.Devices.Browser.ColorScheme",
          "content": "<p>Uses <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-color-scheme\">CSS media queries</a> to find out if the user has set a preference for light or dark colors.</p>\n",
          "attachmentFiles": [],
          "summary": "Get light/dark color scheme preference of the browser",
          "id": "2c54d518-f110-4faf-afa9-436ffd5a6870",
          "layout": {
              "portsIn": [],
              "portsOut": [
                  {
                      "type": 5,
                      "name": "Color Scheme"
                  },
                  {
                      "type": 0,
                      "name": "Dark Mode",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Light Mode",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Supported",
                      "subType": "boolean"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "Color Scheme",
                      "text": "light/dark"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1698309430889,
          "exampleProjectId": "An48HJ",
          "caniusequery": "prefers-color-scheme",
          "shortName": "ColorScheme",
          "hasScreenshot": true,
          "namespace": "Ops.Devices.Browser",
          "shortNameDisplay": "ColorScheme",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Devices.Browser.ColorScheme",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false,
          "usedInProject": true
      },
      {
          "name": "Ops.Devices.Browser.JsExpression",
          "content": "",
          "attachmentFiles": [],
          "summary": "evaluate a javascript expression",
          "id": "48da33bb-ca42-4e5e-a5de-ca5d14ab6709",
          "layout": {
              "portsIn": [
                  {
                      "type": 5,
                      "name": "JS Expression"
                  }
              ],
              "portsOut": [
                  {
                      "type": 5,
                      "name": "Result String"
                  },
                  {
                      "type": 0,
                      "name": "Result Number",
                      "subType": "number"
                  },
                  {
                      "type": 3,
                      "name": "Result Array"
                  },
                  {
                      "type": 2,
                      "name": "Result Object"
                  },
                  {
                      "type": 0,
                      "name": "Error",
                      "subType": "boolean"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1709305327726,
          "exampleProjectId": "gpp4O8",
          "shortName": "JsExpression",
          "hasScreenshot": true,
          "namespace": "Ops.Devices.Browser",
          "shortNameDisplay": "JsExpression",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Devices.Browser.JsExpression",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Devices.Browser.JsMemory",
          "content": "<p>The total allocated heap size, in megabytes.</p>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Performance/memory\">https://developer.mozilla.org/en-US/docs/Web/API/Performance/memory</a></p>\n",
          "attachmentFiles": [],
          "summary": "browser js memory consumption",
          "id": "7176f9c7-1ee8-419e-b58b-178cca9265e7",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Update"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "Used Heap Size",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Total Heap Size",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1660561615581,
          "exampleProjectId": "_UyS0f",
          "caniusequery": "performance.memory",
          "shortName": "JsMemory",
          "hasScreenshot": true,
          "namespace": "Ops.Devices.Browser",
          "shortNameDisplay": "JsMemory",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Devices.Browser.JsMemory",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Devices.Browser.UserActivation",
          "content": "<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/UserActivation\">https://developer.mozilla.org/en-US/docs/Web/API/UserActivation</a></p>\n",
          "attachmentFiles": [],
          "summary": "detect if the user interacted with or activated the page",
          "id": "a930662f-1dee-4623-b2b1-cc1eb9772148",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Update"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  },
                  {
                      "type": 0,
                      "name": "user is or was active",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "user has been active",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "user is active",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Supported",
                      "subType": "boolean"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1715180641797,
          "exampleProjectId": "3S26Qc",
          "caniusequery": "mdn-api_useractivation",
          "shortName": "UserActivation",
          "hasScreenshot": true,
          "namespace": "Ops.Devices.Browser",
          "shortNameDisplay": "UserActivation",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Devices.Browser.UserActivation",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Devices.Browser.WebShare",
          "content": "<p>some browsers (mostly mobile) support the native web-share-api and open a sharing dialog that let&#39;s you select an app to share content with.</p>\n<p>when triggered, this op opens the sharing dialog on browsers that support the api.</p>\n<p>some browsers (i.e. firefox mobile) do not implement sharing files at the moment, the op will fall back to sharing without and image in these cases.</p>\n<p>if you do this in/from an iframe make sure you allow the &quot;web-share&quot; feature to make this work on firefox.</p>\n",
          "attachmentFiles": [],
          "summary": "Opens a sharing dialog to share text and images",
          "id": "2e24a18f-161a-480c-a86b-4232c59f68c4",
          "layout": {
              "portsIn": [
                  {
                      "type": 5,
                      "name": "Text"
                  },
                  {
                      "type": 5,
                      "name": "URL"
                  },
                  {
                      "type": 5,
                      "name": "Base64 File",
                      "group": "File"
                  },
                  {
                      "type": 5,
                      "name": "Data URL",
                      "group": "File"
                  },
                  {
                      "type": 5,
                      "name": "Filetype",
                      "group": "File"
                  },
                  {
                      "type": 5,
                      "name": "Filename",
                      "group": "File"
                  },
                  {
                      "type": 1,
                      "name": "Share"
                  }
              ],
              "portsOut": [
                  {
                      "type": 5,
                      "name": "Status"
                  },
                  {
                      "type": 0,
                      "name": "Supported",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "Text",
                      "text": "text to share"
                  },
                  {
                      "name": "URL",
                      "text": "url to share"
                  },
                  {
                      "name": "Status",
                      "text": "success/error"
                  },
                  {
                      "name": "Supported",
                      "text": "true/false for browser support of web-share-api"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1647967807163,
          "exampleProjectId": "pQ49m4",
          "caniusequery": "web-share",
          "shortName": "WebShare",
          "hasScreenshot": true,
          "namespace": "Ops.Devices.Browser",
          "shortNameDisplay": "WebShare",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Devices.Browser.WebShare",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false,
          "usedInProject": true
      },
      {
          "name": "Ops.Devices.GamePad.GamePad",
          "content": "<p>to use this, connect to a pad of <a href=\"/op/Ops.Devices.GamePad.GamePads\" target=\"_blank\">Ops.Devices.GamePad.GamePads</a></p>\n",
          "attachmentFiles": [],
          "summary": "Outputs the button states of a gamepad",
          "id": "3acf39ed-53cc-45eb-8516-43319839d457",
          "layout": {
              "portsIn": [
                  {
                      "type": 2,
                      "name": "GamePad Data"
                  },
                  {
                      "type": 0,
                      "name": "Analog to Digital",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 5,
                      "name": "ID"
                  },
                  {
                      "type": 3,
                      "name": "Axes"
                  },
                  {
                      "type": 0,
                      "name": "Pad Left",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Pad Right",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Pad Up",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Pad Down",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Button 1",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Button 2",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Button 3",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Button 4",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Left Shoulder",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Left Shoulder Bottom",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Right Shoulder",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Right Shoulder Bottom",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1519815830794,
          "exampleProjectId": "XHK7NH",
          "shortName": "GamePad",
          "hasScreenshot": true,
          "namespace": "Ops.Devices.GamePad",
          "shortNameDisplay": "GamePad",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Devices.GamePad.GamePad",
                  "versionString": "",
                  "version": 0
              }
          ],
          "namespaceTitle": "Ops.Devices.GamePad",
          "namespaceSummary": "",
          "allowEdit": false
      },
      {
          "name": "Ops.Devices.GamePad.GamePadJoystickAxis",
          "content": "",
          "attachmentFiles": [],
          "summary": "get axis and angle of a joystick/thumbstick",
          "id": "05be9e0d-c6bd-42f6-9f2c-16ae5ad4db7a",
          "layout": {
              "portsIn": [
                  {
                      "type": 3,
                      "name": "Axis"
                  },
                  {
                      "type": 0,
                      "name": "Index",
                      "subType": "integer"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "X",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Y",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "DeadZone",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Angle",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1520687643177,
          "exampleProjectId": "bDqHdN",
          "shortName": "GamePadJoystickAxis",
          "hasScreenshot": true,
          "namespace": "Ops.Devices.GamePad",
          "shortNameDisplay": "GamePadJoystickAxis",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Devices.GamePad.GamePadJoystickAxis",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Devices.GamePad.GamePads",
          "content": "<p>pad outputs can be connected to <a href=\"/op/Ops.Devices.GamePad.GamePad\" target=\"_blank\">Ops.Devices.GamePad.GamePad</a> to receive button states</p>\n",
          "attachmentFiles": [],
          "summary": "list connected gamepads - press a button to connect",
          "id": "76b42a0b-21a4-4eef-b20c-5a969a2189f0",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "exe"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "Num Gamepads",
                      "subType": "number"
                  },
                  {
                      "type": 2,
                      "name": "Pad 0"
                  },
                  {
                      "type": 2,
                      "name": "Pad 1"
                  },
                  {
                      "type": 2,
                      "name": "Pad 2"
                  },
                  {
                      "type": 2,
                      "name": "Pad 3"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "exe",
                      "text": "trigger to update gamepad button/axis states"
                  }
              ]
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1519815116286,
          "exampleProjectId": "XHK7NH",
          "shortName": "GamePads",
          "hasScreenshot": true,
          "namespace": "Ops.Devices.GamePad",
          "shortNameDisplay": "GamePads",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Devices.GamePad.GamePads",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Devices.Keyboard.CursorKeys",
          "content": "",
          "attachmentFiles": [],
          "summary": "get the state of your keyboards arrow keys",
          "id": "65930ca9-c923-453f-b8c4-144eda13fa0a",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "canvas only",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Cursor Keys",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "WASD",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Active",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "Degree",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Up",
                      "subType": "boolean"
                  },
                  {
                      "type": 1,
                      "name": "Up Pressed"
                  },
                  {
                      "type": 0,
                      "name": "Down",
                      "subType": "boolean"
                  },
                  {
                      "type": 1,
                      "name": "Down Pressed"
                  },
                  {
                      "type": 0,
                      "name": "Left",
                      "subType": "boolean"
                  },
                  {
                      "type": 1,
                      "name": "Left Pressed"
                  },
                  {
                      "type": 0,
                      "name": "Right",
                      "subType": "boolean"
                  },
                  {
                      "type": 1,
                      "name": "Right Pressed"
                  },
                  {
                      "type": 0,
                      "name": "Any Button Pressed",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1542699465378,
          "exampleProjectId": "m5V6VB",
          "shortName": "CursorKeys",
          "hasScreenshot": true,
          "namespace": "Ops.Devices.Keyboard",
          "shortNameDisplay": "CursorKeys",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Devices.Keyboard.CursorKeys",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false,
          "namespaceTitle": "Ops.Devices.Keyboard",
          "namespaceSummary": ""
      },
      {
          "name": "Ops.Devices.Keyboard.KeyPressLearn",
          "content": "<p>Can be used to trigger on a certain key press. Press the <code>Learn</code> button and then press a certain key – you should see the <code>Key Code</code> value change.\nOnce the op has learned a certain key it will trigger on the <code>On Press</code> port once the key is pressed.<br>You can also decide weather or not key events in the whole document or only inside the canvas should trigger by setting the <code>Canvas Only</code> checkbox.<br>Please note, that the key values of <em>KeyPressLearn</em> differ from the <a href=\"/op/Ops.Devices.Keyboard.KeyPress\" target=\"_blank\">Ops.Devices.Keyboard.KeyPress</a> op.<br>Here you will find a table listing all keys and there key codes: <a href=\"http://www.cambiaresearch.com/articles/15/javascript-key-codes\">Javascript Key Codes</a></p>\n",
          "attachmentFiles": [],
          "summary": "Triggers when certain key is pressed or released",
          "id": "f069c0db-4051-4eae-989e-6ef7953787fd",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "key code",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "canvas only",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Mod Key index",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Enabled",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Prevent Default",
                      "subType": "boolean"
                  },
                  {
                      "type": 1,
                      "name": "learn"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "on press"
                  },
                  {
                      "type": 1,
                      "name": "on release"
                  },
                  {
                      "type": 0,
                      "name": "Pressed",
                      "subType": "boolean"
                  },
                  {
                      "type": 5,
                      "name": "Key"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "key code",
                      "text": "In most cases you won’t have to use this directly, just use the `Learn` button. It contains the key code on which to respond. You can use [keycode.info](http://keycode.info/) to find out the key code you are looking for."
                  },
                  {
                      "name": "canvas only",
                      "text": "If you want to only trigger when a key has been pressed while the canvas has the focus (when you clicked in the canvas before) use `true`. If you want key presses to trigger even if the canvas is not in focus set it to `false` (global mode). "
                  },
                  {
                      "name": "Prevent Default",
                      "text": "Prevent that other key listeners (parents) are informed on the key press"
                  },
                  {
                      "name": "learn",
                      "text": "Press learn and directly afterwards (3 Seconds) press a key, this one will from now on trigger on the output port `On Press` once the key has been pressed."
                  },
                  {
                      "name": "on press",
                      "text": "Triggers every time the learned key is pressed down (and also triggers while it is hold down)."
                  },
                  {
                      "name": "on release",
                      "text": "Triggers every time the learned key is released (once)."
                  },
                  {
                      "name": "Pressed",
                      "text": "True if the key is currently pressed, false otherwise"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1510680311876,
          "exampleProjectId": "ZRY-x3",
          "shortName": "KeyPressLearn",
          "hasScreenshot": true,
          "namespace": "Ops.Devices.Keyboard",
          "shortNameDisplay": "KeyPressLearn",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Devices.Keyboard.KeyPressLearn",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Devices.Keyboard.KeyPress_v2",
          "content": "<p>Triggers every time a key has been pressed. Click inside the renderer and hit a key, you will then see the <code>Key Code</code> change. <em>KeyPress</em> uses the <code>Character</code> key codes, an <code>a</code> e.g. will result in the key code <code>97</code>.</p>\n",
          "attachmentFiles": [],
          "summary": "Triggers when a key is pressed",
          "id": "1c3fb776-fe52-4f4b-84a9-832e5a57f0fd",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "Area index",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Prevent Default",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Enabled",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "On Press"
                  },
                  {
                      "type": 0,
                      "name": "Key Code",
                      "subType": "number"
                  },
                  {
                      "type": 5,
                      "name": "Key"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1518868364510,
          "exampleProjectId": "lmGgPZ",
          "shortName": "KeyPress_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Devices.Keyboard",
          "shortNameDisplay": "KeyPress",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Devices.Keyboard.KeyPress",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Devices.Keyboard.KeyPress_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "allowEdit": false,
          "usedInProject": true
      },
      {
          "name": "Ops.Devices.Keyboard.PersonController",
          "content": "",
          "attachmentFiles": [],
          "summary": "simple controller example op for game characters",
          "id": "7b08dea1-a05b-422e-a1de-7832058bee51",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Exe"
                  },
                  {
                      "type": 0,
                      "name": "Speed",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "North",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "East",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "South",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "West",
                      "subType": "boolean"
                  },
                  {
                      "type": 1,
                      "name": "Reset"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "X",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Y",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Dir",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1519816303489,
          "exampleProjectId": "m5V6VB",
          "shortName": "PersonController",
          "hasScreenshot": true,
          "namespace": "Ops.Devices.Keyboard",
          "shortNameDisplay": "PersonController",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Devices.Keyboard.PersonController",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Devices.Keyboard.QWERTYtoMidi",
          "content": "",
          "attachmentFiles": [],
          "summary": "Emulates a MIDI keyboard using your regular keyboard",
          "id": "0aecef8b-3bcb-44ac-ae62-38ce8cd4051e",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "canvas only",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "Note Number",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Velocity",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Channel",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Command",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "tim",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1525706396391,
          "exampleProjectId": "PfZk-4",
          "shortName": "QWERTYtoMidi",
          "hasScreenshot": true,
          "namespace": "Ops.Devices.Keyboard",
          "shortNameDisplay": "QWERTYtoMidi",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Devices.Keyboard.QWERTYtoMidi",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Devices.Midi.DeviceList",
          "content": "",
          "attachmentFiles": [],
          "summary": "list of midi devices",
          "id": "6e52048f-557d-4332-9d5e-2201f728cb23",
          "layout": {
              "portsIn": [],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "Num Devices",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Midi Support",
                      "subType": "boolean"
                  },
                  {
                      "type": 3,
                      "name": "Device Names"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1541344437570,
          "exampleProjectId": "EEHSl5",
          "caniusequery": "Web MIDI API",
          "shortName": "DeviceList",
          "hasScreenshot": true,
          "namespace": "Ops.Devices.Midi",
          "shortNameDisplay": "DeviceList",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Devices.Midi.DeviceList",
                  "versionString": "",
                  "version": 0
              }
          ],
          "namespaceTitle": "Ops.Devices.Midi",
          "namespaceSummary": "",
          "allowEdit": false
      },
      {
          "name": "Ops.Devices.Midi.MidiCC",
          "content": "<p>Gets incoming midi cc messages from the selected midi channel.\nNotes can be selected with a dropdown menu or you can click &quot;learn&quot; and press a midi key to automatically map the correct note.</p>\n<p>Velocity values come in between 0-127\nThese values can be normalised between\n0 to 1 or -1 to 1 with a dropdown menu.</p>\n",
          "attachmentFiles": [],
          "summary": "read CC value from Midi controller",
          "id": "28616ffc-a761-4792-9076-8625f9ccc965",
          "layout": {
              "portsIn": [
                  {
                      "type": 2,
                      "name": "MIDI Event In",
                      "group": "MIDI"
                  },
                  {
                      "type": 0,
                      "name": "MIDI Channel index",
                      "group": "MIDI",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "CC Index",
                      "group": "CC",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Speed",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Normalize index",
                      "values": [
                          "none",
                          "0 to 1",
                          "-1 to 1"
                      ],
                      "group": "CC",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Trigger On index",
                      "values": [
                          "Both",
                          "Down",
                          "Up"
                      ],
                      "subType": "integer"
                  },
                  {
                      "type": 1,
                      "name": "learn"
                  },
                  {
                      "type": 1,
                      "name": "clear"
                  }
              ],
              "portsOut": [
                  {
                      "type": 2,
                      "name": "Event"
                  },
                  {
                      "type": 1,
                      "name": "Trigger Out"
                  },
                  {
                      "type": 0,
                      "name": "CC Index Out",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "CC Value Out",
                      "subType": "number"
                  },
                  {
                      "type": 3,
                      "name": "Value Array"
                  }
              ]
          },
          "authorName": "simod",
          "docs": {
              "ports": [
                  {
                      "name": "MIDI Event In",
                      "text": "the incoming midi event"
                  },
                  {
                      "name": "MIDI Channel",
                      "text": "Pick a midi channel from 1 to 16"
                  },
                  {
                      "name": "CC Index",
                      "text": "The selected CC index to output"
                  },
                  {
                      "name": "Normalize",
                      "text": "Enable to normalize values from 0 to 1 or -1 to 1"
                  },
                  {
                      "name": "learn",
                      "text": "Click and then press a cc button/turn a knob on your midi device to automatically select it"
                  },
                  {
                      "name": "clear",
                      "text": "reset op to default state"
                  },
                  {
                      "name": "Event",
                      "text": "Midi event out - passes all midi data through to allow midi ops to be stacked"
                  },
                  {
                      "name": "Trigger Out",
                      "text": "Triggers when the selected midi cc comes in"
                  },
                  {
                      "name": "CC Index Out",
                      "text": "If no index has been selected it will output all cc messages else it outputs selected cc index"
                  },
                  {
                      "name": "CC Value Out",
                      "text": "Value is normally between 0-127 unless Normalize Velocity is enabled"
                  }
              ]
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [
              "eDlaFD_d5lc"
          ],
          "created": 1549380950324,
          "exampleProjectId": "dfF3DI",
          "shortName": "MidiCC",
          "hasScreenshot": true,
          "namespace": "Ops.Devices.Midi",
          "shortNameDisplay": "MidiCC",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Devices.Midi.MidiCC",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Devices.Midi.MidiCCOut",
          "content": "<p>Use this op to create MIDI CC data to send out to your MIDI device.</p>\n<p>The value and index can be animated to send different CCs via a MIDI channel.</p>\n",
          "attachmentFiles": [],
          "summary": "send MIDI CC data to a midi output",
          "id": "f63adc97-7f4a-4cad-a53a-a20ad1e9b30e",
          "layout": {
              "portsIn": [
                  {
                      "type": "0",
                      "name": "MIDI Channel index",
                      "subType": "integer"
                  },
                  {
                      "type": "0",
                      "name": "CC Index",
                      "group": "CC",
                      "subType": "integer"
                  },
                  {
                      "type": "0",
                      "name": "CC Value",
                      "group": "CC",
                      "subType": "integer"
                  },
                  {
                      "type": "0",
                      "name": "Min In Value",
                      "group": "Value Range",
                      "subType": "number"
                  },
                  {
                      "type": "0",
                      "name": "Max In Value",
                      "group": "Value Range",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": "2",
                      "name": "MIDI Event Out"
                  }
              ]
          },
          "authorName": "simod",
          "docs": {
              "ports": [
                  {
                      "name": "MIDI Channel",
                      "text": "the midi channel of the CC message"
                  },
                  {
                      "name": "CC Index",
                      "text": "the index of the CC message"
                  },
                  {
                      "name": "CC Value",
                      "text": "the value of the CC message"
                  },
                  {
                      "name": "Min In Value",
                      "text": "the minimum value that is coming in"
                  },
                  {
                      "name": "Max In Value",
                      "text": "the maximum value that is coming in"
                  },
                  {
                      "name": "MIDI Event Out",
                      "text": "the midi event output port"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1571227793159,
          "exampleProjectId": "VbaQXU",
          "shortName": "MidiCCOut",
          "hasScreenshot": true,
          "namespace": "Ops.Devices.Midi",
          "shortNameDisplay": "MidiCCOut",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Devices.Midi.MidiCCOut",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Devices.Midi.MidiChord3",
          "content": "<p>This op is able to output the note numbers and velocities of up to 3 different midi notes at once. Useful when playing chords. </p>\n<p>You can press &quot;learn&quot; and then play the notes on your midi-keyboard / in your DAW to automatically assign them to MidiChord3.</p>\n<p>It is also possible to normalize the velocity values (which usually range from 0-127) to either &quot;0 to 1&quot; or &quot;-1 to 1&quot;.</p>\n",
          "attachmentFiles": [],
          "summary": "Map 3 midi notes to values",
          "id": "58388fbb-3161-417f-8c12-49d4c8ee7a19",
          "layout": {
              "portsIn": [
                  {
                      "type": 2,
                      "name": "MIDI Event In",
                      "group": "MIDI"
                  },
                  {
                      "type": 0,
                      "name": "MIDI Channel index",
                      "group": "MIDI",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Note 1 index",
                      "group": "Notes",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Note 2 index",
                      "group": "Notes",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Note 3 index",
                      "group": "Notes",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Normalize Velocity index",
                      "group": "Notes",
                      "subType": "integer"
                  },
                  {
                      "type": 1,
                      "name": "learn"
                  },
                  {
                      "type": 1,
                      "name": "reset"
                  }
              ],
              "portsOut": [
                  {
                      "type": 2,
                      "name": "MIDI Event Out"
                  },
                  {
                      "type": 1,
                      "name": "Trigger Out"
                  },
                  {
                      "type": 0,
                      "name": "Note Out 1",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Velocity 1",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Gate 1",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Note Out 2",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Velocity 2",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Gate 2",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Note Out 3",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Velocity 3",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Gate 3",
                      "subType": "boolean"
                  }
              ]
          },
          "authorName": "simod",
          "docs": {
              "ports": [
                  {
                      "name": "MIDI Event In",
                      "text": "The in port for the MIDI event"
                  },
                  {
                      "name": "MIDI Channel",
                      "text": "MIDI Channel number from 1 - 16"
                  },
                  {
                      "name": "Note 1",
                      "text": "First note index"
                  },
                  {
                      "name": "Note 2",
                      "text": "Second note index"
                  },
                  {
                      "name": "Note 3",
                      "text": "Third note index"
                  },
                  {
                      "name": "Normalize Velocity",
                      "text": "Normalize the velocity to either \"-1 to 1\" or \"0 to 1\". Normalization applies to all notes."
                  },
                  {
                      "name": "learn",
                      "text": "Press to learn notes"
                  },
                  {
                      "name": "reset",
                      "text": "Reset the learned values"
                  },
                  {
                      "name": "MIDI Event Out",
                      "text": "The out port for the MIDI event"
                  },
                  {
                      "name": "Trigger Out",
                      "text": "Triggers whenever one of the chosen notes is played"
                  },
                  {
                      "name": "Note 1",
                      "text": "Outputs first note's index"
                  },
                  {
                      "name": "Velocity 1",
                      "text": "Outputs first note's velocity"
                  },
                  {
                      "name": "Gate 1",
                      "text": "true when first note is played, false when not"
                  },
                  {
                      "name": "Note 2",
                      "text": "Outputs second note's index"
                  },
                  {
                      "name": "Velocity 2",
                      "text": "Outputs second note's velocity"
                  },
                  {
                      "name": "Gate 2",
                      "text": "true when first note is played, false when not"
                  },
                  {
                      "name": "Note 3",
                      "text": "Outputs third note's index"
                  },
                  {
                      "name": "Velocity 3",
                      "text": "Outputs third note's velocity"
                  },
                  {
                      "name": "Gate 3",
                      "text": "true when third note is played, false when not"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1551879412801,
          "exampleProjectId": "dfF3DI",
          "shortName": "MidiChord3",
          "hasScreenshot": true,
          "namespace": "Ops.Devices.Midi",
          "shortNameDisplay": "MidiChord3",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Devices.Midi.MidiChord3",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Devices.Midi.MidiClock",
          "content": "<p>This op is able to output a midi clock signal as triggers. It also outputs different musical subdivisions as trigger, ranging from a full note (one bar) to a sixteenth note.</p>\n<p>Furthermore you can change the timing of the subdivions to either dotted notes or triplets (e.g. the 1/16 - note becomes a 1/16-note-triplet). </p>\n<p>It is also possible to read the current bpm and tick duration from MidiClock.</p>\n<p>The subtick output is a counter that goes from 0 - 24 and then resets. In MIDI, a quarter note is represented by 24 clock ticks.</p>\n",
          "attachmentFiles": [],
          "summary": "sends out midi clock signals as triggers",
          "id": "5eea2f30-4e10-42a7-a761-63fb274cdb4f",
          "layout": {
              "portsIn": [
                  {
                      "type": 2,
                      "name": "MIDI Event In"
                  },
                  {
                      "type": 0,
                      "name": "Timing index",
                      "subType": "integer"
                  }
              ],
              "portsOut": [
                  {
                      "type": 2,
                      "name": "MIDI Event Out"
                  },
                  {
                      "type": 1,
                      "name": "Tick Out"
                  },
                  {
                      "type": 1,
                      "name": "Clock Start"
                  },
                  {
                      "type": 1,
                      "name": "Clock Stop"
                  },
                  {
                      "type": 1,
                      "name": "Clock Continue"
                  },
                  {
                      "type": 0,
                      "name": "BPM",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Tick Duration",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Sub Tick",
                      "subType": "number"
                  },
                  {
                      "type": 1,
                      "name": "1/1"
                  },
                  {
                      "type": 1,
                      "name": "1/2"
                  },
                  {
                      "type": 1,
                      "name": "1/4"
                  },
                  {
                      "type": 1,
                      "name": "1/8"
                  },
                  {
                      "type": 1,
                      "name": "1/16"
                  }
              ]
          },
          "authorName": "simod",
          "docs": {
              "ports": [
                  {
                      "name": "MIDI Event In",
                      "text": "Input for the midi clock event, use the clock output of MidiInputDevice2"
                  },
                  {
                      "name": "Timing",
                      "text": "Change the subdivision timing"
                  },
                  {
                      "name": "MIDI Event Out",
                      "text": "The out port for the MIDI clock event"
                  },
                  {
                      "name": "Tick Out",
                      "text": "Outputs a trigger every tick"
                  },
                  {
                      "name": "Clock Start",
                      "text": "Outputs a clock start signal"
                  },
                  {
                      "name": "Clock Stop",
                      "text": "Outputs a clock stop signal"
                  },
                  {
                      "name": "Clock Continue",
                      "text": "Outputs a clock continue signal"
                  },
                  {
                      "name": "BPM",
                      "text": "read the current bpm as a number"
                  },
                  {
                      "name": "Tick Duration",
                      "text": "tick duration in milliseconds"
                  },
                  {
                      "name": "Sub Tick",
                      "text": "current subtick (value between 0 - 24)"
                  },
                  {
                      "name": "1/1",
                      "text": "outputs a trigger every bar (dotted: 1.5 bars, triplet: full-note triplet)"
                  },
                  {
                      "name": "1/2",
                      "text": "outputs a trigger every half note (dotted: trigger every 3/4, triplet: half-note triplet)"
                  },
                  {
                      "name": "1/4",
                      "text": "outputs a trigger every quarter note (dotted: trigger every 3/8, triplet: quarter-note triplet)"
                  },
                  {
                      "name": "1/8",
                      "text": "outputs a trigger every eigth note (dotted: trigger every 3/16, triplet: eigth-note triplet)"
                  },
                  {
                      "name": "1/16",
                      "text": "outputs a trigger every sixteenth note (dotted: trigger every 3/32, triplet: sixteenth-note triplet)"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [
              "ieozmhPy8jc"
          ],
          "created": 1559654386342,
          "exampleProjectId": "dfF3DI",
          "shortName": "MidiClock",
          "hasScreenshot": true,
          "namespace": "Ops.Devices.Midi",
          "shortNameDisplay": "MidiClock",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Devices.Midi.MidiClock",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Devices.Midi.MidiInputDevice_v2",
          "content": "<p>This reworked midi device is the heart of all midi operations in cables.</p>\n<p>In here you select the device of which you want to use to transmit midi data to cables.</p>\n<p>It outputs MIDI events separated by type (e.g. Clock, CC, Note).</p>\n<p>Press the panic button to send note-off or value-zero messages to all notes and CC indexes (Think of it as a kill switch).</p>\n<p>Furthermore this device allows you to automatically create ops corresponding to the message you sent by pressing the &quot;Learn&quot; Button and, for example playing a note on your midi keyboard. This will automatically create a MidiNote op for you. Also works with CC and NRPN.`</p>\n",
          "attachmentFiles": [],
          "summary": "connect to MIDI device output port",
          "id": "484b3a00-41b7-4e3f-8a99-a1b32a764eff",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "Device index",
                      "group": "Device Select",
                      "subType": "integer"
                  },
                  {
                      "type": 1,
                      "name": "Learn",
                      "group": "Controls"
                  },
                  {
                      "type": 1,
                      "name": "Panic",
                      "group": "Controls"
                  }
              ],
              "portsOut": [
                  {
                      "type": 2,
                      "name": "Event"
                  },
                  {
                      "type": 2,
                      "name": "Note"
                  },
                  {
                      "type": 2,
                      "name": "CC"
                  },
                  {
                      "type": 2,
                      "name": "NRPN"
                  },
                  {
                      "type": 2,
                      "name": "Program Change"
                  },
                  {
                      "type": 2,
                      "name": "Clock"
                  }
              ]
          },
          "authorName": "simod",
          "docs": {
              "ports": [
                  {
                      "name": "Learn",
                      "text": "press button and send midi signal to automatically create op"
                  },
                  {
                      "name": "Panic",
                      "text": "press if you panic"
                  },
                  {
                      "name": "Event",
                      "text": "The out port for all MIDI events"
                  },
                  {
                      "name": "Note",
                      "text": "Only outputs midi events of type Note"
                  },
                  {
                      "name": "CC",
                      "text": "Only outputs midi events of type CC"
                  },
                  {
                      "name": "NRPN",
                      "text": "Only outputs midi events of type NRPN"
                  },
                  {
                      "name": "Clock",
                      "text": "Only outputs midi events of type Clock"
                  }
              ]
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1549387018997,
          "exampleProjectId": "dfF3DI",
          "caniusequery": "Web MIDI API",
          "shortName": "MidiInputDevice_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Devices.Midi",
          "shortNameDisplay": "MidiInputDevice",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Devices.Midi.MidiInputDevice",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Devices.Midi.MidiInputDevice_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Devices.Midi.MidiMonitor",
          "content": "<p>MidiMonitor allows you to monitor incoming midi events.</p>\n<p>This is a great little tool to troubleshoot issues that might arise when working with MIDI or to just get a general overview of the midi signals that are flowing into cables.</p>\n",
          "attachmentFiles": [],
          "summary": "detailed information about Midi events being sent",
          "id": "3f585ff5-afd6-45d5-b082-80c62f6cdf2b",
          "layout": {
              "portsIn": [
                  {
                      "type": 2,
                      "name": "Event",
                      "group": "MIDI"
                  }
              ],
              "portsOut": [
                  {
                      "type": 2,
                      "name": "MIDI Event Out"
                  },
                  {
                      "type": 1,
                      "name": "Trigger Out"
                  },
                  {
                      "type": 0,
                      "name": "Device",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "MIDI Channel",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Message Type",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Note",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Note Velocity",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "CC Number",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "CC Value",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Pitch Bend Value",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "NRPN Number",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "NRPN Value",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Program Change Value",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "simod",
          "docs": {
              "ports": [
                  {
                      "name": "Event",
                      "text": "The in port for the MIDI event"
                  },
                  {
                      "name": "MIDI Event Out",
                      "text": "The out port for the MIDI event"
                  },
                  {
                      "name": "Trigger Out",
                      "text": "triggers whenever a midi event is received"
                  },
                  {
                      "name": "Device",
                      "text": "name of the device"
                  },
                  {
                      "name": "MIDI Channel",
                      "text": "the midi channel of the message"
                  },
                  {
                      "name": "Message Type",
                      "text": "the type of the message (CC, Note, NRPN, Clock, ...)"
                  },
                  {
                      "name": "Note",
                      "text": "displays the sent note index if message is a note"
                  },
                  {
                      "name": "Note Velocity",
                      "text": "displays the sent note velocity if message is a note"
                  },
                  {
                      "name": "CC Number",
                      "text": "displays the sent CC index if message is of type CC"
                  },
                  {
                      "name": "CC Value",
                      "text": "displays the sent CC value if message is of type CC"
                  },
                  {
                      "name": "Pitch Bend Value",
                      "text": "displays the sent pitch bend value if message is of type Pitch Bend"
                  },
                  {
                      "name": "NRPN Number",
                      "text": "displays the sent NRPN index if message is of type NRPN"
                  },
                  {
                      "name": "NRPN Value",
                      "text": "displays the sent NRPN value if message is of type NRPN"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1548429888683,
          "exampleProjectId": "dfF3DI",
          "shortName": "MidiMonitor",
          "hasScreenshot": true,
          "namespace": "Ops.Devices.Midi",
          "shortNameDisplay": "MidiMonitor",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Devices.Midi.MidiMonitor",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Devices.Midi.MidiNRPN",
          "content": "<p>This op is able to output the index and value of a midi NRPN signal.</p>\n<p>In contrast to Note and CC signals, a midi NRPN message&#39;s value ranges from 0 to 16383 instead of 0 to 127. This makes NRPN signals more useful for fine-grained control of visual data. </p>\n<p>Please refer to <a href=\"http://www.philrees.co.uk/nrpnq.htm\">http://www.philrees.co.uk/nrpnq.htm</a> as a starting point if you want to know more about it in-depth. </p>\n<p>You can press &quot;learn&quot; and then send a NRPN signal from your DAW to automatically assign them to MidiNRPN.</p>\n<p>It is possible to normalize the NRPN values (which usually range from 0-16383) to either &quot;0 to 1&quot; or &quot;-1 to 1“.</p>\n",
          "attachmentFiles": [],
          "summary": "read NRPN value from controller",
          "id": "2b13bc7b-c1bd-4319-9c85-86a81a6e2354",
          "layout": {
              "portsIn": [
                  {
                      "type": 2,
                      "name": "MIDI Event In",
                      "group": "MIDI"
                  },
                  {
                      "type": 0,
                      "name": "MIDI Channel index",
                      "group": "MIDI",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "NRPN Index",
                      "group": "NRPN",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Normalize index",
                      "group": "NRPN",
                      "subType": "integer"
                  },
                  {
                      "type": 1,
                      "name": "learn"
                  },
                  {
                      "type": 1,
                      "name": "clear"
                  }
              ],
              "portsOut": [
                  {
                      "type": 2,
                      "name": "MIDI Event Out"
                  },
                  {
                      "type": 1,
                      "name": "Trigger Out"
                  },
                  {
                      "type": 0,
                      "name": "NRPN Index",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "NRPN Value",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "simod",
          "docs": {
              "ports": [
                  {
                      "name": "MIDI Event In",
                      "text": "The in port for the MIDI event"
                  },
                  {
                      "name": "MIDI Channel",
                      "text": "MIDI Channel number from 1 - 16"
                  },
                  {
                      "name": "NRPN Index",
                      "text": "NRPN index"
                  },
                  {
                      "name": "Normalize",
                      "text": "Choose between 3 options: 0 to 16383 (none), 0 to 1, -1 to 1"
                  },
                  {
                      "name": "learn",
                      "text": "press to automatically assign NRPN"
                  },
                  {
                      "name": "clear",
                      "text": "reset op to default state"
                  },
                  {
                      "name": "MIDI Event Out",
                      "text": "The out port for MIDI event"
                  },
                  {
                      "name": "Trigger Out",
                      "text": "triggers whenever an NRPN message is sent"
                  },
                  {
                      "name": "NRPN Index",
                      "text": "NRPN index"
                  },
                  {
                      "name": "NRPN Value",
                      "text": "value output"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1550071006329,
          "exampleProjectId": "dfF3DI",
          "shortName": "MidiNRPN",
          "hasScreenshot": true,
          "namespace": "Ops.Devices.Midi",
          "shortNameDisplay": "MidiNRPN",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Devices.Midi.MidiNRPN",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Devices.Midi.MidiNRPNOut",
          "content": "<p>Use this op to create MIDI NRPN data out to your MIDI device.</p>\n<p>The value and index can be animated to send different NRPNs via a MIDI channel.</p>\n",
          "attachmentFiles": [],
          "summary": "send midi NRPN data to a midi output",
          "id": "469abc8f-598a-4a42-a5df-881bf80ee363",
          "layout": {
              "portsIn": [
                  {
                      "type": "0",
                      "name": "MIDI Channel index",
                      "subType": "integer"
                  },
                  {
                      "type": "0",
                      "name": "NRPN Index",
                      "group": "NRPN",
                      "subType": "integer"
                  },
                  {
                      "type": "0",
                      "name": "NRPN Value",
                      "group": "NRPN",
                      "subType": "integer"
                  },
                  {
                      "type": "0",
                      "name": "Min In Value",
                      "group": "Value Range",
                      "subType": "number"
                  },
                  {
                      "type": "0",
                      "name": "Max In Value",
                      "group": "Value Range",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": "2",
                      "name": "MIDI Event Out"
                  }
              ]
          },
          "authorName": "simod",
          "docs": {
              "ports": [
                  {
                      "name": "MIDI Channel",
                      "text": "the midi channel of the NRPN message"
                  },
                  {
                      "name": "NRPN Value",
                      "text": "the value of the NRPN message"
                  },
                  {
                      "name": "NRPN Index",
                      "text": "the index of the NRPN message"
                  },
                  {
                      "name": "Min In Value",
                      "text": "the minimum value that is coming in"
                  },
                  {
                      "name": "Max In Value",
                      "text": "the maximum value that is coming in"
                  },
                  {
                      "name": "MIDI Event Out",
                      "text": "the midi event output port"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1571299706473,
          "exampleProjectId": "VbaQXU",
          "shortName": "MidiNRPNOut",
          "hasScreenshot": true,
          "namespace": "Ops.Devices.Midi",
          "shortNameDisplay": "MidiNRPNOut",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Devices.Midi.MidiNRPNOut",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Devices.Midi.MidiNote",
          "content": "<p>This op replaces the older <code>MidiButton op</code></p>\n<p>Gets incoming midi notes from the selected midi channel.\nNotes can be selected with a dropdown menu or you can click &quot;learn&quot; and press a midi key to automatically map the correct note.</p>\n<p>Velocity values come in between 0-127\nThese values can be normalised between \n0 to 1 or -1 to 1 with a dropdown menu.</p>\n",
          "attachmentFiles": [],
          "summary": "Read a single midi note",
          "id": "517ed1fc-6110-4611-9cc7-8dd459191c65",
          "layout": {
              "portsIn": [
                  {
                      "type": 2,
                      "name": "MIDI Event In",
                      "group": "MIDI"
                  },
                  {
                      "type": 0,
                      "name": "MIDI Channel index",
                      "group": "MIDI",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Note index",
                      "group": "Note",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Normalize Velocity index",
                      "group": "Note",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Toggle Gate",
                      "group": "Note",
                      "subType": "boolean"
                  },
                  {
                      "type": 1,
                      "name": "learn"
                  },
                  {
                      "type": 1,
                      "name": "clear"
                  }
              ],
              "portsOut": [
                  {
                      "type": 2,
                      "name": "MIDI Event Out"
                  },
                  {
                      "type": 1,
                      "name": "Trigger Out"
                  },
                  {
                      "type": 0,
                      "name": "Current Note",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Velocity",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Gate",
                      "subType": "boolean"
                  },
                  {
                      "type": 3,
                      "name": "Velocity Array"
                  }
              ]
          },
          "authorName": "simod",
          "docs": {
              "ports": [
                  {
                      "name": "MIDI Event In",
                      "text": "Midi event in"
                  },
                  {
                      "name": "MIDI Channel",
                      "text": "Pick a midi channel from 1 to 16"
                  },
                  {
                      "name": "Note",
                      "text": "The selected note to output"
                  },
                  {
                      "name": "Normalize Velocity",
                      "text": "Enable to normalize values from 0 to 1 or -1 to 1"
                  },
                  {
                      "name": "Toggle Gate",
                      "text": "When activated, playing a note turns the gate on. Playing it again turns it off."
                  },
                  {
                      "name": "learn",
                      "text": "Click and then press a midi note to automatically select it"
                  },
                  {
                      "name": "clear",
                      "text": "reset op to default state"
                  },
                  {
                      "name": "MIDI Event Out",
                      "text": "Midi event out - passes all midi data through to allow midi ops to be stacked"
                  },
                  {
                      "name": "Trigger Out",
                      "text": "Triggers when the selected midi note comes in"
                  },
                  {
                      "name": "Current Note",
                      "text": "If no note has been selected it will output all changing note numbers else it outputs selected note"
                  },
                  {
                      "name": "Velocity",
                      "text": "Velocity is normally between 0-127 unless Normalise velocity is enabled"
                  },
                  {
                      "name": "Gate",
                      "text": "True when the note is on else false. When toggle is activated, true when note comes in. False when note comes in again."
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [
              "eDlaFD_d5lc"
          ],
          "created": 1551785410213,
          "exampleProjectId": "dfF3DI",
          "shortName": "MidiNote",
          "hasScreenshot": true,
          "namespace": "Ops.Devices.Midi",
          "shortNameDisplay": "MidiNote",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Devices.Midi.MidiNote",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false,
          "usedInProject": true
      },
      {
          "name": "Ops.Devices.Midi.MidiNoteFilter",
          "content": "<p>Allows you to limit the amount of midi notes that are read.\nIt&#39;s also handy if you have a bunch of midi notes for a beat and \nwant a trigger for each of them.</p>\n",
          "attachmentFiles": [],
          "summary": "Only read a range of notes (e.g. C1 to C2)",
          "id": "b248a588-81cc-47af-a65b-36509abd2888",
          "layout": {
              "portsIn": [
                  {
                      "type": 2,
                      "name": "MIDI Event",
                      "group": "MIDI"
                  },
                  {
                      "type": 0,
                      "name": "MIDI Channel index",
                      "group": "MIDI",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Note Start index",
                      "group": "Notes",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Note End index",
                      "group": "Notes",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Normalize Velocity index",
                      "group": "Notes",
                      "subType": "integer"
                  },
                  {
                      "type": 1,
                      "name": "learn"
                  },
                  {
                      "type": 1,
                      "name": "reset"
                  }
              ],
              "portsOut": [
                  {
                      "type": 2,
                      "name": "Event"
                  },
                  {
                      "type": 1,
                      "name": "Trigger Out"
                  },
                  {
                      "type": 0,
                      "name": "Current Note",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Velocity",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Gate",
                      "subType": "boolean"
                  }
              ]
          },
          "authorName": "simod",
          "docs": {
              "ports": [
                  {
                      "name": "MIDI Event",
                      "text": "Midi event in"
                  },
                  {
                      "name": "MIDI Channel",
                      "text": "Pick a midi channel from 1 to 16"
                  },
                  {
                      "name": "Note Start",
                      "text": "The first note in the range- all notes below this are ignored"
                  },
                  {
                      "name": "Note End",
                      "text": "The last note in the range- all notes above this are ignored"
                  },
                  {
                      "name": "Normalize Velocity",
                      "text": "Enable to normalise values from 0 to 1 or -1 to 1"
                  },
                  {
                      "name": "learn",
                      "text": "lick and then press the first and then last midi note to automatically define the range"
                  },
                  {
                      "name": "reset",
                      "text": "Resets the selected range"
                  },
                  {
                      "name": "Event",
                      "text": "Midi event out - passes all midi data through to allow midi ops to be stacked"
                  },
                  {
                      "name": "Trigger Out",
                      "text": "Triggers when notes between the selected range come in"
                  },
                  {
                      "name": "Current Note",
                      "text": "outputs all note numbers coming in between the selected range"
                  },
                  {
                      "name": "Velocity",
                      "text": "Velocity of current note. Normally between 0-127 unless Normalise velocity is enabled"
                  },
                  {
                      "name": "Gate",
                      "text": "True when the note is on else false."
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [
              "eDlaFD_d5lc",
              "x0mjo8XStzA"
          ],
          "created": 1553163854704,
          "exampleProjectId": "dfF3DI",
          "shortName": "MidiNoteFilter",
          "hasScreenshot": true,
          "namespace": "Ops.Devices.Midi",
          "shortNameDisplay": "MidiNoteFilter",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Devices.Midi.MidiNoteFilter",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Devices.Midi.MidiNoteOut",
          "content": "<p>Use this op to create MIDI notes data to send out to your MIDI device.</p>\n<p>The velocity and note index can be animated to send different notes via a MIDI channel.</p>\n<p>If you choose a note with the dropdown menu, only that note will get sent.</p>\n<p>You can use the velocity array in to send multiple notes out at once.</p>\n",
          "attachmentFiles": [],
          "summary": "send midi note data to a midi output",
          "id": "172dcd08-cd5b-4272-bc7d-2b1a61ecfd4a",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "MIDI Channel index",
                      "group": "General",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Note index",
                      "group": "General",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Note Number",
                      "group": "Note",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Velocity",
                      "group": "Note",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Min In Velocity",
                      "group": "Velocity Range",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Max In Velocity",
                      "group": "Velocity Range",
                      "subType": "number"
                  },
                  {
                      "type": 3,
                      "name": "Velocity Array In"
                  }
              ],
              "portsOut": [
                  {
                      "type": 2,
                      "name": "MIDI Event Out"
                  }
              ]
          },
          "authorName": "simod",
          "docs": {
              "ports": [
                  {
                      "name": "MIDI Channel",
                      "text": "the midi channel of the note message"
                  },
                  {
                      "name": "Note",
                      "text": "dropdown menu for a single note"
                  },
                  {
                      "name": "Note Number",
                      "text": "the note number of the note message"
                  },
                  {
                      "name": "Velocity",
                      "text": "the velocity of the note message"
                  },
                  {
                      "name": "Min In Velocity",
                      "text": "the minimum velocity that is coming in"
                  },
                  {
                      "name": "Max In Velocity",
                      "text": "the maximum velocity that is coming in"
                  },
                  {
                      "name": "Velocity Array In",
                      "text": "array input of length 128 for each note"
                  },
                  {
                      "name": "MIDI Event Out",
                      "text": "the midi event output port"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1571232970147,
          "exampleProjectId": "VbaQXU",
          "shortName": "MidiNoteOut",
          "hasScreenshot": true,
          "namespace": "Ops.Devices.Midi",
          "shortNameDisplay": "MidiNoteOut",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Devices.Midi.MidiNoteOut",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Devices.Midi.MidiOutputDevice",
          "content": "<p>This op lets you choose an output device to which you want to transmit midi data to your DAW, sequencer, synthesizer, etc..</p>\n<p>It receives MIDI events seperated by type (e.g. Note, CC, NRPN).</p>\n<p>Select your MIDI device from the dropdown menu.</p>\n",
          "attachmentFiles": [],
          "summary": "Connect to MIDI device input port",
          "id": "a874a81a-4416-4ed5-bea9-66531ed83376",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "Device index",
                      "group": "Device",
                      "subType": "integer"
                  },
                  {
                      "type": 2,
                      "name": "Note",
                      "group": "Midi Events"
                  },
                  {
                      "type": 2,
                      "name": "CC",
                      "group": "Midi Events"
                  },
                  {
                      "type": 2,
                      "name": "NRPN",
                      "group": "Midi Events"
                  }
              ],
              "portsOut": []
          },
          "authorName": "simod",
          "docs": {
              "ports": [
                  {
                      "name": "Note",
                      "text": "the input port for MIDI note events"
                  },
                  {
                      "name": "CC",
                      "text": "the input port for MIDI CC events"
                  },
                  {
                      "name": "NRPN",
                      "text": "the input port for MIDI NRPN events"
                  }
              ]
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1571218864323,
          "exampleProjectId": "VbaQXU",
          "caniusequery": "Web MIDI API",
          "shortName": "MidiOutputDevice",
          "hasScreenshot": true,
          "namespace": "Ops.Devices.Midi",
          "shortNameDisplay": "MidiOutputDevice",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Devices.Midi.MidiOutputDevice",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Devices.Midi.MidiTranspose",
          "content": "<p>This op lets you transpose MIDI notes by x semitones up or down.</p>\n",
          "attachmentFiles": [],
          "summary": "transpose incoming midi notes",
          "id": "c3b01c76-a300-44d3-8e1a-c8ae7a776463",
          "layout": {
              "portsIn": [
                  {
                      "type": 2,
                      "name": "MIDI Event In",
                      "group": "MIDI"
                  },
                  {
                      "type": 0,
                      "name": "MIDI Channel index",
                      "group": "MIDI",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Transpose Amount",
                      "group": "Transpose",
                      "subType": "integer"
                  },
                  {
                      "type": 1,
                      "name": "learn",
                      "group": "MIDI"
                  }
              ],
              "portsOut": [
                  {
                      "type": 2,
                      "name": "MIDI Event Out"
                  },
                  {
                      "type": 1,
                      "name": "Trigger Out"
                  }
              ]
          },
          "authorName": "simod",
          "docs": {
              "ports": [
                  {
                      "name": "MIDI Event In",
                      "text": "the incoming MIDI event"
                  },
                  {
                      "name": "MIDI Channel",
                      "text": "pick a MIDI channel from 1 to 16"
                  },
                  {
                      "name": "learn",
                      "text": "click to set MIDI channel automatically"
                  },
                  {
                      "name": "Transpose Amount",
                      "text": "the amount of semitones to transpose incoming midi notes"
                  },
                  {
                      "name": "MIDI Event Out",
                      "text": "Midi event out - passes all midi data through to allow midi ops to be stacked"
                  },
                  {
                      "name": "Trigger Out",
                      "text": "triggers whenever a midi note comes in"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1560859040306,
          "exampleProjectId": "dfF3DI",
          "shortName": "MidiTranspose",
          "hasScreenshot": true,
          "namespace": "Ops.Devices.Midi",
          "shortNameDisplay": "MidiTranspose",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Devices.Midi.MidiTranspose",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Devices.Midi.MidiValueToNote_v2",
          "content": "<p>Converts a MIDI value (e.g. <code>60</code> coming from a connected MIDI keyboard) to a note (e.g. <code>&quot;C4&quot;</code>). The octave will always be included at the end of the string, if it is below 0, it will look like <code>A#-1</code>.  </p>\n<p>Please note that semitones will always be presented using sharps (#), not flats (<em>b</em>).</p>\n",
          "attachmentFiles": [],
          "summary": "Converts a MIDI value to a note string",
          "id": "6f9cc2b3-8dba-44de-a677-a0706952a64c",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "Midi Value",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 5,
                      "name": "Note"
                  }
              ]
          },
          "authorName": "tim",
          "docs": {
              "ports": [
                  {
                      "name": "Midi Value",
                      "text": "The MIDI Value you want to convert to a note-string, e.g. `80`"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1655723386812,
          "exampleProjectId": "PfZk-4",
          "credits": [
              {
                  "title": "tonaljs",
                  "author": "tonaljs",
                  "url": "https://github.com/danigb/tonal",
                  "licence": "MIT"
              }
          ],
          "shortName": "MidiValueToNote_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Devices.Midi",
          "shortNameDisplay": "MidiValueToNote",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Devices.Midi.MidiValueToNote",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Devices.Midi.MidiValueToNote_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Devices.Mobile.DeviceVibrate",
          "content": "",
          "attachmentFiles": [],
          "summary": "vibrating a mobile device",
          "id": "e947fc63-e44e-4bdd-98e0-89e79373f073",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Vibrate"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "Supported",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1542699557913,
          "exampleProjectId": "H4NGFU",
          "caniusequery": "Navigator API: vibrate",
          "shortName": "DeviceVibrate",
          "hasScreenshot": true,
          "namespace": "Ops.Devices.Mobile",
          "shortNameDisplay": "DeviceVibrate",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Devices.Mobile.DeviceVibrate",
                  "versionString": "",
                  "version": 0
              }
          ],
          "namespaceTitle": "Ops.Devices.Mobile",
          "namespaceSummary": "",
          "allowEdit": false
      },
      {
          "name": "Ops.Devices.Mobile.GeoLocation",
          "content": "",
          "attachmentFiles": [],
          "summary": "tries to get the geo coordinates from the mobile device/browser",
          "id": "7d9ae643-d011-417e-afe3-b3acb78a6d63",
          "layout": {
              "portsIn": [],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "Browser Support",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Latitude",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Longitude",
                      "subType": "number"
                  },
                  {
                      "type": 2,
                      "name": "Data"
                  }
              ]
          },
          "authorName": "pandur",
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1542699582684,
          "exampleProjectId": "kIZ3Ms",
          "shortName": "GeoLocation",
          "hasScreenshot": true,
          "namespace": "Ops.Devices.Mobile",
          "shortNameDisplay": "GeoLocation",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Devices.Mobile.GeoLocation",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Devices.Mobile.LockOrientation",
          "content": "<p>Note: This method only works for installed Web apps or for Web pages in full-screen mode.</p>\n<p>see: <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Screen/lockOrientation\">https://developer.mozilla.org/en-US/docs/Web/API/Screen/lockOrientation</a></p>\n",
          "attachmentFiles": [],
          "summary": "locks orientation to landscape or portrait mode",
          "id": "486d5713-5292-47af-bbd3-df81fb7cd3ca",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "Portrait",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Landscape",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "Supported",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Locked",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1511297702633,
          "exampleProjectId": "",
          "shortName": "LockOrientation",
          "hasScreenshot": false,
          "namespace": "Ops.Devices.Mobile",
          "shortNameDisplay": "LockOrientation",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Devices.Mobile.LockOrientation",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false,
          "usedInProject": true
      },
      {
          "name": "Ops.Devices.Mobile.MotionSensor_v2",
          "content": "<ul>\n<li><p>alpha value represents the motion of the device around the z axis, represented in degrees with values ranging from 0 to 360.</p>\n</li>\n<li><p>beta value represents the motion of the device around the x axis, represented in degrees with values ranging from -180 to 180. \nThis represents a front to back motion of the device.</p>\n</li>\n<li><p>gamma value represents the motion of the device around the y axis, represented in degrees with values ranging from -90 to 90. \nThis represents a left to right motion of the device.</p>\n</li>\n</ul>\n",
          "attachmentFiles": [],
          "summary": "get values from the device motion sensor mobile",
          "id": "f4102f07-e5ff-4c1e-ac5b-6a4758b81727",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "Mul Orientation",
                      "subType": "number"
                  },
                  {
                      "type": 1,
                      "name": "Request Permissions"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "Orientation Alpha",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Orientation Beta",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Orientation Gamma",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Acceleration X",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Acceleration Y",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Acceleration Z",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Acceleration X no gravity",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Acceleration Y no gravity",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Acceleration Z no gravity",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Rotation Rate Alpha",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Rotation Rate Beta",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Rotation Rate Gamma",
                      "subType": "number"
                  },
                  {
                      "type": 2,
                      "name": "Object"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1574870880964,
          "exampleProjectId": "dZ8wQ0",
          "shortName": "MotionSensor_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Devices.Mobile",
          "shortNameDisplay": "MotionSensor",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Devices.Mobile.MotionSensor",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Devices.Mobile.MotionSensor_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Devices.Mobile.Pinch",
          "content": "",
          "attachmentFiles": [],
          "summary": "detect two finger pinch gestures on touchscreens",
          "id": "98e19e37-88ca-4c07-bed7-a050dac31e3a",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "Enabled",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Min Scale",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Max Scale",
                      "subType": "number"
                  },
                  {
                      "type": 1,
                      "name": "Reset Scale"
                  },
                  {
                      "type": 0,
                      "name": "Limit",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "Scale",
                      "subType": "number"
                  },
                  {
                      "type": 2,
                      "name": "Event Details"
                  },
                  {
                      "type": 0,
                      "name": "Delta",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "tim",
          "docs": {
              "ports": []
          },
          "hasExample": false,
          "libs": [
              "hammer.js"
          ],
          "youtubeids": [],
          "created": 1516706915825,
          "exampleProjectId": "",
          "shortName": "Pinch",
          "hasScreenshot": false,
          "namespace": "Ops.Devices.Mobile",
          "shortNameDisplay": "Pinch",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Devices.Mobile.Pinch",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Devices.Mobile.ScreenOrientation_v2",
          "content": "<p>Orientation of the device/screen. e.g. Screen is in 0 Degree rotated Landscape mode, or 90 Degree rotated to Portrait mode.</p>\n<p>experimental technology: </p>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Screen/orientation\">https://developer.mozilla.org/en-US/docs/Web/API/Screen/orientation</a></p>\n",
          "attachmentFiles": [],
          "summary": "get orientation of the physical screen",
          "id": "c56f7d8b-fa85-4906-9aa5-439cdd19bce7",
          "layout": {
              "portsOut": [
                  {
                      "type": 0,
                      "name": "Angle",
                      "subType": "number"
                  },
                  {
                      "type": 5,
                      "name": "Type"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1730393300034,
          "exampleProjectId": "Zc398i",
          "caniusequery": "screenorientation",
          "shortName": "ScreenOrientation_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Devices.Mobile",
          "shortNameDisplay": "ScreenOrientation",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Devices.Mobile.ScreenOrientation",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Devices.Mobile.ScreenOrientation_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Devices.Mobile.ShakeGesture",
          "content": "",
          "attachmentFiles": [],
          "summary": "Reads the accelerometer data from a mobile device",
          "id": "7b32f8ad-ff4a-4634-927b-ede9955e3b53",
          "layout": {
              "portsIn": [],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "Acceleration X",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Acceleration Y",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Acceleration Z",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1554108323765,
          "exampleProjectId": "",
          "shortName": "ShakeGesture",
          "hasScreenshot": false,
          "namespace": "Ops.Devices.Mobile",
          "shortNameDisplay": "ShakeGesture",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Devices.Mobile.ShakeGesture",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Devices.Mouse.MouseButtons",
          "content": "",
          "attachmentFiles": [],
          "summary": "Get the state of mouse buttons",
          "id": "c7e5e545-c8a1-4fef-85c2-45422b947f0d",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "Area index",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Active",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Click Left"
                  },
                  {
                      "type": 1,
                      "name": "Click Right"
                  },
                  {
                      "type": 1,
                      "name": "Double Click"
                  },
                  {
                      "type": 0,
                      "name": "Button pressed Left",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Button pressed Middle",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Button pressed Right",
                      "subType": "number"
                  },
                  {
                      "type": 1,
                      "name": "Mouse Down Left"
                  },
                  {
                      "type": 1,
                      "name": "Mouse Down Middle"
                  },
                  {
                      "type": 1,
                      "name": "Mouse Down Right"
                  },
                  {
                      "type": 1,
                      "name": "Mouse Up Left"
                  },
                  {
                      "type": 1,
                      "name": "Mouse Up Middle"
                  },
                  {
                      "type": 1,
                      "name": "Mouse Up Right"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1507284375026,
          "exampleProjectId": "cLtJLO",
          "shortName": "MouseButtons",
          "hasScreenshot": true,
          "namespace": "Ops.Devices.Mouse",
          "shortNameDisplay": "MouseButtons",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Devices.Mouse.MouseButtons",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Devices.Mouse.MouseDrag",
          "content": "",
          "attachmentFiles": [],
          "summary": "get delta of mouse position while dragging",
          "id": "5103d14e-2f21-4f43-ae91-c1b55a944226",
          "layout": {
              "portsIn": [
                  {
                      "type": "0",
                      "name": "Active",
                      "subType": "boolean"
                  },
                  {
                      "type": "0",
                      "name": "Speed",
                      "subType": "number"
                  },
                  {
                      "type": "0",
                      "name": "Input Type index",
                      "subType": "integer"
                  },
                  {
                      "type": "0",
                      "name": "Area index",
                      "subType": "integer"
                  }
              ],
              "portsOut": [
                  {
                      "type": "0",
                      "name": "Delta X",
                      "subType": "number"
                  },
                  {
                      "type": "0",
                      "name": "Delta Y",
                      "subType": "number"
                  },
                  {
                      "type": "0",
                      "name": "Is Dragging",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1519221134310,
          "exampleProjectId": "hH8f_6",
          "shortName": "MouseDrag",
          "hasScreenshot": true,
          "namespace": "Ops.Devices.Mouse",
          "shortNameDisplay": "MouseDrag",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Devices.Mouse.MouseDrag",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Devices.Mouse.MouseWheel_v2",
          "content": "",
          "attachmentFiles": [],
          "summary": "outputs delta values controlled by the mousewheel (scroll, zoom)",
          "id": "7b9626db-536b-4bb4-85c3-95401bc60d1b",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "Speed",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "prevent scroll",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Flip Direction",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Simple Delta",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Area index",
                      "values": [
                          "Canvas",
                          "Document",
                          "Parent"
                      ],
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "active",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "delta",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "delta X",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "browser event delta",
                      "subType": "number"
                  },
                  {
                      "type": 1,
                      "name": "Wheel Action"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1586273436875,
          "exampleProjectId": "hH8f_6",
          "shortName": "MouseWheel_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Devices.Mouse",
          "shortNameDisplay": "MouseWheel",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Devices.Mouse.MouseWheel",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Devices.Mouse.MouseWheel_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Devices.Mouse.Mouse_v3",
          "content": "",
          "attachmentFiles": [],
          "summary": "Get mouse coordinates and events",
          "id": "6d1edbc0-088a-43d7-9156-918fb3d7f24b",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "Coordinates index",
                      "values": [
                          "-1 to 1",
                          "Pixel Display",
                          "Pixel",
                          "0 to 1"
                      ],
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Area index",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "flip y",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "right click prevent default",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Touch support",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Passive Events",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Active",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "x",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "y",
                      "subType": "number"
                  },
                  {
                      "type": 1,
                      "name": "click"
                  },
                  {
                      "type": 1,
                      "name": "click right"
                  },
                  {
                      "type": 0,
                      "name": "Button is down",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Mouse is hovering",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Movement X",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Movement Y",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1668760408364,
          "exampleProjectId": "mDiCq6",
          "shortName": "Mouse_v3",
          "hasScreenshot": true,
          "namespace": "Ops.Devices.Mouse",
          "shortNameDisplay": "Mouse",
          "version": 3,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Devices.Mouse.Mouse",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Devices.Mouse.Mouse_v2",
                  "versionString": "_v2",
                  "version": 2
              },
              {
                  "name": "Ops.Devices.Mouse.Mouse_v3",
                  "versionString": "_v3",
                  "version": 3
              }
          ],
          "usedInProject": true,
          "allowEdit": false,
          "namespaceTitle": "Ops.Devices.Mouse",
          "namespaceSummary": ""
      },
      {
          "name": "Ops.Devices.Mouse.PointerLock",
          "content": "<p>The Pointer Lock API provides input methods based on the movement of the mouse over time (i.e., deltas), not just the absolute position of the mouse cursor in the viewport. It gives you access to raw mouse movement, locks the target of mouse events to a single element, eliminates limits on how far mouse movement can go in a single direction, and removes the cursor from view. It is ideal for first-person 3D games, for example.</p>\n",
          "attachmentFiles": [],
          "summary": "locks the pointer to the canvas and hides the cursor",
          "id": "a86a0bdc-dd09-458e-b1c9-31ca2cb36da7",
          "layout": {
              "portsIn": [
                  {
                      "type": "1",
                      "name": "Render"
                  },
                  {
                      "type": "1",
                      "name": "Start"
                  }
              ],
              "portsOut": [
                  {
                      "type": "1",
                      "name": "Next"
                  },
                  {
                      "type": "0",
                      "name": "Supported",
                      "subType": "boolean"
                  },
                  {
                      "type": "0",
                      "name": "Is Locked",
                      "subType": "boolean"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1706692165490,
          "exampleProjectId": "ds6IV2",
          "caniusequery": "pointerLock",
          "shortName": "PointerLock",
          "hasScreenshot": true,
          "namespace": "Ops.Devices.Mouse",
          "shortNameDisplay": "PointerLock",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Devices.Mouse.PointerLock",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Devices.TouchGesture",
          "content": "",
          "attachmentFiles": [],
          "summary": "detect touch gestures like swipe and pan",
          "id": "08c5d91e-32d2-4852-ac18-d4cae543dd37",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "Active",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Vertical Swipe",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Vertical Pan",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Press"
                  },
                  {
                      "type": 1,
                      "name": "Press Up"
                  },
                  {
                      "type": 1,
                      "name": "Pan Left"
                  },
                  {
                      "type": 1,
                      "name": "Pan Right"
                  },
                  {
                      "type": 1,
                      "name": "Swipe Left"
                  },
                  {
                      "type": 1,
                      "name": "Swipe Right"
                  },
                  {
                      "type": 1,
                      "name": "Swipe Up"
                  },
                  {
                      "type": 1,
                      "name": "Swipe Down"
                  },
                  {
                      "type": 2,
                      "name": "Event"
                  }
              ]
          },
          "authorName": "tim",
          "docs": {
              "ports": []
          },
          "hasExample": false,
          "libs": [
              "hammer.js"
          ],
          "youtubeids": [],
          "created": 1520949138517,
          "exampleProjectId": "",
          "shortName": "TouchGesture",
          "hasScreenshot": false,
          "namespace": "Ops.Devices",
          "shortNameDisplay": "TouchGesture",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Devices.TouchGesture",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false,
          "namespaceTitle": "Ops.Devices",
          "namespaceSummary": ""
      },
      {
          "name": "Ops.Devices.TouchScreen",
          "content": "",
          "attachmentFiles": [],
          "summary": "touch screen input: e.g. position of fingers ",
          "id": "cedffacf-0f09-4342-bd21-540bd9c8037d",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "Disable Scaling",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Disable Scroll",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "HDPI Coordinates",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Active",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Area index",
                      "values": [
                          "Canvas",
                          "Document"
                      ],
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Normalize Coordinates",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Flip Y",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "Touched",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Fingers",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Finger 1 X",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Finger 1 Y",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Finger 1 Force",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Finger 2 X",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Finger 2 Y",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Finger 2 Force",
                      "subType": "number"
                  },
                  {
                      "type": 3,
                      "name": "Events"
                  },
                  {
                      "type": 1,
                      "name": "Touch Start"
                  },
                  {
                      "type": 1,
                      "name": "Touch End"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "Flip Y",
                      "text": "Only applies to Finger1"
                  }
              ]
          },
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1504871697605,
          "exampleProjectId": "",
          "shortName": "TouchScreen",
          "hasScreenshot": false,
          "namespace": "Ops.Devices",
          "shortNameDisplay": "TouchScreen",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Devices.TouchScreen",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Devices.WebXr.Vr.Vr",
          "content": "",
          "attachmentFiles": [
              "att_icon.svg",
              "att_present.frag",
              "att_present.vert"
          ],
          "summary": "rendering on webxr virtual reality immersive devices",
          "id": "884b3def-9bb3-422a-8e1c-c85dcc346f5e",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Mainloop"
                  },
                  {
                      "type": 1,
                      "name": "Stop"
                  },
                  {
                      "type": 0,
                      "name": "Show Button",
                      "group": "Startbutton",
                      "subType": "boolean"
                  },
                  {
                      "type": 5,
                      "name": "Button Style",
                      "group": "Startbutton"
                  },
                  {
                      "type": 0,
                      "name": "Render to texture",
                      "group": "Texture",
                      "subType": "boolean"
                  },
                  {
                      "type": 2,
                      "name": "Shader",
                      "objType": "shader"
                  },
                  {
                      "type": 0,
                      "name": "MSAA index",
                      "values": [
                          "none",
                          "2x",
                          "4x",
                          "8x"
                      ],
                      "group": "Texture",
                      "subType": "integer"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  },
                  {
                      "type": 1,
                      "name": "Render After Eyes"
                  },
                  {
                      "type": 2,
                      "name": "Viewer Pose"
                  },
                  {
                      "type": 0,
                      "name": "Eye Index",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "VR Support",
                      "subType": "boolean"
                  },
                  {
                      "type": 3,
                      "name": "Matrix"
                  },
                  {
                      "type": 2,
                      "name": "DOM Overlay Ele",
                      "objType": "element"
                  },
                  {
                      "type": 0,
                      "name": "In Session",
                      "subType": "boolean"
                  },
                  {
                      "type": 3,
                      "name": "Ms per eye"
                  },
                  {
                      "type": 2,
                      "name": "Texture",
                      "objType": "texture"
                  },
                  {
                      "type": 2,
                      "name": "Texture Depth",
                      "objType": "texture"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1655205808747,
          "exampleProjectId": "IzKYx5",
          "shortName": "Vr",
          "hasScreenshot": true,
          "namespace": "Ops.Devices.WebXr.Vr",
          "shortNameDisplay": "Vr",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Devices.WebXr.Vr.Vr",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false,
          "namespaceTitle": "Ops.Devices.WebXr.Vr",
          "namespaceSummary": ""
      },
      {
          "name": "Ops.Devices.WebXr.Vr.VrController",
          "content": "",
          "attachmentFiles": [],
          "summary": "tracking of vr hand controller",
          "id": "6959b43a-8c64-4aa1-a0f0-d4d5b7e2b1c3",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Update"
                  },
                  {
                      "type": 0,
                      "name": "Handedness index",
                      "subType": "integer"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  },
                  {
                      "type": 0,
                      "name": "Axis 1",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Axis 2",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Axis 3",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Axis 4",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Button 1 Pressed",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Button 2 Pressed",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Button 3 Pressed",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Button 4 Pressed",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Button 5 Pressed",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Button 6 Pressed",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Button 7 Pressed",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Button 1 Touched",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Button 2 Touched",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Button 3 Touched",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Button 4 Touched",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Button 5 Touched",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Button 6 Touched",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Button 7 Touched",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Position X",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Position Y",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Position Z",
                      "subType": "number"
                  },
                  {
                      "type": 2,
                      "name": "Gamepad Values"
                  },
                  {
                      "type": 1,
                      "name": "Transformed Position"
                  },
                  {
                      "type": 0,
                      "name": "Found",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1655275513158,
          "exampleProjectId": "IzKYx5",
          "shortName": "VrController",
          "hasScreenshot": true,
          "namespace": "Ops.Devices.WebXr.Vr",
          "shortNameDisplay": "VrController",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Devices.WebXr.Vr.VrController",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.ArrayToTexture_v2",
          "content": "<p>array should consist of RGBA values between 0 and 1\nSo that&#39;s 4 values per pixel</p>\n",
          "attachmentFiles": [],
          "summary": "create a texture from an array of number values",
          "id": "62dcb5c0-7036-4318-803e-a8117ce70691",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Update"
                  },
                  {
                      "type": 3,
                      "name": "array"
                  },
                  {
                      "type": 0,
                      "name": "Source Structure index",
                      "values": [
                          "MONO",
                          "RGB",
                          "RGBA"
                      ],
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Size index",
                      "values": [
                          "Manual",
                          "Square",
                          "Row",
                          "Column"
                      ],
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "width",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "height",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Fill Up",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Pixel Format index",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Filter index",
                      "values": [
                          "nearest",
                          "linear",
                          "mipmap"
                      ],
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Wrap index",
                      "subType": "integer"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  },
                  {
                      "type": 2,
                      "name": "Texture out",
                      "objType": "texture"
                  },
                  {
                      "type": 0,
                      "name": "Tex Width",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Tex Height",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "Update",
                      "text": "Trigger in "
                  },
                  {
                      "name": "array",
                      "text": "Array in to turn into a texture"
                  },
                  {
                      "name": "width",
                      "text": "Width of texture"
                  },
                  {
                      "name": "height",
                      "text": "Height of texture"
                  },
                  {
                      "name": "Next",
                      "text": "Trigger out"
                  },
                  {
                      "name": "Texture out",
                      "text": "Texture out"
                  }
              ]
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1676027271196,
          "exampleProjectId": "cOlh_C",
          "shortName": "ArrayToTexture_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Gl",
          "shortNameDisplay": "ArrayToTexture",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.ArrayToTexture",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Gl.ArrayToTexture_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "namespaceTitle": "Ops.Gl",
          "namespaceSummary": "WebGl Ops",
          "allowEdit": false,
          "usedInProject": true
      },
      {
          "name": "Ops.Gl.BlendMode",
          "content": "",
          "attachmentFiles": [],
          "summary": "change how colors are mixed (blending/mixing modes)",
          "id": "ce0fff72-1438-4373-924f-e1d0f78b053f",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Render"
                  },
                  {
                      "type": 0,
                      "name": "Blendmode index",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Premultiplied",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "Render",
                      "text": "Trigger the op"
                  },
                  {
                      "name": "Blendmode",
                      "text": "Pick a from the following : blendMode `none, add, subtract, mul`"
                  },
                  {
                      "name": "Premultiplied",
                      "text": "Enable pre-multiplied mode"
                  },
                  {
                      "name": "Next",
                      "text": "Trigger out"
                  }
              ]
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1518859707157,
          "exampleProjectId": "x1-Fvc",
          "shortName": "BlendMode",
          "hasScreenshot": true,
          "namespace": "Ops.Gl",
          "shortNameDisplay": "BlendMode",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.BlendMode",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.CanvasFocus",
          "content": "",
          "attachmentFiles": [],
          "summary": "is canvas focussed ?",
          "id": "e235ea77-f697-475a-8799-d5e4deed7204",
          "layout": {
              "portsIn": [
                  {
                      "type": "1",
                      "name": "Focus"
                  }
              ],
              "portsOut": [
                  {
                      "type": "0",
                      "name": "has focus",
                      "subType": "boolean"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1518602044950,
          "exampleProjectId": "vGwM7f",
          "shortName": "CanvasFocus",
          "hasScreenshot": true,
          "namespace": "Ops.Gl",
          "shortNameDisplay": "CanvasFocus",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.CanvasFocus",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.CanvasInBrowserViewport",
          "content": "<p>The result gets updated after the window was resized or scrolled. You only need to use the <code>Update</code> trigger if you need to check manually.</p>\n",
          "attachmentFiles": [],
          "summary": "check if webgl canvas element is in the current browser viewport",
          "id": "2721f83b-246c-46fa-9ad9-d8c829adb94d",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Update"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "Fully Visible",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Partly Visible",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1558014577123,
          "exampleProjectId": "",
          "shortName": "CanvasInBrowserViewport",
          "hasScreenshot": false,
          "namespace": "Ops.Gl",
          "shortNameDisplay": "CanvasInBrowserViewport",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.CanvasInBrowserViewport",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.CanvasInfo_v3",
          "content": "",
          "attachmentFiles": [],
          "summary": "the size of the canvas in pixels, aspect ratio and pixel density",
          "id": "be186ff9-427e-409f-b6a4-f8d957bf7bc7",
          "layout": {
              "portsIn": [],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "CSS Width",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "CSS Height",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Pixel Ratio",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Pixel Width",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Pixel Height",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Aspect Ratio",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Landscape",
                      "subType": "boolean"
                  },
                  {
                      "type": 2,
                      "name": "Canvas"
                  },
                  {
                      "type": 2,
                      "name": "Canvas Parent"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1708689721771,
          "exampleProjectId": "2yaD8i",
          "shortName": "CanvasInfo_v3",
          "hasScreenshot": true,
          "namespace": "Ops.Gl",
          "shortNameDisplay": "CanvasInfo",
          "version": 3,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.CanvasInfo",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Gl.CanvasInfo_v2",
                  "versionString": "_v2",
                  "version": 2
              },
              {
                  "name": "Ops.Gl.CanvasInfo_v3",
                  "versionString": "_v3",
                  "version": 3
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.CanvasToTexture",
          "content": "<p>this operator uses texImage2D functionality <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/texImage2D\">context drawimage</a></p>\n<p>this can be an Image Element, Canvas Element or HTML Video Element</p>\n",
          "attachmentFiles": [],
          "summary": "convert a canvas to texture",
          "id": "2fbada6b-70fa-4b43-87db-8b0d9293990b",
          "layout": {
              "portsIn": [
                  {
                      "type": 2,
                      "name": "canvas"
                  },
                  {
                      "type": 0,
                      "name": "filter index",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "wrap index",
                      "subType": "integer"
                  },
                  {
                      "type": 1,
                      "name": "Force Update"
                  }
              ],
              "portsOut": [
                  {
                      "type": 2,
                      "name": "texture",
                      "objType": "texture"
                  },
                  {
                      "type": 0,
                      "name": "width",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "height",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "_LJ_",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1530791106422,
          "exampleProjectId": "QjlEo-",
          "shortName": "CanvasToTexture",
          "hasScreenshot": true,
          "namespace": "Ops.Gl",
          "shortNameDisplay": "CanvasToTexture",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.CanvasToTexture",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.ClearColor",
          "content": "",
          "attachmentFiles": [],
          "summary": "sets all cleared pixels to one colour. Use to change the background colour.",
          "id": "19b441eb-9f63-4f35-ba08-b87841517c4d",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "render"
                  },
                  {
                      "type": 0,
                      "name": "r",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "g",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "b",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "a",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "trigger"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "render",
                      "text": "Trigger the op"
                  },
                  {
                      "name": "r",
                      "text": "Red color value, between `0.0` and `1.0`"
                  },
                  {
                      "name": "g",
                      "text": "Green color value, between `0.0` and `1.0`"
                  },
                  {
                      "name": "b",
                      "text": "Blue color value, between `0.0` and `1.0`"
                  },
                  {
                      "name": "a",
                      "text": "Alpha value (opacity), between `0.0` (not visible) and `1.0` (fully visible). "
                  },
                  {
                      "name": "trigger",
                      "text": "Trigger out"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1508774179924,
          "exampleProjectId": "_UEjvr",
          "todos": [
              {
                  "message": "ccc",
                  "author": "panbdur",
                  "id": "31b249b6-570c-4108-8dfa-c08c0edf836a",
                  "date": 1605544715886,
                  "deleted": true,
                  "deletedBy": "cables",
                  "deletedDate": 1605544717592
              }
          ],
          "shortName": "ClearColor",
          "hasScreenshot": true,
          "namespace": "Ops.Gl",
          "shortNameDisplay": "ClearColor",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.ClearColor",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.ClearDepth",
          "content": "",
          "attachmentFiles": [],
          "summary": "Clears the depth buffer (zbuffer, z buffer)",
          "id": "9e8a4b73-4ba7-4c4f-b266-81c5f9db9b7a",
          "layout": {
              "portsIn": [
                  {
                      "type": "1",
                      "name": "render"
                  }
              ],
              "portsOut": [
                  {
                      "type": "1",
                      "name": "trigger"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "render",
                      "text": "Clears the depth buffer"
                  },
                  {
                      "name": "trigger",
                      "text": "Trigger next op"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1511946285033,
          "exampleProjectId": "rEesag",
          "shortName": "ClearDepth",
          "hasScreenshot": true,
          "namespace": "Ops.Gl",
          "shortNameDisplay": "ClearDepth",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.ClearDepth",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.ColorMask",
          "content": "<p>Note this isn&#39;t a texture effect - use this op in your Scene layout to disable color channels to create special effects without using Render2Texture and ImageCompose workflows.</p>\n",
          "attachmentFiles": [],
          "summary": "enable/disable RGBA color channels of your entire scene",
          "id": "44433419-dcf4-46e6-8f40-d331598029ac",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Execute"
                  },
                  {
                      "type": 0,
                      "name": "Red",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Green",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Blue",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Alpha",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "Execute",
                      "text": "Trigger the op"
                  },
                  {
                      "name": "Red",
                      "text": "Enable or disable the red component"
                  },
                  {
                      "name": "Green",
                      "text": "Enable or disable the green component"
                  },
                  {
                      "name": "Blue",
                      "text": "Enable or disable the blue component"
                  },
                  {
                      "name": "Alpha",
                      "text": "Enable or disable the alpha component"
                  },
                  {
                      "name": "Next",
                      "text": "Trigger out"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1542701267377,
          "exampleProjectId": "MqQSR7",
          "shortName": "ColorMask",
          "hasScreenshot": true,
          "namespace": "Ops.Gl",
          "shortNameDisplay": "ColorMask",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.ColorMask",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.ColorPick",
          "content": "<p>Get the color at a position of the canvas (picker)</p>\n",
          "attachmentFiles": [],
          "summary": "pick a color at x,y coordinates of canvas",
          "id": "12de35ad-3f76-496c-9585-b77a87530de3",
          "layout": {
              "portsIn": [
                  {
                      "type": "1",
                      "name": "render"
                  },
                  {
                      "type": "0",
                      "name": "x",
                      "subType": "number"
                  },
                  {
                      "type": "0",
                      "name": "y",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": "0",
                      "name": "r",
                      "subType": "number"
                  },
                  {
                      "type": "0",
                      "name": "g",
                      "subType": "number"
                  },
                  {
                      "type": "0",
                      "name": "b",
                      "subType": "number"
                  },
                  {
                      "type": "0",
                      "name": "a",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "render",
                      "text": "Trigger the op"
                  },
                  {
                      "name": "x",
                      "text": "X position"
                  },
                  {
                      "name": "y",
                      "text": "Y position"
                  },
                  {
                      "name": "r",
                      "text": "Red value - range `0-1`"
                  },
                  {
                      "name": "g",
                      "text": "Green value - range `0-1`"
                  },
                  {
                      "name": "b",
                      "text": "Blue value - range `0-1`"
                  },
                  {
                      "name": "a",
                      "text": "Alpha value - range `0-1`"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1518872255395,
          "exampleProjectId": "YEjkgg",
          "shortName": "ColorPick",
          "hasScreenshot": true,
          "namespace": "Ops.Gl",
          "shortNameDisplay": "ColorPick",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.ColorPick",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.CubeMap.CubeMapFromTextures_v2",
          "content": "<p>Use this op to create cubemaps by adding 6 textures, 1 for each positive and negative axis (x, y, z).</p>\n",
          "attachmentFiles": [],
          "summary": "generate a cubemap from 6 textures",
          "id": "44e837c5-ecd8-42cf-9be6-4db2283b9cbf",
          "layout": {
              "portsIn": [
                  {
                      "type": 5,
                      "name": "posx"
                  },
                  {
                      "type": 5,
                      "name": "negx"
                  },
                  {
                      "type": 5,
                      "name": "posy"
                  },
                  {
                      "type": 5,
                      "name": "negy"
                  },
                  {
                      "type": 5,
                      "name": "posz"
                  },
                  {
                      "type": 5,
                      "name": "negz"
                  },
                  {
                      "type": 0,
                      "name": "Flip Y",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 2,
                      "name": "cubemap"
                  }
              ]
          },
          "authorName": "simod",
          "docs": {
              "ports": [
                  {
                      "name": "posx",
                      "text": "positive x file input"
                  },
                  {
                      "name": "negx",
                      "text": "negative x file input"
                  },
                  {
                      "name": "posy",
                      "text": "positive y file input"
                  },
                  {
                      "name": "negy",
                      "text": "negative y file input"
                  },
                  {
                      "name": "posz",
                      "text": "positive z file input"
                  },
                  {
                      "name": "negz",
                      "text": "negative z file input"
                  },
                  {
                      "name": "Flip Y",
                      "text": "flip cubemap along the y axis"
                  },
                  {
                      "name": "cubemap",
                      "text": "cubemap texture output"
                  }
              ]
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1586341622293,
          "exampleProjectId": "-QPf26",
          "shortName": "CubeMapFromTextures_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.CubeMap",
          "shortNameDisplay": "CubeMapFromTextures",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.CubeMap.CubeMapFromTextures",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Gl.CubeMap.CubeMapFromTextures_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "namespaceTitle": "Ops.Gl.CubeMap",
          "namespaceSummary": "WebGl Ops",
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.CubeMap.CubeMapMaterial_v2",
          "content": "<p>This op can be used to render cubemaps onto meshes.</p>\n<p>It can be used as a skybox material, i.e. setting a scene&#39;s background.\nIt can also be used as a metallic looking material by using the colorize option.</p>\n",
          "attachmentFiles": [
              "att_cubemap.frag",
              "att_cubemap.vert"
          ],
          "summary": "use a cubemap or equirectangular texture as a material",
          "id": "d1fce807-a626-433f-ba61-3f59149fe46e",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "render"
                  },
                  {
                      "type": 2,
                      "name": "Cubemap"
                  },
                  {
                      "type": 0,
                      "name": "Use Reflection",
                      "group": "Appearance",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Blur",
                      "group": "Appearance",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Rotation",
                      "group": "Transforms",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Flip X",
                      "group": "Transforms",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Flip Y",
                      "group": "Transforms",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Flip Z",
                      "group": "Transforms",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Colorize",
                      "group": "Color",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "R",
                      "group": "Color",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "G",
                      "group": "Color",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "B",
                      "group": "Color",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "trigger"
                  }
              ]
          },
          "authorName": "simod",
          "docs": {
              "ports": [
                  {
                      "name": "render",
                      "text": "Trigger input"
                  },
                  {
                      "name": "Cubemap",
                      "text": "Texture input, either cubemap or equirectangular"
                  },
                  {
                      "name": "Use Reflection",
                      "text": "Check to use the reflection vector"
                  },
                  {
                      "name": "Blur",
                      "text": "The amount of blur/miplevel"
                  },
                  {
                      "name": "Rotation",
                      "text": "Rotate the texture"
                  },
                  {
                      "name": "Flip X",
                      "text": "flip the x axis"
                  },
                  {
                      "name": "Flip Y",
                      "text": "flip the y axis"
                  },
                  {
                      "name": "Flip Z",
                      "text": "flip the z axis"
                  },
                  {
                      "name": "Colorize",
                      "text": "Check to multiply color to the texture"
                  },
                  {
                      "name": "R",
                      "text": "R component of the multiplied color"
                  },
                  {
                      "name": "G",
                      "text": "G component of the multiplied color"
                  },
                  {
                      "name": "B",
                      "text": "B component of the multiplied color"
                  },
                  {
                      "name": "trigger",
                      "text": "Trigger output"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1586341651597,
          "exampleProjectId": "u5y0Z5",
          "shortName": "CubeMapMaterial_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.CubeMap",
          "shortNameDisplay": "CubeMapMaterial",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.CubeMap.CubeMapMaterial",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Gl.CubeMap.CubeMapMaterial_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.CubeMap.CubemapToEquirectangularTexture_v2",
          "content": "<p>Helper op to visualize a cubemap.</p>\n",
          "attachmentFiles": [
              "att_projection.frag",
              "att_projection.vert"
          ],
          "summary": "visualize cubemap as folded texture or equirectangular texture",
          "id": "5e5fa774-ecb1-44dd-8c47-ce4a592f68f1",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "In Trigger"
                  },
                  {
                      "type": 2,
                      "name": "Cubemap"
                  },
                  {
                      "type": 0,
                      "name": "Projection index",
                      "group": "Options",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Format index",
                      "group": "Options",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Filter index",
                      "group": "Options",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Width",
                      "group": "Options",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Height",
                      "group": "Options",
                      "subType": "integer"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Out Trigger"
                  },
                  {
                      "type": 2,
                      "name": "Result",
                      "objType": "texture"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "In Trigger",
                      "text": "trigger input"
                  },
                  {
                      "name": "Cubemap",
                      "text": "cubemap to visualize"
                  },
                  {
                      "name": "Equirectangular",
                      "text": "visualisation mode: switch between folded cube and equirectangular"
                  },
                  {
                      "name": "Width",
                      "text": "width of the resulting texture"
                  },
                  {
                      "name": "Height",
                      "text": "height of the resulting texture"
                  },
                  {
                      "name": "Out Trigger",
                      "text": "trigger out"
                  },
                  {
                      "name": "Cubemap Projection",
                      "text": "texture output"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1661925372392,
          "exampleProjectId": "pNZHYa",
          "shortName": "CubemapToEquirectangularTexture_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.CubeMap",
          "shortNameDisplay": "CubemapToEquirectangularTexture",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.CubeMap.CubemapToEquirectangularTexture",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Gl.CubeMap.CubemapToEquirectangularTexture_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.CubeMap.EquirectangularTextureToCubemap",
          "content": "<p>Handy op to convert an equirectangular map to a cubemap.</p>\n",
          "attachmentFiles": [
              "att_equirect_to_cube.frag",
              "att_equirect_to_cube.vert"
          ],
          "summary": "convert an equirectangular map to a cubemap",
          "id": "e4cbae17-10bf-44cd-a4e8-4b16dd849d0c",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Trigger In"
                  },
                  {
                      "type": 2,
                      "name": "Equirectangular Map",
                      "objType": "texture"
                  },
                  {
                      "type": 0,
                      "name": "Cubemap Size index",
                      "group": "Cubemap Options",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Advanced",
                      "group": "Cubemap Options",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Filter index",
                      "group": "Cubemap Options",
                      "subType": "integer"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Trigger Out"
                  },
                  {
                      "type": 2,
                      "name": "Cubemap Projection",
                      "objType": "texture"
                  }
              ]
          },
          "authorName": "simod",
          "docs": {
              "ports": [
                  {
                      "name": "Equirectangular Map",
                      "text": "equirectangular texture input"
                  },
                  {
                      "name": "Refresh",
                      "text": "trigger to convert input texture again"
                  },
                  {
                      "name": "Cubemap Size index",
                      "text": "size of the cubemap"
                  },
                  {
                      "name": "Advanced",
                      "text": "check to use a different texture filter"
                  },
                  {
                      "name": "Filter index",
                      "text": "index of different filter types"
                  },
                  {
                      "name": "Cubemap Projection",
                      "text": "cubemap output"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1591782786302,
          "exampleProjectId": "O1NBYa",
          "coreLibs": [
              "cgl_cubemapframebuffer"
          ],
          "shortName": "EquirectangularTextureToCubemap",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.CubeMap",
          "shortNameDisplay": "EquirectangularTextureToCubemap",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.CubeMap.EquirectangularTextureToCubemap",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.CubeMap.RenderToCubemap_v3",
          "content": "<p>Place this op at the beginning of the scene you want to be rendered into the cubemap.</p>\n<p>The rendered cubemap can be used for real-time image based lighting and various other applications.</p>\n",
          "attachmentFiles": [],
          "summary": "render a scene into a cubemap",
          "id": "b98e311d-530e-4d94-bd49-72c118307539",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Render"
                  },
                  {
                      "type": 0,
                      "name": "Size index",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Pixel Format index",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "MSAA index",
                      "subType": "integer"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  },
                  {
                      "type": 2,
                      "name": "cubemap",
                      "objType": "texture"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "Render",
                      "text": "Trigger input"
                  },
                  {
                      "name": "Next",
                      "text": "Trigger output"
                  },
                  {
                      "name": "cubemap",
                      "text": "Cubemap Texture output"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1703001636741,
          "exampleProjectId": "Z3KuUQ",
          "coreLibs": [
              "cgl_cubemapframebuffer"
          ],
          "shortName": "RenderToCubemap_v3",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.CubeMap",
          "shortNameDisplay": "RenderToCubemap",
          "version": 3,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.CubeMap.RenderToCubemap",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Gl.CubeMap.RenderToCubemap_v2",
                  "versionString": "_v2",
                  "version": 2
              },
              {
                  "name": "Ops.Gl.CubeMap.RenderToCubemap_v3",
                  "versionString": "_v3",
                  "version": 3
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.CubeMap.Skybox",
          "content": "<p>Use this op to add an environment map to your patch.</p>\n<p>Works with either equirectangular maps or cubemaps.</p>\n",
          "attachmentFiles": [
              "att_skybox.frag",
              "att_skybox.vert"
          ],
          "summary": "render an equirectangular map or a cubemap as scene background",
          "id": "97ce1d35-bd7a-43cb-a2bf-5b7e37fb8925",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Trigger In"
                  },
                  {
                      "type": 0,
                      "name": "Render",
                      "subType": "boolean"
                  },
                  {
                      "type": 2,
                      "name": "Skybox",
                      "objType": "texture"
                  },
                  {
                      "type": 0,
                      "name": "Rotate",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "RGBE Format",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Exposure",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Gamma",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Trigger Out"
                  }
              ]
          },
          "authorName": "simod",
          "docs": {
              "ports": [
                  {
                      "name": "Trigger In",
                      "text": "trigger input"
                  },
                  {
                      "name": "Render",
                      "text": "check to render skybox"
                  },
                  {
                      "name": "Skybox",
                      "text": "equirectangular map or cubemap input"
                  },
                  {
                      "name": "Trigger Out",
                      "text": "output trigger"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1591792167287,
          "exampleProjectId": "40hoYa",
          "shortName": "Skybox",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.CubeMap",
          "shortNameDisplay": "Skybox",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.CubeMap.Skybox",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.DirectionalTranslate",
          "content": "",
          "attachmentFiles": [],
          "summary": "translate away from a point in space ",
          "id": "d0f3dbca-7457-44b5-987a-9d49e5310d98",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Exec"
                  },
                  {
                      "type": 3,
                      "name": "Center Model Matrix"
                  },
                  {
                      "type": 0,
                      "name": "Amount",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1535554487307,
          "exampleProjectId": "5gL9On",
          "shortName": "DirectionalTranslate",
          "hasScreenshot": true,
          "namespace": "Ops.Gl",
          "shortNameDisplay": "DirectionalTranslate",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.DirectionalTranslate",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.DownloadTexture_v3",
          "content": "<p>Textures can be downloaded as PNG,JPEG or Webp fileformats. \npng is lossless 24bit, for webp and jpeg a compression quality can be set (0-1)</p>\n",
          "attachmentFiles": [
              "att_inc_gen_ports.js",
              "att_ports.json",
              "att_subpatch_json"
          ],
          "summary": "Download a texture as an image file",
          "id": "20f83b41-4b28-4252-89b8-a98c7c72e618",
          "layout": {
              "portsIn": [
                  {
                      "type": 2,
                      "name": "7zxlhqqf8",
                      "uititle": "Texture",
                      "values": [
                          ""
                      ],
                      "objType": "texture"
                  },
                  {
                      "type": 5,
                      "name": "c6sm5ztz4",
                      "uititle": "Format",
                      "values": [
                          "PNG",
                          "JPG",
                          "WEBP"
                      ]
                  },
                  {
                      "type": 0,
                      "name": "6ozewyh0e",
                      "uititle": "Quality",
                      "values": [
                          ""
                      ],
                      "subType": "number"
                  },
                  {
                      "type": 5,
                      "name": "ainvr3s9o",
                      "uititle": "Filename",
                      "values": [
                          ""
                      ]
                  },
                  {
                      "type": 1,
                      "name": "uxwx45pbg",
                      "uititle": "Download",
                      "values": [
                          ""
                      ]
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "jcrmz8mnz",
                      "uititle": "Next"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1712233339860,
          "exampleProjectId": "15LaTs",
          "coreLibs": [
              "subpatchop"
          ],
          "shortName": "DownloadTexture_v3",
          "hasScreenshot": true,
          "namespace": "Ops.Gl",
          "shortNameDisplay": "DownloadTexture",
          "version": 3,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.DownloadTexture",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Gl.DownloadTexture_v2",
                  "versionString": "_v2",
                  "version": 2
              },
              {
                  "name": "Ops.Gl.DownloadTexture_v3",
                  "versionString": "_v3",
                  "version": 3
              }
          ],
          "allowEdit": false,
          "usedInProject": true
      },
      {
          "name": "Ops.Gl.DrawTextureMapping",
          "content": "",
          "attachmentFiles": [],
          "summary": "draw texture mapping coordinates",
          "id": "f61e47de-9156-4243-9a83-79002aeaf7be",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Render"
                  },
                  {
                      "type": 2,
                      "name": "Geometry",
                      "objType": "geometry"
                  },
                  {
                      "type": 0,
                      "name": "Num Points",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  }
              ]
          },
          "authorName": "pandur",
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1511946146997,
          "exampleProjectId": "Nu7dJ5",
          "shortName": "DrawTextureMapping",
          "hasScreenshot": true,
          "namespace": "Ops.Gl",
          "shortNameDisplay": "DrawTextureMapping",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.DrawTextureMapping",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.ExternalCanvas",
          "content": "<p>It is additionally possible to render content in the patch canvas, but NOT in the external window by placing it <em>after</em> the ExternalCanvas (e.g. in a sequence). <a href=\"https://cables.gl/p/An9oal\">example</a></p>\n",
          "attachmentFiles": [],
          "summary": "Open a new window that shows a copy of the patch canvas",
          "id": "7fdeec7a-43df-4e0c-bde5-d398b2151930",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Update"
                  },
                  {
                      "type": 0,
                      "name": "Pos X",
                      "group": "Position",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Pos Y",
                      "group": "Position",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Width",
                      "group": "Size",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Height",
                      "group": "Size",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Smoothing",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Stretch",
                      "subType": "boolean"
                  },
                  {
                      "type": 5,
                      "name": "Title"
                  },
                  {
                      "type": 1,
                      "name": "Open Window"
                  },
                  {
                      "type": 1,
                      "name": "Close"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  },
                  {
                      "type": 2,
                      "name": "Element",
                      "objType": "element"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1689248551446,
          "exampleProjectId": "HnG3fB",
          "shortName": "ExternalCanvas",
          "hasScreenshot": true,
          "namespace": "Ops.Gl",
          "shortNameDisplay": "ExternalCanvas",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.ExternalCanvas",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.FontMSDF_v2",
          "content": "",
          "attachmentFiles": [],
          "summary": "Load MSDF Font data and texture to use ",
          "id": "6cbd5d67-25d5-4936-a2ad-3ee8ed478570",
          "layout": {
              "portsIn": [
                  {
                      "type": 5,
                      "name": "Font Name"
                  },
                  {
                      "type": 5,
                      "name": "Font Data"
                  },
                  {
                      "type": 5,
                      "name": "Font Image"
                  },
                  {
                      "type": 5,
                      "name": "Font Image 1"
                  },
                  {
                      "type": 5,
                      "name": "Font Image 2"
                  },
                  {
                      "type": 5,
                      "name": "Font Image 3"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "Loaded",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Total Chars",
                      "subType": "number"
                  },
                  {
                      "type": 5,
                      "name": "Chars"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1589978081140,
          "exampleProjectId": "9COr26",
          "shortName": "FontMSDF_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Gl",
          "shortNameDisplay": "FontMSDF",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.FontMSDF",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Gl.FontMSDF_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.ForceCanvasSize",
          "content": "<p>for this to work in default exported html, remove &quot;position:absolute;&quot; from styling of the canvas element.</p>\n",
          "attachmentFiles": [],
          "summary": "Resize canvas element to a specific pixel size or aspect ratio",
          "id": "a8b3380e-cd4a-4000-9ee9-1c65a11027dd",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Trigger"
                  },
                  {
                      "type": 0,
                      "name": "Active",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Force index",
                      "values": [
                          "Resolution",
                          "Aspect Ratio"
                      ],
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Center In Parent",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Scale to fit Parent",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Set Width",
                      "group": "Size",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Set Height",
                      "group": "Size",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Aspect Ratio index",
                      "group": "Proportions",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Ratio",
                      "group": "Proportions",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Fill Parent index",
                      "group": "Proportions",
                      "subType": "integer"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  },
                  {
                      "type": 0,
                      "name": "Width",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Height",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Margin Left",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Margin Top",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "Trigger",
                      "text": "Trigger the op"
                  },
                  {
                      "name": "Active",
                      "text": "Enable or disable the op"
                  },
                  {
                      "name": "Width",
                      "text": "The new width"
                  },
                  {
                      "name": "Height",
                      "text": "The new height"
                  },
                  {
                      "name": "Next",
                      "text": "Trigger out"
                  },
                  {
                      "name": "Width",
                      "text": "The new width"
                  },
                  {
                      "name": "Height",
                      "text": "The new height"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1579874096606,
          "exampleProjectId": "f9UbD-",
          "shortName": "ForceCanvasSize",
          "hasScreenshot": true,
          "namespace": "Ops.Gl",
          "shortNameDisplay": "ForceCanvasSize",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.ForceCanvasSize",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.GLTF.GltfAnimationArray",
          "content": "",
          "attachmentFiles": [],
          "summary": "Convert an animation into an array of coordinates",
          "id": "568ce7cd-a938-4498-9109-482564757a0e",
          "layout": {
              "portsIn": [
                  {
                      "type": "1",
                      "name": "Render"
                  },
                  {
                      "type": "5",
                      "name": "Node Name"
                  },
                  {
                      "type": "0",
                      "name": "Steps",
                      "subType": "integer"
                  },
                  {
                      "type": "0",
                      "name": "Full Animation",
                      "group": "Timing",
                      "subType": "boolean"
                  },
                  {
                      "type": "0",
                      "name": "Start",
                      "group": "Timing",
                      "subType": "number"
                  },
                  {
                      "type": "0",
                      "name": "Length",
                      "group": "Timing",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": "1",
                      "name": "Next"
                  },
                  {
                      "type": "0",
                      "name": "Found",
                      "subType": "boolean"
                  },
                  {
                      "type": "3",
                      "name": "Positions"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "Render",
                      "text": "Trigger the op "
                  },
                  {
                      "name": "Node Name",
                      "text": "Target node name from the GLTF Scene with the animation data  "
                  },
                  {
                      "name": "Steps",
                      "text": "Amount of interpolated steps of generated array. Higher numbers results in a smoother result."
                  },
                  {
                      "name": "Next",
                      "text": "Trigger out"
                  },
                  {
                      "name": "Found",
                      "text": "Target animation node name found"
                  },
                  {
                      "name": "Positions",
                      "text": "Array out of coordinates"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [
              "QNLw21hSweg"
          ],
          "created": 1576234439987,
          "exampleProjectId": "py-JK0",
          "issues": "Currently only supports positional data. \nRotation or scale data will be supported in the near future.",
          "shortName": "GltfAnimationArray",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.GLTF",
          "shortNameDisplay": "GltfAnimationArray",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.GLTF.GltfAnimationArray",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false,
          "namespaceTitle": "Ops.Gl.GLTF",
          "namespaceSummary": "WebGl Ops"
      },
      {
          "name": "Ops.Gl.GLTF.GltfCameraViewMatrix",
          "content": "",
          "attachmentFiles": [],
          "summary": "get view matrix from a gltf camera",
          "id": "ab3c43f7-3d73-4f46-8034-454e9c4d51c5",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Update"
                  },
                  {
                      "type": 5,
                      "name": "Node Name"
                  }
              ],
              "portsOut": [
                  {
                      "type": 3,
                      "name": "Matrix"
                  },
                  {
                      "type": 0,
                      "name": "Found",
                      "subType": "boolean"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "Node Name",
                      "text": "the exact name of a camera view to find in the scene."
                  },
                  {
                      "name": "Found",
                      "text": "was the node name of the camera found"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [
              "iqIXSb-kAws"
          ],
          "created": 1617800873231,
          "exampleProjectId": "klpdcI",
          "shortName": "GltfCameraViewMatrix",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.GLTF",
          "shortNameDisplay": "GltfCameraViewMatrix",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.GLTF.GltfCameraViewMatrix",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false,
          "usedInProject": true
      },
      {
          "name": "Ops.Gl.GLTF.GltfDracoCompression",
          "content": "<p>add this op to your patch to be able to load (draco) compressed GLB files</p>\n",
          "attachmentFiles": [],
          "summary": "gltf draco compression library",
          "id": "4ecdc2ef-a242-4548-ad74-13f617119a64",
          "layout": {
              "portsIn": [],
              "portsOut": []
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [
              "draco_wasm_wrapper.js",
              "draco_decoder_wasm.js"
          ],
          "youtubeids": [
              "Vo3Hs8-p7_I"
          ],
          "created": 1629877544198,
          "exampleProjectId": "WFva2K",
          "credits": [
              {
                  "title": "DRACO Compression Loader",
                  "author": "three.js",
                  "url": "https://github.com/mrdoob/three.js/blob/master/examples/jsm/loaders/DRACOLoader.js",
                  "licence": "MIT"
              }
          ],
          "shortName": "GltfDracoCompression",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.GLTF",
          "shortNameDisplay": "GltfDracoCompression",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.GLTF.GltfDracoCompression",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false,
          "usedInProject": true
      },
      {
          "name": "Ops.Gl.GLTF.GltfGeometry",
          "content": "",
          "attachmentFiles": [],
          "summary": "expose geometry from gltf meshes, also possible to expose submaterial geometries",
          "id": "2e59da07-455a-457c-99d8-1c23a1ddeea2",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Update"
                  },
                  {
                      "type": 5,
                      "name": "Name"
                  },
                  {
                      "type": 0,
                      "name": "Submesh",
                      "subType": "integer"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  },
                  {
                      "type": 2,
                      "name": "Geometry",
                      "objType": "geometry"
                  },
                  {
                      "type": 0,
                      "name": "Found",
                      "subType": "boolean"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1655703434519,
          "exampleProjectId": "XKXmf6",
          "shortName": "GltfGeometry",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.GLTF",
          "shortNameDisplay": "GltfGeometry",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.GLTF.GltfGeometry",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.GLTF.GltfHierarchy",
          "content": "",
          "attachmentFiles": [],
          "summary": "export array of positions from a hierarchy of a branch structure in a gltf, e.g. a skeleton bones",
          "id": "a66e2532-3bfd-424f-8465-6f55c5558ccb",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Trigger"
                  },
                  {
                      "type": 5,
                      "name": "Node name"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  },
                  {
                      "type": 3,
                      "name": "Bones Lines"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "Node name",
                      "text": "GLTF node name to start hierarchy extraction from"
                  },
                  {
                      "name": "Bones Lines",
                      "text": "Array3 of node positions"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [
              "I_eD5nml_5A"
          ],
          "created": 1633347493665,
          "exampleProjectId": "3t_mJR",
          "shortName": "GltfHierarchy",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.GLTF",
          "shortNameDisplay": "GltfHierarchy",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.GLTF.GltfHierarchy",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.GLTF.GltfInfo",
          "content": "",
          "attachmentFiles": [],
          "summary": "output some infos about the current parent GLTF scene",
          "id": "525e57e5-9373-4cf2-a7f5-2887872a3e86",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Exec"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "Num Nodes",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Num Cams",
                      "subType": "number"
                  },
                  {
                      "type": 5,
                      "name": "FileUrl"
                  },
                  {
                      "type": 5,
                      "name": "FileName"
                  },
                  {
                      "type": 3,
                      "name": "Camera Names"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1681833901074,
          "exampleProjectId": "Z7tacy",
          "shortName": "GltfInfo",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.GLTF",
          "shortNameDisplay": "GltfInfo",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.GLTF.GltfInfo",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.GLTF.GltfMeshSequence_v2",
          "content": "<p>no morphing will happening</p>\n",
          "attachmentFiles": [],
          "summary": "switch between meshes e.g. like a stop motion animation",
          "id": "8d719702-c125-4f71-af5f-7a54b9770c01",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Render"
                  },
                  {
                      "type": 0,
                      "name": "Index",
                      "subType": "integer"
                  },
                  {
                      "type": 5,
                      "name": "Node Name"
                  },
                  {
                      "type": 0,
                      "name": "Transformation",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Ignore Material",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  },
                  {
                      "type": 0,
                      "name": "Found",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Current Index",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1713346712323,
          "exampleProjectId": "FiJsxn",
          "shortName": "GltfMeshSequence_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.GLTF",
          "shortNameDisplay": "GltfMeshSequence",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.GLTF.GltfMeshSequence",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Gl.GLTF.GltfMeshSequence_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.GLTF.GltfMorphTargets",
          "content": "",
          "attachmentFiles": [],
          "summary": "render weighted morph targets/shape keys from a gltf file",
          "id": "356f4a5a-992c-49c2-a6ce-d56e1722f983",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Render"
                  },
                  {
                      "type": 5,
                      "name": "Node Name"
                  },
                  {
                      "type": 0,
                      "name": "Scene Time",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Time",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Submesh",
                      "subType": "integer"
                  },
                  {
                      "type": 3,
                      "name": "Target Weights"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "Found Node",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Found Skin",
                      "subType": "boolean"
                  },
                  {
                      "type": 3,
                      "name": "Target Names"
                  },
                  {
                      "type": 2,
                      "name": "MorphTargets Tex",
                      "objType": "texture"
                  },
                  {
                      "type": 1,
                      "name": "Next"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1693646482040,
          "exampleProjectId": "zon4xF",
          "shortName": "GltfMorphTargets",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.GLTF",
          "shortNameDisplay": "GltfMorphTargets",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.GLTF.GltfMorphTargets",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.GLTF.GltfNodeSineAnim",
          "content": "",
          "attachmentFiles": [],
          "summary": "sine animate gltf nodes by a filter",
          "id": "b4608e38-cc48-4748-a640-d653f53fc950",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Update"
                  },
                  {
                      "type": 5,
                      "name": "Filter"
                  },
                  {
                      "type": 0,
                      "name": "Time",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Offset",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Amplitude",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Axis X",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Axis Y",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Axis Z",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  },
                  {
                      "type": 0,
                      "name": "Found",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1614623660974,
          "exampleProjectId": "w1SPcI",
          "shortName": "GltfNodeSineAnim",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.GLTF",
          "shortNameDisplay": "GltfNodeSineAnim",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.GLTF.GltfNodeSineAnim",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.GLTF.GltfNodeTransform_v2",
          "content": "<p>This OP allows you to grab the transform (position) of a node from your GLTF scene hierarchy by name and outputs values that you can use to, for example, bind other objects to your scene - more geometry or perhaps a camera direction.</p>\n",
          "attachmentFiles": [],
          "summary": "Get the transform from the GLTFscene op",
          "id": "5a36a0f2-a4cb-4ac4-a7af-95924f2a9558",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Render"
                  },
                  {
                      "type": 5,
                      "name": "Node Name"
                  },
                  {
                      "type": 0,
                      "name": "Set Matrix",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  },
                  {
                      "type": 0,
                      "name": "Found",
                      "subType": "boolean"
                  },
                  {
                      "type": 3,
                      "name": "Matrix"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [
              "QNLw21hSweg",
              "I_eD5nml_5A"
          ],
          "created": 1637605603182,
          "exampleProjectId": "yrOJve",
          "shortName": "GltfNodeTransform_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.GLTF",
          "shortNameDisplay": "GltfNodeTransform",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.GLTF.GltfNodeTransform",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Gl.GLTF.GltfNodeTransform_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "allowEdit": false,
          "usedInProject": true
      },
      {
          "name": "Ops.Gl.GLTF.GltfNodeTransforms_v3",
          "content": "",
          "attachmentFiles": [],
          "summary": "output all transformations of nodes starting with [search]",
          "id": "0679f203-3332-4dae-9676-9eeee4399088",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Render"
                  },
                  {
                      "type": 5,
                      "name": "Search"
                  },
                  {
                      "type": 0,
                      "name": "Order index",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Space index",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Time",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  },
                  {
                      "type": 3,
                      "name": "Positions"
                  },
                  {
                      "type": 3,
                      "name": "Scale"
                  },
                  {
                      "type": 3,
                      "name": "Rotation"
                  },
                  {
                      "type": 3,
                      "name": "Names"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": false,
          "libs": [],
          "youtubeids": [
              "I_eD5nml_5A"
          ],
          "created": 1682493073710,
          "exampleProjectId": "",
          "shortName": "GltfNodeTransforms_v3",
          "hasScreenshot": false,
          "namespace": "Ops.Gl.GLTF",
          "shortNameDisplay": "GltfNodeTransforms",
          "version": 3,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.GLTF.GltfNodeTransforms",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Gl.GLTF.GltfNodeTransforms_v2",
                  "versionString": "_v2",
                  "version": 2
              },
              {
                  "name": "Ops.Gl.GLTF.GltfNodeTransforms_v3",
                  "versionString": "_v3",
                  "version": 3
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.GLTF.GltfNode_v2",
          "content": "",
          "attachmentFiles": [],
          "summary": "Control a single node from the GLTFscene op",
          "id": "10d09387-0085-4162-ab5b-b89eebbf3cf4",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Render"
                  },
                  {
                      "type": 5,
                      "name": "Node Name"
                  },
                  {
                      "type": 0,
                      "name": "Transformation",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Draw Mesh",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Draw Childs",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Ignore Material",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Use Scene Time",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Time",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  },
                  {
                      "type": 2,
                      "name": "Geometry",
                      "objType": "geometry"
                  },
                  {
                      "type": 0,
                      "name": "Found",
                      "subType": "boolean"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": false,
          "libs": [],
          "youtubeids": [
              "QNLw21hSweg",
              "I_eD5nml_5A"
          ],
          "created": 1592407897295,
          "exampleProjectId": "",
          "shortName": "GltfNode_v2",
          "hasScreenshot": false,
          "namespace": "Ops.Gl.GLTF",
          "shortNameDisplay": "GltfNode",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.GLTF.GltfNode",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Gl.GLTF.GltfNode_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "allowEdit": false,
          "usedInProject": true
      },
      {
          "name": "Ops.Gl.GLTF.GltfScene_v4",
          "content": "<p>This op currently can only load GLB files, these are binary versions of a GLTF file.\nA GLTF file can be converted with programs such as Blender.\nClick the show structure button to see the way the GLB file is constructed with its nodes and materials.</p>\n<h2>GLTF Feature example patches:</h2>\n<p><a href=\"https://cables.gl/patchlist/jvaDnE\">https://cables.gl/patchlist/jvaDnE</a></p>\n<h2>converters:</h2>\n<ul>\n<li><a href=\"https://glb-packer.glitch.me/\">https://glb-packer.glitch.me/</a></li>\n<li><a href=\"https://blackthread.io/gltf-converter/\">https://blackthread.io/gltf-converter/</a></li>\n</ul>\n",
          "attachmentFiles": [
              "att_inc_camera.js",
              "att_inc_gltf.js",
              "att_inc_mesh.js",
              "att_inc_meshGroup.js",
              "att_inc_node.js",
              "att_inc_print.js",
              "att_inc_skin.js",
              "att_inc_targets.js",
              "att_skin.vert",
              "att_skin_head.vert",
              "att_targets.vert",
              "att_targets_head.vert"
          ],
          "summary": "Load GLTF/GLB 3d files",
          "id": "c9cbb226-46f7-4ca6-8dab-a9d0bdca4331",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Render"
                  },
                  {
                      "type": 5,
                      "name": "glb File"
                  },
                  {
                      "type": 0,
                      "name": "Draw",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Camera index",
                      "subType": "integer"
                  },
                  {
                      "type": 5,
                      "name": "Animation"
                  },
                  {
                      "type": 1,
                      "name": "Show Structure"
                  },
                  {
                      "type": 0,
                      "name": "Center index",
                      "values": [
                          "None",
                          "XYZ",
                          "XZ"
                      ],
                      "group": "Transform",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Rescale",
                      "group": "Transform",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Rescale Size",
                      "group": "Transform",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Time",
                      "group": "Timing",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Sync to timeline",
                      "group": "Timing",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Loop",
                      "group": "Timing",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Normals Format index",
                      "values": [
                          "XYZ",
                          "X-ZY"
                      ],
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Vertices Format index",
                      "values": [
                          "XYZ",
                          "XZ-Y"
                      ],
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Calc Normals index",
                      "values": [
                          "Auto",
                          "Force Smooth",
                          "Never"
                      ],
                      "subType": "integer"
                  },
                  {
                      "type": 2,
                      "name": "Materials"
                  },
                  {
                      "type": 3,
                      "name": "Hide Nodes"
                  },
                  {
                      "type": 0,
                      "name": "Use Material Properties",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Active",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Render Before"
                  },
                  {
                      "type": 1,
                      "name": "Next"
                  },
                  {
                      "type": 5,
                      "name": "Generator"
                  },
                  {
                      "type": 0,
                      "name": "GLTF Version",
                      "subType": "number"
                  },
                  {
                      "type": 3,
                      "name": "GLTF Extensions Used"
                  },
                  {
                      "type": 0,
                      "name": "Anim Length",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Anim Time",
                      "subType": "number"
                  },
                  {
                      "type": 2,
                      "name": "Json"
                  },
                  {
                      "type": 3,
                      "name": "Anims"
                  },
                  {
                      "type": 3,
                      "name": "BoundingPoints"
                  },
                  {
                      "type": 2,
                      "name": "Bounds"
                  },
                  {
                      "type": 1,
                      "name": "Finished"
                  },
                  {
                      "type": 0,
                      "name": "Loading",
                      "subType": "boolean"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "Hide Nodes",
                      "text": "Hide some GLTF nodes by name"
                  },
                  {
                      "name": "Json",
                      "text": "The whole GLTF scene as JSON data"
                  }
              ]
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [
              "QNLw21hSweg"
          ],
          "created": 1689944927592,
          "exampleProjectId": "XmL8GY",
          "coreLibs": [
              "cgl_shadermodifier"
          ],
          "shortName": "GltfScene_v4",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.GLTF",
          "shortNameDisplay": "GltfScene",
          "version": 4,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.GLTF.GltfScene",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Gl.GLTF.GltfScene_v2",
                  "versionString": "_v2",
                  "version": 2
              },
              {
                  "name": "Ops.Gl.GLTF.GltfScene_v3",
                  "versionString": "_v3",
                  "version": 3
              },
              {
                  "name": "Ops.Gl.GLTF.GltfScene_v4",
                  "versionString": "_v4",
                  "version": 4
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.GLTF.GltfSetMaterial",
          "content": "<p>This op can be used to assign a material to parts of mesh.\nIt requires a material to be plugged into the shader input.</p>\n",
          "attachmentFiles": [],
          "summary": "Assigns a material to a node inside of the gltfScene op",
          "id": "baf968ea-e4df-4fca-9cda-e6ddd38a4200",
          "layout": {
              "portsIn": [
                  {
                      "type": 2,
                      "name": "Shader",
                      "objType": "shader"
                  },
                  {
                      "type": 5,
                      "name": "Material Name"
                  }
              ],
              "portsOut": [
                  {
                      "type": 2,
                      "name": "Material"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "Shader",
                      "text": "Shader/Material input"
                  },
                  {
                      "name": "Material Name",
                      "text": "String used to define material assignment"
                  },
                  {
                      "name": "Material",
                      "text": "Material out, should be connected to Material input of GLTFScene"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [
              "QNLw21hSweg"
          ],
          "created": 1575752915505,
          "exampleProjectId": "Mk3Dv2",
          "shortName": "GltfSetMaterial",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.GLTF",
          "shortNameDisplay": "GltfSetMaterial",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.GLTF.GltfSetMaterial",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false,
          "usedInProject": true
      },
      {
          "name": "Ops.Gl.GLTF.GltfSkin",
          "content": "<p>by default gltfscene will do this internally for you, so should only be needed in special cases</p>\n",
          "attachmentFiles": [
              "att_joints.vert",
              "att_joints_head.vert"
          ],
          "summary": "render a skinned mesh (bone/rigging/rigged animation)",
          "id": "0ce62e9b-d990-4ae2-b40f-a036a021aa9c",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Render"
                  },
                  {
                      "type": 5,
                      "name": "Node Name"
                  },
                  {
                      "type": 0,
                      "name": "Scene Time",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Time",
                      "subType": "number"
                  },
                  {
                      "type": 3,
                      "name": "Blend Anims"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "Found Node",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Found Skin",
                      "subType": "boolean"
                  },
                  {
                      "type": 1,
                      "name": "Next"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "Node Name",
                      "text": "Mesh Skin name to render"
                  },
                  {
                      "name": "Scene Time",
                      "text": "use GLTF scene timer or not"
                  },
                  {
                      "name": "Time",
                      "text": "separate timing for selected Mesh Skin"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [
              "I_eD5nml_5A"
          ],
          "created": 1633440350130,
          "exampleProjectId": "TWBC-N",
          "coreLibs": [
              "cgl_shadermodifier"
          ],
          "shortName": "GltfSkin",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.GLTF",
          "shortNameDisplay": "GltfSkin",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.GLTF.GltfSkin",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false,
          "usedInProject": true
      },
      {
          "name": "Ops.Gl.GLTF.GltfTexture",
          "content": "",
          "attachmentFiles": [],
          "summary": "Load textures from inside a .glb file",
          "id": "6479a948-7a48-42a3-b40a-794f4364715f",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Render"
                  },
                  {
                      "type": 5,
                      "name": "Name"
                  },
                  {
                      "type": 0,
                      "name": "Filter index",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Wrap index",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Anisotropic index",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Flip",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Pre Multiplied Alpha",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 2,
                      "name": "Texture",
                      "objType": "texture"
                  },
                  {
                      "type": 0,
                      "name": "Width",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Height",
                      "subType": "number"
                  },
                  {
                      "type": 5,
                      "name": "Type"
                  },
                  {
                      "type": 0,
                      "name": "Found",
                      "subType": "boolean"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1592403235970,
          "exampleProjectId": "PBGKve",
          "shortName": "GltfTexture",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.GLTF",
          "shortNameDisplay": "GltfTexture",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.GLTF.GltfTexture",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false,
          "usedInProject": true
      },
      {
          "name": "Ops.Gl.GLTF.GltfTransformNode",
          "content": "",
          "attachmentFiles": [],
          "summary": "set transformation of a gltf node",
          "id": "bccdb19d-6786-4656-90d7-e798346ea644",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Render"
                  },
                  {
                      "type": 5,
                      "name": "Node Name"
                  },
                  {
                      "type": 0,
                      "name": "Translate X",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Translate Y",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Translate Z",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Rotation X",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Rotation Y",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Rotation Z",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  },
                  {
                      "type": 0,
                      "name": "Found",
                      "subType": "boolean"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1592576017304,
          "exampleProjectId": "",
          "shortName": "GltfTransformNode",
          "hasScreenshot": false,
          "namespace": "Ops.Gl.GLTF",
          "shortNameDisplay": "GltfTransformNode",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.GLTF.GltfTransformNode",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.GLTF.GltfVertexAnim",
          "content": "",
          "attachmentFiles": [],
          "summary": "play gltf vertex anim directly with its own timing",
          "id": "e64b035c-133e-43b0-9ff8-fcd03ee5f26e",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Render"
                  },
                  {
                      "type": 5,
                      "name": "Node Name"
                  },
                  {
                      "type": 0,
                      "name": "Scene Time",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Time",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "Found Node",
                      "subType": "number"
                  },
                  {
                      "type": 1,
                      "name": "Next"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1654767808711,
          "exampleProjectId": "",
          "shortName": "GltfVertexAnim",
          "hasScreenshot": false,
          "namespace": "Ops.Gl.GLTF",
          "shortNameDisplay": "GltfVertexAnim",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.GLTF.GltfVertexAnim",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.GateTexture",
          "content": "",
          "attachmentFiles": [],
          "summary": "Will only allow an Object to to be output if the the pass through parameter evaluates to true",
          "id": "bcf93617-0687-4692-b3aa-16318af686ef",
          "layout": {
              "portsIn": [
                  {
                      "type": 2,
                      "name": "Object In",
                      "objType": "texture"
                  },
                  {
                      "type": 0,
                      "name": "Pass Through",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "When False index",
                      "values": [
                          "keep last texture",
                          "empty texture"
                      ],
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Only Valid Textures",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 2,
                      "name": "Object Out",
                      "objType": "texture"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "Object In",
                      "text": "Object in "
                  },
                  {
                      "name": "Pass Through",
                      "text": "Opens or closes the gate"
                  },
                  {
                      "name": "Object Out",
                      "text": "Object output if pass through is true"
                  }
              ]
          },
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1715862463348,
          "exampleProjectId": "",
          "shortName": "GateTexture",
          "hasScreenshot": false,
          "namespace": "Ops.Gl",
          "shortNameDisplay": "GateTexture",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.GateTexture",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.Geometry.BoundingBoxVisible",
          "content": "",
          "attachmentFiles": [],
          "summary": "Test if a boundingbox could be visible in the current viewport",
          "id": "a4a8d0ca-296e-4bf5-a7be-4585f875bc06",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Exec"
                  },
                  {
                      "type": 2,
                      "name": "Boundings"
                  },
                  {
                      "type": 0,
                      "name": "Active",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Draw",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Width",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Height",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Length",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  },
                  {
                      "type": 0,
                      "name": "Visible",
                      "subType": "boolean"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1594029610729,
          "exampleProjectId": "DAhGve",
          "shortName": "BoundingBoxVisible",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.Geometry",
          "shortNameDisplay": "BoundingBoxVisible",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.Geometry.BoundingBoxVisible",
                  "versionString": "",
                  "version": 0
              }
          ],
          "namespaceTitle": "Ops.Gl.Geometry",
          "namespaceSummary": "WebGl Ops",
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.Geometry.GeometryBoundingBox",
          "content": "",
          "attachmentFiles": [],
          "summary": "Calculate a bounding box from a geometry",
          "id": "7c13487b-87b2-40c9-b363-c5f699968579",
          "layout": {
              "portsIn": [
                  {
                      "type": 2,
                      "name": "Geometry"
                  }
              ],
              "portsOut": [
                  {
                      "type": 2,
                      "name": "Boundings"
                  },
                  {
                      "type": 0,
                      "name": "Min X",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Min Y",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Min Z",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Max X",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Max Y",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Max Z",
                      "subType": "number"
                  },
                  {
                      "type": 3,
                      "name": "MaxMin Points"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1594028902109,
          "exampleProjectId": "DAhGve",
          "shortName": "GeometryBoundingBox",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.Geometry",
          "shortNameDisplay": "GeometryBoundingBox",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.Geometry.GeometryBoundingBox",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.GlBlendFunc",
          "content": "<p>Internally this op uses uses gl <a href=\"https://registry.khronos.org/OpenGL-Refpages/gl4/html/glBlendFuncSeparate.xhtml\">blendFuncSeperate</a></p>\n<h3>Values</h3>\n<p>ZERO\nONE\nSRC_COLOR\nONE_MINUS_SRC_COLOR\nSRC_ALPHA\nONE_MINUS_SRC_ALPHA\nDST_ALPHA\nONE_MINUS_DST_ALPHA\nDST_COLOR\nONE_MINUS_DST_COLOR\nSRC_ALPHA_SATURATE\nCONSTANT_COLOR\nONE_MINUS_CONSTANT_COLOR\nCONSTANT_ALPHA\nONE_MINUS_CONSTANT_ALPHA</p>\n",
          "attachmentFiles": [],
          "summary": "set gl blendmodes directly",
          "id": "77300f2f-15ea-4110-a4a7-27eff42c7750",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Exec"
                  },
                  {
                      "type": 0,
                      "name": "Src RGB index",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Dst RGB index",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Src Alpha index",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Dst Alpha index",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Blend Equation index",
                      "subType": "integer"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1710869016975,
          "exampleProjectId": "24qZz7",
          "shortName": "GlBlendFunc",
          "hasScreenshot": true,
          "namespace": "Ops.Gl",
          "shortNameDisplay": "GlBlendFunc",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.GlBlendFunc",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.GlInfo_v2",
          "content": "<p>Use this to get WEB GL information being used by the browser.</p>\n",
          "attachmentFiles": [],
          "summary": "information about the webgl context",
          "id": "6097ff94-9553-4920-b16f-113b9329eac0",
          "layout": {
              "portsOut": [
                  {
                      "type": 0,
                      "name": "WebGl Version Short",
                      "subType": "number"
                  },
                  {
                      "type": 5,
                      "name": "WebGl Version"
                  },
                  {
                      "type": 5,
                      "name": "GLSL Version"
                  },
                  {
                      "type": 0,
                      "name": "Max Frag uniforms",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Max Vert uniforms",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Max Texture Size",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Max Texture Units",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Max Varying Vectors",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Max MSAA Samples",
                      "subType": "number"
                  },
                  {
                      "type": 3,
                      "name": "Extensions"
                  },
                  {
                      "type": 5,
                      "name": "Vendor"
                  },
                  {
                      "type": 5,
                      "name": "Renderer"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1720622761805,
          "exampleProjectId": "0zHu8i",
          "shortName": "GlInfo_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Gl",
          "shortNameDisplay": "GlInfo",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.GlInfo",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Gl.GlInfo_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.GlPrimitive",
          "content": "<p>Render the geometry with the following modes : \n<code>LINES , LINE_STRIP, LINE_LOOP, POINTS, TRIANGLES, TRIANGLE_FAN, TRIANGLE_STRIP </code></p>\n",
          "attachmentFiles": [],
          "summary": "force rendering of meshes using points,lines or triangles",
          "id": "ef0bae7e-32c9-4815-9ac3-9439fc1194ee",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Execute"
                  },
                  {
                      "type": 0,
                      "name": "Primitive index",
                      "subType": "integer"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "Execute",
                      "text": "Trigger the op "
                  },
                  {
                      "name": "Next",
                      "text": "Trigger out"
                  }
              ]
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1528207289545,
          "exampleProjectId": "a5Mz8i",
          "shortName": "GlPrimitive",
          "hasScreenshot": true,
          "namespace": "Ops.Gl",
          "shortNameDisplay": "GlPrimitive",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.GlPrimitive",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.GradientTexture",
          "content": "<p>This op allows the creation of custom gradients. Click the edit button to get the UI to edit gradient. More colours can be added to the gradient.</p>\n<p>Click on the small squares at the bottom and then the larger square to change the colour of that gradient point.</p>\n<p>Drag the small squares around to change the relationship between the different colours.\nClick once in the thin line at the bottom to add extra squares/gradient points.</p>\n<p>This will produce a datastructure like this, which can also go into the &#39;Gradient Array&#39;-Port:</p>\n<pre><code>[\n  {\n    &quot;pos&quot;: 0,\n    &quot;r&quot;: 0,\n    &quot;g&quot;: 0.19215686274509805,\n    &quot;b&quot;: 0.6705882352941176,\n    &quot;a&quot;: 1\n  },\n  {\n    &quot;pos&quot;: 0.085,\n    &quot;r&quot;: 0.00784313725490196,\n    &quot;g&quot;: 0.20392156862745098,\n    &quot;b&quot;: 0.6941176470588235,\n    &quot;a&quot;: 0.76\n  },\n  ...\n  {\n    &quot;pos&quot;: 1,\n    &quot;r&quot;: 0.9882352941176471,\n    &quot;g&quot;: 0.3215686274509804,\n    &quot;b&quot;: 1,\n    &quot;a&quot;: 0\n  }\n]\n</code></pre>\n",
          "attachmentFiles": [],
          "summary": "texture containing a colour gradient that can be altered with an editor",
          "id": "01380a50-2dbb-4465-ae80-86349b0b717a",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "Gradient",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Direction index",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Smoothstep",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Step",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Flip",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "sRGB",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Oklab",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Size",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "filter index",
                      "values": [
                          "nearest",
                          "linear",
                          "mipmap"
                      ],
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "wrap index",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Dither",
                      "subType": "number"
                  },
                  {
                      "type": 3,
                      "name": "Gradient Array"
                  },
                  {
                      "type": 1,
                      "name": "Randomize Colors"
                  }
              ],
              "portsOut": [
                  {
                      "type": 2,
                      "name": "Texture",
                      "objType": "texture"
                  },
                  {
                      "type": 3,
                      "name": "Colors"
                  },
                  {
                      "type": 3,
                      "name": "Colors Pos"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "Gradient",
                      "text": "Click this to open the editor for the gradient. See docs for a more in depth explanation."
                  },
                  {
                      "name": "Smoothstep",
                      "text": "Enable smoothstep on changes in gradients."
                  },
                  {
                      "name": "Size",
                      "text": "The resolution of the gradient in pixels. 256 is a good default value"
                  },
                  {
                      "name": "Gradient Array",
                      "text": "An array of Object containing pos,r,g,b,a information (see documentation for format)"
                  },
                  {
                      "name": "Direction",
                      "text": "`X or Y` render the texture horizontally or vertically"
                  },
                  {
                      "name": "Texture",
                      "text": "The texture out"
                  }
              ]
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1520454225004,
          "exampleProjectId": "_wQNDW",
          "shortName": "GradientTexture",
          "hasScreenshot": true,
          "namespace": "Ops.Gl",
          "shortNameDisplay": "GradientTexture",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.GradientTexture",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.GridTransform",
          "content": "",
          "attachmentFiles": [],
          "summary": "transform and arrange elements into a grid",
          "id": "242e9cfa-3f83-4ff7-b9e8-1c136938a270",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Render"
                  },
                  {
                      "type": 0,
                      "name": "Num X",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Num Y",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Space X",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Space Y",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  },
                  {
                      "type": 0,
                      "name": "Index",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "x index",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "y index",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1506588348353,
          "exampleProjectId": "J-XMNQ",
          "shortName": "GridTransform",
          "hasScreenshot": true,
          "namespace": "Ops.Gl",
          "shortNameDisplay": "GridTransform",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.GridTransform",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false,
          "usedInProject": true
      },
      {
          "name": "Ops.Gl.Identity",
          "content": "",
          "attachmentFiles": [],
          "summary": "reset all transforms (modelmatrix)",
          "id": "59a5a21f-4498-4960-8527-86f75ab5ec11",
          "layout": {
              "portsIn": [
                  {
                      "type": "1",
                      "name": "exe"
                  }
              ],
              "portsOut": [
                  {
                      "type": "1",
                      "name": "trigger"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1540979489513,
          "exampleProjectId": "KUVJ8i",
          "shortName": "Identity",
          "hasScreenshot": true,
          "namespace": "Ops.Gl",
          "shortNameDisplay": "Identity",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.Identity",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.IdentityViewMatrix",
          "content": "",
          "attachmentFiles": [],
          "summary": "reset the view matrix (cameras etc.)",
          "id": "265c70e7-4d20-4ce0-9aa4-2c12ed867e8f",
          "layout": {
              "portsIn": [
                  {
                      "type": "1",
                      "name": "exe"
                  }
              ],
              "portsOut": [
                  {
                      "type": "1",
                      "name": "trigger"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1540979572513,
          "exampleProjectId": "H01Ici",
          "shortName": "IdentityViewMatrix",
          "hasScreenshot": true,
          "namespace": "Ops.Gl",
          "shortNameDisplay": "IdentityViewMatrix",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.IdentityViewMatrix",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.ImageCompose.Alpha",
          "content": "",
          "attachmentFiles": [
              "att_clearAlpha.frag"
          ],
          "summary": "Modify current alpha/opacity ",
          "id": "131687e0-77f5-4fd7-be57-864aa6559418",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Render"
                  },
                  {
                      "type": 0,
                      "name": "Amount",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Method index",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Clamp",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1605614058869,
          "exampleProjectId": "y6f1ei",
          "shortName": "Alpha",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.ImageCompose",
          "shortNameDisplay": "Alpha",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.ImageCompose.Alpha",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false,
          "namespaceTitle": "Ops.Gl.ImageCompose",
          "namespaceSummary": "WebGl Ops"
      },
      {
          "name": "Ops.Gl.ImageCompose.AlphaMask_v2",
          "content": "<p>make sure imagecompose is set to alpha 0 or not cleared</p>\n",
          "attachmentFiles": [
              "att_alphamask.frag"
          ],
          "summary": "Set alphachannel of current imagecompose via a texture mask",
          "id": "a971aaa4-565f-47cf-8a4f-61a3a4378183",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "render"
                  },
                  {
                      "type": 0,
                      "name": "Amount",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Method index",
                      "values": [
                          "Override",
                          "Mul",
                          "Add"
                      ],
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Invert",
                      "subType": "boolean"
                  },
                  {
                      "type": 2,
                      "name": "image",
                      "objType": "texture"
                  },
                  {
                      "type": 0,
                      "name": "method index",
                      "subType": "integer"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "trigger"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1650446879262,
          "exampleProjectId": "",
          "shortName": "AlphaMask_v2",
          "hasScreenshot": false,
          "namespace": "Ops.Gl.ImageCompose",
          "shortNameDisplay": "AlphaMask",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.ImageCompose.AlphaMask",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Gl.ImageCompose.AlphaMask_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.ImageCompose.BarrelDistortion_v3",
          "content": "",
          "attachmentFiles": [
              "att_barreldistort.frag"
          ],
          "summary": "Simulate fisheye effect",
          "id": "d5efa9e4-d552-42f8-a345-d49e5e861602",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "render"
                  },
                  {
                      "type": 0,
                      "name": "Blend Mode index",
                      "group": "Blending",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Amount",
                      "group": "Blending",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Intensity",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Trigger"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1650964935237,
          "exampleProjectId": "qIOrS-",
          "shortName": "BarrelDistortion_v3",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.ImageCompose",
          "shortNameDisplay": "BarrelDistortion",
          "version": 3,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.ImageCompose.BarrelDistortion",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Gl.ImageCompose.BarrelDistortion_v2",
                  "versionString": "_v2",
                  "version": 2
              },
              {
                  "name": "Ops.Gl.ImageCompose.BarrelDistortion_v3",
                  "versionString": "_v3",
                  "version": 3
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.ImageCompose.Blur",
          "content": "<p>Blur the current state of an image compose</p>\n",
          "attachmentFiles": [
              "att_blur.frag"
          ],
          "summary": "Blur the pixels of an image",
          "id": "54f26f53-f637-44c1-9bfb-a2f2b722e998",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "render"
                  },
                  {
                      "type": 0,
                      "name": "amount",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "direction index",
                      "subType": "integer"
                  },
                  {
                      "type": 5,
                      "name": "direction"
                  },
                  {
                      "type": 0,
                      "name": "Fast",
                      "subType": "boolean"
                  },
                  {
                      "type": 2,
                      "name": "mask",
                      "objType": "texture"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "trigger"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "render",
                      "text": "Triggerthe op"
                  },
                  {
                      "name": "amount",
                      "text": "Amount of blur to apply"
                  },
                  {
                      "name": "direction index",
                      "text": "Pick blur direction with an integer"
                  },
                  {
                      "name": "direction",
                      "text": "Both, vertical or horizontal"
                  },
                  {
                      "name": "Fast",
                      "text": "Fast mode. Sacrifice blur quality for speed"
                  },
                  {
                      "name": "mask",
                      "text": "Use a texture input black and white gradient to decide which pixels are blurred "
                  },
                  {
                      "name": "trigger",
                      "text": "Trigger out"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [
              "XmOk70epdf0"
          ],
          "created": 1508233703583,
          "exampleProjectId": "1T9f7g",
          "shortName": "Blur",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.ImageCompose",
          "shortNameDisplay": "Blur",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.ImageCompose.Blur",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.ImageCompose.Border_v2",
          "content": "",
          "attachmentFiles": [
              "att_border.frag"
          ],
          "summary": "Draws a Border (rectangular frame) around the current ImageCompose",
          "id": "ee773dc0-d00c-4d6a-86b7-8fd32f9d72e1",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "render"
                  },
                  {
                      "type": 0,
                      "name": "width",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Blend Mode index",
                      "group": "Blending",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Alpha Mask index",
                      "group": "Blending",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Amount",
                      "group": "Blending",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Smooth",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "r",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "g",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "b",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Side A",
                      "group": "Sides",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Side B",
                      "group": "Sides",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Side C",
                      "group": "Sides",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Side D",
                      "group": "Sides",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "trigger"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1650524964631,
          "exampleProjectId": "ctPnT6",
          "shortName": "Border_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.ImageCompose",
          "shortNameDisplay": "Border",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.ImageCompose.Border",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Gl.ImageCompose.Border_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "allowEdit": false,
          "usedInProject": true
      },
      {
          "name": "Ops.Gl.ImageCompose.BrightnessContrast",
          "content": "",
          "attachmentFiles": [
              "att_brightness_contrast.frag"
          ],
          "summary": "adjust image brightness and contrast",
          "id": "54b89199-c594-4dff-bc48-82d6c7a55e8a",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "render"
                  },
                  {
                      "type": 0,
                      "name": "contrast",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "brightness",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "trigger"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1510740064431,
          "exampleProjectId": "8p4mT6",
          "shortName": "BrightnessContrast",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.ImageCompose",
          "shortNameDisplay": "BrightnessContrast",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.ImageCompose.BrightnessContrast",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.ImageCompose.BulgePinch",
          "content": "",
          "attachmentFiles": [
              "att_bulgepinch.frag"
          ],
          "summary": "bulge and pinch an image (deform,stretch,distort)",
          "id": "25696840-bd64-463e-9301-964a81385bfb",
          "layout": {
              "portsIn": [
                  {
                      "type": "1",
                      "name": "render"
                  },
                  {
                      "type": "0",
                      "name": "Radius",
                      "subType": "number"
                  },
                  {
                      "type": "0",
                      "name": "Strength",
                      "subType": "number"
                  },
                  {
                      "type": "0",
                      "name": "Center X",
                      "subType": "number"
                  },
                  {
                      "type": "0",
                      "name": "Center Y",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": "1",
                      "name": "trigger"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1540923201757,
          "exampleProjectId": "2lC9W6",
          "shortName": "BulgePinch",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.ImageCompose",
          "shortNameDisplay": "BulgePinch",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.ImageCompose.BulgePinch",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false,
          "usedInProject": true
      },
      {
          "name": "Ops.Gl.ImageCompose.CheckerBoard_v2",
          "content": "",
          "attachmentFiles": [
              "att_checkerboard.frag"
          ],
          "summary": "Draw a checkerboard pattern",
          "id": "7edfae81-f092-413f-a2a0-b109fdffa61d",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "render"
                  },
                  {
                      "type": 0,
                      "name": "Blend Mode index",
                      "group": "Blending",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Alpha Mask index",
                      "group": "Blending",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Amount",
                      "group": "Blending",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Square",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Num X",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Num Y",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Rotate",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Centered",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "trigger"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1650526315120,
          "exampleProjectId": "J4KL_4",
          "shortName": "CheckerBoard_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.ImageCompose",
          "shortNameDisplay": "CheckerBoard",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.ImageCompose.CheckerBoard",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Gl.ImageCompose.CheckerBoard_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.ImageCompose.ChromaticAberration_v2",
          "content": "",
          "attachmentFiles": [
              "att_chromatic.frag"
          ],
          "summary": "simulating lens effect by shifting rgb channels",
          "id": "07701f81-1a98-44c0-b1ef-592db3cbb5d3",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "render"
                  },
                  {
                      "type": 0,
                      "name": "Blend Mode index",
                      "group": "Blending",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Amount",
                      "group": "Blending",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Pixel",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Lens Distort",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Smooth",
                      "subType": "boolean"
                  },
                  {
                      "type": 2,
                      "name": "Mask",
                      "objType": "texture"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "trigger"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1650965249635,
          "exampleProjectId": "X0WkT6",
          "shortName": "ChromaticAberration_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.ImageCompose",
          "shortNameDisplay": "ChromaticAberration",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.ImageCompose.ChromaticAberration",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Gl.ImageCompose.ChromaticAberration_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.ImageCompose.CircleTexture_v4",
          "content": "",
          "attachmentFiles": [
              "att_circle.frag"
          ],
          "summary": "Draw 2d circle into texture",
          "id": "9738c421-1ee0-42bf-be0b-f4a481385fbf",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Render"
                  },
                  {
                      "type": 0,
                      "name": "Amount",
                      "group": "Blending",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Blend Mode index",
                      "group": "Blending",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Alpha Mask index",
                      "group": "Blending",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Size",
                      "group": "Size",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Inner",
                      "group": "Size",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Stretch X",
                      "group": "Size",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Stretch Y",
                      "group": "Size",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Pos X",
                      "group": "Position",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Pos Y",
                      "group": "Position",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "fallOff index",
                      "group": "Style",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "fade Out",
                      "group": "Style",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "warn overflow",
                      "group": "Style",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "r",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "g",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "b",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "a",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1646838589132,
          "exampleProjectId": "asslT6",
          "shortName": "CircleTexture_v4",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.ImageCompose",
          "shortNameDisplay": "CircleTexture",
          "version": 4,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.ImageCompose.CircleTexture",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Gl.ImageCompose.CircleTexture_v2",
                  "versionString": "_v2",
                  "version": 2
              },
              {
                  "name": "Ops.Gl.ImageCompose.CircleTexture_v3",
                  "versionString": "_v3",
                  "version": 3
              },
              {
                  "name": "Ops.Gl.ImageCompose.CircleTexture_v4",
                  "versionString": "_v4",
                  "version": 4
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.ImageCompose.ClampTexture_v2",
          "content": "<p>Modes:\nClamp - Clamps a texture to the min and max values\nRemap - Linear remapping to the min and max values\nRemap smooth - Smoothstep remapping to the min and max values  </p>\n",
          "attachmentFiles": [
              "att_clampShader.frag"
          ],
          "summary": "Clamps a texture to min and max values - Also has remap modes",
          "id": "34dceddb-c9c6-47df-803f-c1b154e4f6f5",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "render"
                  },
                  {
                      "type": 0,
                      "name": "Blend Mode index",
                      "group": "Blending",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Amount",
                      "group": "Blending",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Mode index",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "R",
                      "group": "Red",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "R Min",
                      "group": "Red",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "R Max",
                      "group": "Red",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "G",
                      "group": "Green",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "G Min",
                      "group": "Green",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "G Max",
                      "group": "Green",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "B",
                      "group": "Blue",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "B Min",
                      "group": "Blue",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "B Max",
                      "group": "Blue",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "trigger"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "render",
                      "text": "Trigger the op"
                  },
                  {
                      "name": "Amount",
                      "text": "Blending amount"
                  },
                  {
                      "name": "trigger",
                      "text": "Trigger out"
                  }
              ]
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1708505439104,
          "exampleProjectId": "eYNP7-",
          "shortName": "ClampTexture_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.ImageCompose",
          "shortNameDisplay": "ClampTexture",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.ImageCompose.ClampTexture",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Gl.ImageCompose.ClampTexture_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.ImageCompose.Clarity",
          "content": "",
          "attachmentFiles": [
              "att_clarity.frag"
          ],
          "summary": "Increase contrast in midtones",
          "id": "37d66c32-5594-4509-bba0-0ba2cbb706d8",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Render"
                  },
                  {
                      "type": 0,
                      "name": "amount",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Trigger"
                  }
              ]
          },
          "authorName": "pandur",
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1519812712350,
          "exampleProjectId": "",
          "shortName": "Clarity",
          "hasScreenshot": false,
          "namespace": "Ops.Gl.ImageCompose",
          "shortNameDisplay": "Clarity",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.ImageCompose.Clarity",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.ImageCompose.ColorBalance_v2",
          "content": "",
          "attachmentFiles": [
              "att_colorbalance.frag"
          ],
          "summary": "change intensity of r,g,b channels",
          "id": "5af81475-2aa6-451b-a1f3-0980f641a72e",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "render"
                  },
                  {
                      "type": 0,
                      "name": "Tone index",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "r",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "g",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "b",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "trigger"
                  }
              ]
          },
          "authorName": "pandur",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1650967446714,
          "exampleProjectId": "FGVncy",
          "shortName": "ColorBalance_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.ImageCompose",
          "shortNameDisplay": "ColorBalance",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.ImageCompose.ColorBalance",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Gl.ImageCompose.ColorBalance_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.ImageCompose.ColorChannel_v2",
          "content": "",
          "attachmentFiles": [
              "att_colorchannel.frag"
          ],
          "summary": "enable disable RGB color channels",
          "id": "0a512974-0920-4aa8-89dc-4dda184c0d46",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "render"
                  },
                  {
                      "type": 0,
                      "name": "channelR",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "channelG",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "channelB",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "channelA",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "mono",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "trigger"
                  }
              ]
          },
          "authorName": "pandur",
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1650525599264,
          "exampleProjectId": "",
          "shortName": "ColorChannel_v2",
          "hasScreenshot": false,
          "namespace": "Ops.Gl.ImageCompose",
          "shortNameDisplay": "ColorChannel",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.ImageCompose.ColorChannel",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Gl.ImageCompose.ColorChannel_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "allowEdit": false,
          "usedInProject": true
      },
      {
          "name": "Ops.Gl.ImageCompose.ColorMap_v2",
          "content": "",
          "attachmentFiles": [
              "att_colormap.frag"
          ],
          "summary": "colorize a black and white image using a gradient texture",
          "id": "440c1675-122d-411f-b848-16c60b677120",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "render"
                  },
                  {
                      "type": 0,
                      "name": "Blend Mode index",
                      "group": "Blending",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Amount",
                      "group": "Blending",
                      "subType": "number"
                  },
                  {
                      "type": 2,
                      "name": "Gradient",
                      "objType": "texture"
                  },
                  {
                      "type": 0,
                      "name": "Method index",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Min",
                      "group": "Vertical Position",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Max",
                      "group": "Vertical Position",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Position",
                      "group": "Vertical Position",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "trigger"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1650967159637,
          "exampleProjectId": "E7Dou7",
          "shortName": "ColorMap_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.ImageCompose",
          "shortNameDisplay": "ColorMap",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.ImageCompose.ColorMap",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Gl.ImageCompose.ColorMap_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.ImageCompose.Color_v2",
          "content": "",
          "attachmentFiles": [
              "att_color.frag"
          ],
          "summary": "fill image using a color (overlay)",
          "id": "6dada2b7-da7c-47ee-87a9-a12e87055208",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "render"
                  },
                  {
                      "type": 0,
                      "name": "Blend Mode index",
                      "group": "Blending",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Amount",
                      "group": "Blending",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Alpha Mask index",
                      "group": "Blending",
                      "subType": "integer"
                  },
                  {
                      "type": 2,
                      "name": "Mask",
                      "objType": "texture"
                  },
                  {
                      "type": 0,
                      "name": "Mask Invert",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "r",
                      "group": "Color",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "g",
                      "group": "Color",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "b",
                      "group": "Color",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "A",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "trigger"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1650374368022,
          "exampleProjectId": "AnqmT6",
          "shortName": "Color_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.ImageCompose",
          "shortNameDisplay": "Color",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.ImageCompose.Color",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Gl.ImageCompose.Color_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.ImageCompose.Denoise",
          "content": "",
          "attachmentFiles": [
              "att_denoise.frag"
          ],
          "summary": "Denoise texture effect - used to smooth out noisy images",
          "id": "0abfea0f-1aa9-47bf-b540-f54f89a60a6c",
          "layout": {
              "portsIn": [
                  {
                      "type": "1",
                      "name": "render"
                  },
                  {
                      "type": "0",
                      "name": "Exponent",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": "1",
                      "name": "trigger"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "render",
                      "text": "Trigger in"
                  },
                  {
                      "name": "Exponent",
                      "text": "Denoise amount to apply"
                  },
                  {
                      "name": "trigger",
                      "text": "Trigger out"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1542701445023,
          "exampleProjectId": "4vWud8",
          "shortName": "Denoise",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.ImageCompose",
          "shortNameDisplay": "Denoise",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.ImageCompose.Denoise",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false,
          "usedInProject": true
      },
      {
          "name": "Ops.Gl.ImageCompose.DepthTextureFocus_v2",
          "content": "<p>To get results that align to the scene, make sure you use your scene&#39;s camera near- and farplane.</p>\n",
          "attachmentFiles": [
              "att_depth_focus.frag"
          ],
          "summary": "draws a gradient from white to black back to white over distance of the scene",
          "id": "f84ac22e-664e-4ff1-b23f-539ac1f5c67e",
          "layout": {
              "portsIn": [
                  {
                      "type": "1",
                      "name": "render"
                  },
                  {
                      "type": "2",
                      "name": "Depth Texture"
                  },
                  {
                      "type": "0",
                      "name": "Focus",
                      "group": "Focus Settings",
                      "subType": "number"
                  },
                  {
                      "type": "0",
                      "name": "Width",
                      "group": "Focus Settings",
                      "subType": "number"
                  },
                  {
                      "type": "0",
                      "name": "Invert",
                      "group": "Focus Settings",
                      "subType": "boolean"
                  },
                  {
                      "type": "0",
                      "name": "nearplane",
                      "group": "Frustum",
                      "subType": "number"
                  },
                  {
                      "type": "0",
                      "name": "farplane",
                      "group": "Frustum",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": "1",
                      "name": "trigger"
                  }
              ]
          },
          "authorName": "simod",
          "docs": {
              "ports": [
                  {
                      "name": "render",
                      "text": "trigger input"
                  },
                  {
                      "name": "Depth Texture",
                      "text": "depth texture input"
                  },
                  {
                      "name": "Focus",
                      "text": "focus distance (in world space)"
                  },
                  {
                      "name": "Width",
                      "text": "width of the focus (in world space)"
                  },
                  {
                      "name": "Invert",
                      "text": "invert the focus"
                  },
                  {
                      "name": "nearplane",
                      "text": "near plane of the focus frustum"
                  },
                  {
                      "name": "farplane",
                      "text": "far plane of the focus frustum"
                  },
                  {
                      "name": "trigger",
                      "text": "trigger output"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1604500536347,
          "exampleProjectId": "6Z8zJm",
          "shortName": "DepthTextureFocus_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.ImageCompose",
          "shortNameDisplay": "DepthTextureFocus",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.ImageCompose.DepthTextureFocus",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Gl.ImageCompose.DepthTextureFocus_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "allowEdit": false,
          "usedInProject": true
      },
      {
          "name": "Ops.Gl.ImageCompose.DepthTexture_v2",
          "content": "<p>white pixels are further away</p>\n",
          "attachmentFiles": [
              "att_depthtexture.frag"
          ],
          "summary": "draw the content of a depth texture",
          "id": "5958fbb8-fb78-4de2-85dc-5eb289f652cb",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "render"
                  },
                  {
                      "type": 2,
                      "name": "image",
                      "objType": "texture"
                  },
                  {
                      "type": 0,
                      "name": "Blend Mode index",
                      "group": "Blending",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Amount",
                      "group": "Blending",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "farplane",
                      "group": "Frustum",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "nearplane",
                      "group": "Frustum",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Invert",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "trigger"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "image",
                      "text": "Uses a depth texture"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1654596517300,
          "exampleProjectId": "tmLbW6",
          "shortName": "DepthTexture_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.ImageCompose",
          "shortNameDisplay": "DepthTexture",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.ImageCompose.DepthTexture",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Gl.ImageCompose.DepthTexture_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.ImageCompose.Desaturate",
          "content": "<p>Desaturate (remove color information) the content of current <code>ImageCompose</code>.</p>\n",
          "attachmentFiles": [
              "att_desaturate.frag"
          ],
          "summary": "Remove colors from image / greyscale",
          "id": "340efbd5-be53-4bd5-92ad-8f38d8eeecf1",
          "layout": {
              "portsIn": [
                  {
                      "type": "1",
                      "name": "render"
                  },
                  {
                      "type": "0",
                      "name": "amount",
                      "subType": "number"
                  },
                  {
                      "type": "2",
                      "name": "Mask"
                  },
                  {
                      "type": "0",
                      "name": "Invert Mask",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": "1",
                      "name": "trigger"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1508766377767,
          "exampleProjectId": "g1kmT6",
          "shortName": "Desaturate",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.ImageCompose",
          "shortNameDisplay": "Desaturate",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.ImageCompose.Desaturate",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.ImageCompose.Dither_v2",
          "content": "",
          "attachmentFiles": [
              "att_dither.frag"
          ],
          "summary": "convert color to black and white patterns",
          "id": "686ae373-2d2d-44cc-b45f-2ccb782dea26",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Render"
                  },
                  {
                      "type": 0,
                      "name": "Blend Mode index",
                      "group": "Blending",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Amount",
                      "group": "Blending",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "threshold",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "strength",
                      "subType": "number"
                  },
                  {
                      "type": 2,
                      "name": "Mask",
                      "objType": "texture"
                  },
                  {
                      "type": 0,
                      "name": "Mask Src index",
                      "values": [
                          "R",
                          "1-R"
                      ],
                      "subType": "integer"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Trigger"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1650967311533,
          "exampleProjectId": "eECnT6",
          "shortName": "Dither_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.ImageCompose",
          "shortNameDisplay": "Dither",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.ImageCompose.Dither",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Gl.ImageCompose.Dither_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "allowEdit": false,
          "usedInProject": true
      },
      {
          "name": "Ops.Gl.ImageCompose.DrawImage_v3",
          "content": "",
          "attachmentFiles": [
              "att_drawimage.frag",
              "att_drawimage.vert"
          ],
          "summary": "Draws an image into a composition",
          "id": "8f6b2f15-fcb0-4597-90c0-e5173f2969fe",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "render"
                  },
                  {
                      "type": 0,
                      "name": "blendMode index",
                      "group": "Blending",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "amount",
                      "group": "Blending",
                      "subType": "number"
                  },
                  {
                      "type": 2,
                      "name": "Image",
                      "objType": "texture"
                  },
                  {
                      "type": 0,
                      "name": "Premultiplied",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Alpha Mask",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "removeAlphaSrc",
                      "subType": "boolean"
                  },
                  {
                      "type": 2,
                      "name": "Mask",
                      "group": "Mask",
                      "objType": "texture"
                  },
                  {
                      "type": 0,
                      "name": "Mask Src index",
                      "group": "Mask",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Invert alpha channel",
                      "group": "Mask",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Aspect Ratio",
                      "group": "Aspect Ratio",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Stretch Axis index",
                      "group": "Aspect Ratio",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Position",
                      "group": "Aspect Ratio",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Crop",
                      "group": "Aspect Ratio",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "flip x",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "flip y",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Transform",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Scale X",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Scale Y",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Position X",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Position Y",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Rotation",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Clip Repeat",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "trigger"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1605553827470,
          "exampleProjectId": "k6ttde",
          "shortName": "DrawImage_v3",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.ImageCompose",
          "shortNameDisplay": "DrawImage",
          "version": 3,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.ImageCompose.DrawImage",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Gl.ImageCompose.DrawImage_v2",
                  "versionString": "_v2",
                  "version": 2
              },
              {
                  "name": "Ops.Gl.ImageCompose.DrawImage_v3",
                  "versionString": "_v3",
                  "version": 3
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.ImageCompose.EdgeDetection_v4",
          "content": "",
          "attachmentFiles": [
              "att_edgedetect.frag"
          ],
          "summary": "Draw only the edges of an image",
          "id": "0240e26e-b86d-43b2-8c72-6795bb86dc76",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Render"
                  },
                  {
                      "type": 0,
                      "name": "Blend Mode index",
                      "group": "Blending",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Amount",
                      "group": "Blending",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Strength",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Width",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Mul Color",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Trigger"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "Render",
                      "text": "Trigger the op"
                  },
                  {
                      "name": "Amount",
                      "text": "Amount of blending"
                  },
                  {
                      "text": "Strength of effect"
                  },
                  {
                      "name": "Width",
                      "text": "Strength of edge detection"
                  },
                  {
                      "name": "Width",
                      "text": "Width of pixels"
                  },
                  {
                      "name": "Mul Color",
                      "text": "Multiply the original color with the edges"
                  },
                  {
                      "name": "Trigger",
                      "text": "Trigger out"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1650964495680,
          "exampleProjectId": "dK8td8",
          "shortName": "EdgeDetection_v4",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.ImageCompose",
          "shortNameDisplay": "EdgeDetection",
          "version": 4,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.ImageCompose.EdgeDetection",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Gl.ImageCompose.EdgeDetection_v2",
                  "versionString": "_v2",
                  "version": 2
              },
              {
                  "name": "Ops.Gl.ImageCompose.EdgeDetection_v3",
                  "versionString": "_v3",
                  "version": 3
              },
              {
                  "name": "Ops.Gl.ImageCompose.EdgeDetection_v4",
                  "versionString": "_v4",
                  "version": 4
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.ImageCompose.Emboss",
          "content": "",
          "attachmentFiles": [
              "att_emboss.frag"
          ],
          "summary": "Emboss / bevel effect",
          "id": "e973e104-392a-44f0-bbc5-c382a08c15df",
          "layout": {
              "portsIn": [
                  {
                      "type": "1",
                      "name": "render"
                  },
                  {
                      "type": "0",
                      "name": "Strength",
                      "subType": "number"
                  },
                  {
                      "type": "0",
                      "name": "Clear",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": "1",
                      "name": "trigger"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1548506928011,
          "exampleProjectId": "xsRcay",
          "shortName": "Emboss",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.ImageCompose",
          "shortNameDisplay": "Emboss",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.ImageCompose.Emboss",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.ImageCompose.FXAA",
          "content": "<p>Post process anti aliasing </p>\n<p>see <a href=\"https://en.wikipedia.org/wiki/Fast_approximate_anti-aliasing\">wikipedia</a></p>\n<p>shader code: <a href=\"https://github.com/mattdesl/glsl-fxaa\">https://github.com/mattdesl/glsl-fxaa</a></p>\n",
          "attachmentFiles": [
              "att_fxaa.frag"
          ],
          "summary": "post processing antialiasing",
          "id": "3e679c17-f050-4bc8-bfe5-5b9190e7ce40",
          "layout": {
              "portsIn": [
                  {
                      "type": "1",
                      "name": "render"
                  },
                  {
                      "type": "0",
                      "name": "span index",
                      "subType": "integer"
                  },
                  {
                      "type": "0",
                      "name": "reduceMin",
                      "subType": "number"
                  },
                  {
                      "type": "0",
                      "name": "reduceMul",
                      "subType": "number"
                  },
                  {
                      "type": "0",
                      "name": "use viewport size",
                      "subType": "boolean"
                  },
                  {
                      "type": "0",
                      "name": "width",
                      "subType": "integer"
                  },
                  {
                      "type": "0",
                      "name": "height",
                      "subType": "integer"
                  }
              ],
              "portsOut": [
                  {
                      "type": "1",
                      "name": "trigger"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1540922733116,
          "exampleProjectId": "R8YGag",
          "credits": [
              {
                  "title": "FXAA WebGL implementation",
                  "author": "mattdesl",
                  "url": "https://github.com/mattdesl/glsl-fxaa",
                  "licence": "MIT"
              }
          ],
          "shortName": "FXAA",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.ImageCompose",
          "shortNameDisplay": "FXAA",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.ImageCompose.FXAA",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.ImageCompose.FastBlur_v2",
          "content": "",
          "attachmentFiles": [
              "att_blur.frag",
              "att_blur.vert"
          ],
          "summary": "Blurs a texture  - simple and fast",
          "id": "61ed277f-d096-43b2-9de8-dc87fb3a9169",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "render"
                  },
                  {
                      "type": 0,
                      "name": "Passes",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Clamp",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "direction index",
                      "subType": "integer"
                  },
                  {
                      "type": 2,
                      "name": "Mask",
                      "group": "Mask",
                      "objType": "texture"
                  },
                  {
                      "type": 0,
                      "name": "Mask Invert",
                      "group": "Mask",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "trigger"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "render",
                      "text": "Trigger in"
                  },
                  {
                      "name": "Clamp",
                      "text": "Clamp texture output"
                  },
                  {
                      "name": "trigger",
                      "text": "Trigger out"
                  }
              ]
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1650882627103,
          "exampleProjectId": "wl2T7i",
          "shortName": "FastBlur_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.ImageCompose",
          "shortNameDisplay": "FastBlur",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.ImageCompose.FastBlur",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Gl.ImageCompose.FastBlur_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.ImageCompose.Flip",
          "content": "",
          "attachmentFiles": [
              "att_flip.frag"
          ],
          "summary": "flip the image on x or y axis",
          "id": "ce36ad01-411a-412f-affa-1959aa23f93b",
          "layout": {
              "portsIn": [
                  {
                      "type": "1",
                      "name": "render"
                  },
                  {
                      "type": "0",
                      "name": "X",
                      "subType": "boolean"
                  },
                  {
                      "type": "0",
                      "name": "Y",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": "1",
                      "name": "trigger"
                  }
              ]
          },
          "authorName": "pandur",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1540821837396,
          "exampleProjectId": "179Jjr",
          "shortName": "Flip",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.ImageCompose",
          "shortNameDisplay": "Flip",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.ImageCompose.Flip",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false,
          "usedInProject": true
      },
      {
          "name": "Ops.Gl.ImageCompose.Float32ToRgbeTexture",
          "content": "",
          "attachmentFiles": [
              "att_rgbe2fp.frag"
          ],
          "summary": "Convert a Float32 bit/HDR texture to RGBE format (only positive numbers)",
          "id": "ae3585c4-b49a-4dd5-b7be-1f53a90bb060",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "render"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "trigger"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1646228077372,
          "exampleProjectId": "dXLhW2",
          "coreLibs": [
              "cgl_copytexture"
          ],
          "shortName": "Float32ToRgbeTexture",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.ImageCompose",
          "shortNameDisplay": "Float32ToRgbeTexture",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.ImageCompose.Float32ToRgbeTexture",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.ImageCompose.Fog_v4",
          "content": "<p>A little advice for using post processing fog on iOS:</p>\n<p>Due to WebGL1 being used on iOS, the depth buffer that is needed for fog calculation is not as precise as the depth buffer being used in Chrome or Firefox. Therefor it is advised to use small scenes and adjust the <em>scene camera</em>&#39;s near &amp; far value (with the Perspective op as shown in the example) to only capture the scene and not exceeding the far value too much behind it.</p>\n<p>Also, setting the near value to something greater than 0.01 (somewhere between 0.1 - 1 depending on context) can greatly increase depth buffer resolution.</p>\n",
          "attachmentFiles": [
              "att_fog.frag",
              "att_fog.vert"
          ],
          "summary": "add post processing fog (nebula) to a scene",
          "id": "9d52bb1d-cf80-4f75-a80b-bdca16421d65",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "render"
                  },
                  {
                      "type": 0,
                      "name": "blendMode index",
                      "group": "Blending",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Amount",
                      "group": "Blending",
                      "subType": "number"
                  },
                  {
                      "type": 2,
                      "name": "Depth Texture",
                      "group": "Textures",
                      "objType": "texture"
                  },
                  {
                      "type": 2,
                      "name": "Gradient Texture",
                      "group": "Textures",
                      "objType": "texture"
                  },
                  {
                      "type": 2,
                      "name": "Background Texture",
                      "group": "Textures",
                      "objType": "texture"
                  },
                  {
                      "type": 0,
                      "name": "Fog Start",
                      "group": "Fog Options",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Fog End",
                      "group": "Fog Options",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Fog Density",
                      "group": "Fog Options",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Ignore Infinity",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "nearplane",
                      "group": "Frustum",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "farplane",
                      "group": "Frustum",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Fog R",
                      "group": "Fog Color",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Fog G",
                      "group": "Fog Color",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Fog B",
                      "group": "Fog Color",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Fog A",
                      "group": "Fog Color",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "trigger"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "render",
                      "text": "trigger input"
                  },
                  {
                      "name": "blendMode",
                      "text": "choose between different blend modes"
                  },
                  {
                      "name": "Amount",
                      "text": "intensity of the effect"
                  },
                  {
                      "name": "Depth Texture",
                      "text": "input of the depth texture"
                  },
                  {
                      "name": "Gradient Texture",
                      "text": "input for a gradient texture that lets you color the fog with a gradient "
                  },
                  {
                      "name": "Fog Start",
                      "text": "start of the fog"
                  },
                  {
                      "name": "Fog End",
                      "text": "end of the fog"
                  },
                  {
                      "name": "Fog Density",
                      "text": "density of the fog"
                  },
                  {
                      "name": "Fog Mode index",
                      "text": "choose between different fog modes: default (pow2 mode), linear, exp and exp2"
                  },
                  {
                      "name": "Fog Mode",
                      "text": "choose between different fog modes: default (pow2 mode), linear, exp and exp2"
                  },
                  {
                      "name": "nearplane",
                      "text": "near plane to be used for the fog frustum"
                  },
                  {
                      "name": "farplane",
                      "text": "far plane to be used for the fog frustum"
                  },
                  {
                      "name": "Fog R",
                      "text": "r channel of fog color"
                  },
                  {
                      "name": "Fog G",
                      "text": "g channel of fog color"
                  },
                  {
                      "name": "Fog B",
                      "text": "b channel of fog color"
                  },
                  {
                      "name": "Fog A",
                      "text": "alpha channel of fog color"
                  },
                  {
                      "name": "trigger",
                      "text": "output trigger"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1654615796968,
          "exampleProjectId": "L6GbDe",
          "shortName": "Fog_v4",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.ImageCompose",
          "shortNameDisplay": "Fog",
          "version": 4,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.ImageCompose.Fog",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Gl.ImageCompose.Fog_v2",
                  "versionString": "_v2",
                  "version": 2
              },
              {
                  "name": "Ops.Gl.ImageCompose.Fog_v3",
                  "versionString": "_v3",
                  "version": 3
              },
              {
                  "name": "Ops.Gl.ImageCompose.Fog_v4",
                  "versionString": "_v4",
                  "version": 4
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.ImageCompose.GammaCorrection_v2",
          "content": "<p>Multiply texture occurs before the gamma correction is applied.\nDefault setting is 2.2</p>\n",
          "attachmentFiles": [
              "att_gamma.frag"
          ],
          "summary": "Allows for Gamma correction of a texture",
          "id": "18da81c9-bcae-4446-ac58-d3ba31808013",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "render"
                  },
                  {
                      "type": 0,
                      "name": "Blend Mode index",
                      "group": "Blending",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Amount",
                      "group": "Blending",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Multiply texture",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Gamma correction",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "trigger"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "Multiply texture",
                      "text": "Multiplies value of texture before gamma correction"
                  },
                  {
                      "name": "Gamma correction",
                      "text": "Amount of gamma correction to apply"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1650881499839,
          "exampleProjectId": "WugPbx",
          "shortName": "GammaCorrection_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.ImageCompose",
          "shortNameDisplay": "GammaCorrection",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.ImageCompose.GammaCorrection",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Gl.ImageCompose.GammaCorrection_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.ImageCompose.Gradient_v2",
          "content": "",
          "attachmentFiles": [
              "att_gradient.frag"
          ],
          "summary": "Draws a simple gradient between three colors",
          "id": "c8a9408a-75e5-481f-99a7-6aa7ca88bebc",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Render"
                  },
                  {
                      "type": 0,
                      "name": "Blend Mode index",
                      "group": "Blending",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Alpha Mask index",
                      "group": "Blending",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Amount",
                      "group": "Blending",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Width",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Type index",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Pos",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Smoothstep",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "sRGB",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "color space index",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "r",
                      "group": "Color A",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "g",
                      "group": "Color A",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "b",
                      "group": "Color A",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "r2",
                      "group": "Color B",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "g2",
                      "group": "Color B",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "b2",
                      "group": "Color B",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "r3",
                      "group": "Color C",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "g3",
                      "group": "Color C",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "b3",
                      "group": "Color C",
                      "subType": "number"
                  },
                  {
                      "type": 1,
                      "name": "Randomize"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1650609143792,
          "exampleProjectId": "dlSpQ6",
          "shortName": "Gradient_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.ImageCompose",
          "shortNameDisplay": "Gradient",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.ImageCompose.Gradient",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Gl.ImageCompose.Gradient_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.ImageCompose.GridTexture_v2",
          "content": "",
          "attachmentFiles": [
              "att_grid.frag"
          ],
          "summary": "Creates a grid texture",
          "id": "4e3c7990-9434-4f41-ad79-dfed8395c460",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "render"
                  },
                  {
                      "type": 0,
                      "name": "Blend Mode index",
                      "group": "Blending",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Alpha Mask index",
                      "group": "Blending",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Amount",
                      "group": "Blending",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Line thickness X",
                      "group": "LineThickness",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Line thickness Y",
                      "group": "LineThickness",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Cells X",
                      "group": "Cells",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Cells Y",
                      "group": "Cells",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Rotate",
                      "group": "Position",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Offset X",
                      "group": "Position",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Offset Y",
                      "group": "Position",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Invert color",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Line red",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Line green",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Line Blue",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "trigger"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "render",
                      "text": "Trigger in"
                  },
                  {
                      "name": "Blend Mode",
                      "text": "Blend mode to apply"
                  },
                  {
                      "name": "Amount",
                      "text": "Amount of blend to apply"
                  },
                  {
                      "name": "Line thickness X",
                      "text": "Thickness of line on the X axis"
                  },
                  {
                      "name": "Line thickness Y",
                      "text": "Thickness of line on the Y axis"
                  },
                  {
                      "name": "Cells X",
                      "text": "Amount of cells on the X axis"
                  },
                  {
                      "name": "Cells Y",
                      "text": "Amount of cells on the Y axis"
                  },
                  {
                      "name": "Rotate",
                      "text": "Rotate the grid"
                  },
                  {
                      "name": "Offset X",
                      "text": "Offset on the X axis"
                  },
                  {
                      "name": "Offset Y",
                      "text": "Offset on the Y axis"
                  },
                  {
                      "name": "Invert color",
                      "text": "Inverts color of grid"
                  },
                  {
                      "name": "Line red",
                      "text": "Red amount of color"
                  },
                  {
                      "name": "Line green",
                      "text": "Green amount of color"
                  },
                  {
                      "name": "Line Blue",
                      "text": "Blue amount of color"
                  },
                  {
                      "name": "trigger",
                      "text": "Trigger out"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1650880698269,
          "exampleProjectId": "pG_qUH",
          "shortName": "GridTexture_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.ImageCompose",
          "shortNameDisplay": "GridTexture",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.ImageCompose.GridTexture",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Gl.ImageCompose.GridTexture_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.ImageCompose.GrowPixels_v2",
          "content": "",
          "attachmentFiles": [
              "att_outline.frag"
          ],
          "summary": "Make one pixel lines thicker via postprocessing",
          "id": "f81a7074-7a97-4d1e-bcb8-98f5874a64fc",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Render"
                  },
                  {
                      "type": 0,
                      "name": "Blend Mode index",
                      "group": "Blending",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Amount",
                      "group": "Blending",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "strength",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "iterations",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "r",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "g",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "b",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Trigger"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1650967611788,
          "exampleProjectId": "3WSXCU",
          "shortName": "GrowPixels_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.ImageCompose",
          "shortNameDisplay": "GrowPixels",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.ImageCompose.GrowPixels",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Gl.ImageCompose.GrowPixels_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "allowEdit": false,
          "usedInProject": true
      },
      {
          "name": "Ops.Gl.ImageCompose.Hue",
          "content": "",
          "attachmentFiles": [
              "att_hue.frag"
          ],
          "summary": "Adjust Hue of current ImageCompose",
          "id": "94ef0da0-c920-415c-81b0-fecbd437991d",
          "layout": {
              "portsIn": [
                  {
                      "type": "1",
                      "name": "render"
                  },
                  {
                      "type": "0",
                      "name": "hue",
                      "subType": "number"
                  },
                  {
                      "type": "2",
                      "name": "Mask",
                      "objType": "texture"
                  },
                  {
                      "type": "2",
                      "name": "Offset",
                      "objType": "texture"
                  }
              ],
              "portsOut": [
                  {
                      "type": "1",
                      "name": "trigger"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "Mask",
                      "text": "Mask texture for the Offset texture"
                  },
                  {
                      "name": "Offset",
                      "text": "Control Hue  setting with a texture"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1510738260027,
          "exampleProjectId": "kubmT6",
          "todos": [
              {
                  "message": "Add Amount Slider and Mask Texture Input",
                  "author": "bagoof",
                  "id": "182b59f6-02e6-4b3e-8301-843faa57c6d0",
                  "date": 1560196212801,
                  "deleted": true,
                  "deletedBy": "stephan",
                  "deletedDate": 1665135629951
              }
          ],
          "shortName": "Hue",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.ImageCompose",
          "shortNameDisplay": "Hue",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.ImageCompose.Hue",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false,
          "usedInProject": true
      },
      {
          "name": "Ops.Gl.ImageCompose.ImageComposeAspectRatio",
          "content": "",
          "attachmentFiles": [],
          "summary": "Adjust aspect ratio of an image compose branch",
          "id": "b346b8cf-b63d-4e1d-b95f-19edf04ae07d",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Update"
                  },
                  {
                      "type": 0,
                      "name": "Aspect",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1650359387094,
          "exampleProjectId": "iwX7v4",
          "shortName": "ImageComposeAspectRatio",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.ImageCompose",
          "shortNameDisplay": "ImageComposeAspectRatio",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.ImageCompose.ImageComposeAspectRatio",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.ImageCompose.ImageComposeSnapshot",
          "content": "<p>trigger this op to grab the state of an imagecompose, depending on where this op is placed in an imagecompose stack. This op can give you live output of your changes, or be triggered on demand by patching something like a GateTrigger.</p>\n",
          "attachmentFiles": [],
          "summary": "capture the current state of an imageCompose branch by copying the texture",
          "id": "e15c0803-02bb-4783-9d75-e75abd70d910",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Update"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "trigger"
                  },
                  {
                      "type": 2,
                      "name": "Texture",
                      "objType": "texture"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1643884097104,
          "exampleProjectId": "Dc1a-W",
          "coreLibs": [
              "cgl_copytexture"
          ],
          "shortName": "ImageComposeSnapshot",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.ImageCompose",
          "shortNameDisplay": "ImageComposeSnapshot",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.ImageCompose.ImageComposeSnapshot",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.ImageCompose.ImageCompose_v4",
          "content": "",
          "attachmentFiles": [
              "att_imgcomp.frag"
          ],
          "summary": "Compose Images and effects as layers to generate new Images",
          "id": "17212e2b-d692-464c-8f8d-2d511dd3410a",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Render"
                  },
                  {
                      "type": 2,
                      "name": "Base Texture",
                      "objType": "texture"
                  },
                  {
                      "type": 2,
                      "name": "UV Texture",
                      "objType": "texture"
                  },
                  {
                      "type": 0,
                      "name": "Size index",
                      "values": [
                          "Auto",
                          "Canvas",
                          "Manual"
                      ],
                      "group": "Texture Size",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Width",
                      "group": "Texture Size",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Height",
                      "group": "Texture Size",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Filter index",
                      "values": [
                          "nearest",
                          "linear",
                          "mipmap"
                      ],
                      "group": "Texture Parameters",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Wrap index",
                      "group": "Texture Parameters",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Anisotropic index",
                      "values": [
                          "0",
                          "1",
                          "2",
                          "4",
                          "8",
                          "16"
                      ],
                      "group": "Texture Parameters",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Pixel Format index",
                      "group": "Texture Parameters",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Clear",
                      "group": "Color",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "R",
                      "group": "Color",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "G",
                      "group": "Color",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "B",
                      "group": "Color",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "A",
                      "group": "Color",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  },
                  {
                      "type": 2,
                      "name": "texture_out",
                      "objType": "texture"
                  },
                  {
                      "type": 0,
                      "name": "Aspect Ratio",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Texture Width",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Texture Height",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [
              "ZZKdaQw1bMo"
          ],
          "created": 1687517505866,
          "exampleProjectId": "dNv2r1",
          "credits": [
              {
                  "title": "Photoshop math GLSL shaders",
                  "author": "Romain Dura",
                  "url": "https://mouaif.wordpress.com/2009/01/05/photoshop-math-with-glsl-shaders/",
                  "licence": "Public Domain"
              }
          ],
          "coreLibs": [
              "cgl_copytexture"
          ],
          "shortName": "ImageCompose_v4",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.ImageCompose",
          "shortNameDisplay": "ImageCompose",
          "version": 4,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.ImageCompose.ImageCompose",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Gl.ImageCompose.ImageCompose_v2",
                  "versionString": "_v2",
                  "version": 2
              },
              {
                  "name": "Ops.Gl.ImageCompose.ImageCompose_v3",
                  "versionString": "_v3",
                  "version": 3
              },
              {
                  "name": "Ops.Gl.ImageCompose.ImageCompose_v4",
                  "versionString": "_v4",
                  "version": 4
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.ImageCompose.Interlace",
          "content": "",
          "attachmentFiles": [
              "att_interlace.frag"
          ],
          "summary": "Tv scanlines effect",
          "id": "3cd69d5b-6c05-4522-9551-52458f99421a",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "render"
                  },
                  {
                      "type": 0,
                      "name": "amount",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Lumi Scale",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "X or Y",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Line Size",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Displacement",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Add",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "scroll",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "trigger"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1510252271241,
          "exampleProjectId": "MCpnT6",
          "shortName": "Interlace",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.ImageCompose",
          "shortNameDisplay": "Interlace",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.ImageCompose.Interlace",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false,
          "usedInProject": true
      },
      {
          "name": "Ops.Gl.ImageCompose.Invert_v2",
          "content": "",
          "attachmentFiles": [
              "att_invert.frag"
          ],
          "summary": "Invert image colors",
          "id": "56e8c95b-da89-423b-9d31-23351c263bb6",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "render"
                  },
                  {
                      "type": 0,
                      "name": "Blend Mode index",
                      "group": "Blending",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Amount",
                      "group": "Blending",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Mask Invert",
                      "subType": "boolean"
                  },
                  {
                      "type": 2,
                      "name": "Mask",
                      "objType": "texture"
                  },
                  {
                      "type": 0,
                      "name": "Invert R",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Invert G",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Invert B",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "trigger"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1650548755477,
          "exampleProjectId": "Ld3nT6",
          "shortName": "Invert_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.ImageCompose",
          "shortNameDisplay": "Invert",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.ImageCompose.Invert",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Gl.ImageCompose.Invert_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.ImageCompose.Kaleidoscope_v2",
          "content": "",
          "attachmentFiles": [
              "att_kaleidoscope.frag"
          ],
          "summary": "Kaleidoscope effect",
          "id": "3c900fc2-8508-4531-a365-43224f7751c8",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Render"
                  },
                  {
                      "type": 0,
                      "name": "Blend Mode index",
                      "group": "Blending",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Amount",
                      "group": "Blending",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Sides",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Angle",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Slide X",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Slide Y",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Center X",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Center Y",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Aspect Ratio",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1650886093127,
          "exampleProjectId": "n4DaW6",
          "shortName": "Kaleidoscope_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.ImageCompose",
          "shortNameDisplay": "Kaleidoscope",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.ImageCompose.Kaleidoscope",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Gl.ImageCompose.Kaleidoscope_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "allowEdit": false,
          "usedInProject": true
      },
      {
          "name": "Ops.Gl.ImageCompose.LUTMap",
          "content": "<p>see this post: <a href=\"http://liovch.blogspot.de/2012/07/add-instagram-like-effects-to-your-ios.html\">http://liovch.blogspot.de/2012/07/add-instagram-like-effects-to-your-ios.html</a></p>\n<p>use this image to apply your filters on: <a href=\"http://cables.gl/assets/library/lut/neutral-lut.png\">http://cables.gl/assets/library/lut/neutral-lut.png</a></p>\n<p>be sure to set the wrapping of the input texture to <code>clamp to edge</code></p>\n",
          "attachmentFiles": [
              "att_lut.frag"
          ],
          "summary": "apply color filter/effects by using a lookup texture",
          "id": "baba13d7-1cc2-4ba8-b66d-05425b0e5a75",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "render"
                  },
                  {
                      "type": 2,
                      "name": "LUT Image",
                      "objType": "texture"
                  },
                  {
                      "type": 0,
                      "name": "Amount",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "trigger"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1520350570285,
          "exampleProjectId": "2_nZX7",
          "credits": [
              {
                  "title": "LUT Shader",
                  "author": "Brad Larson ",
                  "url": "https://github.com/liovch/GPUImage",
                  "licence": "BSD 3-Clause",
                  "licenceText": "Copyright (c) 2012, Brad Larson, Ben Cochran, Hugues Lismonde, Keitaroh Kobayashi, Alaric Cole, Matthew Clark, Jacob Gundersen, Chris Williams.\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n\nRedistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\nRedistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\nNeither the name of the GPUImage framework nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
              }
          ],
          "shortName": "LUTMap",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.ImageCompose",
          "shortNameDisplay": "LUTMap",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.ImageCompose.LUTMap",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false,
          "usedInProject": true
      },
      {
          "name": "Ops.Gl.ImageCompose.LensDirt_v2",
          "content": "",
          "attachmentFiles": [
              "att_lensDirt.frag"
          ],
          "summary": "Creates a lens dirt like texture",
          "id": "a04156f6-f636-430f-810e-9cb27199ceeb",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "render"
                  },
                  {
                      "type": 0,
                      "name": "Blend Mode index",
                      "group": "Blending",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Amount",
                      "group": "Blending",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Alpha Mask index",
                      "group": "Blending",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Offset X",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Offset Y",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Zoom",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Iterations",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Seed",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Spot edge",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Gamma",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "trigger"
                  }
              ]
          },
          "authorName": "andro",
          "docs": {
              "ports": [
                  {
                      "name": "render",
                      "text": "Trigger the op"
                  },
                  {
                      "name": "Blend Mode",
                      "text": "Blend mode"
                  },
                  {
                      "name": "Amount",
                      "text": "amount of blending"
                  },
                  {
                      "name": "Offset X",
                      "text": "offset X axis"
                  },
                  {
                      "name": "Offset Y",
                      "text": "offset Y axis"
                  },
                  {
                      "name": "Zoom",
                      "text": "Zoom factor"
                  },
                  {
                      "name": "Iterations",
                      "text": "Iteration count. Max 300"
                  },
                  {
                      "name": "Seed",
                      "text": "Random number seed"
                  },
                  {
                      "name": "Spot edge",
                      "text": "defines softness and hardness on most shapes"
                  },
                  {
                      "name": "Gamma",
                      "text": "Gamma blending factor. Default 1."
                  },
                  {
                      "name": "trigger",
                      "text": "Trigger out"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1651742759264,
          "exampleProjectId": "vwgWMX",
          "shortName": "LensDirt_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.ImageCompose",
          "shortNameDisplay": "LensDirt",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.ImageCompose.LensDirt",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Gl.ImageCompose.LensDirt_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.ImageCompose.LensScratches_v2",
          "content": "<p>A big thank you to Tropical Trevor for allowing us to use the code. \nOriginal shader : <a href=\"https://www.shadertoy.com/view/4syXRD\">https://www.shadertoy.com/view/4syXRD</a></p>\n",
          "attachmentFiles": [
              "att_lensScratches.frag"
          ],
          "summary": "Creates a procedural texture simulating scratches on a lens",
          "id": "12661ef7-8d41-4c10-8ada-0b00be6498c0",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "render"
                  },
                  {
                      "type": 0,
                      "name": "Blend Mode index",
                      "group": "Blending",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Amount",
                      "group": "Blending",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Alpha Mask index",
                      "group": "Blending",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Offset X",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Offset Y",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Wavyness",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "scale",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Layers",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "AA iterations",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Frequency",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Frequency step size",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "trigger"
                  }
              ]
          },
          "authorName": "andro",
          "docs": {
              "ports": [
                  {
                      "name": "render",
                      "text": "Trigger in"
                  },
                  {
                      "name": "Blend Mode",
                      "text": "Blend mode"
                  },
                  {
                      "name": "Amount",
                      "text": "Blending amount"
                  },
                  {
                      "name": "Offset X",
                      "text": "offset X "
                  },
                  {
                      "name": "Offset Y",
                      "text": "offset Y "
                  },
                  {
                      "name": "Wavyness",
                      "text": "adds curves to lines"
                  },
                  {
                      "name": "scale",
                      "text": "Scale of scracthes"
                  },
                  {
                      "name": "Layers",
                      "text": "Iterations of layers to draw"
                  },
                  {
                      "name": "AA iterations",
                      "text": "1 is default (no AA) 4 is a good number. Can be expensive"
                  },
                  {
                      "name": "Frequency",
                      "text": "Frequency of lines"
                  },
                  {
                      "name": "Frequency step size",
                      "text": "Step size between frequency of lines"
                  },
                  {
                      "name": "trigger",
                      "text": "Trigger out"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1651742936639,
          "exampleProjectId": "ucr5NX",
          "shortName": "LensScratches_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.ImageCompose",
          "shortNameDisplay": "LensScratches",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.ImageCompose.LensScratches",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Gl.ImageCompose.LensScratches_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.ImageCompose.Levels_v2",
          "content": "",
          "attachmentFiles": [
              "att_levels.frag"
          ],
          "summary": "adjust levels to correct the tonal range of an image ",
          "id": "cf49063c-a010-4e2b-add6-f8dea50392b5",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Render"
                  },
                  {
                      "type": 0,
                      "name": "In Min",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Midpoint",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "In Max",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Out Min",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Out Max",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1650881312915,
          "exampleProjectId": "F8M9W6",
          "shortName": "Levels_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.ImageCompose",
          "shortNameDisplay": "Levels",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.ImageCompose.Levels",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Gl.ImageCompose.Levels_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.ImageCompose.LumaKey_v3",
          "content": "",
          "attachmentFiles": [
              "att_lumakeyV2.frag"
          ],
          "summary": "Remove darkest or brightest parts of the image",
          "id": "3305b74b-d48a-4671-b456-fd9a64e8d0f3",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "render"
                  },
                  {
                      "type": 0,
                      "name": "Invert",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Black White",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Remove Alpha",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Remap",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Threshold low ",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Threshold high",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "trigger"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "render",
                      "text": "trigger the op"
                  },
                  {
                      "name": "Invert",
                      "text": "Invert output"
                  },
                  {
                      "name": "Black White",
                      "text": "if within threshold pixel is white else black"
                  },
                  {
                      "name": "Threshold low ",
                      "text": "Low threshold"
                  },
                  {
                      "name": "Threshold high",
                      "text": "High threshold"
                  },
                  {
                      "name": "trigger",
                      "text": "Trigger out"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1702920093206,
          "exampleProjectId": "ukO5qe",
          "shortName": "LumaKey_v3",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.ImageCompose",
          "shortNameDisplay": "LumaKey",
          "version": 3,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.ImageCompose.LumaKey",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Gl.ImageCompose.LumaKey_v2",
                  "versionString": "_v2",
                  "version": 2
              },
              {
                  "name": "Ops.Gl.ImageCompose.LumaKey_v3",
                  "versionString": "_v3",
                  "version": 3
              }
          ],
          "allowEdit": false,
          "usedInProject": true
      },
      {
          "name": "Ops.Gl.ImageCompose.Math.ColorMapRange",
          "content": "",
          "attachmentFiles": [
              "att_maprange.frag"
          ],
          "summary": "Map the range of color number values to another",
          "id": "a1452720-dc08-4195-983b-7949aac33055",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "render"
                  },
                  {
                      "type": 0,
                      "name": "Old Min",
                      "group": "Input Range",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Old Max",
                      "group": "Input Range",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "New Min",
                      "group": "Output Range",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "New Max",
                      "group": "Output Range",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Clamp",
                      "group": "Output Range",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "R",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "G",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "B",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "A",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "trigger"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1652079766270,
          "exampleProjectId": "TgoiV6",
          "shortName": "ColorMapRange",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.ImageCompose.Math",
          "shortNameDisplay": "ColorMapRange",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.ImageCompose.Math.ColorMapRange",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false,
          "namespaceTitle": "Ops.Gl.ImageCompose.Math",
          "namespaceSummary": "WebGl Ops"
      },
      {
          "name": "Ops.Gl.ImageCompose.Math.Normalize",
          "content": "",
          "attachmentFiles": [
              "att_rgbmul.frag"
          ],
          "summary": "normalize texture rgb values",
          "id": "0512c0c9-0273-4612-a29b-fffd8ccd863c",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Render"
                  },
                  {
                      "type": 0,
                      "name": "Fade",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Size",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "trigger"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1674127973847,
          "exampleProjectId": "7c4jW2",
          "shortName": "Normalize",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.ImageCompose.Math",
          "shortNameDisplay": "Normalize",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.ImageCompose.Math.Normalize",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.ImageCompose.Math.RgbMath",
          "content": "<p>This OP enables you to use precise values to modify the pixels in your texture.\nFor example adjusting texture values that are modifying your geometry or array values, or even your post processing compositions.</p>\n",
          "attachmentFiles": [
              "att_rgbmul.frag"
          ],
          "summary": "apply simple mathematical functions on pixels color values",
          "id": "dc858e71-1f12-4de5-89f5-67fb41ebfa39",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Render"
                  },
                  {
                      "type": 0,
                      "name": "Operation index",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "R Active",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "G Active",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "B Active",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "A Active",
                      "subType": "boolean"
                  },
                  {
                      "type": 2,
                      "name": "Texture",
                      "objType": "texture"
                  },
                  {
                      "type": 0,
                      "name": "r",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "g",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "b",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "a",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Multiply Texture",
                      "subType": "number"
                  },
                  {
                      "type": 2,
                      "name": "Mask",
                      "objType": "texture"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "trigger"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "Operation index",
                      "text": "c-x: subtraction x from color value, x-c: subtract color value from x value, c*x: multiply color value by x, x/c: divide x value by color value, c/x: divide color value by x value, c%x: modulo operation on color value by modulus x of which the remainder is the result for your selected color channel"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1620994204234,
          "exampleProjectId": "H3cEpX",
          "shortName": "RgbMath",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.ImageCompose.Math",
          "shortNameDisplay": "RgbMath",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.ImageCompose.Math.RgbMath",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false,
          "usedInProject": true
      },
      {
          "name": "Ops.Gl.ImageCompose.Math.RgbMathExpression",
          "content": "<h3>Variables</h3>\n<p>output: <code>r</code>,<code>g</code>,<code>b</code> - this will be the resulting color value</p>\n<p>input floats: <code>x</code>,<code>y</code>,<code>z</code>,<code>w</code> uniform values you can connect to other operators.</p>\n<p>input textures: <code>texA</code>,<code>texB</code> - can be connected to textures. those are automatically read and are of type vec4</p>\n",
          "attachmentFiles": [],
          "summary": "Execute a glsl code math expression in a image compose ",
          "id": "ffce294c-be45-493b-96cb-05ce35af3588",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Render"
                  },
                  {
                      "type": 5,
                      "name": "R ="
                  },
                  {
                      "type": 5,
                      "name": "G ="
                  },
                  {
                      "type": 5,
                      "name": "B ="
                  },
                  {
                      "type": 5,
                      "name": "A ="
                  },
                  {
                      "type": 1,
                      "name": "Update Shader"
                  },
                  {
                      "type": 0,
                      "name": "x",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "y",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "z",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "w",
                      "subType": "number"
                  },
                  {
                      "type": 2,
                      "name": "texA",
                      "objType": "texture"
                  },
                  {
                      "type": 2,
                      "name": "texB",
                      "objType": "texture"
                  },
                  {
                      "type": 2,
                      "name": "texC",
                      "objType": "texture"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "trigger"
                  },
                  {
                      "type": 5,
                      "name": "code"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1678981059161,
          "exampleProjectId": "tG4xFs",
          "shortName": "RgbMathExpression",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.ImageCompose.Math",
          "shortNameDisplay": "RgbMathExpression",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.ImageCompose.Math.RgbMathExpression",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.ImageCompose.Math.RgbTransform",
          "content": "",
          "attachmentFiles": [
              "att_rgbmul.frag"
          ],
          "summary": "transform RGB values interpreted as XYZ coordinates",
          "id": "0a069281-e7a1-43a4-a74a-101026df6a29",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Render"
                  },
                  {
                      "type": 0,
                      "name": "Translate",
                      "group": "Position",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Pos X",
                      "group": "Position",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Pos Y",
                      "group": "Position",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Pos Z",
                      "group": "Position",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Scale",
                      "group": "Scale",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Scale X",
                      "group": "Scale",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Scale Y",
                      "group": "Scale",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Scale Z",
                      "group": "Scale",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Rotate",
                      "group": "Rotation",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Rotation X",
                      "group": "Rotation",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Rotation Y",
                      "group": "Rotation",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Rotation Z",
                      "group": "Rotation",
                      "subType": "number"
                  },
                  {
                      "type": 2,
                      "name": "Mask",
                      "objType": "texture"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "trigger"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1645190583290,
          "exampleProjectId": "UJvMbk",
          "shortName": "RgbTransform",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.ImageCompose.Math",
          "shortNameDisplay": "RgbTransform",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.ImageCompose.Math.RgbTransform",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false,
          "usedInProject": true
      },
      {
          "name": "Ops.Gl.ImageCompose.Math.RgbeToFloat32Texture",
          "content": "",
          "attachmentFiles": [
              "att_rgbe2fp.frag"
          ],
          "summary": "Convert a RGBE texture to HDR/floating point texture",
          "id": "1334b4a0-d684-42f3-ab49-ba5e826962b3",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "render"
                  },
                  {
                      "type": 0,
                      "name": "Blend Mode index",
                      "group": "Blending",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Amount",
                      "group": "Blending",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Mode index",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Min",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Max",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "trigger"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1642868505891,
          "exampleProjectId": "adsLpX",
          "coreLibs": [
              "cgl_copytexture"
          ],
          "shortName": "RgbeToFloat32Texture",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.ImageCompose.Math",
          "shortNameDisplay": "RgbeToFloat32Texture",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.ImageCompose.Math.RgbeToFloat32Texture",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.ImageCompose.Math.Round",
          "content": "",
          "attachmentFiles": [
              "att_snap.frag"
          ],
          "summary": "Round number values of texture color channels",
          "id": "8b6b50e1-8af9-4c4b-b454-e96883d1cf8f",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "render"
                  },
                  {
                      "type": 0,
                      "name": "Amount",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Multiplier",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "name index",
                      "values": [
                          "R",
                          "G",
                          "B",
                          "A",
                          "RGB"
                      ],
                      "subType": "integer"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "trigger"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1674725415449,
          "exampleProjectId": "",
          "shortName": "Round",
          "hasScreenshot": false,
          "namespace": "Ops.Gl.ImageCompose.Math",
          "shortNameDisplay": "Round",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.ImageCompose.Math.Round",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false,
          "usedInProject": true
      },
      {
          "name": "Ops.Gl.ImageCompose.Math.TexMathCompare",
          "content": "",
          "attachmentFiles": [
              "att_logic.frag"
          ],
          "summary": "compare and pass through of color channel values",
          "id": "b7689782-3f25-4713-b3fe-b92312a3f4bd",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Render"
                  },
                  {
                      "type": 0,
                      "name": "Comparison index",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Result index",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Number",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "R Active",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "G Active",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "B Active",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "A Active",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "trigger"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1675320365138,
          "exampleProjectId": "RjKQWp",
          "shortName": "TexMathCompare",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.ImageCompose.Math",
          "shortNameDisplay": "TexMathCompare",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.ImageCompose.Math.TexMathCompare",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.ImageCompose.Mirror",
          "content": "",
          "attachmentFiles": [
              "att_mirror.frag"
          ],
          "summary": "mirroring image effect",
          "id": "10d3c769-9a7f-4bd3-a849-7354d3e5f7f0",
          "layout": {
              "portsIn": [
                  {
                      "type": "1",
                      "name": "render"
                  },
                  {
                      "type": "0",
                      "name": "axis index",
                      "subType": "integer"
                  },
                  {
                      "type": "0",
                      "name": "width",
                      "subType": "number"
                  },
                  {
                      "type": "0",
                      "name": "offset",
                      "subType": "number"
                  },
                  {
                      "type": "0",
                      "name": "flip",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": "1",
                      "name": "trigger"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1510252944606,
          "exampleProjectId": "MVFoT6",
          "shortName": "Mirror",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.ImageCompose",
          "shortNameDisplay": "Mirror",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.ImageCompose.Mirror",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false,
          "usedInProject": true
      },
      {
          "name": "Ops.Gl.ImageCompose.Mix",
          "content": "<p>mix performs a linear interpolation between x and y using a to weight between them.</p>\n<p>this uses the standard glsl mix function.</p>\n",
          "attachmentFiles": [
              "att_mix.frag"
          ],
          "summary": "simple mix/fade of two input images ",
          "id": "dbd68d4d-60ff-427f-8a76-c931fb8bb59b",
          "layout": {
              "portsIn": [
                  {
                      "type": "1",
                      "name": "Render"
                  },
                  {
                      "type": "2",
                      "name": "Texture 1",
                      "objType": "texture"
                  },
                  {
                      "type": "0",
                      "name": "Fade",
                      "subType": "number"
                  },
                  {
                      "type": "2",
                      "name": "Texture 2",
                      "objType": "texture"
                  }
              ],
              "portsOut": [
                  {
                      "type": "1",
                      "name": "trigger"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1705930771662,
          "exampleProjectId": "CDaQK2",
          "shortName": "Mix",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.ImageCompose",
          "shortNameDisplay": "Mix",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.ImageCompose.Mix",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false,
          "usedInProject": true
      },
      {
          "name": "Ops.Gl.ImageCompose.MultiDrawImage",
          "content": "<p>this saves some time instead of having many drawimages, especially on hires displays </p>\n",
          "attachmentFiles": [
              "att_invert.frag"
          ],
          "summary": "draw multiple images at once",
          "id": "4df51ead-c46c-471d-ac5e-1872219a3174",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "render"
                  },
                  {
                      "type": 0,
                      "name": "Mask Invert",
                      "subType": "boolean"
                  },
                  {
                      "type": 2,
                      "name": "Texture 1",
                      "group": "Image 1",
                      "objType": "texture"
                  },
                  {
                      "type": 0,
                      "name": "Blendmode 1 index",
                      "group": "Image 1",
                      "subType": "integer"
                  },
                  {
                      "type": 2,
                      "name": "Mask 1",
                      "group": "Image 1",
                      "objType": "texture"
                  },
                  {
                      "type": 0,
                      "name": "Mask Source 1 index",
                      "group": "Image 1",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Opacity 1 index",
                      "group": "Image 1",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Amount 1",
                      "group": "Image 1",
                      "subType": "number"
                  },
                  {
                      "type": 2,
                      "name": "Texture 2",
                      "group": "Image 2",
                      "objType": "texture"
                  },
                  {
                      "type": 0,
                      "name": "Blendmode 2 index",
                      "group": "Image 2",
                      "subType": "integer"
                  },
                  {
                      "type": 2,
                      "name": "Mask 2",
                      "group": "Image 2",
                      "objType": "texture"
                  },
                  {
                      "type": 0,
                      "name": "Mask Source 2 index",
                      "group": "Image 2",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Opacity 2 index",
                      "group": "Image 2",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Amount 2",
                      "group": "Image 2",
                      "subType": "number"
                  },
                  {
                      "type": 2,
                      "name": "Texture 3",
                      "group": "Image 3",
                      "objType": "texture"
                  },
                  {
                      "type": 0,
                      "name": "Blendmode 3 index",
                      "group": "Image 3",
                      "subType": "integer"
                  },
                  {
                      "type": 2,
                      "name": "Mask 3",
                      "group": "Image 3",
                      "objType": "texture"
                  },
                  {
                      "type": 0,
                      "name": "Mask Source 3 index",
                      "group": "Image 3",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Opacity 3 index",
                      "group": "Image 3",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Amount 3",
                      "group": "Image 3",
                      "subType": "number"
                  },
                  {
                      "type": 2,
                      "name": "Texture 4",
                      "group": "Image 4",
                      "objType": "texture"
                  },
                  {
                      "type": 0,
                      "name": "Blendmode 4 index",
                      "group": "Image 4",
                      "subType": "integer"
                  },
                  {
                      "type": 2,
                      "name": "Mask 4",
                      "group": "Image 4",
                      "objType": "texture"
                  },
                  {
                      "type": 0,
                      "name": "Mask Source 4 index",
                      "group": "Image 4",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Opacity 4 index",
                      "group": "Image 4",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Amount 4",
                      "group": "Image 4",
                      "subType": "number"
                  },
                  {
                      "type": 2,
                      "name": "Texture 5",
                      "group": "Image 5",
                      "objType": "texture"
                  },
                  {
                      "type": 0,
                      "name": "Blendmode 5 index",
                      "group": "Image 5",
                      "subType": "integer"
                  },
                  {
                      "type": 2,
                      "name": "Mask 5",
                      "group": "Image 5",
                      "objType": "texture"
                  },
                  {
                      "type": 0,
                      "name": "Mask Source 5 index",
                      "group": "Image 5",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Opacity 5 index",
                      "group": "Image 5",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Amount 5",
                      "group": "Image 5",
                      "subType": "number"
                  },
                  {
                      "type": 2,
                      "name": "Texture 6",
                      "group": "Image 6",
                      "objType": "texture"
                  },
                  {
                      "type": 0,
                      "name": "Blendmode 6 index",
                      "group": "Image 6",
                      "subType": "integer"
                  },
                  {
                      "type": 2,
                      "name": "Mask 6",
                      "group": "Image 6",
                      "objType": "texture"
                  },
                  {
                      "type": 0,
                      "name": "Mask Source 6 index",
                      "group": "Image 6",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Opacity 6 index",
                      "group": "Image 6",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Amount 6",
                      "group": "Image 6",
                      "subType": "number"
                  },
                  {
                      "type": 2,
                      "name": "Texture 7",
                      "group": "Image 7",
                      "objType": "texture"
                  },
                  {
                      "type": 0,
                      "name": "Blendmode 7 index",
                      "group": "Image 7",
                      "subType": "integer"
                  },
                  {
                      "type": 2,
                      "name": "Mask 7",
                      "group": "Image 7",
                      "objType": "texture"
                  },
                  {
                      "type": 0,
                      "name": "Mask Source 7 index",
                      "group": "Image 7",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Opacity 7 index",
                      "group": "Image 7",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Amount 7",
                      "group": "Image 7",
                      "subType": "number"
                  },
                  {
                      "type": 2,
                      "name": "Texture 8",
                      "group": "Image 8",
                      "objType": "texture"
                  },
                  {
                      "type": 0,
                      "name": "Blendmode 8 index",
                      "group": "Image 8",
                      "subType": "integer"
                  },
                  {
                      "type": 2,
                      "name": "Mask 8",
                      "group": "Image 8",
                      "objType": "texture"
                  },
                  {
                      "type": 0,
                      "name": "Mask Source 8 index",
                      "group": "Image 8",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Opacity 8 index",
                      "group": "Image 8",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Amount 8",
                      "group": "Image 8",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "trigger"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1620223088189,
          "exampleProjectId": "dr8EeE",
          "shortName": "MultiDrawImage",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.ImageCompose",
          "shortNameDisplay": "MultiDrawImage",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.ImageCompose.MultiDrawImage",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.ImageCompose.Noise.CellularNoise_v2",
          "content": "<p>from: <a href=\"https://github.com/BrianSharpe/GPU-Noise-Lib/blob/master/gpu_noise_lib.glsl\">https://github.com/BrianSharpe/GPU-Noise-Lib/blob/master/gpu_noise_lib.glsl</a></p>\n",
          "attachmentFiles": [
              "att_cellularnoise3d.frag"
          ],
          "summary": "cellular noise",
          "id": "e0ce24fe-4ddb-4df4-a087-623cf4c711a7",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "render"
                  },
                  {
                      "type": 2,
                      "name": "Mask",
                      "objType": "texture"
                  },
                  {
                      "type": 0,
                      "name": "Blend Mode index",
                      "group": "Blending",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Alpha Mask index",
                      "group": "Blending",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Amount",
                      "group": "Blending",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "X",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Y",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Z",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Scale",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Harmonics index",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Tileable",
                      "subType": "boolean"
                  },
                  {
                      "type": 2,
                      "name": "Offset",
                      "group": "Offset Map",
                      "objType": "texture"
                  },
                  {
                      "type": 0,
                      "name": "Offset Multiply",
                      "group": "Offset Map",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Offset X index",
                      "group": "Offset Map",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Offset Y index",
                      "group": "Offset Map",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Offset Z index",
                      "group": "Offset Map",
                      "subType": "integer"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "trigger"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1650542058961,
          "exampleProjectId": "9DZmT6",
          "credits": [
              {
                  "title": "GPU-Noise-Lib",
                  "author": "Brian Sharpe",
                  "url": "https://github.com/BrianSharpe/GPU-Noise-Lib",
                  "licence": "Public Domain"
              }
          ],
          "shortName": "CellularNoise_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.ImageCompose.Noise",
          "shortNameDisplay": "CellularNoise",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.ImageCompose.Noise.CellularNoise",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Gl.ImageCompose.Noise.CellularNoise_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "usedInProject": true,
          "allowEdit": false,
          "namespaceTitle": "Ops.Gl.ImageCompose.Noise",
          "namespaceSummary": "WebGl Ops"
      },
      {
          "name": "Ops.Gl.ImageCompose.Noise.FBMNoise_v2",
          "content": "",
          "attachmentFiles": [
              "att_fbmnoise.frag"
          ],
          "summary": "fractional brownian motion noise ",
          "id": "9422eeab-b6c5-47d1-8737-d5c43dc137a3",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "render"
                  },
                  {
                      "type": 0,
                      "name": "Blend Mode index",
                      "group": "Blending",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Amount",
                      "group": "Blending",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Alpha Mask index",
                      "group": "Blending",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "r",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "g",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "b",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "scale",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "anim",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "scrollX",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "scrollY",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "repeat",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "aspect",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Layer 1",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Layer 2",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Layer 3",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Layer 4",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Tileable",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "trigger"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1651051381505,
          "exampleProjectId": "DmWmT6",
          "credits": [
              {
                  "title": "Domain Warping Shader",
                  "author": "inigo quilez",
                  "url": "http://iquilezles.org/www/articles/warp/warp.htm",
                  "licence": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported"
              }
          ],
          "shortName": "FBMNoise_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.ImageCompose.Noise",
          "shortNameDisplay": "FBMNoise",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.ImageCompose.Noise.FBMNoise",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Gl.ImageCompose.Noise.FBMNoise_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.ImageCompose.Noise.GaborNoise",
          "content": "",
          "attachmentFiles": [
              "att_noise.frag"
          ],
          "summary": "Render \"gabor noise\" into a texture",
          "id": "e5096f56-aa29-400e-803d-99b18237b104",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Render"
                  },
                  {
                      "type": 0,
                      "name": "Blend Mode index",
                      "group": "Blending",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Alpha Mask index",
                      "values": [
                          "Off",
                          "On"
                      ],
                      "group": "Blending",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Amount",
                      "group": "Blending",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Channels index",
                      "values": [
                          "R",
                          "G",
                          "B",
                          "RGB"
                      ],
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Phase",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Scale",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "X",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Y",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1724933669731,
          "exampleProjectId": "PWDdQm",
          "credits": [
              {
                  "title": "Gabor Noise",
                  "author": "inigo quilez",
                  "url": "https://www.shadertoy.com/view/clGyWm",
                  "licence": "MIT"
              }
          ],
          "shortName": "GaborNoise",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.ImageCompose.Noise",
          "shortNameDisplay": "GaborNoise",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.ImageCompose.Noise.GaborNoise",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false,
          "usedInProject": true
      },
      {
          "name": "Ops.Gl.ImageCompose.Noise.GlitchNoise_v2",
          "content": "",
          "attachmentFiles": [
              "att_glitchnoise.frag"
          ],
          "summary": "Creates a black and white glitched texture to use for displacement",
          "id": "87de572e-644a-4613-b0f3-68b9ec74f489",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "render"
                  },
                  {
                      "type": 0,
                      "name": "Amount",
                      "group": "Blending",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Blend Mode index",
                      "group": "Blending",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Alpha Mask index",
                      "group": "Blending",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Seed",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "frequency",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "strength",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Block size small x",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Block size small y",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Block size large x",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Block size large y",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Scroll X",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Scroll Y",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "trigger"
                  }
              ]
          },
          "authorName": "andro",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1651041440770,
          "exampleProjectId": "cknm0r",
          "shortName": "GlitchNoise_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.ImageCompose.Noise",
          "shortNameDisplay": "GlitchNoise",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.ImageCompose.Noise.GlitchNoise",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Gl.ImageCompose.Noise.GlitchNoise_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "allowEdit": false,
          "usedInProject": true
      },
      {
          "name": "Ops.Gl.ImageCompose.Noise.HexagonNoise_v2",
          "content": "",
          "attachmentFiles": [
              "att_hexnoise.frag"
          ],
          "summary": "Creates a hexagonal noise ",
          "id": "1c4def10-3574-4ef7-8abc-de28d2293095",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Render"
                  },
                  {
                      "type": 0,
                      "name": "Blend Mode index",
                      "group": "Blending",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Amount",
                      "group": "Blending",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Alpha Mask index",
                      "group": "Blending",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Loop",
                      "group": "Look",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "RGB",
                      "group": "Look",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Minimum value",
                      "group": "Look",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Maximum value",
                      "group": "Look",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Scale",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Orientation",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "X",
                      "group": "Position",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Y",
                      "group": "Position",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Z",
                      "group": "Position",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Seed",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  }
              ]
          },
          "authorName": "andro",
          "docs": {
              "ports": [
                  {
                      "name": "Render",
                      "text": "Trigger the op"
                  },
                  {
                      "name": "Blend Mode index",
                      "text": "pick a blend mode with an integer"
                  },
                  {
                      "name": "Amount",
                      "text": "amount of blending"
                  },
                  {
                      "name": "Loop",
                      "text": "loop noise so there's no jumps in color"
                  },
                  {
                      "name": "RGB",
                      "text": "Enable RGB noise"
                  },
                  {
                      "name": "Minimum value",
                      "text": "minimum value of every pixel"
                  },
                  {
                      "name": "Maximum value",
                      "text": "maximum value of every pixel"
                  },
                  {
                      "name": "Scale",
                      "text": "Scale noise "
                  },
                  {
                      "name": "Orientation",
                      "text": "flip orientation"
                  },
                  {
                      "name": "X",
                      "text": "Move on the x axis"
                  },
                  {
                      "name": "Y",
                      "text": "Move on the y axis"
                  },
                  {
                      "name": "Z",
                      "text": "Use to animate the noise "
                  },
                  {
                      "name": "Seed",
                      "text": "random seed number "
                  },
                  {
                      "name": "Next",
                      "text": "Trigger out"
                  }
              ]
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1651041664493,
          "exampleProjectId": "plbB53",
          "shortName": "HexagonNoise_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.ImageCompose.Noise",
          "shortNameDisplay": "HexagonNoise",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.ImageCompose.Noise.HexagonNoise",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Gl.ImageCompose.Noise.HexagonNoise_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.ImageCompose.Noise.LayerNoise_v3",
          "content": "",
          "attachmentFiles": [
              "att_layernoise.frag"
          ],
          "summary": "Multilayer perlin noise variation",
          "id": "dedc9aec-5978-4430-bd02-5d009fafaabf",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "render"
                  },
                  {
                      "type": 0,
                      "name": "Blend Mode index",
                      "group": "Blending",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Amount",
                      "group": "Blending",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Alpha Mask index",
                      "group": "Blending",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "mode index",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "RGBA",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "scale",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "layers",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "factor",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "exponent",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "scrollX",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "scrollY",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "scrollZ",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Tileable",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "trigger"
                  }
              ]
          },
          "authorName": "_LJ_",
          "docs": {
              "ports": [
                  {
                      "name": "render",
                      "text": "trigger input"
                  },
                  {
                      "name": "Blend Mode",
                      "text": "choose blend mode"
                  },
                  {
                      "name": "Amount",
                      "text": "blend amount"
                  },
                  {
                      "name": "mode",
                      "text": "choose between 3 different noise modes: exponential, logarithmic, linear"
                  },
                  {
                      "name": "RGBA",
                      "text": "check to get multi colored noise"
                  },
                  {
                      "name": "scale",
                      "text": "scale of the noise texture"
                  },
                  {
                      "name": "layers",
                      "text": "amount of noise layers"
                  },
                  {
                      "name": "factor",
                      "text": "luminance of the texture"
                  },
                  {
                      "name": "exponent",
                      "text": "noise exponent"
                  },
                  {
                      "name": "scrollX",
                      "text": "scroll noise in x direction"
                  },
                  {
                      "name": "scrollY",
                      "text": "scroll noise in y direction"
                  },
                  {
                      "name": "scrollZ",
                      "text": "noise animation"
                  },
                  {
                      "name": "Tileable",
                      "text": "check to get a symmetric, mandala-like noise"
                  },
                  {
                      "name": "trigger",
                      "text": "trigger output"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1602251426270,
          "exampleProjectId": "NSYy0t",
          "shortName": "LayerNoise_v3",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.ImageCompose.Noise",
          "shortNameDisplay": "LayerNoise",
          "version": 3,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.ImageCompose.Noise.LayerNoise",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Gl.ImageCompose.Noise.LayerNoise_v2",
                  "versionString": "_v2",
                  "version": 2
              },
              {
                  "name": "Ops.Gl.ImageCompose.Noise.LayerNoise_v3",
                  "versionString": "_v3",
                  "version": 3
              }
          ],
          "allowEdit": false,
          "usedInProject": true
      },
      {
          "name": "Ops.Gl.ImageCompose.Noise.Noise_v2",
          "content": "",
          "attachmentFiles": [
              "att_noise.frag"
          ],
          "summary": "White noise pixel effect",
          "id": "b1d9aacc-dc52-43a6-a00f-414f08768800",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Render"
                  },
                  {
                      "type": 0,
                      "name": "Blend Mode index",
                      "group": "Blending",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Alpha Mask index",
                      "values": [
                          "Off",
                          "On"
                      ],
                      "group": "Blending",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Amount",
                      "group": "Blending",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Threshold",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Animated",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "RGB",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Normalize",
                      "subType": "boolean"
                  },
                  {
                      "type": 2,
                      "name": "Multiply",
                      "objType": "texture"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "Blend Mode index",
                      "text": "index of blend mode in drop down"
                  },
                  {
                      "name": "Alpha Mask index",
                      "text": "use alpha channel of Image Compose"
                  },
                  {
                      "name": "Amount",
                      "text": "opacity of effect"
                  },
                  {
                      "name": "Animated",
                      "text": "randomize noise every frame/trigger"
                  },
                  {
                      "name": "RGB",
                      "text": "use colors"
                  },
                  {
                      "name": "Normalize",
                      "text": "offset values of colors into a -1.0 +1.0 range "
                  },
                  {
                      "name": "Multiply",
                      "text": "multiply values by input texture"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1650541473701,
          "exampleProjectId": "PdHmT6",
          "shortName": "Noise_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.ImageCompose.Noise",
          "shortNameDisplay": "Noise",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.ImageCompose.Noise.Noise",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Gl.ImageCompose.Noise.Noise_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.ImageCompose.Noise.PerlinNoise_v2",
          "content": "",
          "attachmentFiles": [
              "att_perlinnoise3d.frag"
          ],
          "summary": "Draw perlin noise into an image",
          "id": "b4b238d3-db68-4206-8dc7-4b52433fc932",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "render"
                  },
                  {
                      "type": 2,
                      "name": "Mask",
                      "objType": "texture"
                  },
                  {
                      "type": 0,
                      "name": "Blend Mode index",
                      "group": "Blending",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Alpha Mask index",
                      "group": "Blending",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Amount",
                      "group": "Blending",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Color index",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Scale",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Multiply",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Harmonics index",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "X",
                      "group": "Position",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Y",
                      "group": "Position",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Z",
                      "group": "Position",
                      "subType": "number"
                  },
                  {
                      "type": 2,
                      "name": "Offset",
                      "group": "Offset Map",
                      "objType": "texture"
                  },
                  {
                      "type": 0,
                      "name": "Offset Multiply",
                      "group": "Offset Map",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Offset X index",
                      "group": "Offset Map",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Offset Y index",
                      "group": "Offset Map",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Offset Z index",
                      "group": "Offset Map",
                      "subType": "integer"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "trigger"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1650439417750,
          "exampleProjectId": "zfzmT6",
          "credits": [
              {
                  "title": "GPU-Noise-Lib",
                  "author": "Brian Sharpe",
                  "url": "https://github.com/BrianSharpe/GPU-Noise-Lib",
                  "licence": "Public Domain"
              }
          ],
          "shortName": "PerlinNoise_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.ImageCompose.Noise",
          "shortNameDisplay": "PerlinNoise",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.ImageCompose.Noise.PerlinNoise",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Gl.ImageCompose.Noise.PerlinNoise_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.ImageCompose.Noise.PixelNoise_v3",
          "content": "",
          "attachmentFiles": [
              "att_pixelnoise2.frag"
          ],
          "summary": "Pixelated noise",
          "id": "01ad08b6-dea4-4765-984c-3885c9c6520f",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Render"
                  },
                  {
                      "type": 0,
                      "name": "Blend Mode index",
                      "group": "Blending",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Alpha Mask index",
                      "group": "Blending",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Amount",
                      "group": "Blending",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Loop",
                      "group": "Look",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "RGB",
                      "group": "Look",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Minimum value",
                      "group": "Look",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Maximum value",
                      "group": "Look",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Num X",
                      "group": "Scaling",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Num Y",
                      "group": "Scaling",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "X",
                      "group": "Position",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Y",
                      "group": "Position",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Z",
                      "group": "Position",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Seed",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Centered",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "Render",
                      "text": "Trigger in"
                  },
                  {
                      "name": "Blend Mode",
                      "text": "Blend mode to apply"
                  },
                  {
                      "name": "Amount",
                      "text": "Amount of blend mode to apply"
                  },
                  {
                      "name": "Loop",
                      "text": "If enabled the values loop and don't jump from 0-1"
                  },
                  {
                      "name": "RGB",
                      "text": "Enable for rgb noise"
                  },
                  {
                      "name": "Minimum value",
                      "text": "Minimum value the noise can reach"
                  },
                  {
                      "name": "Maximum value",
                      "text": "Maximum value the noise can reach"
                  },
                  {
                      "name": "Num X",
                      "text": "Number of cells on the x axis"
                  },
                  {
                      "name": "Num Y",
                      "text": "Number of cells on the y axis"
                  },
                  {
                      "name": "X",
                      "text": "Offsets on the x axis"
                  },
                  {
                      "name": "Y",
                      "text": "Offsets on the y axis"
                  },
                  {
                      "name": "Z",
                      "text": "Use this to animate the noise"
                  },
                  {
                      "name": "Next",
                      "text": "Trigger out"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1650543039389,
          "exampleProjectId": "pdjoOb",
          "shortName": "PixelNoise_v3",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.ImageCompose.Noise",
          "shortNameDisplay": "PixelNoise",
          "version": 3,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.ImageCompose.Noise.PixelNoise",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Gl.ImageCompose.Noise.PixelNoise_v2",
                  "versionString": "_v2",
                  "version": 2
              },
              {
                  "name": "Ops.Gl.ImageCompose.Noise.PixelNoise_v3",
                  "versionString": "_v3",
                  "version": 3
              }
          ],
          "allowEdit": false,
          "usedInProject": true
      },
      {
          "name": "Ops.Gl.ImageCompose.Noise.PolkaDotNoise_v2",
          "content": "",
          "attachmentFiles": [
              "att_polkadotnoise.frag"
          ],
          "summary": "noise circles",
          "id": "2f128bcc-0846-4565-89ad-eda22e41ca4f",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Render"
                  },
                  {
                      "type": 0,
                      "name": "Blend Mode index",
                      "group": "Blending",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Amount",
                      "group": "Blending",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Alpha Mask index",
                      "group": "Blending",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Square Look",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Threshold",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Radius Low",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Radius High",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Scale",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "X",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Y",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Z",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1651043838975,
          "exampleProjectId": "pKNTub",
          "shortName": "PolkaDotNoise_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.ImageCompose.Noise",
          "shortNameDisplay": "PolkaDotNoise",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.ImageCompose.Noise.PolkaDotNoise",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Gl.ImageCompose.Noise.PolkaDotNoise_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.ImageCompose.Noise.Shardnoise",
          "content": "",
          "attachmentFiles": [
              "att_noise.frag"
          ],
          "summary": "Render \"shard noise\" into a texture",
          "id": "b4ee2d01-4ec3-4152-827e-0ec9ddbb9ec2",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Render"
                  },
                  {
                      "type": 0,
                      "name": "Blend Mode index",
                      "group": "Blending",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Alpha Mask index",
                      "values": [
                          "Off",
                          "On"
                      ],
                      "group": "Blending",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Amount",
                      "group": "Blending",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "sharpness",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Scale",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Round",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Harmonics index",
                      "values": [
                          "1",
                          "2",
                          "3",
                          "4",
                          "5"
                      ],
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "X",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Y",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Z",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1724937693021,
          "exampleProjectId": "GSZtvs",
          "credits": [
              {
                  "title": "Gabor Noise",
                  "author": "inigo quilez",
                  "url": "https://www.shadertoy.com/view/clGyWm",
                  "licence": "MIT"
              },
              {
                  "title": "SHARD NOISE",
                  "author": "ENDESGA",
                  "url": "https://www.shadertoy.com/view/dlKyWw",
                  "licence": "MIT"
              }
          ],
          "shortName": "Shardnoise",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.ImageCompose.Noise",
          "shortNameDisplay": "Shardnoise",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.ImageCompose.Noise.Shardnoise",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false,
          "usedInProject": true
      },
      {
          "name": "Ops.Gl.ImageCompose.Noise.SimplexNoise_v2",
          "content": "<p>From: Brian Sharpe’s <a href=\"https://github.com/BrianSharpe/GPU-Noise-Lib/blob/master/gpu_noise_lib.glsl\">GPU-Noise-Lib</a></p>\n",
          "attachmentFiles": [
              "att_simplexnoise.frag"
          ],
          "summary": "simplex noise generator",
          "id": "0f4a8d04-89b0-437a-9da8-b4098772d250",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "render"
                  },
                  {
                      "type": 2,
                      "name": "Mask",
                      "objType": "texture"
                  },
                  {
                      "type": 0,
                      "name": "Blend Mode index",
                      "group": "Blending",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Amount",
                      "group": "Blending",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Alpha Mask index",
                      "group": "Blending",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "smoothness",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Harmonics index",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "scale",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "x",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "y",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "time",
                      "subType": "number"
                  },
                  {
                      "type": 2,
                      "name": "Offset",
                      "group": "Offset Map",
                      "objType": "texture"
                  },
                  {
                      "type": 0,
                      "name": "Offset Multiply",
                      "group": "Offset Map",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Offset X index",
                      "group": "Offset Map",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Offset Y index",
                      "group": "Offset Map",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Offset Z index",
                      "group": "Offset Map",
                      "subType": "integer"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "trigger"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1651041199899,
          "exampleProjectId": "c3vmUf",
          "credits": [
              {
                  "title": "GPU-Noise-Lib",
                  "author": "Brian Sharpe",
                  "url": "https://github.com/BrianSharpe/GPU-Noise-Lib",
                  "licence": "Public Domain"
              }
          ],
          "shortName": "SimplexNoise_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.ImageCompose.Noise",
          "shortNameDisplay": "SimplexNoise",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.ImageCompose.Noise.SimplexNoise",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Gl.ImageCompose.Noise.SimplexNoise_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.ImageCompose.Noise.TriangleNoise_v2",
          "content": "",
          "attachmentFiles": [
              "att_trianglenoise.frag"
          ],
          "summary": "noise made from triangles",
          "id": "9e634336-cb44-40ca-b06b-90063e4324a2",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Render"
                  },
                  {
                      "type": 0,
                      "name": "Blend Mode index",
                      "group": "Blending",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Amount",
                      "group": "Blending",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Alpha Mask index",
                      "group": "Blending",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "scale",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "angle",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Add",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1651044907345,
          "exampleProjectId": "wvkJyC",
          "shortName": "TriangleNoise_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.ImageCompose.Noise",
          "shortNameDisplay": "TriangleNoise",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.ImageCompose.Noise.TriangleNoise",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Gl.ImageCompose.Noise.TriangleNoise_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "allowEdit": false,
          "usedInProject": true
      },
      {
          "name": "Ops.Gl.ImageCompose.Noise.ValueNoise_v2",
          "content": "",
          "attachmentFiles": [
              "att_valuenoise3d.frag"
          ],
          "summary": "value noise",
          "id": "d2748c53-9ac1-4cd7-8176-66d3eb5d1bb6",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "render"
                  },
                  {
                      "type": 0,
                      "name": "Blend Mode index",
                      "group": "Blending",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Amount",
                      "group": "Blending",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Scale",
                      "group": "Look",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "X",
                      "group": "Position",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Y",
                      "group": "Position",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Z",
                      "group": "Position",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "trigger"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1651042831640,
          "exampleProjectId": "SgTmT6",
          "credits": [
              {
                  "title": "GPU-Noise-Lib",
                  "author": "Brian Sharpe",
                  "url": "https://github.com/BrianSharpe/GPU-Noise-Lib",
                  "licence": "Public Domain"
              }
          ],
          "shortName": "ValueNoise_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.ImageCompose.Noise",
          "shortNameDisplay": "ValueNoise",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.ImageCompose.Noise.ValueNoise",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Gl.ImageCompose.Noise.ValueNoise_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.ImageCompose.Noise.Voronoise_v2",
          "content": "<p>From <a href=\"https://thebookofshaders.com/12/\">The Book of Shaders</a></p>\n",
          "attachmentFiles": [
              "att_voronoise.frag"
          ],
          "summary": "Voronoi Noise function",
          "id": "0e68dbf4-dc3e-448d-b1e1-256dde99802a",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Render"
                  },
                  {
                      "type": 0,
                      "name": "Blend Mode index",
                      "group": "Blending",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Amount",
                      "group": "Blending",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Alpha Mask index",
                      "group": "Blending",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Time",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Movement",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Num",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "seed",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Fill index",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Draw Isolines",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Draw Distance",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Draw Center",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Trigger"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1651050941195,
          "exampleProjectId": "3zb6Us",
          "credits": [
              {
                  "title": "Voronoise Shader",
                  "author": "Patricio Gonzalez Vivo & Jen Lowe",
                  "url": "https://thebookofshaders.com/12/",
                  "licence": "Copyright 2015 Patricio Gonzalez Vivo"
              }
          ],
          "shortName": "Voronoise_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.ImageCompose.Noise",
          "shortNameDisplay": "Voronoise",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.ImageCompose.Noise.Voronoise",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Gl.ImageCompose.Noise.Voronoise_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "allowEdit": false,
          "usedInProject": true
      },
      {
          "name": "Ops.Gl.ImageCompose.Noise.WorleyNoise_v2",
          "content": "",
          "attachmentFiles": [
              "att_worleynoise.frag"
          ],
          "summary": "Worley noise",
          "id": "fc6fbe7c-4bf8-4fdc-bd37-95b9f50a5bf2",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "render"
                  },
                  {
                      "type": 0,
                      "name": "Blend Mode index",
                      "group": "Blending",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Alpha Mask index",
                      "group": "Blending",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Amount",
                      "group": "Blending",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "X",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Y",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Z",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Scale",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Harmonics index",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Invert",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "RangeA",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "RangeB",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Tileable",
                      "subType": "boolean"
                  },
                  {
                      "type": 2,
                      "name": "Amount Map",
                      "group": "Amount Map",
                      "objType": "texture"
                  },
                  {
                      "type": 0,
                      "name": "Source Strength Map index",
                      "group": "Amount Map",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Invert Strength Map",
                      "group": "Amount Map",
                      "subType": "boolean"
                  },
                  {
                      "type": 2,
                      "name": "Offset",
                      "group": "Offset Map",
                      "objType": "texture"
                  },
                  {
                      "type": 0,
                      "name": "Offset Multiply",
                      "group": "Offset Map",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Offset X index",
                      "group": "Offset Map",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Offset Y index",
                      "group": "Offset Map",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Offset Z index",
                      "group": "Offset Map",
                      "subType": "integer"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "trigger"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1650544734875,
          "exampleProjectId": "sivDJd",
          "credits": [
              {
                  "title": "Worley Noise",
                  "author": "Stefan Gustavson",
                  "url": "https://thebookofshaders.com/edit.php#12/2d-cnoise-2x2x2.frag",
                  "licence": "MIT"
              }
          ],
          "shortName": "WorleyNoise_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.ImageCompose.Noise",
          "shortNameDisplay": "WorleyNoise",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.ImageCompose.Noise.WorleyNoise",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Gl.ImageCompose.Noise.WorleyNoise_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "allowEdit": false,
          "usedInProject": true
      },
      {
          "name": "Ops.Gl.ImageCompose.OnePassBlur",
          "content": "",
          "attachmentFiles": [
              "att_blur.frag",
              "att_blur.vert"
          ],
          "summary": "Blurs a texture  ",
          "id": "79dd13e7-755d-4f17-bbbf-9bda70126974",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "render"
                  },
                  {
                      "type": 0,
                      "name": "Blend Mode index",
                      "group": "Blending",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Alpha Mask index",
                      "group": "Blending",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Amount",
                      "group": "Blending",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Radius",
                      "subType": "number"
                  },
                  {
                      "type": 2,
                      "name": "Mask",
                      "group": "Mask",
                      "objType": "texture"
                  },
                  {
                      "type": 0,
                      "name": "Mask Invert",
                      "group": "Mask",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "render",
                      "text": "Trigger in"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1693496692225,
          "exampleProjectId": "xHp9eG",
          "shortName": "OnePassBlur",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.ImageCompose",
          "shortNameDisplay": "OnePassBlur",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.ImageCompose.OnePassBlur",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.ImageCompose.PatternLookup",
          "content": "<p>This op can be used to map a pattern to the brightness values of your texture inside ImageCompose. Use the Width and Height adjustments to adjust the position of the elements of your texture.</p>\n",
          "attachmentFiles": [
              "att_patternlookup.frag"
          ],
          "summary": "map a pattern to value levels of your texture",
          "id": "f05f45fe-f3d2-4d99-b1b7-dfae7005382a",
          "layout": {
              "portsIn": [
                  {
                      "type": "1",
                      "name": "render"
                  },
                  {
                      "type": "2",
                      "name": "Multiplier"
                  },
                  {
                      "type": "0",
                      "name": "Blend Mode",
                      "group": "Blending",
                      "subType": "string"
                  },
                  {
                      "type": "0",
                      "name": "Amount",
                      "group": "Blending",
                      "subType": "number"
                  },
                  {
                      "type": "0",
                      "name": "Width",
                      "subType": "number"
                  },
                  {
                      "type": "0",
                      "name": "Height",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": "1",
                      "name": "trigger"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "render",
                      "text": "attach in ImageCompose"
                  },
                  {
                      "name": "Multiplier",
                      "text": "input texture to apply to your image"
                  },
                  {
                      "name": "Width",
                      "text": "width of grid pattern"
                  },
                  {
                      "name": "Height",
                      "text": "height of grid pattern"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1566732295899,
          "exampleProjectId": "lj31ZO",
          "shortName": "PatternLookup",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.ImageCompose",
          "shortNameDisplay": "PatternLookup",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.ImageCompose.PatternLookup",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.ImageCompose.PixelColor",
          "content": "",
          "attachmentFiles": [
              "att_pixelate.frag"
          ],
          "summary": "fill image with one color picked at a position",
          "id": "114e250c-f569-4963-a3b3-fcdce816406f",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "render"
                  },
                  {
                      "type": 2,
                      "name": "Source Texture",
                      "objType": "texture"
                  },
                  {
                      "type": 0,
                      "name": "Blend Mode index",
                      "group": "Blending",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Amount",
                      "group": "Blending",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Pos X",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Pos Y",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "trigger"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1667556326780,
          "exampleProjectId": "qbiIbk",
          "shortName": "PixelColor",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.ImageCompose",
          "shortNameDisplay": "PixelColor",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.ImageCompose.PixelColor",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false,
          "usedInProject": true
      },
      {
          "name": "Ops.Gl.ImageCompose.PixelDifference",
          "content": "",
          "attachmentFiles": [
              "att_slope.frag"
          ],
          "summary": "visualize the difference of neighbouring pixels (slope)",
          "id": "f4e53fd9-d4c3-4d0e-839a-78543c38b8db",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "render"
                  },
                  {
                      "type": 0,
                      "name": "Strength",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Step",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Red index",
                      "group": "Method",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Red Flip",
                      "group": "Method",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Green index",
                      "group": "Method",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Green Flip",
                      "group": "Method",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Blue index",
                      "group": "Method",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Blue Flip",
                      "group": "Method",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "trigger"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "Strength",
                      "text": "multiplier for colors in resulting texture reporting pixel difference"
                  },
                  {
                      "name": "Step",
                      "text": "range of pixel difference comparison"
                  },
                  {
                      "name": "Red index",
                      "text": "mode selection for the Red channel"
                  },
                  {
                      "name": "Green index",
                      "text": "mode selection for the Green channel"
                  },
                  {
                      "name": "Blue index",
                      "text": "mode selection for the Blue channel"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [
              "tGDDUyFIQPU"
          ],
          "created": 1633376809397,
          "exampleProjectId": "LEMBZ4",
          "shortName": "PixelDifference",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.ImageCompose",
          "shortNameDisplay": "PixelDifference",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.ImageCompose.PixelDifference",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false,
          "usedInProject": true
      },
      {
          "name": "Ops.Gl.ImageCompose.PixelDisplacement_v4",
          "content": "",
          "attachmentFiles": [
              "att_pixeldisplace3.frag"
          ],
          "summary": "Changes color lookup for every pixel using a displacement map",
          "id": "c00f79f2-0505-4b4f-b0bf-10ef7875dd87",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "render"
                  },
                  {
                      "type": 2,
                      "name": "displaceTex",
                      "objType": "texture"
                  },
                  {
                      "type": 0,
                      "name": "Blend Mode index",
                      "group": "Blending",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Amount",
                      "group": "Blending",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "amount X",
                      "group": "Axis Displacement Strength",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "amount Y",
                      "group": "Axis Displacement Strength",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Wrap index",
                      "values": [
                          "Mirror",
                          "Clamp",
                          "Repeat"
                      ],
                      "group": "Modes",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Input index",
                      "group": "Modes",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Zero Displace index",
                      "values": [
                          "Grey",
                          "Black"
                      ]
                  },
                  {
                      "type": 0,
                      "name": "Pixel Mapping index",
                      "values": [
                          "Stretch",
                          "Repeat"
                      ]
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "trigger"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1650887521718,
          "exampleProjectId": "Qxb9W6",
          "shortName": "PixelDisplacement_v4",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.ImageCompose",
          "shortNameDisplay": "PixelDisplacement",
          "version": 4,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.ImageCompose.PixelDisplacement_v2",
                  "versionString": "_v2",
                  "version": 2
              },
              {
                  "name": "Ops.Gl.ImageCompose.PixelDisplacement_v3",
                  "versionString": "_v3",
                  "version": 3
              },
              {
                  "name": "Ops.Gl.ImageCompose.PixelDisplacement_v4",
                  "versionString": "_v4",
                  "version": 4
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.ImageCompose.Pixelate_v2",
          "content": "",
          "attachmentFiles": [
              "att_pixelate.frag"
          ],
          "summary": "Pixelate an image",
          "id": "c06ae168-ff4f-4ae6-b4d0-06c3b24203bc",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "render"
                  },
                  {
                      "type": 2,
                      "name": "Multiplier",
                      "objType": "texture"
                  },
                  {
                      "type": 0,
                      "name": "Blend Mode index",
                      "group": "Blending",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Amount",
                      "group": "Blending",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "width",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "height",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "trigger"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1650525244554,
          "exampleProjectId": "1w_9W6",
          "shortName": "Pixelate_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.ImageCompose",
          "shortNameDisplay": "Pixelate",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.ImageCompose.Pixelate",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Gl.ImageCompose.Pixelate_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "allowEdit": false,
          "usedInProject": true
      },
      {
          "name": "Ops.Gl.ImageCompose.Plasma_v2",
          "content": "",
          "attachmentFiles": [
              "att_plasma.frag"
          ],
          "summary": "Renders a plasma effect",
          "id": "89b3bf34-a9a8-4dcf-a304-9dee597fcf48",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "render"
                  },
                  {
                      "type": 0,
                      "name": "Blend Mode index",
                      "group": "Blending",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Alpha Mask index",
                      "group": "Blending",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Amount",
                      "group": "Blending",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Width",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Height",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Aspect",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Mul",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "X",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Y",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Time",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Greyscale",
                      "subType": "boolean"
                  },
                  {
                      "type": 2,
                      "name": "Offset",
                      "group": "Offset Map",
                      "objType": "texture"
                  },
                  {
                      "type": 0,
                      "name": "Offset Multiply",
                      "group": "Offset Map",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Offset X index",
                      "group": "Offset Map",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Offset Y index",
                      "group": "Offset Map",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Offset Time index",
                      "group": "Offset Map",
                      "subType": "integer"
                  },
                  {
                      "type": 2,
                      "name": "Mask",
                      "objType": "texture"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "trigger"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1650605963072,
          "exampleProjectId": "dD6aW6",
          "shortName": "Plasma_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.ImageCompose",
          "shortNameDisplay": "Plasma",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.ImageCompose.Plasma",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Gl.ImageCompose.Plasma_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.ImageCompose.PolarCoords",
          "content": "",
          "attachmentFiles": [
              "att_polarcoords.frag"
          ],
          "summary": "display texture using polar/radial coordinate system",
          "id": "1555fefe-4eb4-4aed-84c0-ad54e0dae1c1",
          "layout": {
              "portsIn": [
                  {
                      "type": "1",
                      "name": "render"
                  },
                  {
                      "type": "0",
                      "name": "Radius Inner",
                      "subType": "number"
                  },
                  {
                      "type": "0",
                      "name": "Radius Outer",
                      "subType": "number"
                  },
                  {
                      "type": "0",
                      "name": "Crop",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": "1",
                      "name": "trigger"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1540921849064,
          "exampleProjectId": "cM2nB2",
          "shortName": "PolarCoords",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.ImageCompose",
          "shortNameDisplay": "PolarCoords",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.ImageCompose.PolarCoords",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false,
          "usedInProject": true
      },
      {
          "name": "Ops.Gl.ImageCompose.Posterize_v2",
          "content": "",
          "attachmentFiles": [
              "att_posterize.frag"
          ],
          "summary": "reduce number of colors",
          "id": "19703953-7984-4334-af72-0991425b4850",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Render"
                  },
                  {
                      "type": 0,
                      "name": "Blend Mode index",
                      "group": "Blending",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Amount",
                      "group": "Blending",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "levels",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Trigger"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1650883291438,
          "exampleProjectId": "_MMoT6",
          "shortName": "Posterize_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.ImageCompose",
          "shortNameDisplay": "Posterize",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.ImageCompose.Posterize",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Gl.ImageCompose.Posterize_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "allowEdit": false,
          "usedInProject": true
      },
      {
          "name": "Ops.Gl.ImageCompose.PseudoLensFlares",
          "content": "<p>This is a post-processing effect to simulate lense flares.</p>\n<p>Lense flares happen when stray light reflects on some elements of a lens.\nThis stray light can create light streaks, &quot;sunbursts&quot; or reduction in contrast and saturation.</p>\n<p>You can simulate this effect with this op.</p>\n",
          "attachmentFiles": [
              "att_lensflares.frag"
          ],
          "summary": "simulate lens flare effect",
          "id": "9e4a5694-ed59-4401-9f7b-123a627924c5",
          "layout": {
              "portsIn": [
                  {
                      "type": "1",
                      "name": "render"
                  },
                  {
                      "type": "0",
                      "name": "Ghosts",
                      "subType": "number"
                  },
                  {
                      "type": "0",
                      "name": "Num Ghosts",
                      "subType": "integer"
                  },
                  {
                      "type": "0",
                      "name": "Dispersal",
                      "subType": "number"
                  },
                  {
                      "type": "0",
                      "name": "Halo",
                      "subType": "number"
                  },
                  {
                      "type": "0",
                      "name": "Halo Width",
                      "subType": "number"
                  },
                  {
                      "type": "2",
                      "name": "Color Lookup"
                  }
              ],
              "portsOut": [
                  {
                      "type": "1",
                      "name": "trigger"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "render",
                      "text": "trigger input"
                  },
                  {
                      "name": "Ghosts",
                      "text": "intensity of rays from the middle"
                  },
                  {
                      "name": "Num Ghosts",
                      "text": "amount of rays"
                  },
                  {
                      "name": "Dispersal",
                      "text": "amount of rays in the middle & smear intensity"
                  },
                  {
                      "name": "Halo",
                      "text": "intensity of surrounding halo ring"
                  },
                  {
                      "name": "Halo Width",
                      "text": "width of surrounding halo ring"
                  },
                  {
                      "name": "Color Lookup",
                      "text": "color mask for color of light rays"
                  },
                  {
                      "name": "trigger",
                      "text": "trigger output"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1540724212659,
          "exampleProjectId": "P8heur",
          "shortName": "PseudoLensFlares",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.ImageCompose",
          "shortNameDisplay": "PseudoLensFlares",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.ImageCompose.PseudoLensFlares",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.ImageCompose.RGBOffset_v2",
          "content": "",
          "attachmentFiles": [
              "att_offsetrgb.frag"
          ],
          "summary": "Offsets the xy components of an RGB texture",
          "id": "41a9655a-6e05-47ee-82b9-f19a33a5cfd4",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Render"
                  },
                  {
                      "type": 0,
                      "name": "Blend Mode index",
                      "group": "Blending",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Amount",
                      "group": "Blending",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Red offset X",
                      "group": "Red",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Red offset Y",
                      "group": "Red",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Red amount",
                      "group": "Red",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Green offset X",
                      "group": "Green",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Green offset Y",
                      "group": "Green",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Green amount",
                      "group": "Green",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Blue offset X",
                      "group": "Blue",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Blue offset Y",
                      "group": "Blue",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Blue amount",
                      "group": "Blue",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "trigger"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "Render",
                      "text": "trigger"
                  },
                  {
                      "name": "Blend Mode index",
                      "text": "blend mode"
                  },
                  {
                      "name": "Blend Mode",
                      "text": "blend mode"
                  },
                  {
                      "name": "Amount",
                      "text": "amount for blend mode"
                  },
                  {
                      "name": "Red offset X",
                      "text": "offset red channel on x position"
                  },
                  {
                      "name": "Red offset Y",
                      "text": "offset red channel on y position"
                  },
                  {
                      "name": "Red amount",
                      "text": "amount of red (fade, hide, show)"
                  },
                  {
                      "name": "Green offset X",
                      "text": "offset green channel on x position"
                  },
                  {
                      "name": "Green offset Y",
                      "text": "offset green channel on y position"
                  },
                  {
                      "name": "Green amount",
                      "text": "amount of green (fade, hide, show)"
                  },
                  {
                      "name": "Blue offset X",
                      "text": "offset blue channel on x position"
                  },
                  {
                      "name": "Blue offset Y",
                      "text": "offset blue channel channel on y position"
                  },
                  {
                      "name": "Blue amount",
                      "text": "amount of blue (fade, hide, show)"
                  },
                  {
                      "name": "trigger",
                      "text": "trigger out"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1650966987036,
          "exampleProjectId": "pzC9rn",
          "shortName": "RGBOffset_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.ImageCompose",
          "shortNameDisplay": "RGBOffset",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.ImageCompose.RGBOffset",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Gl.ImageCompose.RGBOffset_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "allowEdit": false,
          "usedInProject": true
      },
      {
          "name": "Ops.Gl.ImageCompose.RandomNumberTexture",
          "content": "",
          "attachmentFiles": [
              "att_noise.frag"
          ],
          "summary": "Set random numbers into an imagecompose",
          "id": "42c8b058-bc9d-44c4-8139-1596907ac531",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Render"
                  },
                  {
                      "type": 0,
                      "name": "Blend Mode index",
                      "group": "Blending",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Alpha Mask index",
                      "values": [
                          "Off",
                          "On"
                      ],
                      "group": "Blending",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Amount",
                      "group": "Blending",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Seed",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Min R",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Max R",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Min G",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Max G",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Min B",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Max B",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Min A",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Max A",
                      "subType": "number"
                  },
                  {
                      "type": 2,
                      "name": "Multiply",
                      "objType": "texture"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "Blend Mode index",
                      "text": "index of blend mode in drop down"
                  },
                  {
                      "name": "Alpha Mask index",
                      "text": "use alpha channel of Image Compose"
                  },
                  {
                      "name": "Amount",
                      "text": "opacity of effect"
                  },
                  {
                      "name": "Multiply",
                      "text": "multiply values by input texture"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1695287848893,
          "exampleProjectId": "j_I1TG",
          "shortName": "RandomNumberTexture",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.ImageCompose",
          "shortNameDisplay": "RandomNumberTexture",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.ImageCompose.RandomNumberTexture",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.ImageCompose.RectangleTexture_v5",
          "content": "<p>draws a rectangle into a texture.\nthe rectangle can now positioned via multiple coordinate systems</p>\n",
          "attachmentFiles": [
              "att_rectangle.frag"
          ],
          "summary": "draws a 2d rectangle into a texture.",
          "id": "078d420b-a16c-4a0a-8add-89cb1b0af711",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "render"
                  },
                  {
                      "type": 0,
                      "name": "Amount",
                      "group": "Blending",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Blend Mode index",
                      "group": "Blending",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Alpha Mask index",
                      "values": [
                          "Off",
                          "On"
                      ],
                      "group": "Blending",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Coordinates index",
                      "values": [
                          "0-1",
                          "-1-1",
                          "Pixel"
                      ],
                      "group": "Position",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Center",
                      "group": "Position",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "X",
                      "group": "Position",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Y",
                      "group": "Position",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Inner",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Width",
                      "group": "Size",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Height",
                      "group": "Size",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Rotate",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "roundness",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "r",
                      "group": "Color",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "g",
                      "group": "Color",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "b",
                      "group": "Color",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "a",
                      "group": "Color",
                      "subType": "number"
                  },
                  {
                      "type": 2,
                      "name": "Map Texture",
                      "group": "Mapping",
                      "objType": "texture"
                  },
                  {
                      "type": 0,
                      "name": "Start X",
                      "group": "Mapping",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Start Y",
                      "group": "Mapping",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Map Width",
                      "group": "Mapping",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Map Height",
                      "group": "Mapping",
                      "subType": "number"
                  },
                  {
                      "type": 2,
                      "name": "Mask",
                      "objType": "texture"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "trigger"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "render",
                      "text": "Trigger in"
                  },
                  {
                      "name": "Amount",
                      "text": "Blend amount"
                  },
                  {
                      "name": "X",
                      "text": "The x position of the rectangle"
                  },
                  {
                      "name": "Y",
                      "text": "The y position of the rectangle"
                  },
                  {
                      "name": "Width",
                      "text": "Width of the rectangle"
                  },
                  {
                      "name": "Height",
                      "text": "Height of the rectangle"
                  },
                  {
                      "name": "Rotate",
                      "text": "Rotates the rectangle"
                  },
                  {
                      "name": "roundness",
                      "text": "Softens the 4 corners"
                  },
                  {
                      "name": "r",
                      "text": "Red amount"
                  },
                  {
                      "name": "g",
                      "text": "Green amount"
                  },
                  {
                      "name": "b",
                      "text": "Blue amount"
                  },
                  {
                      "name": "a",
                      "text": "Alpha amount"
                  },
                  {
                      "name": "trigger",
                      "text": "Trigger out"
                  }
              ]
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1709909144595,
          "exampleProjectId": "IPPT7i",
          "shortName": "RectangleTexture_v5",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.ImageCompose",
          "shortNameDisplay": "RectangleTexture",
          "version": 5,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.ImageCompose.RectangleTexture",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Gl.ImageCompose.RectangleTexture_v2",
                  "versionString": "_v2",
                  "version": 2
              },
              {
                  "name": "Ops.Gl.ImageCompose.RectangleTexture_v3",
                  "versionString": "_v3",
                  "version": 3
              },
              {
                  "name": "Ops.Gl.ImageCompose.RectangleTexture_v4",
                  "versionString": "_v4",
                  "version": 4
              },
              {
                  "name": "Ops.Gl.ImageCompose.RectangleTexture_v5",
                  "versionString": "_v5",
                  "version": 5
              }
          ],
          "allowEdit": false,
          "usedInProject": true
      },
      {
          "name": "Ops.Gl.ImageCompose.RemoveAlpha",
          "content": "",
          "attachmentFiles": [],
          "summary": "Remove alpha information from image",
          "id": "98875f07-5dfa-4dfa-921c-de317cdc357e",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "render"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "trigger"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1519837607041,
          "exampleProjectId": "",
          "shortName": "RemoveAlpha",
          "hasScreenshot": false,
          "namespace": "Ops.Gl.ImageCompose",
          "shortNameDisplay": "RemoveAlpha",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.ImageCompose.RemoveAlpha",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.ImageCompose.RepeatTexture_v2",
          "content": "",
          "attachmentFiles": [
              "att_repeat.frag"
          ],
          "summary": "Repeat Image",
          "id": "ff9aa796-d781-444c-a9d4-a62157f82dd5",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "render"
                  },
                  {
                      "type": 0,
                      "name": "Blend Mode index",
                      "group": "Blending",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Amount",
                      "group": "Blending",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "x",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "y",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Clear",
                      "subType": "boolean"
                  },
                  {
                      "type": 2,
                      "name": "Multiply",
                      "objType": "texture"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "trigger"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1650883045893,
          "exampleProjectId": "S6JnT6",
          "shortName": "RepeatTexture_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.ImageCompose",
          "shortNameDisplay": "RepeatTexture",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.ImageCompose.RepeatTexture",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Gl.ImageCompose.RepeatTexture_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "allowEdit": false,
          "usedInProject": true
      },
      {
          "name": "Ops.Gl.ImageCompose.RgbMultiply",
          "content": "",
          "attachmentFiles": [
              "att_rgbmul.frag"
          ],
          "summary": "multiply image colors by color channel",
          "id": "00f30153-f656-4701-9b93-244b033b2eaa",
          "layout": {
              "portsIn": [
                  {
                      "type": "1",
                      "name": "render"
                  },
                  {
                      "type": "0",
                      "name": "r",
                      "subType": "number"
                  },
                  {
                      "type": "0",
                      "name": "g",
                      "subType": "number"
                  },
                  {
                      "type": "0",
                      "name": "b",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": "1",
                      "name": "trigger"
                  }
              ]
          },
          "authorName": "pandur",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1540921975846,
          "exampleProjectId": "3l_8W6",
          "shortName": "RgbMultiply",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.ImageCompose",
          "shortNameDisplay": "RgbMultiply",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.ImageCompose.RgbMultiply",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.ImageCompose.RgbToHsvTexture",
          "content": "<p> can be used for example to find colorfull areas in an image</p>\n",
          "attachmentFiles": [
              "att_tonormal.frag"
          ],
          "summary": "Convert a RGB Texture to Hue/Saturation/Lightness values as RGB colors",
          "id": "147ed29e-f04e-4f7c-b9d7-133d7c6cbef9",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "render"
                  },
                  {
                      "type": 0,
                      "name": "Output RGB index",
                      "subType": "integer"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "trigger"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1647697092030,
          "exampleProjectId": "V7z4v4",
          "credits": [
              {
                  "title": "NormalMap Shader",
                  "author": "moka",
                  "url": "https://forum.openframeworks.cc/t/compute-normal-map-from-image/1400/11"
              }
          ],
          "todos": [
              {
                  "message": "Make texture size dynamic, right now fixed at 1024!",
                  "author": "simod",
                  "id": "20d29ae3-7a58-4ad2-9b24-4c7c2ba6f314",
                  "date": 1572519515040,
                  "deleted": true,
                  "deletedBy": "stephan",
                  "deletedDate": 1654245403986
              }
          ],
          "shortName": "RgbToHsvTexture",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.ImageCompose",
          "shortNameDisplay": "RgbToHsvTexture",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.ImageCompose.RgbToHsvTexture",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.ImageCompose.RotateTexture_v2",
          "content": "<p>When the edge is visible during rotating the texture, check the image compose op and tryout the different &quot;wrap&quot; modes.</p>\n",
          "attachmentFiles": [
              "att_rotate.frag"
          ],
          "summary": "Rotates a texture",
          "id": "20b8a2e6-2419-474b-98a4-71a5e3178631",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "render"
                  },
                  {
                      "type": 2,
                      "name": "Multiplier",
                      "objType": "texture"
                  },
                  {
                      "type": 0,
                      "name": "Blend Mode index",
                      "group": "Blending",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Amount",
                      "group": "Blending",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Rotate",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Crop",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Clear",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "trigger"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "render",
                      "text": "Trigger in"
                  },
                  {
                      "name": "Blend Mode",
                      "text": "Blend mode to apply"
                  },
                  {
                      "name": "Amount",
                      "text": "Amount of blend to apply"
                  },
                  {
                      "name": "Rotate",
                      "text": "Rotate the texture"
                  },
                  {
                      "name": "Crop",
                      "text": "Enable or disable crop, image compose wrap mode affects how this looks"
                  },
                  {
                      "name": "trigger",
                      "text": "Trigger out"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1650882742849,
          "exampleProjectId": "flURFr",
          "shortName": "RotateTexture_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.ImageCompose",
          "shortNameDisplay": "RotateTexture",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.ImageCompose.RotateTexture",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Gl.ImageCompose.RotateTexture_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "allowEdit": false,
          "usedInProject": true
      },
      {
          "name": "Ops.Gl.ImageCompose.RoundCorners",
          "content": "",
          "attachmentFiles": [
              "att_roundcorners.frag"
          ],
          "summary": "Draw round corners around image (border)",
          "id": "f7e5d8c3-6f49-4769-a863-fbff2c466ce8",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "render"
                  },
                  {
                      "type": 0,
                      "name": "radius",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "r",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "g",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "b",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "a",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "next"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1515950218939,
          "exampleProjectId": "iYLmJ5",
          "shortName": "RoundCorners",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.ImageCompose",
          "shortNameDisplay": "RoundCorners",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.ImageCompose.RoundCorners",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.ImageCompose.ScaleTexture_v2",
          "content": "<p>Use this to &quot;zoom&quot; in or out of a texture</p>\n",
          "attachmentFiles": [
              "att_scale.frag"
          ],
          "summary": "Scales a texture",
          "id": "942ef040-9be9-4848-9122-61cb28cb7789",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "render"
                  },
                  {
                      "type": 2,
                      "name": "Multiplier",
                      "objType": "texture"
                  },
                  {
                      "type": 0,
                      "name": "Blend Mode index",
                      "group": "Blending",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Amount",
                      "group": "Blending",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Scale X",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Scale Y",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "offset X",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "offset Y",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "center X",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "center Y",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Clear",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "trigger"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "render",
                      "text": "Trigger in"
                  },
                  {
                      "name": "Blend Mode",
                      "text": "Blend mode to apply"
                  },
                  {
                      "name": "Amount",
                      "text": "Amount of blend to apply"
                  },
                  {
                      "name": "Scale X",
                      "text": "scale on the x axis"
                  },
                  {
                      "name": "Scale Y",
                      "text": "scale on the y axis"
                  },
                  {
                      "name": "offset X",
                      "text": "Offset on the X axis"
                  },
                  {
                      "name": "offset Y",
                      "text": "Offset on the Y axis"
                  },
                  {
                      "name": "center X",
                      "text": "Changes the center point on the X axis"
                  },
                  {
                      "name": "center Y",
                      "text": "Changes the center point on the Y axis"
                  },
                  {
                      "name": "trigger",
                      "text": "Trigger out"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1650880873618,
          "exampleProjectId": "kj_Zbx",
          "shortName": "ScaleTexture_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.ImageCompose",
          "shortNameDisplay": "ScaleTexture",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.ImageCompose.ScaleTexture",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Gl.ImageCompose.ScaleTexture_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.ImageCompose.ScrollTexture",
          "content": "",
          "attachmentFiles": [
              "att_scroll.frag"
          ],
          "summary": "scroll image",
          "id": "9b151d99-7888-4948-81c7-cd23b334e8d4",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "render"
                  },
                  {
                      "type": 0,
                      "name": "amountX",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "amountY",
                      "subType": "number"
                  },
                  {
                      "type": 2,
                      "name": "Mask",
                      "objType": "texture"
                  },
                  {
                      "type": 0,
                      "name": "Repeat",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "trigger"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1510252566722,
          "exampleProjectId": "DutaW6",
          "shortName": "ScrollTexture",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.ImageCompose",
          "shortNameDisplay": "ScrollTexture",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.ImageCompose.ScrollTexture",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.ImageCompose.Shapes2d_v2",
          "content": "<p>Generate a variety of 2d shapes as a texture. Combine multiple ops to generate new forms.\nthe following shapes are available:\ncircle - eqi triangle - iso triangle - box - rhombus - pentagon - hexagon - octagon - hexagram</p>\n",
          "attachmentFiles": [
              "att_shapes.frag"
          ],
          "summary": "Generates different 2d shapes to use as a texture",
          "id": "1b81100b-7c09-4171-ae82-8865b905720e",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "render"
                  },
                  {
                      "type": 0,
                      "name": "Blend Mode index",
                      "group": "Blending",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Alpha Mask index",
                      "group": "Blending",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Amount",
                      "group": "Blending",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Shape index",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Mirror X",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Mirror Y",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Offset X",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Offset Y",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "fillShape",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Line thickness",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Invert color",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "width",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "height",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Rotate",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "r",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "g",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "b",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "a",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "trigger"
                  }
              ]
          },
          "authorName": "andro",
          "docs": {
              "ports": [
                  {
                      "name": "render",
                      "text": "Trigger op"
                  },
                  {
                      "name": "Blend Mode",
                      "text": "Blending mode"
                  },
                  {
                      "name": "Amount",
                      "text": "Amount of belnding"
                  },
                  {
                      "name": "Shape",
                      "text": "Pick a shape - see docs for full list"
                  },
                  {
                      "name": "Mirror X",
                      "text": "mirror the x axis"
                  },
                  {
                      "name": "Mirror Y",
                      "text": "mirror the y axis"
                  },
                  {
                      "name": "Offset X",
                      "text": "Offset x axis"
                  },
                  {
                      "name": "Offset Y",
                      "text": "Offset y axis"
                  },
                  {
                      "name": "fillShape",
                      "text": "Disable to only draw shape outline"
                  },
                  {
                      "name": "Line thickness",
                      "text": "Line thickness when fillshape is disabled"
                  },
                  {
                      "name": "Invert color",
                      "text": "Invert color to background"
                  },
                  {
                      "name": "width",
                      "text": "width of shape"
                  },
                  {
                      "name": "height",
                      "text": "height of shape"
                  },
                  {
                      "name": "Rotate",
                      "text": "rotate the shape"
                  },
                  {
                      "name": "r",
                      "text": "red amount"
                  },
                  {
                      "name": "g",
                      "text": "green amount"
                  },
                  {
                      "name": "b",
                      "text": "blue amount"
                  },
                  {
                      "name": "a",
                      "text": "alpha amount"
                  },
                  {
                      "name": "trigger",
                      "text": "next trigger"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1650447611699,
          "exampleProjectId": "XBGbPO",
          "shortName": "Shapes2d_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.ImageCompose",
          "shortNameDisplay": "Shapes2d",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.ImageCompose.Shapes2d",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Gl.ImageCompose.Shapes2d_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "allowEdit": false,
          "usedInProject": true
      },
      {
          "name": "Ops.Gl.ImageCompose.Sharpen",
          "content": "",
          "attachmentFiles": [
              "att_sharpen.frag"
          ],
          "summary": "Adjust image sharpness",
          "id": "55647083-131d-4c70-b667-21fecf311ea5",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Render"
                  },
                  {
                      "type": 0,
                      "name": "amount",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Trigger"
                  }
              ]
          },
          "authorName": "pandur",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1540825724831,
          "exampleProjectId": "Q6uJjr",
          "shortName": "Sharpen",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.ImageCompose",
          "shortNameDisplay": "Sharpen",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.ImageCompose.Sharpen",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.ImageCompose.SkewStretchImage_v2",
          "content": "",
          "attachmentFiles": [
              "att_invert.frag"
          ],
          "summary": "skew / stretch an image by rendering scaled sides",
          "id": "665bbc0c-2fd7-4683-a1df-e57d8f17da93",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "render"
                  },
                  {
                      "type": 0,
                      "name": "Blend Mode index",
                      "group": "Blending",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Amount",
                      "group": "Blending",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Clamp",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Stretch Top",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Stretch Bottom",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Stretch Left",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Stretch Right",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "trigger"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1650966787899,
          "exampleProjectId": "M2UA7k",
          "shortName": "SkewStretchImage_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.ImageCompose",
          "shortNameDisplay": "SkewStretchImage",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.ImageCompose.SkewStretchImage",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Gl.ImageCompose.SkewStretchImage_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "allowEdit": false,
          "usedInProject": true
      },
      {
          "name": "Ops.Gl.ImageCompose.Stripes_v4",
          "content": "",
          "attachmentFiles": [
              "att_stripes_v3.frag"
          ],
          "summary": "Create a texture of stripes /lines",
          "id": "a1d57718-20a0-4d18-89d3-69947b0d1acf",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Render"
                  },
                  {
                      "type": 0,
                      "name": "Blend Mode index",
                      "group": "Blending",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Amount",
                      "group": "Blending",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Alpha Mask index",
                      "group": "Blending",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Num",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Width",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Rotate",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Offset",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Gradients",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Circular",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Invert",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "r",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "g",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "b",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "trigger"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "Render",
                      "text": "Trigger in"
                  },
                  {
                      "name": "Blend Mode index",
                      "text": "Pick a blend mode with an integer"
                  },
                  {
                      "name": "Blend Mode",
                      "text": "Selected blend mode"
                  },
                  {
                      "name": "Amount",
                      "text": "Amount of blending"
                  },
                  {
                      "name": "Num",
                      "text": "Number of stripes"
                  },
                  {
                      "name": "Width",
                      "text": "width of each stripe"
                  },
                  {
                      "name": "Rotate",
                      "text": "rotate everything"
                  },
                  {
                      "name": "Offset",
                      "text": "offset stripes from zero"
                  },
                  {
                      "name": "Gradients",
                      "text": "Enable gradient mode"
                  },
                  {
                      "name": "Circular",
                      "text": "Enable circular stripes "
                  },
                  {
                      "name": "r",
                      "text": "red"
                  },
                  {
                      "name": "g",
                      "text": "green "
                  },
                  {
                      "name": "b",
                      "text": "blue "
                  },
                  {
                      "name": "trigger",
                      "text": "Trigger out "
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1650440014992,
          "exampleProjectId": "dYhlT6",
          "shortName": "Stripes_v4",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.ImageCompose",
          "shortNameDisplay": "Stripes",
          "version": 4,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.ImageCompose.Stripes_v2",
                  "versionString": "_v2",
                  "version": 2
              },
              {
                  "name": "Ops.Gl.ImageCompose.Stripes_v3",
                  "versionString": "_v3",
                  "version": 3
              },
              {
                  "name": "Ops.Gl.ImageCompose.Stripes_v4",
                  "versionString": "_v4",
                  "version": 4
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.ImageCompose.TexMathModulo",
          "content": "",
          "attachmentFiles": [
              "att_invert.frag"
          ],
          "summary": "modulo pixel color values",
          "id": "9105dc83-9cb9-4a5e-9ec0-db641436dbe2",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "render"
                  },
                  {
                      "type": 0,
                      "name": "Blend Mode index",
                      "group": "Blending",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Mask Invert",
                      "subType": "boolean"
                  },
                  {
                      "type": 2,
                      "name": "Mask",
                      "objType": "texture"
                  },
                  {
                      "type": 0,
                      "name": "Amount",
                      "group": "Blending",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "modulo",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "trigger"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1618244630693,
          "exampleProjectId": "FOpoxm",
          "shortName": "TexMathModulo",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.ImageCompose",
          "shortNameDisplay": "TexMathModulo",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.ImageCompose.TexMathModulo",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.ImageCompose.TextureDifference",
          "content": "",
          "attachmentFiles": [
              "att_tex_difference.frag"
          ],
          "summary": "render the difference of two textures",
          "id": "e8f01999-ad25-4a75-9cac-46468551ba67",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "render"
                  },
                  {
                      "type": 2,
                      "name": "Texture 1",
                      "objType": "texture"
                  },
                  {
                      "type": 2,
                      "name": "Texture 2",
                      "objType": "texture"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1518259734902,
          "exampleProjectId": "zCDlTi",
          "shortName": "TextureDifference",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.ImageCompose",
          "shortNameDisplay": "TextureDifference",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.ImageCompose.TextureDifference",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.ImageCompose.ToNormalMap_v2",
          "content": "",
          "attachmentFiles": [
              "att_tonormal.frag"
          ],
          "summary": "Convert a black and white map to a normal map",
          "id": "5dfb2856-b589-4bd9-8f4e-b518da115d11",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "render"
                  },
                  {
                      "type": 0,
                      "name": "Strength",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Step Multiplier",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "trigger"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [
              "a56wk9Xm9dY"
          ],
          "created": 1653732124735,
          "exampleProjectId": "L62oT6",
          "credits": [
              {
                  "title": "NormalMap Shader",
                  "author": "moka",
                  "url": "https://forum.openframeworks.cc/t/compute-normal-map-from-image/1400/11"
              }
          ],
          "todos": [
              {
                  "message": "Make texture size dynamic, right now fixed at 1024!",
                  "author": "simod",
                  "id": "20d29ae3-7a58-4ad2-9b24-4c7c2ba6f314",
                  "date": 1572519515040,
                  "deleted": true,
                  "deletedBy": "stephan",
                  "deletedDate": 1654245372278
              }
          ],
          "shortName": "ToNormalMap_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.ImageCompose",
          "shortNameDisplay": "ToNormalMap",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.ImageCompose.ToNormalMap",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Gl.ImageCompose.ToNormalMap_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.ImageCompose.Twirl_v4",
          "content": "",
          "attachmentFiles": [
              "att_twirl.frag"
          ],
          "summary": "Creates a twirl/swirl/spiral effect in a texture",
          "id": "6691bf7f-602d-4a24-b648-cab4b2a2c15e",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Render"
                  },
                  {
                      "type": 0,
                      "name": "Blend Mode index",
                      "group": "Blending",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Amount",
                      "group": "Blending",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Twist amount",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Radius",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Center X",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Center Y",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "Render",
                      "text": "Needed to render"
                  },
                  {
                      "name": "Blend Mode",
                      "text": "Blend mode "
                  },
                  {
                      "name": "Amount",
                      "text": "Amount of blending"
                  },
                  {
                      "name": "Twist amount",
                      "text": "Amount of twist applied to the texture"
                  },
                  {
                      "name": "Radius",
                      "text": "Radius of the effect"
                  },
                  {
                      "name": "Center X",
                      "text": "Center point of the effect on the x axis"
                  },
                  {
                      "name": "Center Y",
                      "text": "Center point of the effect on the y axis"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1650449268814,
          "exampleProjectId": "2_pmJ5",
          "shortName": "Twirl_v4",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.ImageCompose",
          "shortNameDisplay": "Twirl",
          "version": 4,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.ImageCompose.Twirl_v2",
                  "versionString": "_v2",
                  "version": 2
              },
              {
                  "name": "Ops.Gl.ImageCompose.Twirl_v3",
                  "versionString": "_v3",
                  "version": 3
              },
              {
                  "name": "Ops.Gl.ImageCompose.Twirl_v4",
                  "versionString": "_v4",
                  "version": 4
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.ImageCompose.Vibrance",
          "content": "",
          "attachmentFiles": [
              "att_vibrance.frag"
          ],
          "summary": "adjust vibrance/saturation",
          "id": "9c71c980-e439-4397-9c2b-c2ae085eaed9",
          "layout": {
              "portsIn": [
                  {
                      "type": "1",
                      "name": "Render"
                  },
                  {
                      "type": "0",
                      "name": "amount",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": "1",
                      "name": "Trigger"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1508766455978,
          "exampleProjectId": "52iaW6",
          "shortName": "Vibrance",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.ImageCompose",
          "shortNameDisplay": "Vibrance",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.ImageCompose.Vibrance",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.ImageCompose.Vignette_v3",
          "content": "",
          "attachmentFiles": [
              "att_vignette.frag"
          ],
          "summary": "Simulating an old camera effect of fading away the edges of the image",
          "id": "588302cb-f5a7-4129-90d2-ba66212d69e5",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Render"
                  },
                  {
                      "type": 0,
                      "name": "Blend Mode index",
                      "group": "Blending",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Alpha Mask index",
                      "group": "Blending",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Amount",
                      "group": "Blending",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Strength",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Radius",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Sharp",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Aspect",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "r",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "g",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "b",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Alpha",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Trigger"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1650607518226,
          "exampleProjectId": "WDPlT6",
          "shortName": "Vignette_v3",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.ImageCompose",
          "shortNameDisplay": "Vignette",
          "version": 3,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.ImageCompose.Vignette",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Gl.ImageCompose.Vignette_v2",
                  "versionString": "_v2",
                  "version": 2
              },
              {
                  "name": "Ops.Gl.ImageCompose.Vignette_v3",
                  "versionString": "_v3",
                  "version": 3
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.ImageCompose.WaveformGradient_v4",
          "content": "<p>note square won&#39;t be visible unless pow is less than 1</p>\n",
          "attachmentFiles": [
              "att_waveform_v2.frag"
          ],
          "summary": "Generate different texture waveforms. Sine, sawtooth and triangle.",
          "id": "0f9561ce-ea3c-4630-9990-9dae77893517",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "render"
                  },
                  {
                      "type": 0,
                      "name": "Blend Mode index",
                      "group": "Blending",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Alpha Mask index",
                      "group": "Blending",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Amount",
                      "group": "Blending",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Mode index",
                      "group": "Waveform",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Frequency",
                      "group": "Waveform",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Pow factor",
                      "group": "Waveform",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Offset",
                      "group": "Waveform",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Rotate",
                      "group": "Waveform",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "r",
                      "group": "Color",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "g",
                      "group": "Color",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "b",
                      "group": "Color",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "trigger"
                  }
              ]
          },
          "authorName": "andro",
          "docs": {
              "ports": [
                  {
                      "name": "render",
                      "text": "Trigger in"
                  },
                  {
                      "name": "Blend Mode index",
                      "text": "Integer selects blend mode"
                  },
                  {
                      "name": "Blend Mode",
                      "text": "Selected blend mode"
                  },
                  {
                      "name": "Amount",
                      "text": "Amount of blend to apply"
                  },
                  {
                      "name": "Mode index",
                      "text": "Pick the gradient type with an integer"
                  },
                  {
                      "name": "Frequency",
                      "text": "Amount of repetitions"
                  },
                  {
                      "name": "Pow factor",
                      "text": "Alters the gradient effect. Square Wave requires values between 0.0 and 1.0"
                  },
                  {
                      "name": "Offset",
                      "text": "Offset on the X axis"
                  },
                  {
                      "name": "Rotate",
                      "text": "Rotate the texture"
                  },
                  {
                      "name": "r",
                      "text": "red "
                  },
                  {
                      "name": "g",
                      "text": "green "
                  },
                  {
                      "name": "b",
                      "text": "blue"
                  },
                  {
                      "name": "trigger",
                      "text": "Trigger out"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1662448603592,
          "exampleProjectId": "Hfw7yu",
          "shortName": "WaveformGradient_v4",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.ImageCompose",
          "shortNameDisplay": "WaveformGradient",
          "version": 4,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.ImageCompose.WaveformGradient",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Gl.ImageCompose.WaveformGradient_v2",
                  "versionString": "_v2",
                  "version": 2
              },
              {
                  "name": "Ops.Gl.ImageCompose.WaveformGradient_v3",
                  "versionString": "_v3",
                  "version": 3
              },
              {
                  "name": "Ops.Gl.ImageCompose.WaveformGradient_v4",
                  "versionString": "_v4",
                  "version": 4
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.ImageCompose.Waveform_v3",
          "content": "",
          "attachmentFiles": [
              "att_wave_v2.frag"
          ],
          "summary": "Generates 4 different waveform textures. Sine, sawtooth,Triangle, Square.",
          "id": "fce7d8bc-5a2e-49b8-8f55-8ab8784493d5",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "render"
                  },
                  {
                      "type": 0,
                      "name": "Blend Mode index",
                      "group": "Blending",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Amount",
                      "group": "Blending",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Alpha Mask index",
                      "group": "Blending",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Waveform index",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Amplitude",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Frequency",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Line Width",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Line Glow",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "invert color",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Solid fill",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Offset X",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Offset Y",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Rotate",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "r",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "g",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "b",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "trigger"
                  }
              ]
          },
          "authorName": "andro",
          "docs": {
              "ports": [
                  {
                      "name": "render",
                      "text": "Trigger in"
                  },
                  {
                      "name": "Blend Mode index",
                      "text": "Use an integer to pick a blend mode"
                  },
                  {
                      "name": "Blend Mode",
                      "text": "Selected blend mode"
                  },
                  {
                      "name": "Amount",
                      "text": "Amount of blend to apply"
                  },
                  {
                      "name": "Waveform index",
                      "text": "Picks a waveform with an integer"
                  },
                  {
                      "name": "Waveform",
                      "text": "Pick a waveform with a dropdown"
                  },
                  {
                      "name": "Amplitude",
                      "text": "Amplitude/Height of the wave"
                  },
                  {
                      "name": "Frequency",
                      "text": "Amount of repetitions on the screen"
                  },
                  {
                      "name": "Line Width",
                      "text": "Width of the line"
                  },
                  {
                      "name": "Line Glow",
                      "text": "Applies a glow/fade to the edge of the line"
                  },
                  {
                      "name": "invert color",
                      "text": "Inverts color"
                  },
                  {
                      "name": "Solid fill",
                      "text": "Fills one half of the waveform, enable invert color to flip it over"
                  },
                  {
                      "name": "Offset X",
                      "text": "Offset on the X axis"
                  },
                  {
                      "name": "Offset Y",
                      "text": "Offset on the Y axis"
                  },
                  {
                      "name": "Rotate",
                      "text": "Rotate the texture"
                  },
                  {
                      "name": "r",
                      "text": "Red color of the line"
                  },
                  {
                      "name": "g",
                      "text": "Green color of the line"
                  },
                  {
                      "name": "b",
                      "text": "Blue color of the line"
                  },
                  {
                      "name": "trigger",
                      "text": "Trigger out"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1650440285308,
          "exampleProjectId": "9aF_26",
          "shortName": "Waveform_v3",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.ImageCompose",
          "shortNameDisplay": "Waveform",
          "version": 3,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.ImageCompose.Waveform",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Gl.ImageCompose.Waveform_v2",
                  "versionString": "_v2",
                  "version": 2
              },
              {
                  "name": "Ops.Gl.ImageCompose.Waveform_v3",
                  "versionString": "_v3",
                  "version": 3
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.ImageCompose.Wobble_v2",
          "content": "<p>Can be used to create water wobble like motion in a texture</p>\n",
          "attachmentFiles": [
              "att_wobble.frag"
          ],
          "summary": "waving wobble motion effect",
          "id": "04a8a8bc-feb9-4791-8724-ee24bbb150db",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Render"
                  },
                  {
                      "type": 0,
                      "name": "time",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "SpeedX",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "SpeedY",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "RepeatX",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "RepeatY",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Multiply",
                      "subType": "number"
                  },
                  {
                      "type": 2,
                      "name": "Amount Map",
                      "group": "Amount Map",
                      "objType": "texture"
                  },
                  {
                      "type": 0,
                      "name": "Source Amount Map index",
                      "group": "Amount Map",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Invert Amount Map",
                      "group": "Amount Map",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Trigger"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "Render",
                      "text": "Trigger in "
                  },
                  {
                      "name": "time",
                      "text": "Used to animate the wobble"
                  },
                  {
                      "name": "SpeedX",
                      "text": "Speed factor on the X axis"
                  },
                  {
                      "name": "SpeedY",
                      "text": "Speed factor on the Y axis"
                  },
                  {
                      "name": "RepeatX",
                      "text": "Frequency on X axis - higher values create a more grid like wobble"
                  },
                  {
                      "name": "RepeatY",
                      "text": "Frequency on Y axis - higher values create a more grid like wobble"
                  },
                  {
                      "name": "Multiply",
                      "text": "Overall Strength of the effect. best to use very small numbers like 0.1"
                  },
                  {
                      "name": "Trigger",
                      "text": "Trigger out"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1653386207162,
          "exampleProjectId": "wpgXXG",
          "shortName": "Wobble_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.ImageCompose",
          "shortNameDisplay": "Wobble",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.ImageCompose.Wobble",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Gl.ImageCompose.Wobble_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.ImageCompose.ZoomBlur_v2",
          "content": "",
          "attachmentFiles": [
              "att_zoomblur.frag"
          ],
          "summary": "Directional blur effect",
          "id": "b720a2f5-5501-48ef-90de-94a280ba6fbd",
          "layout": {
              "portsIn": [
                  {
                      "type": "1",
                      "name": "render"
                  },
                  {
                      "type": "0",
                      "name": "Strength",
                      "subType": "number"
                  },
                  {
                      "type": "0",
                      "name": "Samples",
                      "subType": "integer"
                  },
                  {
                      "type": "0",
                      "name": "X",
                      "subType": "number"
                  },
                  {
                      "type": "0",
                      "name": "Y",
                      "subType": "number"
                  },
                  {
                      "type": "2",
                      "name": "Strength Map",
                      "group": "Strengh Map",
                      "objType": "texture"
                  },
                  {
                      "type": "0",
                      "name": "Source Strength Map index",
                      "group": "Strengh Map",
                      "subType": "integer"
                  },
                  {
                      "type": "0",
                      "name": "Invert Strength Map",
                      "group": "Strengh Map",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": "1",
                      "name": "trigger"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1650522070431,
          "exampleProjectId": "qjtoT6",
          "shortName": "ZoomBlur_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.ImageCompose",
          "shortNameDisplay": "ZoomBlur",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.ImageCompose.ZoomBlur",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Gl.ImageCompose.ZoomBlur_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "allowEdit": false,
          "usedInProject": true
      },
      {
          "name": "Ops.Gl.ImageSequenceAnim_v2",
          "content": "<p>Must be used with another op like BasicMaterial. </p>\n",
          "attachmentFiles": [],
          "summary": "play a image sprite animation",
          "id": "282203ae-8e8c-4ff7-a0a6-f0cb0ec1ca25",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "Time",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Unit index",
                      "values": [
                          "Seconds",
                          "Frames"
                      ],
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "FPS",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Num X",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Num Y",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Max Frames",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Flip Y",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "Repeat X",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Repeat Y",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Offset X",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Offset Y",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Frame",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Progress",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "Time",
                      "text": "Time used to animate the op, plug a timer into this to animate"
                  },
                  {
                      "name": "FPS",
                      "text": "FPS of the animation"
                  },
                  {
                      "name": "Num X",
                      "text": "Set this to the amount of images on the X axis"
                  },
                  {
                      "name": "Num Y",
                      "text": "Set this to the amount of images on the Y axis"
                  },
                  {
                      "name": "Repeat X",
                      "text": "Used to set the `X` size the repeat setting of the texture"
                  },
                  {
                      "name": "Repeat Y",
                      "text": "Used to set the `Y` size the repeat setting of the texture"
                  },
                  {
                      "name": "Offset X",
                      "text": "Used to offset the texture on the `X` axis"
                  },
                  {
                      "name": "Offset Y",
                      "text": "Used to offset the texture on the `Y` axis"
                  },
                  {
                      "name": "Frame",
                      "text": "Current frame number determined by FPS parameter"
                  },
                  {
                      "name": "Progress",
                      "text": "Progress through the animation, range `0-1`"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1516721369528,
          "exampleProjectId": "n0iMSq",
          "shortName": "ImageSequenceAnim_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Gl",
          "shortNameDisplay": "ImageSequenceAnim",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.ImageSequenceAnim_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.InteractiveRectangle_v2",
          "content": "",
          "attachmentFiles": [],
          "summary": "An area which is interactive",
          "id": "334728ca-60a2-4a42-a059-d9b5f3fe4d32",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Trigger in"
                  },
                  {
                      "type": 0,
                      "name": "Width",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Height",
                      "subType": "number"
                  },
                  {
                      "type": 5,
                      "name": "ID"
                  },
                  {
                      "type": 5,
                      "name": "Class"
                  },
                  {
                      "type": 0,
                      "name": "Pivot x index",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Pivot y index",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Axis index",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Is Interactive",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Render Rectangle",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Show Boundings",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Cursor index",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Render",
                      "uititle": "Active",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Trigger out"
                  },
                  {
                      "type": 2,
                      "name": "geometry"
                  },
                  {
                      "type": 0,
                      "name": "Pointer Hover",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Pointer Down",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Pointer X",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Pointer Y",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Top",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Left",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Right",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Bottom",
                      "subType": "number"
                  },
                  {
                      "type": 1,
                      "name": "Left Click"
                  },
                  {
                      "type": 2,
                      "name": "Dom Element"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1599663953139,
          "exampleProjectId": "P_SED0",
          "shortName": "InteractiveRectangle_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Gl",
          "shortNameDisplay": "InteractiveRectangle",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.InteractiveRectangle",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Gl.InteractiveRectangle_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.LayerSequence",
          "content": "",
          "attachmentFiles": [],
          "summary": "Render Multiple Layers in a specific order",
          "id": "09c33c7e-e282-468d-93e1-b8a7a0a4c4d2",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "exe"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "trigger 0"
                  },
                  {
                      "type": 1,
                      "name": "trigger 1"
                  },
                  {
                      "type": 1,
                      "name": "trigger 2"
                  },
                  {
                      "type": 1,
                      "name": "trigger 3"
                  },
                  {
                      "type": 1,
                      "name": "trigger 4"
                  },
                  {
                      "type": 1,
                      "name": "trigger 5"
                  },
                  {
                      "type": 1,
                      "name": "trigger 6"
                  },
                  {
                      "type": 1,
                      "name": "trigger 7"
                  },
                  {
                      "type": 1,
                      "name": "trigger 8"
                  },
                  {
                      "type": 1,
                      "name": "trigger 9"
                  },
                  {
                      "type": 1,
                      "name": "trigger 10"
                  },
                  {
                      "type": 1,
                      "name": "trigger 11"
                  },
                  {
                      "type": 1,
                      "name": "trigger 12"
                  },
                  {
                      "type": 1,
                      "name": "trigger 13"
                  },
                  {
                      "type": 1,
                      "name": "trigger 14"
                  },
                  {
                      "type": 1,
                      "name": "trigger 15"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1667301289657,
          "exampleProjectId": "VH4Oxj",
          "shortName": "LayerSequence",
          "hasScreenshot": true,
          "namespace": "Ops.Gl",
          "shortNameDisplay": "LayerSequence",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.LayerSequence",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.LineFont_v2",
          "content": "",
          "attachmentFiles": [],
          "summary": "A Simple way to write text on the screen.",
          "id": "a3615010-05af-45bc-bf98-6972c2de21bc",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "render"
                  },
                  {
                      "type": 5,
                      "name": "Text"
                  },
                  {
                      "type": 0,
                      "name": "Letter Spacing",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "align index",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Render",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 3,
                      "name": "Lines"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1628689608755,
          "exampleProjectId": "1JzPLu",
          "shortName": "LineFont_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Gl",
          "shortNameDisplay": "LineFont",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.LineFont",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Gl.LineFont_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.MainLoop_v2",
          "content": "<p>The heart-piece of every WebGL-patch, use this as first op in your patch to trigger the other ops (according to the framerate).</p>\n<p>use <a href=\"/op/Ops.Gl.Performance\" target=\"_blank\">Ops.Gl.Performance</a> to see statistics about you perfomance</p>\n",
          "attachmentFiles": [],
          "summary": "Trigger other ops once every frame to create smooth animations",
          "id": "f1029550-d877-42da-9b1e-63a5163a0350",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "Max Pixel Density (DPR)",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "FPS Limit",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Reduce FPS unfocussed",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Transparent",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Active",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "trigger"
                  },
                  {
                      "type": 0,
                      "name": "width",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "height",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Pixel Density",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1701100597121,
          "exampleProjectId": "uZxfQc",
          "shortName": "MainLoop_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Gl",
          "shortNameDisplay": "MainLoop",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.MainLoop",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Gl.MainLoop_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.Matrix.AnimMatrix",
          "content": "",
          "attachmentFiles": [],
          "summary": "animate values in a matrix to a new matrix",
          "id": "7800dde0-0ce4-4acd-9605-d412931bb90e",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Update"
                  },
                  {
                      "type": 3,
                      "name": "Next Matrix"
                  },
                  {
                      "type": 0,
                      "name": "Duration",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "easing index",
                      "subType": "integer"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  },
                  {
                      "type": 3,
                      "name": "Matrix"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1615991779408,
          "exampleProjectId": "99cg1x",
          "shortName": "AnimMatrix",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.Matrix",
          "shortNameDisplay": "AnimMatrix",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.Matrix.AnimMatrix",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false,
          "namespaceTitle": "Ops.Gl.Matrix",
          "namespaceSummary": "WebGl Ops",
          "usedInProject": true
      },
      {
          "name": "Ops.Gl.Matrix.ArrayPathFollow",
          "content": "",
          "attachmentFiles": [],
          "summary": "interpolate position on a spline/array3x",
          "id": "395bff14-d092-4e7e-a723-b6a69564add2",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "exe"
                  },
                  {
                      "type": 3,
                      "name": "array"
                  },
                  {
                      "type": 0,
                      "name": "time",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "duration",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "offset",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "look ahead",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "trigger"
                  },
                  {
                      "type": 1,
                      "name": "transform lookat"
                  },
                  {
                      "type": 0,
                      "name": "index",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1520592871298,
          "exampleProjectId": "lL9_EF",
          "shortName": "ArrayPathFollow",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.Matrix",
          "shortNameDisplay": "ArrayPathFollow",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.Matrix.ArrayPathFollow",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false,
          "usedInProject": true
      },
      {
          "name": "Ops.Gl.Matrix.ArrayPathFollowParticles_v2",
          "content": "",
          "attachmentFiles": [
              "att_pathfollow.vert",
              "att_pathfollow_head.vert"
          ],
          "summary": "render lots of particles following a path/spline/array3x",
          "id": "12a48cb2-a528-4498-8cda-18535af08f4a",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Exec"
                  },
                  {
                      "type": 3,
                      "name": "Points"
                  },
                  {
                      "type": 0,
                      "name": "Num Particles",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Length",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Spread",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Offset",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Max Distance",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "RandomSpeed",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1610105755288,
          "exampleProjectId": "4wT0J6",
          "coreLibs": [
              "cgl_shadermodifier"
          ],
          "shortName": "ArrayPathFollowParticles_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.Matrix",
          "shortNameDisplay": "ArrayPathFollowParticles",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.Matrix.ArrayPathFollowParticles",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Gl.Matrix.ArrayPathFollowParticles_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "allowEdit": false,
          "usedInProject": true
      },
      {
          "name": "Ops.Gl.Matrix.Billboard",
          "content": "",
          "attachmentFiles": [],
          "summary": "rotate an object to always face the camera",
          "id": "d41e676e-d8a7-4a1e-8abf-f1bddfc982d5",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Exec"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1540199776157,
          "exampleProjectId": "GVpkrq",
          "shortName": "Billboard",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.Matrix",
          "shortNameDisplay": "Billboard",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.Matrix.Billboard",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false,
          "usedInProject": true
      },
      {
          "name": "Ops.Gl.Matrix.CameraInfo",
          "content": "<p>Utility op to get camera attributes.</p>\n<p>It is important that you set the camera type that you are using.</p>\n<p>Usually it is a perspective camera, but if you&#39;re explicitly using a orthographic/orthogonal camera, switch the mode to &quot;Orthographic&quot;.</p>\n",
          "attachmentFiles": [],
          "summary": "get camera attributes from current camera/orbit controls",
          "id": "92a0c536-f2bf-4972-9f02-a9accf26c1df",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "render"
                  },
                  {
                      "type": 0,
                      "name": "Camera Type index",
                      "subType": "integer"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "trigger"
                  },
                  {
                      "type": 0,
                      "name": "X",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Y",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Z",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Right X",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Right Y",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Right Z",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Up X",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Up Y",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Up Z",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Forward X",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Forward Y",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Forward Z",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Near Frustum",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Far Frustum",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Bottom Frustum",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Top Frustum",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Left Frustum",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Right Frustum",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "FOV",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Aspect Ratio",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "simod",
          "docs": {
              "ports": [
                  {
                      "name": "render",
                      "text": "Trigger input"
                  },
                  {
                      "name": "Camera Type",
                      "text": "Choose between orthographic & perspective cameara"
                  },
                  {
                      "name": "trigger",
                      "text": "Trigger outpu"
                  },
                  {
                      "name": "X",
                      "text": "x position of camera"
                  },
                  {
                      "name": "Y",
                      "text": "y position of camera"
                  },
                  {
                      "name": "Z",
                      "text": "z position of camera"
                  },
                  {
                      "name": "Right X",
                      "text": "x right of camera"
                  },
                  {
                      "name": "Right Y",
                      "text": "y right of camera"
                  },
                  {
                      "name": "Right Z",
                      "text": "z right of camera"
                  },
                  {
                      "name": "Up X",
                      "text": "x up of camera"
                  },
                  {
                      "name": "Up Y",
                      "text": "y up of camera"
                  },
                  {
                      "name": "Up Z",
                      "text": "z up of camera"
                  },
                  {
                      "name": "Forward X",
                      "text": "x forward of camera"
                  },
                  {
                      "name": "Forward Y",
                      "text": "y forward of camera"
                  },
                  {
                      "name": "Forward Z",
                      "text": "z forward of camera"
                  },
                  {
                      "name": "Near Frustum",
                      "text": "frustum near"
                  },
                  {
                      "name": "Far Frustum",
                      "text": "frustum far"
                  },
                  {
                      "name": "Bottom Frustum",
                      "text": "frustum bottom"
                  },
                  {
                      "name": "Top Frustum",
                      "text": "frustum top"
                  },
                  {
                      "name": "Left Frustum",
                      "text": "frustum left"
                  },
                  {
                      "name": "Right Frustum",
                      "text": "frustum right"
                  },
                  {
                      "name": "FOV",
                      "text": "field of view"
                  },
                  {
                      "name": "Aspect Ratio",
                      "text": "aspect ratio"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1573219149978,
          "exampleProjectId": "YfJ4S-",
          "shortName": "CameraInfo",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.Matrix",
          "shortNameDisplay": "CameraInfo",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.Matrix.CameraInfo",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.Matrix.CameraPosition",
          "content": "",
          "attachmentFiles": [],
          "summary": "get the current position of viewmatrix/camera eye",
          "id": "eff9a971-d9dd-4999-94b1-9a5cbba13581",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "render"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "trigger"
                  },
                  {
                      "type": 0,
                      "name": "X",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Y",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Z",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1509796133701,
          "exampleProjectId": "JwL86R",
          "shortName": "CameraPosition",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.Matrix",
          "shortNameDisplay": "CameraPosition",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.Matrix.CameraPosition",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.Matrix.Camera_v2",
          "content": "",
          "attachmentFiles": [],
          "summary": "Transforms and projects the scene from the point of view of the camera.",
          "id": "f7673a93-7772-4ade-9d3d-df7174f5258b",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "render"
                  },
                  {
                      "type": 0,
                      "name": "Identity",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "projection mode index",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "frustum near",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "frustum far",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "fov",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Auto Aspect Ratio",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Aspect Ratio",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "eye X",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "eye Y",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "eye Z",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "center X",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "center Y",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "center Z",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "truck",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "boom",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "dolly",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "tilt",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "pan",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "roll",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "trigger"
                  },
                  {
                      "type": 0,
                      "name": "Aspect",
                      "subType": "number"
                  },
                  {
                      "type": 3,
                      "name": "Look At Array"
                  }
              ]
          },
          "authorName": "action",
          "docs": {
              "ports": [
                  {
                      "name": "fov",
                      "text": "Field of view of the camera"
                  },
                  {
                      "name": "Auto Aspect Ratio",
                      "text": "Automatically calculate aspect ratio based on the viewport"
                  },
                  {
                      "name": "Aspect Ratio",
                      "text": "Custom aspect ratio"
                  },
                  {
                      "name": "eye X",
                      "text": "X Position of the camera"
                  },
                  {
                      "name": "eye Y",
                      "text": "Y Position of the camera"
                  },
                  {
                      "name": "eye Z",
                      "text": "Y Position of the camera"
                  },
                  {
                      "name": "center X",
                      "text": "Look at point in X position"
                  },
                  {
                      "name": "center Y",
                      "text": "Look at point in Y position"
                  },
                  {
                      "name": "center Z",
                      "text": "Look at point in Z position"
                  },
                  {
                      "name": "truck",
                      "text": "Move sideways (in local x axis)"
                  },
                  {
                      "name": "boom",
                      "text": "Move up+down (in local y axis)."
                  },
                  {
                      "name": "dolly",
                      "text": "Move forward+backward (in local z axis)"
                  },
                  {
                      "name": "tilt",
                      "text": "Tilt up+down relative to current orientation (around local x axis)"
                  },
                  {
                      "name": "pan",
                      "text": "Rotate left+right relative to current orientation (around local y axis)"
                  },
                  {
                      "name": "roll",
                      "text": "Roll left+right relative to current orientation (around local z axis)"
                  }
              ]
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1709283286944,
          "exampleProjectId": "PSw73e",
          "shortName": "Camera_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.Matrix",
          "shortNameDisplay": "Camera",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.Matrix.Camera",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Gl.Matrix.Camera_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.Matrix.Coordinates",
          "content": "",
          "attachmentFiles": [],
          "summary": "current xyz coordinates (modelmatrix)",
          "id": "390d0214-92a9-48e9-85b4-f3092ee9e043",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "render"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "trigger"
                  },
                  {
                      "type": 0,
                      "name": "X",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Y",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Z",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1509796610323,
          "exampleProjectId": "2AtI98",
          "shortName": "Coordinates",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.Matrix",
          "shortNameDisplay": "Coordinates",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.Matrix.Coordinates",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.Matrix.DeviceOrientationCamera",
          "content": "<p>You may need to tap the screen once to enable permissions for the op to work.</p>\n",
          "attachmentFiles": [],
          "summary": "gyroscope motionsensor camera",
          "id": "c213a5b4-6a47-425a-9457-ae0b14c88e9a",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Render"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  },
                  {
                      "type": 0,
                      "name": "Window Orientation",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1554973647512,
          "exampleProjectId": "dZ8wQ0",
          "shortName": "DeviceOrientationCamera",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.Matrix",
          "shortNameDisplay": "DeviceOrientationCamera",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.Matrix.DeviceOrientationCamera",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.Matrix.GetMatrixScaling",
          "content": "",
          "attachmentFiles": [],
          "summary": "Get the scalar scaling of a matrix",
          "id": "3bcc8ae2-0837-4560-90dc-ae7836ee9db0",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "render"
                  },
                  {
                      "type": 3,
                      "name": "Matrix"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "trigger"
                  },
                  {
                      "type": 0,
                      "name": "Scaling",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1553854210900,
          "exampleProjectId": "",
          "shortName": "GetMatrixScaling",
          "hasScreenshot": false,
          "namespace": "Ops.Gl.Matrix",
          "shortNameDisplay": "GetMatrixScaling",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.Matrix.GetMatrixScaling",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.Matrix.GetModelMatrix",
          "content": "<p>Outputs the current modelmatrix on the stack. use MultiplyModelMatrix to use it anywhere else again.</p>\n",
          "attachmentFiles": [],
          "summary": "Get current modelmatrix",
          "id": "2d96f0a3-979a-4dc3-8c49-848f08efe0e0",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "render"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "trigger"
                  },
                  {
                      "type": 3,
                      "name": "matrix"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1517219748673,
          "exampleProjectId": "HkYpci",
          "shortName": "GetModelMatrix",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.Matrix",
          "shortNameDisplay": "GetModelMatrix",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.Matrix.GetModelMatrix",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.Matrix.GetProjectionMatrix",
          "content": "",
          "attachmentFiles": [],
          "summary": "get current projectionmatrix",
          "id": "3f048006-89e9-4e3f-a7d3-42aaa77ed630",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "render"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "trigger"
                  },
                  {
                      "type": 3,
                      "name": "matrix"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1517222067170,
          "exampleProjectId": "573_4S",
          "shortName": "GetProjectionMatrix",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.Matrix",
          "shortNameDisplay": "GetProjectionMatrix",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.Matrix.GetProjectionMatrix",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.Matrix.GetViewMatrix",
          "content": "",
          "attachmentFiles": [],
          "summary": "get current viewmatrix",
          "id": "a58406ae-79b5-4dab-99fa-0a66c2325aab",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "render"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "trigger"
                  },
                  {
                      "type": 3,
                      "name": "matrix"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1517222036539,
          "exampleProjectId": "hDWuci",
          "shortName": "GetViewMatrix",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.Matrix",
          "shortNameDisplay": "GetViewMatrix",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.Matrix.GetViewMatrix",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false,
          "usedInProject": true
      },
      {
          "name": "Ops.Gl.Matrix.InterpolateMatrix",
          "content": "",
          "attachmentFiles": [],
          "summary": "interpolate between two matrices",
          "id": "84e1908b-fc17-47db-9ba1-bc38d7809076",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Exe"
                  },
                  {
                      "type": 3,
                      "name": "Array 1"
                  },
                  {
                      "type": 3,
                      "name": "Array 2"
                  },
                  {
                      "type": 0,
                      "name": "perc",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  },
                  {
                      "type": 3,
                      "name": "Result"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1535453536641,
          "exampleProjectId": "",
          "shortName": "InterpolateMatrix",
          "hasScreenshot": false,
          "namespace": "Ops.Gl.Matrix",
          "shortNameDisplay": "InterpolateMatrix",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.Matrix.InterpolateMatrix",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.Matrix.InvertMatrix",
          "content": "",
          "attachmentFiles": [],
          "summary": "outputs an inverted matrix",
          "id": "2ebd0d87-f67a-4101-bdf0-283c610b095a",
          "layout": {
              "portsIn": [
                  {
                      "type": 3,
                      "name": "Matrix"
                  }
              ],
              "portsOut": [
                  {
                      "type": 3,
                      "name": "Result"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1617814574893,
          "exampleProjectId": "G51FhI",
          "shortName": "InvertMatrix",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.Matrix",
          "shortNameDisplay": "InvertMatrix",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.Matrix.InvertMatrix",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false,
          "usedInProject": true
      },
      {
          "name": "Ops.Gl.Matrix.LookatCamera",
          "content": "",
          "attachmentFiles": [],
          "summary": "transforms view to look from eye to center ",
          "id": "e0f1bad6-7dfb-4665-b458-ca50a1bfe7fa",
          "layout": {
              "portsIn": [
                  {
                      "type": "1",
                      "name": "render"
                  },
                  {
                      "type": "0",
                      "name": "eyeX",
                      "subType": "number"
                  },
                  {
                      "type": "0",
                      "name": "eyeY",
                      "subType": "number"
                  },
                  {
                      "type": "0",
                      "name": "eyeZ",
                      "subType": "number"
                  },
                  {
                      "type": "0",
                      "name": "centerX",
                      "subType": "number"
                  },
                  {
                      "type": "0",
                      "name": "centerY",
                      "subType": "number"
                  },
                  {
                      "type": "0",
                      "name": "centerZ",
                      "subType": "number"
                  },
                  {
                      "type": "0",
                      "name": "upX",
                      "subType": "number"
                  },
                  {
                      "type": "0",
                      "name": "upY",
                      "subType": "number"
                  },
                  {
                      "type": "0",
                      "name": "upZ",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": "1",
                      "name": "trigger"
                  },
                  {
                      "type": "3",
                      "name": "Array"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1512035659193,
          "exampleProjectId": "_JlGz6",
          "shortName": "LookatCamera",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.Matrix",
          "shortNameDisplay": "LookatCamera",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.Matrix.LookatCamera",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.Matrix.MatrixTranslation",
          "content": "",
          "attachmentFiles": [],
          "summary": "get translation of a matrix",
          "id": "d5ba91a4-d419-4805-b37f-595c261615b3",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "render"
                  },
                  {
                      "type": 3,
                      "name": "Matrix"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "trigger"
                  },
                  {
                      "type": 0,
                      "name": "X",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Y",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Z",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1536679364744,
          "exampleProjectId": "Zz52On",
          "shortName": "MatrixTranslation",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.Matrix",
          "shortNameDisplay": "MatrixTranslation",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.Matrix.MatrixTranslation",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.Matrix.MulViewMatrix",
          "content": "",
          "attachmentFiles": [],
          "summary": "multiply view matrix",
          "id": "c2833486-717e-4f3c-9dd8-c62cc92ea46e",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "render"
                  },
                  {
                      "type": 3,
                      "name": "matrix"
                  },
                  {
                      "type": 0,
                      "name": "Identity",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "trigger"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1517222044303,
          "exampleProjectId": "hDWuci",
          "shortName": "MulViewMatrix",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.Matrix",
          "shortNameDisplay": "MulViewMatrix",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.Matrix.MulViewMatrix",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.Matrix.MultiplyModelMatrix",
          "content": "",
          "attachmentFiles": [],
          "summary": "multiply model matrix",
          "id": "ec2784ab-9174-4052-894b-744a18e0d348",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "render"
                  },
                  {
                      "type": 0,
                      "name": "Identity",
                      "subType": "boolean"
                  },
                  {
                      "type": 3,
                      "name": "matrix"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "trigger"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1517219700410,
          "exampleProjectId": "HkYpci",
          "shortName": "MultiplyModelMatrix",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.Matrix",
          "shortNameDisplay": "MultiplyModelMatrix",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.Matrix.MultiplyModelMatrix",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.Matrix.OrbitControls_v3",
          "content": "<p>Adds mouse-interactivity to your patch. After you added the <em>OrbitControls</em>-op you can rotate the viewport my dragging with the mouse and zoom in / out using the mouse wheel.</p>\n<p>When upgrading from an old version: add +2 to your initial radius to get the same distance!</p>\n",
          "attachmentFiles": [],
          "summary": "rotate your object by clicking and dragging the mouse",
          "id": "0655b098-d2a8-4ce2-a0b9-ecb2c78f873a",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "render"
                  },
                  {
                      "type": 0,
                      "name": "min distance",
                      "group": "Boundaries",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "max distance",
                      "group": "Boundaries",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "min rot y",
                      "group": "Boundaries",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "max rot y",
                      "group": "Boundaries",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "initial radius",
                      "group": "Initial Values",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "initial axis y",
                      "group": "Initial Values",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "initial axis x",
                      "group": "Initial Values",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Smoothness",
                      "group": "Interaction",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Speed X",
                      "group": "Interaction",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Speed Y",
                      "group": "Interaction",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Active",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Allow Panning",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Allow Zooming",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Allow Rotation",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "restricted",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Identity",
                      "subType": "boolean"
                  },
                  {
                      "type": 1,
                      "name": "Reset"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "trigger"
                  },
                  {
                      "type": 0,
                      "name": "radius",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Rot X",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Rot Y",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "render",
                      "text": "Executes the op"
                  },
                  {
                      "name": "min distance",
                      "text": "Minimum distance to scroll in, once you hit that distance scrolling in has no effect"
                  },
                  {
                      "name": "initial axis y",
                      "text": "The starting point from where to look at the scene in the y-axis"
                  },
                  {
                      "name": "initial axis x",
                      "text": "The starting point from where to look at the scene in the x-axis"
                  },
                  {
                      "name": "trigger",
                      "text": "Triggers the next op"
                  }
              ]
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1719244226730,
          "exampleProjectId": "Krorsh",
          "shortName": "OrbitControls_v3",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.Matrix",
          "shortNameDisplay": "OrbitControls",
          "version": 3,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.Matrix.OrbitControls",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Gl.Matrix.OrbitControls_v2",
                  "versionString": "_v2",
                  "version": 2
              },
              {
                  "name": "Ops.Gl.Matrix.OrbitControls_v3",
                  "versionString": "_v3",
                  "version": 3
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.Matrix.Quaternion",
          "content": "",
          "attachmentFiles": [],
          "summary": "multiplies current modelmatrix with a quaternion",
          "id": "e256892f-7f68-4113-9eb8-cd981026ea8b",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "render"
                  },
                  {
                      "type": 0,
                      "name": "x",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "y",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "z",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "w",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "trigger"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1517221902725,
          "exampleProjectId": "",
          "shortName": "Quaternion",
          "hasScreenshot": false,
          "namespace": "Ops.Gl.Matrix",
          "shortNameDisplay": "Quaternion",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.Matrix.Quaternion",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.Matrix.QuaternionCamera",
          "content": "",
          "attachmentFiles": [],
          "summary": "Set up a camera, rotated by a quaternion",
          "id": "7141c048-615e-47b5-9d8b-d0ceaad9bd79",
          "layout": {
              "portsIn": [
                  {
                      "type": "1",
                      "name": "render"
                  },
                  {
                      "type": "0",
                      "name": "eyeX",
                      "subType": "number"
                  },
                  {
                      "type": "0",
                      "name": "eyeY",
                      "subType": "number"
                  },
                  {
                      "type": "0",
                      "name": "eyeZ",
                      "subType": "number"
                  },
                  {
                      "type": "0",
                      "name": "quatX",
                      "subType": "number"
                  },
                  {
                      "type": "0",
                      "name": "quatY",
                      "subType": "number"
                  },
                  {
                      "type": "0",
                      "name": "quatZ",
                      "subType": "number"
                  },
                  {
                      "type": "0",
                      "name": "quatW",
                      "subType": "number"
                  },
                  {
                      "type": "0",
                      "name": "upX",
                      "subType": "number"
                  },
                  {
                      "type": "0",
                      "name": "upY",
                      "subType": "number"
                  },
                  {
                      "type": "0",
                      "name": "upZ",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": "1",
                      "name": "trigger"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1590408547203,
          "exampleProjectId": "",
          "shortName": "QuaternionCamera",
          "hasScreenshot": false,
          "namespace": "Ops.Gl.Matrix",
          "shortNameDisplay": "QuaternionCamera",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.Matrix.QuaternionCamera",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.Matrix.RandomGridPlacement",
          "content": "",
          "attachmentFiles": [],
          "summary": "place random objects on a grid",
          "id": "3353effa-851f-4c0f-bace-ba5e2e82ae49",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Exe"
                  },
                  {
                      "type": 0,
                      "name": "max Depth",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Possibility",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Seed",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Scale",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Width",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Height",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  },
                  {
                      "type": 0,
                      "name": "Index",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "depth",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "Possibility",
                      "text": "Propability to go into a deeper level"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1517222182124,
          "exampleProjectId": "FsZFVB",
          "issues": "this is slow, you should try the new version:  Ops.Gl.Matrix.RandomGridPlacementArrays",
          "shortName": "RandomGridPlacement",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.Matrix",
          "shortNameDisplay": "RandomGridPlacement",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.Matrix.RandomGridPlacement",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.Matrix.RandomGridPlacementArrays",
          "content": "",
          "attachmentFiles": [],
          "summary": "Place random objects on a grid",
          "id": "81f910ec-a11c-4bee-bd63-8ae036632d7d",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Exe"
                  },
                  {
                      "type": 0,
                      "name": "max Depth",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Possibility",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Seed",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Scale",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Width",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Height",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 3,
                      "name": "Positions"
                  },
                  {
                      "type": 3,
                      "name": "Scalings"
                  },
                  {
                      "type": 0,
                      "name": "Array Length",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Total Points",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "Possibility",
                      "text": "Propability to go into a deeper level"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1565935822451,
          "exampleProjectId": "PYUHNP",
          "shortName": "RandomGridPlacementArrays",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.Matrix",
          "shortNameDisplay": "RandomGridPlacementArrays",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.Matrix.RandomGridPlacementArrays",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.Matrix.Scale",
          "content": "<p>Enlarges or shrinks objects by a scale factor that is the same in all directions (uniform scaling).</p>\n<p>an additional multiplied scaling can be applied per axis.</p>\n",
          "attachmentFiles": [],
          "summary": "Scale all child objects (scaleXYZ)",
          "id": "50e7f565-0cdb-47ca-912b-87c04e2f00e3",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "render"
                  },
                  {
                      "type": 0,
                      "name": "scale",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "x",
                      "group": "Axis",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "y",
                      "group": "Axis",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "z",
                      "group": "Axis",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "trigger"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "render",
                      "text": "Triggers the scaling"
                  },
                  {
                      "name": "scale",
                      "text": "Scale factor"
                  },
                  {
                      "name": "trigger",
                      "text": "Triggers the next operator"
                  }
              ]
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [
              "5pucC-GuDcs"
          ],
          "created": 1506603608787,
          "exampleProjectId": "au9U7i",
          "shortName": "Scale",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.Matrix",
          "shortNameDisplay": "Scale",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.Matrix.Scale",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.Matrix.ScaleXYZViewMatrix",
          "content": "",
          "attachmentFiles": [],
          "summary": "scale xyz of viewmatrix",
          "id": "8b1fa9c9-0c4d-41b6-9c4f-8f4b633a9d7f",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "render"
                  },
                  {
                      "type": 0,
                      "name": "x",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "y",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "z",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "trigger"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1519811624556,
          "exampleProjectId": "aSB6On",
          "shortName": "ScaleXYZViewMatrix",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.Matrix",
          "shortNameDisplay": "ScaleXYZViewMatrix",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.Matrix.ScaleXYZViewMatrix",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false,
          "usedInProject": true
      },
      {
          "name": "Ops.Gl.Matrix.ScreenCoordinates_v2",
          "content": "",
          "attachmentFiles": [],
          "summary": "screen/pixel coordinates of the current transform",
          "id": "adbf5273-3275-490d-9002-e735b81cbb9a",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Execute"
                  },
                  {
                      "type": 0,
                      "name": "Pixel Unit index",
                      "subType": "integer"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Trigger"
                  },
                  {
                      "type": 0,
                      "name": "X",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Y",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Visible",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "Execute",
                      "text": "Trigger the op"
                  },
                  {
                      "name": "Trigger",
                      "text": "Trigger out"
                  },
                  {
                      "name": "X",
                      "text": "X coordinate"
                  },
                  {
                      "name": "Y",
                      "text": "Y coordinate"
                  },
                  {
                      "name": "Visible",
                      "text": "Boolean - is the shape on the screen"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1674816211146,
          "exampleProjectId": "-GNBD-",
          "shortName": "ScreenCoordinates_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.Matrix",
          "shortNameDisplay": "ScreenCoordinates",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.Matrix.ScreenCoordinates",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Gl.Matrix.ScreenCoordinates_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.Matrix.ScreenPosTo3d_v3",
          "content": "<p>Useful when you want to do things like convert the mouse co-ordinates on screen to 3d co-ordinates.</p>\n",
          "attachmentFiles": [],
          "summary": "convert screen coordinates to a 3d position",
          "id": "48d72532-afa6-40c9-a895-00a43635a94b",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Exec"
                  },
                  {
                      "type": 0,
                      "name": "X",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Y",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Input Type index",
                      "subType": "integer"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Trigger out"
                  },
                  {
                      "type": 0,
                      "name": "Result X",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Result Y",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "Exec",
                      "text": "Trigger in "
                  },
                  {
                      "name": "X",
                      "text": "Mouse co-ordinates in pixels X axis"
                  },
                  {
                      "name": "Y",
                      "text": "Mouse co-ordinates in pixels Y axis"
                  },
                  {
                      "name": "Result X",
                      "text": "Normalized position on the X axis"
                  },
                  {
                      "name": "Result Y",
                      "text": "Normalized position on the Y axis"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1519852858295,
          "exampleProjectId": "mDiCq6",
          "todos": [
              {
                  "message": "Add trigger out",
                  "author": "andro",
                  "id": "4fe81e4c-6c77-49e5-9d41-11af8d83272e",
                  "date": 1558357882570,
                  "deleted": true,
                  "deletedBy": "stephan",
                  "deletedDate": 1628170172386
              }
          ],
          "shortName": "ScreenPosTo3d_v3",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.Matrix",
          "shortNameDisplay": "ScreenPosTo3d",
          "version": 3,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.Matrix.ScreenPosTo3d_v2",
                  "versionString": "_v2",
                  "version": 2
              },
              {
                  "name": "Ops.Gl.Matrix.ScreenPosTo3d_v3",
                  "versionString": "_v3",
                  "version": 3
              }
          ],
          "allowEdit": false,
          "usedInProject": true
      },
      {
          "name": "Ops.Gl.Matrix.SetProjectionMatrix",
          "content": "",
          "attachmentFiles": [],
          "summary": "set a projection matrix",
          "id": "2c614eb3-ab11-4793-a085-3ef8f517e30b",
          "layout": {
              "portsIn": [
                  {
                      "type": "1",
                      "name": "exe"
                  },
                  {
                      "type": "3",
                      "name": "Matrix"
                  }
              ],
              "portsOut": [
                  {
                      "type": "1",
                      "name": "next"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1517222075223,
          "exampleProjectId": "573_4S",
          "shortName": "SetProjectionMatrix",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.Matrix",
          "shortNameDisplay": "SetProjectionMatrix",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.Matrix.SetProjectionMatrix",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.Matrix.Shear",
          "content": "",
          "attachmentFiles": [],
          "summary": "displaces each point of a mesh in fixed direction",
          "id": "02d76d99-67f2-4146-b906-8bce2c3ad6bb",
          "layout": {
              "portsIn": [
                  {
                      "type": "1",
                      "name": "render"
                  },
                  {
                      "type": "0",
                      "name": "shearX",
                      "subType": "number"
                  },
                  {
                      "type": "0",
                      "name": "shearY",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": "1",
                      "name": "trigger"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1517222103996,
          "exampleProjectId": "lJXpag",
          "shortName": "Shear",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.Matrix",
          "shortNameDisplay": "Shear",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.Matrix.Shear",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.Matrix.Transform",
          "content": "<p>All objects which are drawn after will be affected by this (translated, rotated and scaled).</p>\n",
          "attachmentFiles": [],
          "summary": "Transform objects in 3d space (rotate, translate, scale)",
          "id": "650baeb1-db2d-4781-9af6-ab4e9d4277be",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "render"
                  },
                  {
                      "type": 0,
                      "name": "posX",
                      "group": "Position",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "posY",
                      "group": "Position",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "posZ",
                      "group": "Position",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "scale",
                      "group": "Scale",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "rotX",
                      "group": "Rotation",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "rotY",
                      "group": "Rotation",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "rotZ",
                      "group": "Rotation",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "trigger"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "render",
                      "text": "Executes the op"
                  },
                  {
                      "name": "trigger",
                      "text": "Triggers the next op"
                  }
              ]
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [
              "5pucC-GuDcs"
          ],
          "created": 1504813928558,
          "exampleProjectId": "o741ft",
          "shortName": "Transform",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.Matrix",
          "shortNameDisplay": "Transform",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.Matrix.Transform",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.Matrix.TransformMatrix",
          "content": "",
          "attachmentFiles": [],
          "summary": "transform a matrix (mat4)",
          "id": "a5b09430-df1d-4e76-9a85-e34bfb7f934d",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Transform"
                  },
                  {
                      "type": 3,
                      "name": "Matrix"
                  },
                  {
                      "type": 0,
                      "name": "Translate X",
                      "group": "Translation",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Translate Y",
                      "group": "Translation",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Translate Z",
                      "group": "Translation",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Scale X",
                      "group": "Scale",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Scale Y",
                      "group": "Scale",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Scale Z",
                      "group": "Scale",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Rotation X",
                      "group": "Rotation",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Rotation Y",
                      "group": "Rotation",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Rotation Z",
                      "group": "Rotation",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  },
                  {
                      "type": 3,
                      "name": "Result"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1684237592389,
          "exampleProjectId": "A0W1Jx",
          "shortName": "TransformMatrix",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.Matrix",
          "shortNameDisplay": "TransformMatrix",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.Matrix.TransformMatrix",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.Matrix.TransformMul",
          "content": "",
          "attachmentFiles": [],
          "summary": "multiply current modelmatrix",
          "id": "2a83f565-7c5c-4cce-862f-d38481eb3726",
          "layout": {
              "portsIn": [
                  {
                      "type": "1",
                      "name": "render"
                  },
                  {
                      "type": "0",
                      "name": "mul",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": "1",
                      "name": "trigger"
                  }
              ]
          },
          "authorName": "pandur",
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1512669363610,
          "exampleProjectId": "",
          "shortName": "TransformMul",
          "hasScreenshot": false,
          "namespace": "Ops.Gl.Matrix",
          "shortNameDisplay": "TransformMul",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.Matrix.TransformMul",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.Matrix.TransformView",
          "content": "",
          "attachmentFiles": [],
          "summary": "transform the viewmatrix",
          "id": "0b3e04f7-323e-4ac8-8a22-a21e2f36e0e9",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "render"
                  },
                  {
                      "type": 0,
                      "name": "posX",
                      "group": "Position",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "posY",
                      "group": "Position",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "posZ",
                      "group": "Position",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "scale",
                      "group": "Scale",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "rotX",
                      "group": "Rotation",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "rotY",
                      "group": "Rotation",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "rotZ",
                      "group": "Rotation",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "trigger"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [
              "vIeAMFGA96E"
          ],
          "created": 1505078376060,
          "exampleProjectId": "0GAv8i",
          "shortName": "TransformView",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.Matrix",
          "shortNameDisplay": "TransformView",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.Matrix.TransformView",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.Matrix.Translate",
          "content": "<p>All elements which are drawn afterwards will be affected by this. If you use multiple transforms in a row the transformations will be stacked on top of each other (added).</p>\n",
          "attachmentFiles": [],
          "summary": "Translate objects (move / position in 3D space)",
          "id": "1f89ba0e-e7eb-46d7-8c66-7814b7c528b9",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "render"
                  },
                  {
                      "type": 0,
                      "name": "x",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "y",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "z",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "trigger"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "render",
                      "text": "Trigger translation"
                  },
                  {
                      "name": "x",
                      "text": "X axis translation"
                  },
                  {
                      "name": "y",
                      "text": "Y axis translation"
                  },
                  {
                      "name": "z",
                      "text": "Z axis translation"
                  },
                  {
                      "name": "trigger",
                      "text": "Trigger next op"
                  }
              ]
          },
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1511163184473,
          "exampleProjectId": "",
          "shortName": "Translate",
          "hasScreenshot": false,
          "namespace": "Ops.Gl.Matrix",
          "shortNameDisplay": "Translate",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.Matrix.Translate",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.Matrix.TranslateView",
          "content": "",
          "attachmentFiles": [],
          "summary": "translate the view/camera matrix",
          "id": "b15472e2-b895-4dde-95c3-239fa5e08afc",
          "layout": {
              "portsIn": [
                  {
                      "type": "1",
                      "name": "render"
                  },
                  {
                      "type": "0",
                      "name": "x",
                      "subType": "number"
                  },
                  {
                      "type": "0",
                      "name": "y",
                      "subType": "number"
                  },
                  {
                      "type": "0",
                      "name": "z",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": "1",
                      "name": "trigger"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1517221883316,
          "exampleProjectId": "",
          "shortName": "TranslateView",
          "hasScreenshot": false,
          "namespace": "Ops.Gl.Matrix",
          "shortNameDisplay": "TranslateView",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.Matrix.TranslateView",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.Matrix.VectorTranslate",
          "content": "",
          "attachmentFiles": [],
          "summary": "Translate any geometry underneath it using vectors and speed.",
          "id": "ca65a1bc-3efa-4b73-96c4-087003b9470a",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Exec"
                  },
                  {
                      "type": 0,
                      "name": "Speed",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Vector X",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Vector Y",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Vector Z",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Reset Position X",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Reset Position Y",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Reset Position Z",
                      "subType": "number"
                  },
                  {
                      "type": 1,
                      "name": "reset"
                  },
                  {
                      "type": 0,
                      "name": "max",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1517222226007,
          "exampleProjectId": "",
          "shortName": "VectorTranslate",
          "hasScreenshot": false,
          "namespace": "Ops.Gl.Matrix",
          "shortNameDisplay": "VectorTranslate",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.Matrix.VectorTranslate",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.Matrix.WASDCamera_v2",
          "content": "<p>Click in the canvas to enable the wasd camera, this also enables the pointerlock.\nPress escape to disable the pointerlock and regain control of the mouse.</p>\n",
          "attachmentFiles": [],
          "summary": "simple camera you control with W,A,S,D keys like in a FPS game",
          "id": "af6c3fe2-58a9-4f81-be41-4c21aabffde9",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "render"
                  },
                  {
                      "type": 0,
                      "name": "Enable pointer lock",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Speed",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Mouse Speed",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Allow Flying",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Active",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Move X+",
                      "group": "Move",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Move X-",
                      "group": "Move",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Move Y+",
                      "group": "Move",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Move Y-",
                      "group": "Move",
                      "subType": "boolean"
                  },
                  {
                      "type": 1,
                      "name": "Reset"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "trigger"
                  },
                  {
                      "type": 0,
                      "name": "isLocked",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "posX",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "posY",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "posZ",
                      "subType": "number"
                  },
                  {
                      "type": 1,
                      "name": "Mouse Left"
                  },
                  {
                      "type": 1,
                      "name": "Mouse Right"
                  },
                  {
                      "type": 0,
                      "name": "Dir X",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Dir Y",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Dir Z",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "render",
                      "text": "Trigger the op"
                  },
                  {
                      "name": "Enable pointer lock",
                      "text": "If true pointer lock can be enabled"
                  },
                  {
                      "name": "Allow Flying",
                      "text": "Allows vertical movement"
                  },
                  {
                      "name": "Speed",
                      "text": "Movement speed multiplier - default 1"
                  },
                  {
                      "name": "trigger",
                      "text": "trigger out"
                  },
                  {
                      "name": "isLocked",
                      "text": "If pointer lock is active this is true"
                  },
                  {
                      "name": "posX",
                      "text": "X position in space"
                  },
                  {
                      "name": "posY",
                      "text": "Y position in space"
                  },
                  {
                      "name": "posZ",
                      "text": "Z position in space"
                  },
                  {
                      "name": "Mouse Left",
                      "text": "Trigger out on left mouse button down"
                  },
                  {
                      "name": "Mouse Right",
                      "text": "Trigger out on right mouse button down"
                  },
                  {
                      "name": "Dir X",
                      "text": "Direction of camera X"
                  },
                  {
                      "name": "Dir Y",
                      "text": "Direction of camera Y"
                  },
                  {
                      "name": "Dir Z",
                      "text": "Direction of camera Z"
                  }
              ]
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1509796773993,
          "exampleProjectId": "oLCaao",
          "shortName": "WASDCamera_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.Matrix",
          "shortNameDisplay": "WASDCamera",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.Matrix.WASDCamera",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Gl.Matrix.WASDCamera_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.MediaRecorder_v2",
          "content": "<p>uses the browser to record the renderer-output to any videocodec supported by your browser</p>\n<p>As the MediaRecorder API does not create a video file duration, the video you download from your browser won&#39;t have a duration or seekable timeline - giving you some trouble when importing your video into a video editor application or the like. Most online social media services ignore this hiccup so generally it is fine to ignore. However if you need to have a videofile with a seekable timeline and proper duration you&#39;ll have to manually reencode/fix the video file generated by MediaRecorder. One simple tool is HandBrake - <a href=\"https://handbrake.fr/\">https://handbrake.fr/</a></p>\n",
          "attachmentFiles": [],
          "summary": "Record the renderer-output to video",
          "id": "685c632b-b9da-4c6e-aa22-0cfefb533dbf",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "Recording",
                      "subType": "boolean"
                  },
                  {
                      "type": 5,
                      "name": "Filename"
                  },
                  {
                      "type": 0,
                      "name": "Download Video",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Mimetype index",
                      "group": "Encoding",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "MBit",
                      "group": "Encoding",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Max FPS",
                      "group": "Encoding",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Force FPS",
                      "group": "Encoding",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Media index",
                      "values": [
                          "Video",
                          "Audio",
                          "Audio+Video"
                      ],
                      "group": "Inputs",
                      "subType": "integer"
                  },
                  {
                      "type": 2,
                      "name": "Audio In",
                      "group": "Inputs",
                      "objType": "audioNode"
                  },
                  {
                      "type": 0,
                      "name": "Canvas index",
                      "values": [
                          "Default",
                          "By Id"
                      ],
                      "group": "Canvas",
                      "subType": "integer"
                  },
                  {
                      "type": 5,
                      "name": "Video Canvas Id",
                      "group": "Canvas"
                  }
              ],
              "portsOut": [
                  {
                      "type": 5,
                      "name": "State"
                  },
                  {
                      "type": 5,
                      "name": "Error"
                  },
                  {
                      "type": 5,
                      "name": "Final Mimetype"
                  },
                  {
                      "type": 3,
                      "name": "Valid Mimetypes"
                  },
                  {
                      "type": 0,
                      "name": "Duration",
                      "subType": "number"
                  },
                  {
                      "type": 1,
                      "name": "Finished Recording"
                  },
                  {
                      "type": 5,
                      "name": "Video DataUrl"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [
              "zWfwC-GH7qk"
          ],
          "created": 1729690431847,
          "exampleProjectId": "ioiDIR",
          "shortName": "MediaRecorder_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Gl",
          "shortNameDisplay": "MediaRecorder",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.MediaRecorder",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Gl.MediaRecorder_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.MeshInstancer_v4",
          "content": "<p>A performant way to render a 3d object many times.</p>\n<p>The 3d object or mesh to be rendered needs to be connected as a geometry. Most meshes in cables output a geometry object that you can connect. Imported 3d meshes can also output geometries, e.g. see GltfGeometry operator.</p>\n<p>The object can be scaled differently each time, or have a different color, etc.</p>\n<p>The Billboarding option will render the object always perpendicular to the screen.\nSpherical billboarding means the object will be oriented flat to the screen, this is handy for 2d overlays.\nCylindrical billboarding can be used for instancing flat objects in a 3d environment, often used in games for rendering trees, grass or bushes as 2d planes.</p>\n",
          "attachmentFiles": [
              "att_billboard.vert",
              "att_instancer_body.frag",
              "att_instancer_body.vert",
              "att_instancer_head.frag",
              "att_instancer_head.vert"
          ],
          "summary": "Draw the same mesh multiple times on the GPU",
          "id": "cb58f461-a0bd-4159-a3cb-5e396198b4e9",
          "layout": {
              "portsIn": [
                  {
                      "type": "1",
                      "name": "exe"
                  },
                  {
                      "type": "2",
                      "name": "geom",
                      "objType": "geometry"
                  },
                  {
                      "type": "0",
                      "name": "Scale",
                      "subType": "number"
                  },
                  {
                      "type": "0",
                      "name": "Limit Instances",
                      "group": "Limit Number of Instances",
                      "subType": "boolean"
                  },
                  {
                      "type": "0",
                      "name": "Limit",
                      "group": "Limit Number of Instances",
                      "subType": "integer"
                  },
                  {
                      "type": "3",
                      "name": "positions",
                      "group": "Parameters"
                  },
                  {
                      "type": "3",
                      "name": "Scale Array",
                      "group": "Parameters"
                  },
                  {
                      "type": "3",
                      "name": "Rotations",
                      "group": "Parameters"
                  },
                  {
                      "type": "0",
                      "name": "Rotation Type index",
                      "group": "Parameters",
                      "subType": "integer"
                  },
                  {
                      "type": "0",
                      "name": "Billboarding index",
                      "subType": "integer"
                  },
                  {
                      "type": "0",
                      "name": "Material blend mode index",
                      "subType": "integer"
                  },
                  {
                      "type": "3",
                      "name": "Colors"
                  },
                  {
                      "type": "3",
                      "name": "TexCoords"
                  }
              ],
              "portsOut": [
                  {
                      "type": "1",
                      "name": "Trigger Out"
                  },
                  {
                      "type": "0",
                      "name": "Num",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "exe",
                      "text": "Trigger In"
                  },
                  {
                      "name": "geom",
                      "text": "The shape that will be instanced"
                  },
                  {
                      "name": "Scale",
                      "text": "Global scale for all instances, disabled if scale array is used"
                  },
                  {
                      "name": "Limit Instances",
                      "text": "Enable to set a limit on how many instances are created"
                  },
                  {
                      "name": "positions",
                      "text": "Needs an XYZ array to determine the positions of each instance"
                  },
                  {
                      "name": "Scale Array",
                      "text": "Needs an XYZ array to determine the scale of each instance"
                  },
                  {
                      "name": "Rotations",
                      "text": "Needs an XYZ array to determine the XYZ rotation of each instance. 0 - 360 degrees."
                  },
                  {
                      "name": "Material blend mode index",
                      "text": "Pick a material blend mode with an integer"
                  },
                  {
                      "name": "Colors",
                      "text": "Needs an RGBA array to determine the color of each instance."
                  },
                  {
                      "name": "TexCoords",
                      "text": "Needs an array4 in standard UV range (0-1). First two numbers are for UV coordinates. Second two are for UV scale. [ U, V,  U scale, V scale ]"
                  },
                  {
                      "name": "Trigger Out",
                      "text": "Trigger Out"
                  },
                  {
                      "name": "Num",
                      "text": "Total number of instances/shapes"
                  }
              ]
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [
              "DW9U5tv1GHM"
          ],
          "created": 1573750008766,
          "exampleProjectId": "oOsjJ5",
          "coreLibs": [
              "cgl_shadermodifier"
          ],
          "shortName": "MeshInstancer_v4",
          "hasScreenshot": true,
          "namespace": "Ops.Gl",
          "shortNameDisplay": "MeshInstancer",
          "version": 4,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.MeshInstancer",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Gl.MeshInstancer_v2",
                  "versionString": "_v2",
                  "version": 2
              },
              {
                  "name": "Ops.Gl.MeshInstancer_v3",
                  "versionString": "_v3",
                  "version": 3
              },
              {
                  "name": "Ops.Gl.MeshInstancer_v4",
                  "versionString": "_v4",
                  "version": 4
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.MeshMorph",
          "content": "",
          "attachmentFiles": [],
          "summary": "morph from one geometry to another",
          "id": "41bc544e-a0c9-450b-b657-405d80b1298c",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "render"
                  },
                  {
                      "type": 0,
                      "name": "Method index",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Geometry",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Duration",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Index",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Index 2",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Fade",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Easing index",
                      "subType": "integer"
                  },
                  {
                      "type": 2,
                      "name": "Geometry 0"
                  },
                  {
                      "type": 2,
                      "name": "Geometry 1"
                  },
                  {
                      "type": 2,
                      "name": "Geometry 2"
                  },
                  {
                      "type": 2,
                      "name": "Geometry 3"
                  },
                  {
                      "type": 2,
                      "name": "Geometry 4"
                  },
                  {
                      "type": 2,
                      "name": "Geometry 5"
                  },
                  {
                      "type": 2,
                      "name": "Geometry 6"
                  },
                  {
                      "type": 2,
                      "name": "Geometry 7"
                  },
                  {
                      "type": 2,
                      "name": "Geometry 8"
                  },
                  {
                      "type": 2,
                      "name": "Geometry 9"
                  },
                  {
                      "type": 2,
                      "name": "Geometry 10"
                  },
                  {
                      "type": 2,
                      "name": "Geometry 11"
                  },
                  {
                      "type": 2,
                      "name": "Geometry 12"
                  },
                  {
                      "type": 2,
                      "name": "Geometry 13"
                  },
                  {
                      "type": 2,
                      "name": "Geometry 14"
                  },
                  {
                      "type": 2,
                      "name": "Geometry 15"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "Finished",
                      "subType": "number"
                  },
                  {
                      "type": 1,
                      "name": "trigger"
                  }
              ]
          },
          "authorName": "pandur",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1508241684882,
          "exampleProjectId": "PdhglN",
          "coreLibs": [
              "cgl_shadermodifier"
          ],
          "shortName": "MeshMorph",
          "hasScreenshot": true,
          "namespace": "Ops.Gl",
          "shortNameDisplay": "MeshMorph",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.MeshMorph",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.Meshes.CablesLogo",
          "content": "",
          "attachmentFiles": [],
          "summary": "cables logo mesh/geometry",
          "id": "d53b5d7b-99b5-420e-b5a1-2d7c2c1f1ebb",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "render"
                  },
                  {
                      "type": 0,
                      "name": "Scale",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Draw",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "trigger"
                  },
                  {
                      "type": 2,
                      "name": "Geometry"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1540457633048,
          "exampleProjectId": "xUMq3j",
          "shortName": "CablesLogo",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.Meshes",
          "shortNameDisplay": "CablesLogo",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.Meshes.CablesLogo",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false,
          "namespaceTitle": "Ops.Gl.Meshes",
          "namespaceSummary": "WebGl Ops"
      },
      {
          "name": "Ops.Gl.Meshes.Circle_v3",
          "content": "<p>Draws a circle to the canvas.</p>\n",
          "attachmentFiles": [],
          "summary": "Draws a circle",
          "id": "ae07830b-91c3-4cbe-a7d6-d3b737392c16",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "render"
                  },
                  {
                      "type": 0,
                      "name": "radius",
                      "group": "Size",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "innerRadius",
                      "group": "Size",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "segments",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "percent",
                      "group": "Display",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "steps",
                      "group": "Display",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "invertSteps",
                      "group": "Display",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "mapping index",
                      "values": [
                          "flat",
                          "round"
                      ],
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Spline",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Draw",
                      "uititle": "Render mesh",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "trigger"
                  },
                  {
                      "type": 2,
                      "name": "geometry",
                      "objType": "geometry"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "render",
                      "text": "Executes the op, renders a circle to the canvas."
                  },
                  {
                      "name": "innerRadius",
                      "text": "From 0 to 1"
                  }
              ]
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1702643016625,
          "exampleProjectId": "DAAkQ6",
          "shortName": "Circle_v3",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.Meshes",
          "shortNameDisplay": "Circle",
          "version": 3,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.Meshes.Circle",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Gl.Meshes.Circle_v2",
                  "versionString": "_v2",
                  "version": 2
              },
              {
                  "name": "Ops.Gl.Meshes.Circle_v3",
                  "versionString": "_v3",
                  "version": 3
              }
          ],
          "allowEdit": false,
          "usedInProject": true
      },
      {
          "name": "Ops.Gl.Meshes.ComposingGridOverlay",
          "content": "",
          "attachmentFiles": [
              "att_inc_gen_ports.js",
              "att_ports.json",
              "att_subpatch_json"
          ],
          "summary": "Rule of thirds image composition helper",
          "id": "21f5515b-21cc-4d4a-b47a-279b0a0c9efc",
          "layout": {
              "portsIn": [
                  {
                      "type": "1",
                      "name": "d19uw4ogh",
                      "uititle": "Render"
                  },
                  {
                      "type": "0",
                      "name": "m8bjeyajy",
                      "uititle": "Scale",
                      "subType": "number"
                  },
                  {
                      "type": "0",
                      "name": "3yfne154r",
                      "uititle": "Show Center",
                      "subType": "boolean"
                  }
              ],
              "portsOut": []
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1706620823233,
          "exampleProjectId": "G8mQQ2",
          "coreLibs": [
              "subpatchop"
          ],
          "shortName": "ComposingGridOverlay",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.Meshes",
          "shortNameDisplay": "ComposingGridOverlay",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.Meshes.ComposingGridOverlay",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.Meshes.Cone",
          "content": "",
          "attachmentFiles": [],
          "summary": "Draw a cone",
          "id": "b67027f5-8f56-4aa0-8bb3-18d42ff15ffe",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "render"
                  },
                  {
                      "type": 0,
                      "name": "slices",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "stacks",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "radius",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "height",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Active",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "trigger"
                  },
                  {
                      "type": 2,
                      "name": "geometry"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "render",
                      "text": "Trigger the op"
                  },
                  {
                      "name": "slices",
                      "text": "number of horizontal segments"
                  },
                  {
                      "name": "stacks",
                      "text": "number of vertical segments"
                  },
                  {
                      "name": "radius",
                      "text": "radius of the cone"
                  },
                  {
                      "name": "height",
                      "text": "height of the cone"
                  },
                  {
                      "name": "Active",
                      "text": "if checked, cone gets rendered"
                  },
                  {
                      "name": "trigger",
                      "text": "trigger output"
                  },
                  {
                      "name": "geometry",
                      "text": "geometry output"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1537800182423,
          "exampleProjectId": "fGA7W6",
          "shortName": "Cone",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.Meshes",
          "shortNameDisplay": "Cone",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.Meshes.Cone",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.Meshes.Corner",
          "content": "",
          "attachmentFiles": [],
          "summary": "render a rectangular corner",
          "id": "7624c3bb-d22f-47f3-8581-2ecca73bb12f",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Render"
                  },
                  {
                      "type": 0,
                      "name": "Width",
                      "group": "Size",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Height",
                      "group": "Size",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Thickness",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Draw",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "pivot x index",
                      "group": "Align",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "pivot y index",
                      "group": "Align",
                      "subType": "integer"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "trigger"
                  },
                  {
                      "type": 2,
                      "name": "Geometry"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1512549598302,
          "exampleProjectId": "KWolQ6",
          "shortName": "Corner",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.Meshes",
          "shortNameDisplay": "Corner",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.Meshes.Corner",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.Meshes.Cross",
          "content": "",
          "attachmentFiles": [],
          "summary": "Draws a cross with controllable thickness and length. ",
          "id": "eab5773b-dd10-4617-a8a0-e3990b10477a",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Render"
                  },
                  {
                      "type": 0,
                      "name": "Size",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Thickness",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Crosshair",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Left",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Right",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Top",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Bottom",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Active",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  },
                  {
                      "type": 2,
                      "name": "Geometry"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1540369391208,
          "exampleProjectId": "ojTS_o",
          "shortName": "Cross",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.Meshes",
          "shortNameDisplay": "Cross",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.Meshes.Cross",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.Meshes.Cube_v2",
          "content": "<p>Draws a cube to the canvas. Please note that without doing a rotation you will only see a rectangle.</p>\n",
          "attachmentFiles": [],
          "summary": "draw a cube",
          "id": "37b92ba4-cea5-42ae-bf28-a513ca28549c",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Render"
                  },
                  {
                      "type": 0,
                      "name": "Render Mesh",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Width",
                      "group": "Geometry",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Length",
                      "group": "Geometry",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Height",
                      "group": "Geometry",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Center",
                      "group": "Geometry",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Mapping index",
                      "values": [
                          "Side",
                          "Cube +-",
                          "SideWrap"
                      ],
                      "group": "Mapping",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Bias",
                      "group": "Mapping",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Flip X",
                      "group": "Mapping",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Top",
                      "group": "Sides",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Bottom",
                      "group": "Sides",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Left",
                      "group": "Sides",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Right",
                      "group": "Sides",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Front",
                      "group": "Sides",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Back",
                      "group": "Sides",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  },
                  {
                      "type": 2,
                      "name": "geometry",
                      "objType": "geometry"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "Render",
                      "text": "Executes the op, renders a cube to the canvas."
                  }
              ]
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1588860433700,
          "exampleProjectId": "0ghhQ6",
          "shortName": "Cube_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.Meshes",
          "shortNameDisplay": "Cube",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.Meshes.Cube",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Gl.Meshes.Cube_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.Meshes.Cylinder_v2",
          "content": "",
          "attachmentFiles": [],
          "summary": "draw parameterizable cylinder (aka tube,pipe,round,circle)",
          "id": "2899ad67-1e64-4692-af2a-c3b9078f1b5f",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "render"
                  },
                  {
                      "type": 0,
                      "name": "Draw",
                      "uititle": "Render mesh",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "segments",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "stacks",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "length",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "outer radius",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "inner radius",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Flip Mapping",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Caps",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Flat Normals",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "next"
                  },
                  {
                      "type": 2,
                      "name": "geometry"
                  }
              ]
          },
          "authorName": "_LJ_",
          "docs": {
              "ports": [
                  {
                      "name": "render",
                      "text": "Trigger in "
                  },
                  {
                      "name": "Draw",
                      "text": "Enable to render geometry on screen"
                  },
                  {
                      "name": "segments",
                      "text": "Amount of segments, higher numbers result in smoother results "
                  },
                  {
                      "name": "stacks",
                      "text": "Amount of stacks, higher numbers result in smoother results "
                  },
                  {
                      "name": "length",
                      "text": "Length of cylinder"
                  },
                  {
                      "name": "outer radius",
                      "text": "Size of outer radius"
                  },
                  {
                      "name": "inner radius",
                      "text": "Size of inner radius, set to 0 to not cut out the center"
                  },
                  {
                      "name": "UV mode",
                      "text": "Atlas or simple"
                  },
                  {
                      "name": "Caps",
                      "text": "Render caps/ top bottom section of cylinder"
                  },
                  {
                      "name": "next",
                      "text": "Trigger out"
                  },
                  {
                      "name": "geometry",
                      "text": "Geometry out"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1540984639051,
          "exampleProjectId": "GxagQ6",
          "shortName": "Cylinder_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.Meshes",
          "shortNameDisplay": "Cylinder",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.Meshes.Cylinder",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Gl.Meshes.Cylinder_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.Meshes.FloorGrid",
          "content": "<p>can not be used with materials.</p>\n<p>grid spacing is one unit</p>\n",
          "attachmentFiles": [
              "att_grid.frag",
              "att_grid.vert"
          ],
          "summary": "draw a grid on the floor",
          "id": "645b3877-4fdd-42e5-a369-d9506a65e2f0",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Render"
                  },
                  {
                      "type": 0,
                      "name": "Active",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1581003776907,
          "exampleProjectId": "LiwB16",
          "shortName": "FloorGrid",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.Meshes",
          "shortNameDisplay": "FloorGrid",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.Meshes.FloorGrid",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false,
          "usedInProject": true
      },
      {
          "name": "Ops.Gl.Meshes.FreeFormPlane",
          "content": "<p>A simple plane (composed of two triangles), where each vertex can be repositioned individually in all three axis (XYZ).</p>\n<p>To deform the texture coordinates, use the Tc values (Tc XY).</p>\n<p>You can also turn on Show Transforms and Helpers in the Canvas renderer in the editor to easily adjust the corners of your plane with handle gizmos.</p>\n",
          "attachmentFiles": [],
          "summary": "A freely deformable plane, rectangle, polygon",
          "id": "7f03c044-ae95-4273-8d90-0e1c91ecffc7",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "render"
                  },
                  {
                      "type": 0,
                      "name": "x 1",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "y 1",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "z 1",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "x 2",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "y 2",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "z 2",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "x 3",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "y 3",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "z 3",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "x 4",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "y 4",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "z 4",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "tc x 1",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "tc y 1",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "tc x 2",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "tc y 2",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "tc x 3",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "tc y 3",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "tc x 4",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "tc y 4",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "trigger"
                  },
                  {
                      "type": 2,
                      "name": "geometry"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1506614639303,
          "exampleProjectId": "Q92nQ6",
          "shortName": "FreeFormPlane",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.Meshes",
          "shortNameDisplay": "FreeFormPlane",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.Meshes.FreeFormPlane",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.Meshes.FullscreenRectangle_v2",
          "content": "",
          "attachmentFiles": [
              "att_shader.frag",
              "att_shader.vert"
          ],
          "summary": "Draws a rectangle using the full WebGL canvas size",
          "id": "fb70721a-eac2-4ff5-a5a2-5c59e2393972",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "render"
                  },
                  {
                      "type": 0,
                      "name": "Scale index",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Flip Y",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Flip X",
                      "subType": "boolean"
                  },
                  {
                      "type": 2,
                      "name": "Texture",
                      "objType": "texture"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "trigger"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "render",
                      "text": "Draw the Rectangle"
                  },
                  {
                      "name": "trigger",
                      "text": "Trigger the next op to execute"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1687515551692,
          "exampleProjectId": "uKkIeG",
          "shortName": "FullscreenRectangle_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.Meshes",
          "shortNameDisplay": "FullscreenRectangle",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.Meshes.FullscreenRectangle",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Gl.Meshes.FullscreenRectangle_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.Meshes.GeometryToTexture_v3",
          "content": "<p>Once triggered this operator converts a given geometry to an HDR texture where every pixel contains XYZ position data of the given geometry, represented with RGB values.</p>\n",
          "attachmentFiles": [
              "att_fragpos.frag",
              "att_vertpos.vert",
              "att_vertpos_head.vert"
          ],
          "summary": "Convert vertices of a geometry to a data texture",
          "id": "2c17be7d-2fdd-449f-8dfd-b4f546f0546e",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Render"
                  },
                  {
                      "type": 2,
                      "name": "Geometry",
                      "objType": "geometry"
                  },
                  {
                      "type": 0,
                      "name": "Continously Update",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Order index",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Content index",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Resize index",
                      "values": [
                          "None",
                          "Rescale"
                      ],
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "New Size",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Size index",
                      "values": [
                          "Auto",
                          "Manual"
                      ],
                      "group": "Texture settings",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Tex Width",
                      "group": "Texture settings",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "filter index",
                      "group": "Texture settings",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "wrap index",
                      "group": "Texture settings",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Pixel Format index",
                      "group": "Texture settings",
                      "subType": "integer"
                  },
                  {
                      "type": 2,
                      "name": "Color Texture",
                      "objType": "texture"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  },
                  {
                      "type": 0,
                      "name": "Total Vertices",
                      "subType": "number"
                  },
                  {
                      "type": 2,
                      "name": "Texture",
                      "objType": "texture"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [
              "PrkdnENo8wQ"
          ],
          "created": 1725386090956,
          "exampleProjectId": "bhWkpX",
          "coreLibs": [
              "cgl_shadermodifier"
          ],
          "shortName": "GeometryToTexture_v3",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.Meshes",
          "shortNameDisplay": "GeometryToTexture",
          "version": 3,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.Meshes.GeometryToTexture",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Gl.Meshes.GeometryToTexture_v2",
                  "versionString": "_v2",
                  "version": 2
              },
              {
                  "name": "Ops.Gl.Meshes.GeometryToTexture_v3",
                  "versionString": "_v3",
                  "version": 3
              }
          ],
          "allowEdit": false,
          "usedInProject": true
      },
      {
          "name": "Ops.Gl.Meshes.Grid",
          "content": "",
          "attachmentFiles": [],
          "summary": "Draw a simple grid of lines",
          "id": "677a7c03-6885-46b4-8a64-e4ea54ee5d7f",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Render"
                  },
                  {
                      "type": 0,
                      "name": "Num",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Spacing",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Center",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Axis index",
                      "subType": "integer"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1535149946140,
          "exampleProjectId": "VxPlQ6",
          "shortName": "Grid",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.Meshes",
          "shortNameDisplay": "Grid",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.Meshes.Grid",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.Meshes.HeightMap",
          "content": "",
          "attachmentFiles": [],
          "summary": "generate a rectangular mesh where the height is defined by the luminance of an image",
          "id": "81264799-d92b-4b71-a3f1-ad1da8331e62",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "render"
                  },
                  {
                      "type": 5,
                      "name": "file"
                  },
                  {
                      "type": 0,
                      "name": "extrude",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "width",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "height",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "rows",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "columns",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "texCoords slice",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "flat",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "trigger"
                  },
                  {
                      "type": 2,
                      "name": "geometry"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1519026735626,
          "exampleProjectId": "bRlSDe",
          "shortName": "HeightMap",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.Meshes",
          "shortNameDisplay": "HeightMap",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.Meshes.HeightMap",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.Meshes.Helix",
          "content": "",
          "attachmentFiles": [],
          "summary": "generates a helix, spiral spline",
          "id": "f41fabfc-14c0-4472-a00a-6ab1dcdcc4bc",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "render"
                  },
                  {
                      "type": 0,
                      "name": "Draw",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Segments",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Frequency",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Radius",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Radius End",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Height",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  },
                  {
                      "type": 3,
                      "name": "Points"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1519138899037,
          "exampleProjectId": "CW8-I6",
          "shortName": "Helix",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.Meshes",
          "shortNameDisplay": "Helix",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.Meshes.Helix",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false,
          "usedInProject": true
      },
      {
          "name": "Ops.Gl.Meshes.Icosahedron_v2",
          "content": "",
          "attachmentFiles": [],
          "summary": "Renders a icosahedron (polyhedron with 20 faces)",
          "id": "43f6c3cf-4982-4eaa-ba70-8b556f6e3286",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "render"
                  },
                  {
                      "type": 0,
                      "name": "smooth",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Render Mesh",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "trigger"
                  },
                  {
                      "type": 2,
                      "name": "geometry"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "render",
                      "text": "Renders the icosahedron"
                  },
                  {
                      "name": "trigger",
                      "text": "Triggers the next op"
                  },
                  {
                      "name": "geometry",
                      "text": "The geometry of the polyhedron"
                  }
              ]
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1719417176393,
          "exampleProjectId": "Ie6iQ6",
          "shortName": "Icosahedron_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.Meshes",
          "shortNameDisplay": "Icosahedron",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.Meshes.Icosahedron",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Gl.Meshes.Icosahedron_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.Meshes.Line",
          "content": "",
          "attachmentFiles": [],
          "summary": "Draw a line between two points",
          "id": "c6a0d570-a0ac-4655-b17d-74d0870b0799",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Render"
                  },
                  {
                      "type": 0,
                      "name": "X 1",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Y 1",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Z 1",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "X 2",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Y 2",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Z 2",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  },
                  {
                      "type": 3,
                      "name": "Array"
                  }
              ]
          },
          "authorName": "pandur",
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1541225050374,
          "exampleProjectId": "D_eE98",
          "shortName": "Line",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.Meshes",
          "shortNameDisplay": "Line",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.Meshes.Line",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false,
          "usedInProject": true
      },
      {
          "name": "Ops.Gl.Meshes.LinesArray",
          "content": "",
          "attachmentFiles": [],
          "summary": "an array of lines",
          "id": "a75265c2-957b-4719-9d03-7bbf00ace364",
          "layout": {
              "portsIn": [
                  {
                      "type": "1",
                      "name": "render"
                  },
                  {
                      "type": "0",
                      "name": "width",
                      "group": "Size",
                      "subType": "number"
                  },
                  {
                      "type": "0",
                      "name": "height",
                      "group": "Size",
                      "subType": "number"
                  },
                  {
                      "type": "0",
                      "name": "Logarithmic",
                      "subType": "boolean"
                  },
                  {
                      "type": "0",
                      "name": "pivot x index",
                      "subType": "integer"
                  },
                  {
                      "type": "0",
                      "name": "pivot y index",
                      "subType": "integer"
                  },
                  {
                      "type": "0",
                      "name": "num columns",
                      "subType": "integer"
                  },
                  {
                      "type": "0",
                      "name": "num rows",
                      "subType": "integer"
                  },
                  {
                      "type": "0",
                      "name": "axis index",
                      "subType": "integer"
                  }
              ],
              "portsOut": [
                  {
                      "type": "1",
                      "name": "trigger"
                  },
                  {
                      "type": "3",
                      "name": "Point Arrays"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1519814033280,
          "exampleProjectId": "oXke6r",
          "shortName": "LinesArray",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.Meshes",
          "shortNameDisplay": "LinesArray",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.Meshes.LinesArray",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.Meshes.MeshInstancerFromTexture_v3",
          "content": "<p>A performant way to render a 3d object many times.</p>\n<p>Data like position, scaling, colors etc. are delivered as RGB channels in textures. \nRGB values represent XYZ coordinates in the position or scale input texture. Make sure the texture format has the required precision (16 bit or 32bit textures are a probably a must)</p>\n<p>The 3d object or mesh to be rendered needs to be connected as a geometry. Most meshes in cables output a geometry object that you can connect. Imported 3d meshes can also output geometries, e.g. see GltfGeometry operator.</p>\n<p>The object can be scaled differently each time, or have a different color, etc.</p>\n<p>The Billboarding option will render the object always perpendicular to the screen.\nSpherical billboarding means the object will be oriented flat to the screen, this is handy for 2d overlays.\nCylindrical billboarding can be used for instancing flat objects in a 3d environment, often used in games for rendering trees, grass or bushes as 2d planes.</p>\n",
          "attachmentFiles": [
              "att_billboard.vert",
              "att_instancer_body.frag",
              "att_instancer_body.vert",
              "att_instancer_head.frag",
              "att_instancer_head.vert"
          ],
          "summary": "Draw the same mesh multiple times on the GPU",
          "id": "bf24bfd5-61be-4590-a34a-d3fcdcf543be",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "exe"
                  },
                  {
                      "type": 2,
                      "name": "Geometry",
                      "objType": "geometry"
                  },
                  {
                      "type": 0,
                      "name": "Scale",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Limit Instances",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Num Instances",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Billboarding index",
                      "values": [
                          "Off",
                          "Spherical",
                          "Cylindrical"
                      ],
                      "subType": "integer"
                  },
                  {
                      "type": 2,
                      "name": "Position Texture",
                      "objType": "texture"
                  },
                  {
                      "type": 2,
                      "name": "Rotation Texture",
                      "objType": "texture"
                  },
                  {
                      "type": 0,
                      "name": "Rotation index",
                      "values": [
                          "Euler",
                          "Normal",
                          "Quaternion"
                      ],
                      "subType": "integer"
                  },
                  {
                      "type": 2,
                      "name": "Scale Texture",
                      "objType": "texture"
                  },
                  {
                      "type": 2,
                      "name": "Color Texture",
                      "objType": "texture"
                  },
                  {
                      "type": 2,
                      "name": "TexCoord Texture",
                      "objType": "texture"
                  },
                  {
                      "type": 0,
                      "name": "Color Texture Blendmode index",
                      "values": [
                          "Multiply",
                          "Add",
                          "Normal"
                      ],
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Ignore Alpha Less Than",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Multiply Pos X",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Multiply Pos Y",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Multiply Pos Z",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Trigger Out"
                  },
                  {
                      "type": 0,
                      "name": "Num",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "exe",
                      "text": "Trigger In"
                  },
                  {
                      "name": "Scale",
                      "text": "Global scale for all instances, disabled if scale array is used"
                  },
                  {
                      "name": "Trigger Out",
                      "text": "Trigger Out"
                  },
                  {
                      "name": "Num",
                      "text": "Total number of instances/shapes"
                  }
              ]
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [
              "PrkdnENo8wQ"
          ],
          "created": 1675785124583,
          "exampleProjectId": "H3cEpX",
          "coreLibs": [
              "cgl_shadermodifier"
          ],
          "shortName": "MeshInstancerFromTexture_v3",
          "hasScreenshot": false,
          "namespace": "Ops.Gl.Meshes",
          "shortNameDisplay": "MeshInstancerFromTexture",
          "version": 3,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.Meshes.MeshInstancerFromTexture",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Gl.Meshes.MeshInstancerFromTexture_v2",
                  "versionString": "_v2",
                  "version": 2
              },
              {
                  "name": "Ops.Gl.Meshes.MeshInstancerFromTexture_v3",
                  "versionString": "_v3",
                  "version": 3
              }
          ],
          "allowEdit": false,
          "usedInProject": true
      },
      {
          "name": "Ops.Gl.Meshes.ParametricSurface",
          "content": "<p>A parametric surface is a surface in 3d space that is defined by a parametric equation of 2 parameters.</p>\n<p>Simplified, it is a mapping from (u, v) -&gt; (x, y, z).</p>\n<p>With this op, you have the possibility to define your own parametric surfaces by specifying a function for each 3d component (x, y, z). These functions may include all mathematic operations javascript is capable of. </p>\n<p>For a reference of mathematical functions availible, please refer to the Javascript Math object: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math</a></p>\n<p>There are presets you can choose from, which are a good starting point if you are unfamiliar with the mathematics.</p>\n<p>For further reading (if you&#39;re not scared of maths!), please refer to</p>\n<p><a href=\"https://math.oregonstate.edu/home/programs/undergrad/CalculusQuestStudyGuides/vcalc/parsurf/parsurf.html\">https://math.oregonstate.edu/home/programs/undergrad/CalculusQuestStudyGuides/vcalc/parsurf/parsurf.html</a></p>\n<p>or</p>\n<p><a href=\"https://www.youtube.com/watch?v=MmTNkRA0yyk\">https://www.youtube.com/watch?v=MmTNkRA0yyk</a></p>\n<p>to get an overview.</p>\n<p>If you are just looking for formulas to put in, refer to </p>\n<p><a href=\"http://www.3d-meier.de/tut3/Seite0.html\">http://www.3d-meier.de/tut3/Seite0.html</a></p>\n<p>as a starting point (German only, but not too hard to figure out).</p>\n",
          "attachmentFiles": [],
          "summary": "Creates a 3d mesh from a 2d area expressions",
          "id": "5d3211a6-801d-4e59-ba6f-546ffe5fd34a",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "shapes index",
                      "subType": "integer"
                  },
                  {
                      "type": 1,
                      "name": "render"
                  },
                  {
                      "type": 0,
                      "name": "u Segments",
                      "group": "Segments",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "v Segments",
                      "group": "Segments",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Multiple of PI - u",
                      "group": "U range",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "uMin",
                      "group": "U range",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "uMax",
                      "group": "U range",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Displace U",
                      "group": "U range",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Multiple of PI - v",
                      "group": "V range",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "vMin",
                      "group": "V range",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "vMax",
                      "group": "V range",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Displace V",
                      "group": "V range",
                      "subType": "number"
                  },
                  {
                      "type": 5,
                      "name": "X Function",
                      "group": "XYZ Functions"
                  },
                  {
                      "type": 5,
                      "name": "Y Function",
                      "group": "XYZ Functions"
                  },
                  {
                      "type": 5,
                      "name": "Z Function",
                      "group": "XYZ Functions"
                  },
                  {
                      "type": 0,
                      "name": "Scale X",
                      "group": "Scaling",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Scale Y",
                      "group": "Scaling",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Scale Z",
                      "group": "Scaling",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Draw",
                      "group": "Draw",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "trigger"
                  },
                  {
                      "type": 2,
                      "name": "geometry"
                  },
                  {
                      "type": 3,
                      "name": "Position"
                  },
                  {
                      "type": 0,
                      "name": "Position Amount",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "simod",
          "docs": {
              "ports": [
                  {
                      "name": "shapes",
                      "text": "Dropdown menu to choose presets from."
                  },
                  {
                      "name": "render",
                      "text": "Trigger input"
                  },
                  {
                      "name": "u Segments",
                      "text": "number of segments on the U axis"
                  },
                  {
                      "name": "v Segments",
                      "text": "number of segments on the V axis"
                  },
                  {
                      "name": "Multiple of PI - u",
                      "text": "whether uMin & uMax should be multiplied with PI"
                  },
                  {
                      "name": "uMin",
                      "text": "boundary start U"
                  },
                  {
                      "name": "uMax",
                      "text": "boundary end U"
                  },
                  {
                      "name": "Displace U",
                      "text": "displace U range"
                  },
                  {
                      "name": "Multiple of PI - v",
                      "text": "whether vMin & vMax should be multiplied with PI"
                  },
                  {
                      "name": "vMin",
                      "text": "boundary start V"
                  },
                  {
                      "name": "vMax",
                      "text": "boundary end V"
                  },
                  {
                      "name": "Displace V",
                      "text": "displace V range"
                  },
                  {
                      "name": "X Function",
                      "text": "uv function for x coordinates, allowed values: u, v"
                  },
                  {
                      "name": "Y Function",
                      "text": "uv function for y coordinates, allowed values: u, v"
                  },
                  {
                      "name": "Z Function",
                      "text": "uv function for z coordinates, allowed values: u, v"
                  },
                  {
                      "name": "Scale X",
                      "text": "scale x coordinates by given amount"
                  },
                  {
                      "name": "Scale Y",
                      "text": "scale y coordinates by given amount"
                  },
                  {
                      "name": "Scale Z",
                      "text": "scale z coordinates by given amount"
                  },
                  {
                      "name": "Draw",
                      "text": "whether the shape should be drawn"
                  },
                  {
                      "name": "trigger",
                      "text": "trigger out"
                  },
                  {
                      "name": "geometry",
                      "text": "outputs the geometry of the surface"
                  },
                  {
                      "name": "Position",
                      "text": "outputs the vertices of the surface (as an xyz-Array)"
                  },
                  {
                      "name": "Position Amount",
                      "text": "outputs the length of the vertices array"
                  }
              ]
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1562753968852,
          "exampleProjectId": "TnUBsL",
          "shortName": "ParametricSurface",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.Meshes",
          "shortNameDisplay": "ParametricSurface",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.Meshes.ParametricSurface",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false,
          "usedInProject": true
      },
      {
          "name": "Ops.Gl.Meshes.PointCloudFromArray_v2",
          "content": "<p>This op works together with the pointMaterial op and also requires a xyz array to render the points. </p>\n",
          "attachmentFiles": [],
          "summary": "visualize an array of coordinates as points",
          "id": "53bc6de5-8d22-4687-9f03-ccfd3e50d106",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "exe"
                  },
                  {
                      "type": 3,
                      "name": "Array",
                      "uititle": "Positions"
                  },
                  {
                      "type": 0,
                      "name": "Num Points",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Scramble Texcoords",
                      "group": "Texture Coordinates",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Seed",
                      "group": "Texture Coordinates",
                      "subType": "number"
                  },
                  {
                      "type": 3,
                      "name": "Coordinates",
                      "uititle": "Texture Coordinates",
                      "group": "Texture Coordinates"
                  },
                  {
                      "type": 3,
                      "name": "Point sizes"
                  },
                  {
                      "type": 3,
                      "name": "Vertex Colors"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Trigger out"
                  },
                  {
                      "type": 2,
                      "name": "Geometry"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "exe",
                      "text": "Trigger the op"
                  },
                  {
                      "name": "Array",
                      "text": "xyz array in"
                  },
                  {
                      "name": "Num Points",
                      "text": "Define how many points are rendered. Overrides the xyz array in."
                  },
                  {
                      "name": "Scramble Texcoords",
                      "text": "Scramble xyz array and color lookup when connected to pointMaterial op with a texture"
                  },
                  {
                      "name": "Seed",
                      "text": "Random seed for Scramble Texcoords"
                  },
                  {
                      "name": "Coordinates",
                      "text": "Array2 for texture coordinates to cover your point cloud"
                  },
                  {
                      "name": "Vertex Colors",
                      "text": "input an Array4 (RGBA) - must be the correct size to color all of your points. PointMaterial needs to be set to \"use vertex colors\""
                  },
                  {
                      "name": "Geometry",
                      "text": "Outputs geometry object"
                  }
              ]
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [
              "tFM2Ixf-ixs"
          ],
          "created": 1726142850228,
          "exampleProjectId": "v8G4Wz",
          "shortName": "PointCloudFromArray_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.Meshes",
          "shortNameDisplay": "PointCloudFromArray",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.Meshes.PointCloudFromArray",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Gl.Meshes.PointCloudFromArray_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.Meshes.PointCloudFromTexture",
          "content": "",
          "attachmentFiles": [
              "att_vertposbody.vert"
          ],
          "summary": "Visualize a RGB texture as XYZ coordinates as points",
          "id": "105d8812-e641-47f2-bbaf-e45d5bc3ea8b",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "render"
                  },
                  {
                      "type": 0,
                      "name": "Num Points",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Axis index",
                      "values": [
                          "XYZ",
                          "XY"
                      ],
                      "subType": "integer"
                  },
                  {
                      "type": 2,
                      "name": "Texture",
                      "objType": "texture"
                  },
                  {
                      "type": 2,
                      "name": "Point Size",
                      "objType": "texture"
                  },
                  {
                      "type": 0,
                      "name": "Normalize",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Remove Point at 0",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Ignore Alpha 0",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Trigger"
                  },
                  {
                      "type": 0,
                      "name": "Total Points",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "Num Points",
                      "text": "set a limit to the number of points that will be rendered - \"0\" is no limit"
                  },
                  {
                      "name": "Axis index",
                      "text": "XYZ or XY (2d) cloud mode"
                  },
                  {
                      "name": "Texture",
                      "text": "RGB texture input where each pixels color value assigns a points position in 3D space"
                  },
                  {
                      "name": "Point Size",
                      "text": "mono color texture input to change each points size"
                  },
                  {
                      "name": "Normalize",
                      "text": "center the pointcloud"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [
              "PrkdnENo8wQ"
          ],
          "created": 1614467987844,
          "exampleProjectId": "bhWkpX",
          "coreLibs": [
              "cgl_shadermodifier"
          ],
          "shortName": "PointCloudFromTexture",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.Meshes",
          "shortNameDisplay": "PointCloudFromTexture",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.Meshes.PointCloudFromTexture",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.Meshes.Polyhedron_v2",
          "content": "<p>Generate and modify polyhedron meshes to create complex topologies.</p>\n<p>See this page for more information about the notation:\n<a href=\"https://github.com/mikolalysenko/conway-hart\">https://github.com/mikolalysenko/conway-hart</a></p>\n<p>Seeds:</p>\n<ul>\n<li>&quot;T&quot; Tetrahedron</li>\n<li>&quot;C&quot; Cube</li>\n<li>&quot;O&quot; Octahedron</li>\n<li>&quot;D&quot; Dodecahedron</li>\n<li>&quot;I&quot; Icosahedron</li>\n<li>&quot;Pn&quot; Prism</li>\n<li>&quot;An&quot; Antiprism</li>\n<li>&quot;Yn&quot; Pyramid</li>\n</ul>\n<p>Operations:</p>\n<ul>\n<li>a Ambo</li>\n<li>b Bevel</li>\n<li>c Canonicalize</li>\n<li>d Dual</li>\n<li>e Expand</li>\n<li>g Gyro</li>\n<li>j Join</li>\n<li>kn Kis</li>\n<li>m Meta</li>\n<li>o Ortho</li>\n<li>p Propellor</li>\n<li>r Reflect</li>\n<li>s Split</li>\n<li>tn Truncate</li>\n</ul>\n<p>uses lib: <a href=\"https://github.com/mikolalysenko/conway-hart\">https://github.com/mikolalysenko/conway-hart</a></p>\n",
          "attachmentFiles": [],
          "summary": "Generate polyhedron meshes ",
          "id": "203a3bcd-7fff-4791-aab7-378f2b68bf29",
          "layout": {
              "portsIn": [
                  {
                      "type": 5,
                      "name": "Receipt"
                  }
              ],
              "portsOut": [
                  {
                      "type": 2,
                      "name": "Geometry"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [
              "conway-hart.js"
          ],
          "youtubeids": [],
          "created": 1637079875909,
          "exampleProjectId": "VRG6Q6",
          "credits": [
              {
                  "title": "conway-heart",
                  "author": "mikolalysenko",
                  "url": "https://github.com/mikolalysenko/conway-hart",
                  "licence": "GPL"
              }
          ],
          "shortName": "Polyhedron_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.Meshes",
          "shortNameDisplay": "Polyhedron",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.Meshes.Polyhedron",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Gl.Meshes.Polyhedron_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.Meshes.Pyramid_v2",
          "content": "",
          "attachmentFiles": [],
          "summary": "render a pyramid mesh",
          "id": "f5443b2c-cd07-4361-8b7b-99ddf83e62ec",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Render"
                  },
                  {
                      "type": 0,
                      "name": "Width",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Length",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Height",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Smooth",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Draw",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "trigger"
                  },
                  {
                      "type": 2,
                      "name": "geometry"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1687960465209,
          "exampleProjectId": "Y09mQ6",
          "shortName": "Pyramid_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.Meshes",
          "shortNameDisplay": "Pyramid",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.Meshes.Pyramid",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Gl.Meshes.Pyramid_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.Meshes.QuadWarpTexture",
          "content": "",
          "attachmentFiles": [
              "att_shader.frag",
              "att_shader.vert"
          ],
          "summary": "Warp a texture mapped quad (projection mapping)",
          "id": "14521baa-af4e-44d5-a92c-3cb54e9aa697",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "render"
                  },
                  {
                      "type": 0,
                      "name": "A X",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "A Y",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "B X",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "B Y",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "C X",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "C Y",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "D X",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "D Y",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Flip Y",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Flip X",
                      "subType": "boolean"
                  },
                  {
                      "type": 2,
                      "name": "Texture"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "trigger"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "render",
                      "text": "Draw the Rectangle"
                  },
                  {
                      "name": "trigger",
                      "text": "Trigger the next op to execute"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1610365286147,
          "exampleProjectId": "T2A7zp",
          "shortName": "QuadWarpTexture",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.Meshes",
          "shortNameDisplay": "QuadWarpTexture",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.Meshes.QuadWarpTexture",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.Meshes.Rectangle9Slice",
          "content": "<p>see: <a href=\"https://en.wikipedia.org/wiki/9-slice_scaling\">https://en.wikipedia.org/wiki/9-slice_scaling</a></p>\n",
          "attachmentFiles": [],
          "summary": "nine slice image format texture mapped rectangle ",
          "id": "40d98dbd-6c15-4852-a130-fcac19090ad8",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Render"
                  },
                  {
                      "type": 0,
                      "name": "Width",
                      "group": "Size",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Height",
                      "group": "Size",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Border Width",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Scale X",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Scale Y",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Draw",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "pivot x index",
                      "group": "Align",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "pivot y index",
                      "group": "Align",
                      "subType": "integer"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "trigger"
                  },
                  {
                      "type": 2,
                      "name": "Geometry"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1695109910941,
          "exampleProjectId": "WkQpIG",
          "shortName": "Rectangle9Slice",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.Meshes",
          "shortNameDisplay": "Rectangle9Slice",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.Meshes.Rectangle9Slice",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.Meshes.RectangleFrame_v2",
          "content": "",
          "attachmentFiles": [],
          "summary": "Draws a rectangle frame",
          "id": "34e4535e-a784-4474-9b6f-a7e54e26f09e",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Render"
                  },
                  {
                      "type": 0,
                      "name": "Width",
                      "group": "Geometry",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Height",
                      "group": "Geometry",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Thickness",
                      "group": "Geometry",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "pivot x index",
                      "group": "Transform",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "pivot y index",
                      "group": "Transform",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Draw Top",
                      "group": "Sections",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Draw Bottom",
                      "group": "Sections",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Draw Left",
                      "group": "Sections",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Draw Right",
                      "group": "Sections",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Active",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "trigger"
                  },
                  {
                      "type": 2,
                      "name": "Geometry"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1686920342537,
          "exampleProjectId": "HLViQ6",
          "shortName": "RectangleFrame_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.Meshes",
          "shortNameDisplay": "RectangleFrame",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.Meshes.RectangleFrame",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Gl.Meshes.RectangleFrame_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "allowEdit": false,
          "usedInProject": true
      },
      {
          "name": "Ops.Gl.Meshes.RectangleRounded_v2",
          "content": "",
          "attachmentFiles": [],
          "summary": "Draws a rectangle with rounded corners",
          "id": "86c99074-4929-44d0-a826-49e7f8bdf5c4",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "render"
                  },
                  {
                      "type": 0,
                      "name": "Segments",
                      "group": "Size",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "width",
                      "group": "Size",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "height",
                      "group": "Size",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "border radius",
                      "group": "Size",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Top Left",
                      "group": "Round Corner",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Top Right",
                      "group": "Round Corner",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Bottom Left",
                      "group": "Round Corner",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Bottom Right",
                      "group": "Round Corner",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Draw",
                      "group": "Draw",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "trigger"
                  },
                  {
                      "type": 2,
                      "name": "geometry"
                  }
              ]
          },
          "authorName": "simod",
          "docs": {
              "ports": [
                  {
                      "name": "Segments",
                      "text": "amount of segments for corner circles"
                  },
                  {
                      "name": "width",
                      "text": "width of rectangle"
                  },
                  {
                      "name": "height",
                      "text": "height of rectangle"
                  },
                  {
                      "name": "border radius",
                      "text": "radius of corner circles"
                  },
                  {
                      "name": "Top Left",
                      "text": "round top left corner"
                  },
                  {
                      "name": "Top Right",
                      "text": "round top right corner"
                  },
                  {
                      "name": "Bottom Left",
                      "text": "round bottom left corner"
                  },
                  {
                      "name": "Bottom Right",
                      "text": "round bottom right corner"
                  },
                  {
                      "name": "Draw",
                      "text": "show/hide rectangle"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1559826863977,
          "exampleProjectId": "1la6mJ",
          "shortName": "RectangleRounded_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.Meshes",
          "shortNameDisplay": "RectangleRounded",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.Meshes.RectangleRounded_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.Meshes.Rectangle_v4",
          "content": "",
          "attachmentFiles": [],
          "summary": "draw a rectangle (plane, square)",
          "id": "cc8c3ede-7103-410b-849f-a645793cab39",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "render",
                      "uititle": "Trigger"
                  },
                  {
                      "type": 0,
                      "name": "Render Mesh",
                      "uititle": "Render",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "width",
                      "group": "Size",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "height",
                      "group": "Size",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "pivot x index",
                      "values": [
                          "left",
                          "center",
                          "right"
                      ],
                      "group": "Pivot",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "pivot y index",
                      "values": [
                          "top",
                          "center",
                          "bottom"
                      ],
                      "group": "Pivot",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "axis index",
                      "values": [
                          "xy",
                          "xz"
                      ],
                      "group": "Pivot",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Flip TexCoord X",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Flip TexCoord Y",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "num columns",
                      "group": "Structure",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "num rows",
                      "group": "Structure",
                      "subType": "integer"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "trigger",
                      "uititle": "Next"
                  },
                  {
                      "type": 2,
                      "name": "geometry",
                      "objType": "geometry"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1681976835285,
          "exampleProjectId": "M3QiQ6",
          "shortName": "Rectangle_v4",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.Meshes",
          "shortNameDisplay": "Rectangle",
          "version": 4,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.Meshes.Rectangle",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Gl.Meshes.Rectangle_v2",
                  "versionString": "_v2",
                  "version": 2
              },
              {
                  "name": "Ops.Gl.Meshes.Rectangle_v3",
                  "versionString": "_v3",
                  "version": 3
              },
              {
                  "name": "Ops.Gl.Meshes.Rectangle_v4",
                  "versionString": "_v4",
                  "version": 4
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.Meshes.SimpleSpline_v2",
          "content": "",
          "attachmentFiles": [],
          "summary": "Draws a simple spline only one pixel wide",
          "id": "b9cca0c1-17ac-466a-96ed-bb3916433e6f",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Render"
                  },
                  {
                      "type": 3,
                      "name": "Points"
                  },
                  {
                      "type": 0,
                      "name": "Num Points",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Line Strip",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "TexCoords index",
                      "values": [
                          "0",
                          "0-1",
                          "Random",
                          "Fill"
                      ],
                      "subType": "integer"
                  },
                  {
                      "type": 3,
                      "name": "TexCoords Array"
                  },
                  {
                      "type": 3,
                      "name": "Vertex Colors"
                  }
              ],
              "portsOut": [
                  {
                      "type": 2,
                      "name": "Geometry"
                  },
                  {
                      "type": 1,
                      "name": "Next"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "Render",
                      "text": "Trigger the op"
                  },
                  {
                      "name": "Points",
                      "text": "Array in - needs to be in xyzxyzxyz format"
                  },
                  {
                      "name": "Num Points",
                      "text": "Amount of points to render - useful for drawing out lines "
                  },
                  {
                      "name": "Line Strip",
                      "text": "Changes rendering method to linestrip"
                  },
                  {
                      "name": "Geometry",
                      "text": "Geometry object out"
                  },
                  {
                      "name": "Next",
                      "text": "Trigger out"
                  }
              ]
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1726142499574,
          "exampleProjectId": "qRD7W6",
          "shortName": "SimpleSpline_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.Meshes",
          "shortNameDisplay": "SimpleSpline",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.Meshes.SimpleSpline",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Gl.Meshes.SimpleSpline_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "allowEdit": false,
          "usedInProject": true
      },
      {
          "name": "Ops.Gl.Meshes.SimpleWireframe",
          "content": "<p>Render triangles of a geometry as lines</p>\n<p>by default, geometries and meshes are made out of triangles.\nwhen rendering wireframes of those triangles, the data structure has to be changed.</p>\n",
          "attachmentFiles": [],
          "summary": "Simple Wireframe Line Renderer",
          "id": "89264e0a-512f-48a4-a7bb-ec8f12aa19c1",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Render"
                  },
                  {
                      "type": 2,
                      "name": "Geometry",
                      "objType": "geometry"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1547245681217,
          "exampleProjectId": "gt0cay",
          "shortName": "SimpleWireframe",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.Meshes",
          "shortNameDisplay": "SimpleWireframe",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.Meshes.SimpleWireframe",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.Meshes.Sphere_v3",
          "content": "",
          "attachmentFiles": [],
          "summary": "Draw parameterizable sphere",
          "id": "6ee346d0-614e-4709-91a5-dc21ae975caf",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "render"
                  },
                  {
                      "type": 0,
                      "name": "radius",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "stacks",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "slices",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Filloffset",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Render",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "trigger"
                  },
                  {
                      "type": 2,
                      "name": "geometry",
                      "objType": "geometry"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1685718747795,
          "exampleProjectId": "HvxfQ6",
          "shortName": "Sphere_v3",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.Meshes",
          "shortNameDisplay": "Sphere",
          "version": 3,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.Meshes.Sphere",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Gl.Meshes.Sphere_v2",
                  "versionString": "_v2",
                  "version": 2
              },
              {
                  "name": "Ops.Gl.Meshes.Sphere_v3",
                  "versionString": "_v3",
                  "version": 3
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.Meshes.SplineMeshMaterial_v2",
          "content": "",
          "attachmentFiles": [
              "att_splinemat.frag",
              "att_splinemat.vert"
          ],
          "summary": "material for splinemesh",
          "id": "5ff7c643-cbea-44cc-9f34-fb18a44bcfff",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Render"
                  },
                  {
                      "type": 0,
                      "name": "Width",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Width Perspective",
                      "subType": "boolean"
                  },
                  {
                      "type": 2,
                      "name": "Texture",
                      "group": "Texture",
                      "objType": "texture"
                  },
                  {
                      "type": 2,
                      "name": "Texture Mask",
                      "objType": "texture"
                  },
                  {
                      "type": 0,
                      "name": "Mapping index",
                      "subType": "integer"
                  },
                  {
                      "type": 5,
                      "name": "Mapping",
                      "group": "Texture"
                  },
                  {
                      "type": 0,
                      "name": "Colorize Texture",
                      "group": "Texture",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Offset",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "r",
                      "group": "Color",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "g",
                      "group": "Color",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "b",
                      "group": "Color",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "a",
                      "group": "Color",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Trigger"
                  },
                  {
                      "type": 2,
                      "name": "Shader"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1591710354477,
          "exampleProjectId": "tnUJta",
          "shortName": "SplineMeshMaterial_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.Meshes",
          "shortNameDisplay": "SplineMeshMaterial",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.Meshes.SplineMeshMaterial_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "allowEdit": false,
          "usedInProject": true
      },
      {
          "name": "Ops.Gl.Meshes.SplineMesh_v2",
          "content": "<p>Draws either one polyline (line strip)  or a set of polylines, depending on whether the Points input contains an Array3 or an array of Array3.</p>\n",
          "attachmentFiles": [],
          "summary": "draw splines/lines",
          "id": "287abf6c-5501-4bc9-a627-70ec3c3766d2",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Render"
                  },
                  {
                      "type": 3,
                      "name": "Points"
                  },
                  {
                      "type": 0,
                      "name": "Tesselate Edges",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Render Mesh",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "Points",
                      "text": "Either an Array3 or an array of Array3"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1590416826044,
          "exampleProjectId": "3l5Uu-",
          "shortName": "SplineMesh_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.Meshes",
          "shortNameDisplay": "SplineMesh",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.Meshes.SplineMesh",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Gl.Meshes.SplineMesh_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.Meshes.Star_v2",
          "content": "",
          "attachmentFiles": [],
          "summary": "draw a star mesh (saw,gear)",
          "id": "67833a2d-4c11-4492-9a33-1b2d707ff58c",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "render"
                  },
                  {
                      "type": 0,
                      "name": "segments",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "radius",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Shape index",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Length",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Peak Z Pos",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "percent",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Fill",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Render Mesh",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "trigger"
                  },
                  {
                      "type": 2,
                      "name": "geometry"
                  }
              ]
          },
          "authorName": "pandur",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1686921439523,
          "exampleProjectId": "eXhAY4",
          "shortName": "Star_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.Meshes",
          "shortNameDisplay": "Star",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.Meshes.Star",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Gl.Meshes.Star_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.Meshes.TextMesh_v2",
          "content": "<p>Flat text in 3d space.\nA texture can be used to control the color of each letter and its transparency.</p>\n",
          "attachmentFiles": [
              "att_textmesh.frag",
              "att_textmesh.vert"
          ],
          "summary": "Draws text in 3d space using one of the font ops",
          "id": "2390f6b3-2122-412e-8c8d-5c2f574e8bd1",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Render"
                  },
                  {
                      "type": 5,
                      "name": "Text"
                  },
                  {
                      "type": 0,
                      "name": "Scale Text",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Scale",
                      "uititle": "Line Scale",
                      "group": "Display",
                      "subType": "number"
                  },
                  {
                      "type": 5,
                      "name": "Font",
                      "group": "Display"
                  },
                  {
                      "type": 0,
                      "name": "align index",
                      "group": "Alignment",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "vertical align index",
                      "group": "Alignment",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Line Height",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Letter Spacing",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "filter index",
                      "values": [
                          "nearest",
                          "linear",
                          "mipmap"
                      ],
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Anisotropic index",
                      "values": [
                          "0",
                          "1",
                          "2",
                          "4",
                          "8",
                          "16"
                      ],
                      "subType": "integer"
                  },
                  {
                      "type": 2,
                      "name": "Texture Color",
                      "group": "Masking",
                      "objType": "texture"
                  },
                  {
                      "type": 2,
                      "name": "Texture Mask",
                      "group": "Masking",
                      "objType": "texture"
                  },
                  {
                      "type": 0,
                      "name": "r",
                      "group": "Color",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "g",
                      "group": "Color",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "b",
                      "group": "Color",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "a",
                      "group": "Color",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  },
                  {
                      "type": 0,
                      "name": "Total Lines",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Width",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Font Available",
                      "subType": "boolean"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "Render",
                      "text": "Trigger in"
                  },
                  {
                      "name": "Text",
                      "text": "String to display"
                  },
                  {
                      "name": "Scale",
                      "text": "Scale of text"
                  },
                  {
                      "name": "Font",
                      "text": "Font to use"
                  },
                  {
                      "name": "Line Height",
                      "text": "Height of each line"
                  },
                  {
                      "name": "Letter Spacing",
                      "text": "Space between each letter"
                  },
                  {
                      "name": "Texture Mask",
                      "text": "Texture to mask out text"
                  },
                  {
                      "name": "r",
                      "text": "Red amount"
                  },
                  {
                      "name": "g",
                      "text": "Green amount"
                  },
                  {
                      "name": "b",
                      "text": "Blue amount"
                  },
                  {
                      "name": "a",
                      "text": "Alpha amount"
                  },
                  {
                      "name": "Next",
                      "text": "Trigger out"
                  },
                  {
                      "name": "texture",
                      "text": "Texture out"
                  },
                  {
                      "name": "Font Available",
                      "text": "Reports if font is available with a zero or one"
                  }
              ]
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1542744323655,
          "exampleProjectId": "LzDnH-",
          "shortName": "TextMesh_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.Meshes",
          "shortNameDisplay": "TextMesh",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.Meshes.TextMesh",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Gl.Meshes.TextMesh_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.Meshes.Torus_v3",
          "content": "",
          "attachmentFiles": [],
          "summary": "Draw a torus (doughnut, donut, ring mesh)",
          "id": "bfe60760-6cf6-43d0-96da-b4848c2b146a",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "render"
                  },
                  {
                      "type": 0,
                      "name": "sides",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "rings",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "innerRadius",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "outerRadius",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Draw",
                      "uititle": "Render mesh",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "trigger"
                  },
                  {
                      "type": 2,
                      "name": "geometry"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1690032573113,
          "exampleProjectId": "ECMhQ6",
          "shortName": "Torus_v3",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.Meshes",
          "shortNameDisplay": "Torus",
          "version": 3,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.Meshes.Torus",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Gl.Meshes.Torus_v2",
                  "versionString": "_v2",
                  "version": 2
              },
              {
                  "name": "Ops.Gl.Meshes.Torus_v3",
                  "versionString": "_v3",
                  "version": 3
              }
          ],
          "allowEdit": false,
          "usedInProject": true
      },
      {
          "name": "Ops.Gl.Meshes.TriangleSphere",
          "content": "<p> <a href=\"http://paulbourke.net/geometry/circlesphere/\">http://paulbourke.net/geometry/circlesphere/</a></p>\n",
          "attachmentFiles": [],
          "summary": "A sphere mesh with uniform distributed vertices",
          "id": "ad0e8831-9554-46b3-ac03-c5c166921eda",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "render"
                  },
                  {
                      "type": 0,
                      "name": "Iterations",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Flat",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Draw",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "next"
                  },
                  {
                      "type": 2,
                      "name": "Geometry"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1519245806225,
          "exampleProjectId": "T43V0D",
          "shortName": "TriangleSphere",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.Meshes",
          "shortNameDisplay": "TriangleSphere",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.Meshes.TriangleSphere",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false,
          "usedInProject": true
      },
      {
          "name": "Ops.Gl.Meshes.Triangle_v2",
          "content": "",
          "attachmentFiles": [],
          "summary": "Draw a triangle",
          "id": "ef522d4a-9712-4063-8a99-c6b409f26456",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "render"
                  },
                  {
                      "type": 0,
                      "name": "width",
                      "group": "Size",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "height",
                      "group": "Size",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Draw",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "trigger"
                  },
                  {
                      "type": 2,
                      "name": "geometry"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "render",
                      "text": "Renders a triangle to the canvas."
                  },
                  {
                      "name": "width",
                      "text": "Width of the triangle"
                  },
                  {
                      "name": "height",
                      "text": "Height of the triangle"
                  },
                  {
                      "name": "trigger",
                      "text": "Triggers the next op"
                  },
                  {
                      "name": "geometry",
                      "text": "For advanced use cases you can output the geometry data (vertices, normals) to use in another op"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1686919927743,
          "exampleProjectId": "RnNiQ6",
          "shortName": "Triangle_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.Meshes",
          "shortNameDisplay": "Triangle",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.Meshes.Triangle",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Gl.Meshes.Triangle_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.NormalizeScreenCoordinates",
          "content": "",
          "attachmentFiles": [],
          "summary": "convert screen pixel coordinates to range 0-1",
          "id": "84d4f2a6-5ab7-4c97-85e0-2985bfcba70d",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "X",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Y",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "-1 to 1",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "Result X",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Result Y",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1519808862751,
          "exampleProjectId": "",
          "shortName": "NormalizeScreenCoordinates",
          "hasScreenshot": false,
          "namespace": "Ops.Gl",
          "shortNameDisplay": "NormalizeScreenCoordinates",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.NormalizeScreenCoordinates",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.OrTexture",
          "content": "<p>default stripes and empty textures are treated as &quot;invalid&quot; </p>\n",
          "attachmentFiles": [],
          "summary": "outputs the first valid texture of the input ports",
          "id": "9a383587-272d-429b-95a3-5c9b6007f8ea",
          "layout": {
              "portsIn": [
                  {
                      "type": "2",
                      "name": "Texture 1"
                  },
                  {
                      "type": "2",
                      "name": "Texture 2"
                  },
                  {
                      "type": "2",
                      "name": "Texture 3"
                  },
                  {
                      "type": "2",
                      "name": "Texture 4"
                  },
                  {
                      "type": "2",
                      "name": "Texture 5"
                  },
                  {
                      "type": "2",
                      "name": "Texture 6"
                  },
                  {
                      "type": "2",
                      "name": "Texture 7"
                  },
                  {
                      "type": "2",
                      "name": "Texture 8"
                  }
              ],
              "portsOut": [
                  {
                      "type": "2",
                      "name": "Result"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1605799792358,
          "exampleProjectId": "oKRY7i",
          "shortName": "OrTexture",
          "hasScreenshot": true,
          "namespace": "Ops.Gl",
          "shortNameDisplay": "OrTexture",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.OrTexture",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.Orthogonal_v2",
          "content": "",
          "attachmentFiles": [],
          "summary": "Orthogonal projection / objects in distance don't appear smaller (isometric)",
          "id": "b9235490-eaf2-4960-b1be-4279a4051ec6",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "render"
                  },
                  {
                      "type": 0,
                      "name": "bounds",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Axis index",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "frustum near",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "frustum far",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "trigger"
                  },
                  {
                      "type": 0,
                      "name": "Ratio",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Width",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Height",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "Axis",
                      "text": "this axis will be scaled to [bounds], the other axis will be bounds*aspect ratio"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1541805299988,
          "exampleProjectId": "94Aycg",
          "shortName": "Orthogonal_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Gl",
          "shortNameDisplay": "Orthogonal",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.Orthogonal",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Gl.Orthogonal_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.OverwriteViewportSize",
          "content": "<p>In cases you need to force a viewport size for your scene but retain the project canvas size, use this op and connect your content below it.</p>\n",
          "attachmentFiles": [],
          "summary": "Force a manually set viewport size for connected ops",
          "id": "20e370c7-d6e9-4e29-acab-1dd2eb4b921f",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Exec"
                  },
                  {
                      "type": 0,
                      "name": "Width",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Height",
                      "subType": "integer"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "next"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1517517729437,
          "exampleProjectId": "",
          "shortName": "OverwriteViewportSize",
          "hasScreenshot": false,
          "namespace": "Ops.Gl",
          "shortNameDisplay": "OverwriteViewportSize",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.OverwriteViewportSize",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.Pbr.PbrEnvironmentLight",
          "content": "<p>This operator is your image based lighting setup for all <a href=\"/op/Ops.Gl.Pbr.PbrMaterial\" target=\"_blank\">Ops.Gl.Pbr.PbrMaterial</a> operators that will be located under it in your scene stack. For the highest quality, you will be using RGBE format equirectangular textures as the lighting scene input for this operator.</p>\n<p>When using PBR Material with this operator, you can ignore connecting the output ports as they are silently communicated to your materials that are under the Environment operator. You can of course experiment with inputting custom textures for your PBR Material.</p>\n<p>You can import your own .HDRI equirectangular images into the cables editor and it will automatically generate an RGBE format texture for you to use. You will find the texture file in your files library after your HDRI has been processed.</p>\n<p>You can also find some RGBE environment examples in the file library.</p>\n<p>additional reading:\n<a href=\"https://en.wikipedia.org/wiki/RGBE_image_format\">https://en.wikipedia.org/wiki/RGBE_image_format</a></p>\n<p>and an HDRI library here:\n<a href=\"https://polyhaven.com/hdris\">https://polyhaven.com/hdris</a></p>\n<p>PBR Environment also supports Parallax Correction, which can improve the look and feel of your scene by correcting how you see your reflected environment on your PBR Materials on your objects. When using this feature it is advised to first make sure to turn on your Helper and Transform Gizmos in the editor canvas to easily see where your Scene bounds are. Adjust the center, minimum and maximum values to fit the PBR Environment bounding box to your desired coverage.\nTo review how to hide and unhide Gizmos for transform and Op helpers, please refer to this page and search for transforms <a href=\"https://cables.gl/docs/0_howtouse/ui_walkthrough/ui_walkthrough\">https://cables.gl/docs/0_howtouse/ui_walkthrough/ui_walkthrough</a></p>\n",
          "attachmentFiles": [
              "att_IBLLUT.frag",
              "att_IBLLUT.vert",
              "att_irradiance.frag",
              "att_irradiance.vert",
              "att_prefiltering.frag",
              "att_prefiltering.vert"
          ],
          "summary": "PBR image based lighting setup",
          "id": "7110f169-adfd-4649-a77a-c825751eaa9b",
          "layout": {
              "portsIn": [
                  {
                      "type": "1",
                      "name": "render"
                  },
                  {
                      "type": "0",
                      "name": "Intensity",
                      "subType": "number"
                  },
                  {
                      "type": "2",
                      "name": "RGBE Environment map",
                      "objType": "texture"
                  },
                  {
                      "type": "0",
                      "name": "Size Irradiance map index",
                      "subType": "integer"
                  },
                  {
                      "type": "0",
                      "name": "Size pre-filtered environment index",
                      "subType": "integer"
                  },
                  {
                      "type": "0",
                      "name": "Size IBL LUT index",
                      "subType": "integer"
                  },
                  {
                      "type": "0",
                      "name": "Force 8bit IBL",
                      "subType": "boolean"
                  },
                  {
                      "type": "0",
                      "name": "Environment map does not contain RGBE data",
                      "subType": "boolean"
                  },
                  {
                      "type": "0",
                      "name": "Rotation",
                      "subType": "number"
                  },
                  {
                      "type": "0",
                      "name": "Use parallax correction",
                      "group": "Parallax Correction",
                      "subType": "boolean"
                  },
                  {
                      "type": "0",
                      "name": "center X",
                      "group": "Parallax Correction",
                      "subType": "number"
                  },
                  {
                      "type": "0",
                      "name": "center Y",
                      "group": "Parallax Correction",
                      "subType": "number"
                  },
                  {
                      "type": "0",
                      "name": "center Z",
                      "group": "Parallax Correction",
                      "subType": "number"
                  },
                  {
                      "type": "0",
                      "name": "Box min X",
                      "group": "Parallax Correction",
                      "subType": "number"
                  },
                  {
                      "type": "0",
                      "name": "Box min Y",
                      "group": "Parallax Correction",
                      "subType": "number"
                  },
                  {
                      "type": "0",
                      "name": "Box min Z",
                      "group": "Parallax Correction",
                      "subType": "number"
                  },
                  {
                      "type": "0",
                      "name": "Box max X",
                      "group": "Parallax Correction",
                      "subType": "number"
                  },
                  {
                      "type": "0",
                      "name": "Box max Y",
                      "group": "Parallax Correction",
                      "subType": "number"
                  },
                  {
                      "type": "0",
                      "name": "Box max Z",
                      "group": "Parallax Correction",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": "1",
                      "name": "next"
                  },
                  {
                      "type": "2",
                      "name": "IBL LUT",
                      "objType": "texture"
                  },
                  {
                      "type": "2",
                      "name": "cubemap (diffuse irradiance)",
                      "objType": "texture"
                  },
                  {
                      "type": "2",
                      "name": "cubemap (pre-filtered environment map)",
                      "objType": "texture"
                  },
                  {
                      "type": "0",
                      "name": "Number of Pre-filtered mip levels",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "amajesticseaflapflap",
          "docs": {
              "ports": [
                  {
                      "name": "RGBE Environment map",
                      "text": "RGBE format input, or RGB texture"
                  },
                  {
                      "name": "Size Irradiance map index",
                      "text": "large is more information"
                  },
                  {
                      "name": "Size pre-filtered environment index",
                      "text": "large is more information"
                  },
                  {
                      "name": "Size IBL LUT index",
                      "text": "large is more information"
                  },
                  {
                      "name": "Environment map does not contain RGBE data",
                      "text": "toggle ON if not using an RGB texture"
                  },
                  {
                      "name": "Rotation",
                      "text": "rotate the environment around the up axis in degrees"
                  },
                  {
                      "name": "Use parallax correction",
                      "text": "manually adjust your reflection area for your scene"
                  },
                  {
                      "name": "center X",
                      "text": "center of your scene on X axis"
                  },
                  {
                      "name": "center Y",
                      "text": "center of your scene on Y axis"
                  },
                  {
                      "name": "center Z",
                      "text": "center of your scene on Z axis"
                  },
                  {
                      "name": "Box min X",
                      "text": "minimum bounds on X axis"
                  },
                  {
                      "name": "Box min Y",
                      "text": "minimum bounds on Y axis"
                  },
                  {
                      "name": "Box min Z",
                      "text": "minimum bounds on Z axis"
                  },
                  {
                      "name": "Box max X",
                      "text": "maximum bounds on X axis"
                  },
                  {
                      "name": "Box max Y",
                      "text": "maximum bounds on Y axis"
                  },
                  {
                      "name": "Box max Z",
                      "text": "maximum bounds on Z axis"
                  },
                  {
                      "name": "IBL LUT",
                      "text": "for PBR Material (not required)"
                  },
                  {
                      "name": "cubemap (diffuse irradiance)",
                      "text": "for PBR Material (not required)"
                  },
                  {
                      "name": "cubemap (pre-filtered environment map)",
                      "text": "for PBR Material (not required)"
                  },
                  {
                      "name": "Number of Pre-filtered mip levels",
                      "text": "for PBR Material (not required)"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [
              "uwoj7R52yU8"
          ],
          "created": 1642599890799,
          "exampleProjectId": "9z9kFK",
          "credits": [
              {
                  "title": "BabylonJS Shader Code",
                  "author": "Babylon.js",
                  "url": "https://github.com/BabylonJS/Babylon.js/blob/master/license.md",
                  "licence": "Apache License"
              },
              {
                  "title": "Filament Code",
                  "author": "google",
                  "url": "https://github.com/google/filament/blob/main/LICENSE",
                  "licence": "Apache License"
              }
          ],
          "coreLibs": [
              "cgl_cubemapframebuffer"
          ],
          "shortName": "PbrEnvironmentLight",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.Pbr",
          "shortNameDisplay": "PbrEnvironmentLight",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.Pbr.PbrEnvironmentLight",
                  "versionString": "",
                  "version": 0
              }
          ],
          "namespaceTitle": "Ops.Gl.Pbr",
          "namespaceSummary": "WebGl Ops",
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.Pbr.PbrMaterial",
          "content": "<p>Can be used with <a href=\"/op/Ops.Gl.Pbr.PbrEnvironmentLight\" target=\"_blank\">Ops.Gl.Pbr.PbrEnvironmentLight</a> for image based lighting or with standard Lights found in the op library. </p>\n<p>You can drive the settings for your  Ambient Occlusion, Roughness and Metalness (AORM or ARM textures) with a single texture or manually adjust the global setting. You can also try compositing an AORM texture in an Image Compose with additive RGB color channels. </p>\n",
          "attachmentFiles": [
              "att_BasicPBR.frag",
              "att_BasicPBR.vert",
              "att_light_body_directional.frag",
              "att_light_body_point.frag",
              "att_light_body_spot.frag",
              "att_light_head.frag",
              "att_light_includes.frag"
          ],
          "summary": "PBR/Physical Based Rendering Material for realistic materials",
          "id": "a5234947-f65a-41e2-a691-b81382903a71",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "render"
                  },
                  {
                      "type": 0,
                      "name": "R",
                      "group": "Diffuse Color",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "G",
                      "group": "Diffuse Color",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "B",
                      "group": "Diffuse Color",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "A",
                      "group": "Diffuse Color",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Roughness",
                      "group": "Shader Parameters",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Metalness",
                      "group": "Shader Parameters",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Alpha Mode index",
                      "values": [
                          "Opaque",
                          "Masked",
                          "Dithered",
                          "Blend"
                      ],
                      "group": "Shader Parameters",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Use Clear Coat",
                      "group": "Clear Coat",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Clear Coat Intensity",
                      "group": "Clear Coat",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Clear Coat Roughness",
                      "group": "Clear Coat",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Use Normal map for Clear Coat",
                      "group": "Clear Coat",
                      "subType": "boolean"
                  },
                  {
                      "type": 2,
                      "name": "Clear Coat Normal map",
                      "group": "Clear Coat",
                      "objType": "texture"
                  },
                  {
                      "type": 0,
                      "name": "Use Thin Film",
                      "group": "Thin Film Iridescence",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Thin Film Intensity",
                      "group": "Thin Film Iridescence",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Thin Film IOR",
                      "group": "Thin Film Iridescence",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Thin Film Thickness (nm)",
                      "group": "Thin Film Iridescence",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Thickness Tex Min",
                      "group": "Thin Film Iridescence",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Thickness Tex Max",
                      "group": "Thin Film Iridescence",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Tonemapping index",
                      "values": [
                          "sRGB",
                          "HejiDawson",
                          "Photographic"
                      ],
                      "group": "Tonemapping",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Exposure",
                      "group": "Tonemapping",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Emission Intensity",
                      "group": "Advanced Shader Parameters",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Disable geometric roughness",
                      "group": "Advanced Shader Parameters",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Use roughness from normal map",
                      "group": "Advanced Shader Parameters",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Use Vertex Colours",
                      "group": "Advanced Shader Parameters",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Vertex Colour Mode index",
                      "values": [
                          "colour",
                          "AORM",
                          "AO",
                          "R",
                          "M",
                          "lightmap"
                      ],
                      "group": "Advanced Shader Parameters",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Height Intensity",
                      "group": "Advanced Shader Parameters",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Faster heightmapping",
                      "group": "Advanced Shader Parameters",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Double Sided",
                      "group": "Advanced Shader Parameters",
                      "subType": "boolean"
                  },
                  {
                      "type": 2,
                      "name": "IBL LUT",
                      "group": "Lighting",
                      "objType": "texture"
                  },
                  {
                      "type": 2,
                      "name": "Diffuse Irradiance",
                      "group": "Lighting",
                      "objType": "texture"
                  },
                  {
                      "type": 2,
                      "name": "Pre-filtered envmap",
                      "group": "Lighting",
                      "objType": "texture"
                  },
                  {
                      "type": 0,
                      "name": "Num mip levels",
                      "group": "Lighting",
                      "subType": "integer"
                  },
                  {
                      "type": 2,
                      "name": "Albedo",
                      "group": "Textures",
                      "objType": "texture"
                  },
                  {
                      "type": 2,
                      "name": "AORM",
                      "group": "Textures",
                      "objType": "texture"
                  },
                  {
                      "type": 2,
                      "name": "Normal map",
                      "group": "Textures",
                      "objType": "texture"
                  },
                  {
                      "type": 2,
                      "name": "Emission",
                      "group": "Textures",
                      "objType": "texture"
                  },
                  {
                      "type": 2,
                      "name": "Height",
                      "group": "Textures",
                      "objType": "texture"
                  },
                  {
                      "type": 2,
                      "name": "Lightmap",
                      "group": "Textures",
                      "objType": "texture"
                  },
                  {
                      "type": 2,
                      "name": "Thin Film",
                      "group": "Textures",
                      "objType": "texture"
                  },
                  {
                      "type": 0,
                      "name": "Diffuse Intensity",
                      "group": "Lighting",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Specular Intensity",
                      "group": "Lighting",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Lightmap is RGBE",
                      "group": "Lighting",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Lightmap Intensity",
                      "group": "Lighting",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  },
                  {
                      "type": 2,
                      "name": "Shader"
                  }
              ]
          },
          "authorName": "amajesticseaflapflap",
          "docs": {
              "ports": [
                  {
                      "name": "R",
                      "text": "amount of red"
                  },
                  {
                      "name": "G",
                      "text": "amount of green"
                  },
                  {
                      "name": "B",
                      "text": "amount of blue"
                  },
                  {
                      "name": "A",
                      "text": "opacity of material. Use Alpha Mode to change how this value is used."
                  },
                  {
                      "name": "Roughness",
                      "text": "roughness of the surface"
                  },
                  {
                      "name": "Metalness",
                      "text": "blend F0 between 0.04 and albedo by this value"
                  },
                  {
                      "name": "Alpha Mode index",
                      "text": "material opacity mode"
                  },
                  {
                      "name": "Use Clear Coat",
                      "text": "add a thick dielectric layer to your material. This layer will ignore the normal map."
                  },
                  {
                      "name": "Clear Coat Roughness",
                      "text": "dielectric layer roughness amount"
                  },
                  {
                      "name": "Tonemapping index",
                      "text": "tone mapping modes"
                  },
                  {
                      "name": "Exposure",
                      "text": "adjust exposure used for tonemapping"
                  },
                  {
                      "name": "Disable geometric roughness",
                      "text": "don't automatically introduce roughness calculated from screen-space geometry density"
                  },
                  {
                      "name": "Use roughness from normal map",
                      "text": "calculate screen-space roughness from normals on top of geometric roughness"
                  },
                  {
                      "name": "Use Vertex Colours",
                      "text": "enable vertex colours then select their purpose"
                  },
                  {
                      "name": "Vertex Colour Mode index",
                      "text": "when using vertex colours, assign their purpose here"
                  },
                  {
                      "name": "Height Intensity",
                      "text": "influence of heighmap texture"
                  },
                  {
                      "name": "Faster heightmapping",
                      "text": "toggle to use less precise but more efficient method"
                  },
                  {
                      "name": "IBL LUT",
                      "text": "generally auto set by PBR Environment"
                  },
                  {
                      "name": "Diffuse Irradiance",
                      "text": "generally auto set by PBR Environment"
                  },
                  {
                      "name": "Pre-filtered envmap",
                      "text": "generally auto set by PBR Environment"
                  },
                  {
                      "name": "Num mip levels",
                      "text": "generally auto set by PBR Environment"
                  },
                  {
                      "name": "Albedo",
                      "text": "sRGB"
                  },
                  {
                      "name": "AORM",
                      "text": "linear bt.709, R: ambient occlusion, G: roughness, B: metalness"
                  },
                  {
                      "name": "Normal map",
                      "text": "linear bt.709, +Y, TS per vertex"
                  },
                  {
                      "name": "Height",
                      "text": "HeightMap input, uses the red channel for height information"
                  },
                  {
                      "name": "Lightmap",
                      "text": "Lightmap input"
                  },
                  {
                      "name": "Diffuse Intensity",
                      "text": "diffuse intensity when using PBR Environment"
                  },
                  {
                      "name": "Specular Intensity",
                      "text": "Specular intensity when using PBR Environment"
                  },
                  {
                      "name": "Lightmap is RGBE",
                      "text": "toggle if your lightmap is an RGBE format texture"
                  },
                  {
                      "name": "Lightmap Intensity",
                      "text": "intensity of lightmap texture"
                  }
              ]
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [
              "uwoj7R52yU8"
          ],
          "created": 1642599874914,
          "exampleProjectId": "9z9kFK",
          "credits": [
              {
                  "title": "BabylonJS Shader Code",
                  "author": "Babylon.js",
                  "url": "https://github.com/BabylonJS/Babylon.js/blob/master/license.md",
                  "licence": "Apache License"
              },
              {
                  "title": "Filament Code",
                  "author": "google",
                  "url": "https://github.com/google/filament/blob/main/LICENSE",
                  "licence": "Apache License"
              }
          ],
          "shortName": "PbrMaterial",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.Pbr",
          "shortNameDisplay": "PbrMaterial",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.Pbr.PbrMaterial",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.Performance",
          "content": "<p>to get meaningful results it should be directly under mainloop and above everything else.</p>\n<p>guide on how to optimize the performance of your patch:\n<a href=\"https://cables.gl/docs/9_performance_optimization/performance\">https://cables.gl/docs/9_performance_optimization/performance</a></p>\n",
          "attachmentFiles": [],
          "summary": "Show WebGl Performance Statistics",
          "id": "9cd2d9de-000f-4a14-bd13-e7d5f057583c",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "exe"
                  },
                  {
                      "type": 0,
                      "name": "Active",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Visible",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Measure GPU",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Position index",
                      "values": [
                          "top",
                          "bottom"
                      ],
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Open",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Smooth Graph",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Scale",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Size",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "childs"
                  },
                  {
                      "type": 2,
                      "name": "Canvas"
                  },
                  {
                      "type": 0,
                      "name": "FPS",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1506600656132,
          "exampleProjectId": "zFR8z5",
          "shortName": "Performance",
          "hasScreenshot": true,
          "namespace": "Ops.Gl",
          "shortNameDisplay": "Performance",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.Performance",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.PerformanceMeasure",
          "content": "",
          "attachmentFiles": [],
          "summary": "Measure the time used to execute all child ops",
          "id": "a2f90e82-a907-4984-a3a1-8e036cf2eee5",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Execute"
                  },
                  {
                      "type": 5,
                      "name": "Name"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Childs"
                  },
                  {
                      "type": 0,
                      "name": "Time Used",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1550742072171,
          "exampleProjectId": "",
          "shortName": "PerformanceMeasure",
          "hasScreenshot": false,
          "namespace": "Ops.Gl",
          "shortNameDisplay": "PerformanceMeasure",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.PerformanceMeasure",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.Perspective",
          "content": "",
          "attachmentFiles": [],
          "summary": "Adjust FOV, field of view, and frustum clipping",
          "id": "7a78e163-d28c-4f70-a6d0-6d952da79f50",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "render"
                  },
                  {
                      "type": 0,
                      "name": "Axis index",
                      "values": [
                          "Vertical",
                          "Horizontal"
                      ],
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "fov y",
                      "uititle": "FOV Degrees",
                      "group": "Field of View",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "frustum near",
                      "group": "Frustrum",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "frustum far",
                      "group": "Frustrum",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Auto Aspect Ratio",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Aspect Ratio",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "trigger"
                  },
                  {
                      "type": 0,
                      "name": "Aspect",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1524232373346,
          "exampleProjectId": "RJXV7i",
          "shortName": "Perspective",
          "hasScreenshot": true,
          "namespace": "Ops.Gl",
          "shortNameDisplay": "Perspective",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.Perspective",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.Phong.AmbientLight_v4",
          "content": "<p>This op adds ambient background light to every mesh that uses the PhongMaterial4. It is additive and its color is not influenced by other lights.</p>\n",
          "attachmentFiles": [],
          "summary": "ambient light for phong material shading",
          "id": "235a18d1-a8de-4034-962d-2848017e27cd",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Trigger In"
                  },
                  {
                      "type": 0,
                      "name": "R",
                      "group": "Color",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "G",
                      "group": "Color",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "B",
                      "group": "Color",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Intensity",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Trigger Out"
                  }
              ]
          },
          "authorName": "simod",
          "docs": {
              "ports": [
                  {
                      "name": "Trigger In",
                      "text": "Trigger input"
                  },
                  {
                      "name": "R",
                      "text": "R color channel"
                  },
                  {
                      "name": "G",
                      "text": "G color channel"
                  },
                  {
                      "name": "B",
                      "text": "B color channel"
                  },
                  {
                      "name": "Intensity",
                      "text": "ambient light intensity"
                  },
                  {
                      "name": "Trigger Out",
                      "text": "Trigger output"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1569921678890,
          "exampleProjectId": "g3ioXU",
          "shortName": "AmbientLight_v4",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.Phong",
          "shortNameDisplay": "AmbientLight",
          "version": 4,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.Phong.AmbientLight_v4",
                  "versionString": "_v4",
                  "version": 4
              }
          ],
          "namespaceTitle": "Ops.Gl.Phong",
          "namespaceSummary": "WebGl Ops",
          "allowEdit": false,
          "usedInProject": true
      },
      {
          "name": "Ops.Gl.Phong.DirectionalLight_v5",
          "content": "<p>This light illuminates the whole scene. It does not have a position, only a direction. You can think of it as a sunlight.</p>\n",
          "attachmentFiles": [],
          "summary": "Directional light for phong shading",
          "id": "9f41bf91-f4e0-4ce4-89d8-72627b76261e",
          "layout": {
              "portsIn": [
                  {
                      "type": "1",
                      "name": "Trigger In"
                  },
                  {
                      "type": "0",
                      "name": "Cast Light",
                      "group": "Light Attributes",
                      "subType": "boolean"
                  },
                  {
                      "type": "0",
                      "name": "Intensity",
                      "group": "Light Attributes",
                      "subType": "number"
                  },
                  {
                      "type": "0",
                      "name": "X",
                      "group": "Direction",
                      "subType": "number"
                  },
                  {
                      "type": "0",
                      "name": "Y",
                      "group": "Direction",
                      "subType": "number"
                  },
                  {
                      "type": "0",
                      "name": "Z",
                      "group": "Direction",
                      "subType": "number"
                  },
                  {
                      "type": "0",
                      "name": "R",
                      "group": "Color",
                      "subType": "number"
                  },
                  {
                      "type": "0",
                      "name": "G",
                      "group": "Color",
                      "subType": "number"
                  },
                  {
                      "type": "0",
                      "name": "B",
                      "group": "Color",
                      "subType": "number"
                  },
                  {
                      "type": "0",
                      "name": "Specular R",
                      "group": "Specular Color",
                      "subType": "number"
                  },
                  {
                      "type": "0",
                      "name": "Specular G",
                      "group": "Specular Color",
                      "subType": "number"
                  },
                  {
                      "type": "0",
                      "name": "Specular B",
                      "group": "Specular Color",
                      "subType": "number"
                  },
                  {
                      "type": "0",
                      "name": "Cast Shadow",
                      "subType": "boolean"
                  },
                  {
                      "type": "0",
                      "name": "Rendering Active",
                      "group": "Shadow Map Settings",
                      "subType": "boolean"
                  },
                  {
                      "type": "0",
                      "name": "Map Size index",
                      "subType": "integer"
                  },
                  {
                      "type": "5",
                      "name": "Map Size",
                      "group": "Shadow Map Settings"
                  },
                  {
                      "type": "0",
                      "name": "Shadow Strength",
                      "group": "Shadow Map Settings",
                      "subType": "number"
                  },
                  {
                      "type": "0",
                      "name": "LR-BottomTop",
                      "group": "Shadow Map Settings",
                      "subType": "number"
                  },
                  {
                      "type": "0",
                      "name": "Near",
                      "group": "Shadow Map Settings",
                      "subType": "number"
                  },
                  {
                      "type": "0",
                      "name": "Far",
                      "group": "Shadow Map Settings",
                      "subType": "number"
                  },
                  {
                      "type": "0",
                      "name": "Bias",
                      "group": "Shadow Map Settings",
                      "subType": "number"
                  },
                  {
                      "type": "0",
                      "name": "Polygon Offset",
                      "group": "Shadow Map Settings",
                      "subType": "integer"
                  },
                  {
                      "type": "0",
                      "name": "Normal Offset",
                      "group": "Shadow Map Settings",
                      "subType": "number"
                  },
                  {
                      "type": "0",
                      "name": "Blur Amount",
                      "group": "Shadow Map Settings",
                      "subType": "number"
                  },
                  {
                      "type": "0",
                      "name": "Enable Advanced",
                      "group": "Advanced Options",
                      "subType": "boolean"
                  },
                  {
                      "type": "0",
                      "name": "MSAA index",
                      "subType": "integer"
                  },
                  {
                      "type": "5",
                      "name": "MSAA",
                      "group": "Advanced Options"
                  },
                  {
                      "type": "0",
                      "name": "Texture Filter index",
                      "subType": "integer"
                  },
                  {
                      "type": "5",
                      "name": "Texture Filter",
                      "group": "Advanced Options"
                  },
                  {
                      "type": "0",
                      "name": "Anisotropic index",
                      "subType": "integer"
                  },
                  {
                      "type": "5",
                      "name": "Anisotropic",
                      "group": "Advanced Options"
                  }
              ],
              "portsOut": [
                  {
                      "type": "1",
                      "name": "Trigger Out"
                  },
                  {
                      "type": "2",
                      "name": "Shadow Map"
                  }
              ]
          },
          "authorName": "simod",
          "docs": {
              "ports": [
                  {
                      "name": "Trigger In",
                      "text": "Trigger input"
                  },
                  {
                      "name": "X",
                      "text": "Direction X"
                  },
                  {
                      "name": "Y",
                      "text": "Direction Y"
                  },
                  {
                      "name": "Z",
                      "text": "Direction Z"
                  },
                  {
                      "name": "R",
                      "text": "R color channel"
                  },
                  {
                      "name": "G",
                      "text": "G color channel"
                  },
                  {
                      "name": "B",
                      "text": "B color channel"
                  },
                  {
                      "name": "Specular R",
                      "text": "specular reflection color channel R"
                  },
                  {
                      "name": "Specular G",
                      "text": "specular reflection color channel G"
                  },
                  {
                      "name": "Specular B",
                      "text": "specular reflection color channel B"
                  },
                  {
                      "name": "Intensity",
                      "text": "intensity of the directional light"
                  },
                  {
                      "name": "Cast Shadow",
                      "text": "if activated, light will generate a shadow map to be used with the shadow material extension"
                  },
                  {
                      "name": "Map Size index",
                      "text": "index of the map size"
                  },
                  {
                      "name": "Map Size",
                      "text": "the size of the generated shadow map, possible values: 256, 512, 1024, 2048"
                  },
                  {
                      "name": "Shadow Strength",
                      "text": "strength of the shadows"
                  },
                  {
                      "name": "LR-BottomTop",
                      "text": "L, R, Bottom and Top culling of the shadow map camera's frustum"
                  },
                  {
                      "name": "Near",
                      "text": "near culling of the shadow map camera's frustum"
                  },
                  {
                      "name": "Far",
                      "text": "far culling of the shadow map camera's frustum"
                  },
                  {
                      "name": "Bias",
                      "text": "biasing for the shadow comparison, refer to the shadow op for an in depth explanation"
                  },
                  {
                      "name": "Polygon Offset",
                      "text": "polygon offset for the shadow map rendering, refer to the shadow op for an in depth explanation"
                  },
                  {
                      "name": "Normal Offset",
                      "text": "normal offset for the shadow map rendering, refer to the shadow op for an in depth explanation"
                  },
                  {
                      "name": "Blur Amount",
                      "text": "blur factor for the VSM shadow algorithm, refer to the shadow op for an in depth explanation"
                  },
                  {
                      "name": "MSAA",
                      "text": "MSAA factor"
                  },
                  {
                      "name": "Texture Filter",
                      "text": "texture filter type"
                  },
                  {
                      "name": "Anisotropic",
                      "text": "anisotropic factor"
                  },
                  {
                      "name": "Trigger Out",
                      "text": "trigger output"
                  },
                  {
                      "name": "Shadow Map",
                      "text": "generated shadow map output"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1587646911645,
          "exampleProjectId": "nEWpXU",
          "coreLibs": [
              "cgl_light"
          ],
          "shortName": "DirectionalLight_v5",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.Phong",
          "shortNameDisplay": "DirectionalLight",
          "version": 5,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.Phong.DirectionalLight_v4",
                  "versionString": "_v4",
                  "version": 4
              },
              {
                  "name": "Ops.Gl.Phong.DirectionalLight_v5",
                  "versionString": "_v5",
                  "version": 5
              }
          ],
          "allowEdit": false,
          "usedInProject": true
      },
      {
          "name": "Ops.Gl.Phong.LambertMaterial_v2",
          "content": "<p>This is a simple material to be used with lights.</p>\n<p>This material model does not have any specular reflections, it only calculates diffuse lighting.</p>\n",
          "attachmentFiles": [
              "att_lambert.frag",
              "att_lambert.vert"
          ],
          "summary": "a simple shaded material ",
          "id": "d69316f1-bde9-4645-8280-c635a8982e0d",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Execute"
                  },
                  {
                      "type": 0,
                      "name": "Diffuse R",
                      "group": "Diffuse Color",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Diffuse G",
                      "group": "Diffuse Color",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Diffuse B",
                      "group": "Diffuse Color",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Diffuse A",
                      "group": "Diffuse Color",
                      "subType": "number"
                  },
                  {
                      "type": 2,
                      "name": "Diffuse Texture",
                      "group": "Texture",
                      "objType": "texture"
                  },
                  {
                      "type": 0,
                      "name": "Colorize Texture",
                      "group": "Texture",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "next"
                  },
                  {
                      "type": 2,
                      "name": "Shader"
                  }
              ]
          },
          "authorName": "simod",
          "docs": {
              "ports": [
                  {
                      "name": "Execute",
                      "text": "Trigger input"
                  },
                  {
                      "name": "Diffuse R",
                      "text": "R component of the diffuse color"
                  },
                  {
                      "name": "Diffuse G",
                      "text": "G component of the diffuse color"
                  },
                  {
                      "name": "Diffuse B",
                      "text": "B component of the diffuse color"
                  },
                  {
                      "name": "Diffuse A",
                      "text": "Alpha channel of the diffuse color"
                  },
                  {
                      "name": "Double Sided",
                      "text": "check if material should be double sided"
                  },
                  {
                      "name": "Diffuse Texture",
                      "text": "Texture input"
                  },
                  {
                      "name": "Colorize Texture",
                      "text": "check to colorize texture with diffuse color"
                  },
                  {
                      "name": "next",
                      "text": "Trigger output"
                  },
                  {
                      "name": "Shader",
                      "text": "Shader output to be used with i.e. GLTF models"
                  }
              ]
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1583497431595,
          "exampleProjectId": "PAvm26",
          "shortName": "LambertMaterial_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.Phong",
          "shortNameDisplay": "LambertMaterial",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.Phong.LambertMaterial",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Gl.Phong.LambertMaterial_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.Phong.PhongMaterial_v6",
          "content": "<p>This is probably the most classic material of them all.</p>\n<p>It works stand-alone or in conjunction with the light ops.</p>\n<p>The op features 2 different diffuse color models, standard Lambert &amp; Oren-Nayar.\nFurthermore, there is a dropdown menu for 4 different specular models:\nBlinn-Phong, Schlick, Phong, Gauss.</p>\n<p>It also has Fresnel capabilities &amp; emissive color &amp; physical energy conservation of light (if desired).</p>\n",
          "attachmentFiles": [
              "att_phong.frag",
              "att_phong.vert",
              "att_snippet_body_ambient.frag",
              "att_snippet_body_directional.frag",
              "att_snippet_body_point.frag",
              "att_snippet_body_spot.frag",
              "att_snippet_head.frag"
          ],
          "summary": "A shaded material for lighting objects",
          "id": "0d83ed06-cdbe-4fe0-87bb-0ccece7fb6e1",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Trigger In"
                  },
                  {
                      "type": 0,
                      "name": "R",
                      "group": "Diffuse Color",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "G",
                      "group": "Diffuse Color",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "B",
                      "group": "Diffuse Color",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "A",
                      "group": "Diffuse Color",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Albedo",
                      "group": "Oren-Nayar Diffuse",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Roughness",
                      "group": "Oren-Nayar Diffuse",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Fresnel Intensity",
                      "group": "Fresnel",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Fresnel Width",
                      "group": "Fresnel",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Fresnel Exponent",
                      "group": "Fresnel",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Fresnel R",
                      "group": "Fresnel",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Fresnel G",
                      "group": "Fresnel",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Fresnel B",
                      "group": "Fresnel",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Emissive Active",
                      "group": "Emissive Color",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Color Intensity",
                      "group": "Emissive Color",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Emissive R",
                      "group": "Emissive Color",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Emissive G",
                      "group": "Emissive Color",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Emissive B",
                      "group": "Emissive Color",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Shininess",
                      "group": "Specular",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Specular Amount",
                      "group": "Specular",
                      "subType": "number"
                  },
                  {
                      "type": 2,
                      "name": "Diffuse Texture",
                      "group": "Textures",
                      "objType": "texture"
                  },
                  {
                      "type": 2,
                      "name": "Specular Texture",
                      "group": "Textures",
                      "objType": "texture"
                  },
                  {
                      "type": 2,
                      "name": "Normal Map",
                      "group": "Textures",
                      "objType": "texture"
                  },
                  {
                      "type": 2,
                      "name": "AO Texture",
                      "group": "Textures",
                      "objType": "texture"
                  },
                  {
                      "type": 2,
                      "name": "Emissive Texture",
                      "group": "Textures",
                      "objType": "texture"
                  },
                  {
                      "type": 2,
                      "name": "Emissive Mask",
                      "group": "Textures",
                      "objType": "texture"
                  },
                  {
                      "type": 2,
                      "name": "Opacity Texture",
                      "group": "Textures",
                      "objType": "texture"
                  },
                  {
                      "type": 2,
                      "name": "Environment Map",
                      "group": "Textures",
                      "objType": "texture"
                  },
                  {
                      "type": 2,
                      "name": "Env Map Mask",
                      "group": "Textures",
                      "objType": "texture"
                  },
                  {
                      "type": 0,
                      "name": "Diffuse Repeat X",
                      "group": "Texture Transforms",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Diffuse Repeat Y",
                      "group": "Texture Transforms",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Texture Offset X",
                      "group": "Texture Transforms",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Texture Offset Y",
                      "group": "Texture Transforms",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Specular Intensity",
                      "group": "Texture Intensities",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Normal Map Intensity",
                      "group": "Texture Intensities",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "AO Intensity",
                      "group": "Texture Intensities",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "AO UV Channel index",
                      "values": [
                          "1",
                          "2"
                      ],
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Emissive Intensity",
                      "group": "Texture Intensities",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Emissive Mask Intensity",
                      "group": "Texture Intensities",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Env Map Intensity",
                      "group": "Texture Intensities",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Env Map Blend index",
                      "values": [
                          "Add",
                          "Multiply",
                          "Mix"
                      ],
                      "group": "Texture Intensities",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Env Mask Intensity",
                      "group": "Texture Intensities",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Alpha Mask Source index",
                      "values": [
                          "Luminance",
                          "R",
                          "G",
                          "B",
                          "A"
                      ],
                      "group": "Opacity Texture",
                      "subType": "integer"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Trigger Out"
                  },
                  {
                      "type": 2,
                      "name": "Shader",
                      "objType": "shader"
                  }
              ]
          },
          "authorName": "simod",
          "docs": {
              "ports": [
                  {
                      "name": "Trigger In",
                      "text": "Trigger in"
                  },
                  {
                      "name": "R",
                      "text": "Diffuse Red Value"
                  },
                  {
                      "name": "G",
                      "text": "Diffuse Green Value"
                  },
                  {
                      "name": "B",
                      "text": "Diffuse Blue Value"
                  },
                  {
                      "name": "A",
                      "text": "Opacity"
                  },
                  {
                      "name": "Enable",
                      "text": "check to enable the alternative oren-nayar diffuse mode"
                  },
                  {
                      "name": "Albedo",
                      "text": "Albedo of the diffuse color"
                  },
                  {
                      "name": "Roughness",
                      "text": "Roughness of the diffuse color"
                  },
                  {
                      "name": "Active",
                      "text": "check to activate fresnel"
                  },
                  {
                      "name": "Fresnel Intensity",
                      "text": "Amount of Fresnel effect"
                  },
                  {
                      "name": "Fresnel Width",
                      "text": "Width of Fresnel effect"
                  },
                  {
                      "name": "Fresnel Exponent",
                      "text": "Exponent (Fade) of Fresnel effect"
                  },
                  {
                      "name": "Fresnel R",
                      "text": "Fresnel Red Value"
                  },
                  {
                      "name": "Fresnel G",
                      "text": "Fresnel Green Value"
                  },
                  {
                      "name": "Fresnel B",
                      "text": "Fresnel Blue Value"
                  },
                  {
                      "name": "Emissive Active",
                      "text": "toggle to render emissive color"
                  },
                  {
                      "name": "Color Intensity",
                      "text": "intensity of emissive color"
                  },
                  {
                      "name": "Emissive R",
                      "text": "Emissive Red Value"
                  },
                  {
                      "name": "Emissive G",
                      "text": "Emissive Green Value"
                  },
                  {
                      "name": "Emissive B",
                      "text": "Emissive Blue Value"
                  },
                  {
                      "name": "Shininess",
                      "text": "Size of the specular reflection, the greater the value the smaller the reflection"
                  },
                  {
                      "name": "Specular Amount",
                      "text": "Amount of the specular reflection"
                  },
                  {
                      "name": "Specular Model",
                      "text": "choose between 4 different specular modes: "
                  },
                  {
                      "name": "Energy Conservation",
                      "text": "check to apply physical energy conservation"
                  },
                  {
                      "name": "Double Sided Material",
                      "text": "check to render material double sided"
                  },
                  {
                      "name": "Falloff Mode",
                      "text": "Choose between 4 different falloff modes: a (original mode), b (smoothed original), c (unreal 4 falloff), d (inverse square falloff - oldschool)"
                  },
                  {
                      "name": "Diffuse Texture",
                      "text": "Diffuse texture input"
                  },
                  {
                      "name": "Specular Texture",
                      "text": "Specular texture input"
                  },
                  {
                      "name": "Normal Map",
                      "text": "Normal Map input"
                  },
                  {
                      "name": "AO Texture",
                      "text": "Ambient Occlusion texture input"
                  },
                  {
                      "name": "Emissive Texture",
                      "text": "Emissive texture input"
                  },
                  {
                      "name": "Emissive Mask",
                      "text": "emissive map mask texture input"
                  },
                  {
                      "name": "Opacity Texture",
                      "text": "Opacity texture input"
                  },
                  {
                      "name": "Environment Map",
                      "text": "environment map texture input"
                  },
                  {
                      "name": "Env Map Mask",
                      "text": "environment map mask texture input"
                  },
                  {
                      "name": "Colorize Texture",
                      "text": "check to colorize texture "
                  },
                  {
                      "name": "Diffuse Repeat X",
                      "text": "How often a texture is repeated on the X axis (applied to all textures)"
                  },
                  {
                      "name": "Diffuse Repeat Y",
                      "text": "How often a texture is repeated on the Y axis (applied to all textures)"
                  },
                  {
                      "name": "Texture Offset X",
                      "text": "texture pixel offset on the C axis (applied to all textures)"
                  },
                  {
                      "name": "Texture Offset Y",
                      "text": "texture pixel offset on the Y axis (applied to all textures)"
                  },
                  {
                      "name": "Specular Intensity",
                      "text": "intensity of the specular texture"
                  },
                  {
                      "name": "Normal Map Intensity",
                      "text": "intensity of the normal map"
                  },
                  {
                      "name": "AO Intensity",
                      "text": "intensity of the Ambient Occlusion texture"
                  },
                  {
                      "name": "Emissive Intensity",
                      "text": "intensity of the emissive map"
                  },
                  {
                      "name": "Emissive Mask Intensity",
                      "text": "intensity of the emissive mask "
                  },
                  {
                      "name": "Env Map Intensity",
                      "text": "intensity of the environment map"
                  },
                  {
                      "name": "Env Mask Intensity",
                      "text": "intensity of the environment map mask"
                  },
                  {
                      "name": "Alpha Mask Source index",
                      "text": "which channel of the alpha texture to use for multiplying"
                  },
                  {
                      "name": "Alpha Mask Source",
                      "text": "choose which component of texture should be used for alpha masking: r, g, b, a or luminance"
                  },
                  {
                      "name": "Discard Transparent Pixels",
                      "text": "check to discard transparent pixels"
                  },
                  {
                      "name": "Trigger Out",
                      "text": "Trigger out"
                  },
                  {
                      "name": "Shader",
                      "text": "Shader out"
                  }
              ]
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1618395257484,
          "exampleProjectId": "L3HqYa",
          "coreLibs": [],
          "shortName": "PhongMaterial_v6",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.Phong",
          "shortNameDisplay": "PhongMaterial",
          "version": 6,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.Phong.PhongMaterial",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Gl.Phong.PhongMaterial_v3",
                  "versionString": "_v3",
                  "version": 3
              },
              {
                  "name": "Ops.Gl.Phong.PhongMaterial_v4",
                  "versionString": "_v4",
                  "version": 4
              },
              {
                  "name": "Ops.Gl.Phong.PhongMaterial_v5",
                  "versionString": "_v5",
                  "version": 5
              },
              {
                  "name": "Ops.Gl.Phong.PhongMaterial_v6",
                  "versionString": "_v6",
                  "version": 6
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.Phong.PointLight_v5",
          "content": "<p>The point light illuminates in every possible direction.</p>\n",
          "attachmentFiles": [],
          "summary": "Point light for phong shading",
          "id": "54e5d3f5-e3f4-4381-990d-d5e32b9a2d39",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Trigger In"
                  },
                  {
                      "type": 0,
                      "name": "Cast Light",
                      "group": "Light Attributes",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Intensity",
                      "group": "Light Attributes",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Radius",
                      "group": "Light Attributes",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "X",
                      "group": "Position",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Y",
                      "group": "Position",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Z",
                      "group": "Position",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "R",
                      "group": "Color",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "G",
                      "group": "Color",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "B",
                      "group": "Color",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Specular R",
                      "group": "Specular Color",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Specular G",
                      "group": "Specular Color",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Specular B",
                      "group": "Specular Color",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Falloff",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Cast Shadow",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Rendering Active",
                      "group": "Shadow Map Settings",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Map Size index",
                      "values": [
                          "256",
                          "512",
                          "1024",
                          "2048"
                      ],
                      "group": "Shadow Map Settings",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Shadow Strength",
                      "group": "Shadow Map Settings",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Near",
                      "group": "Shadow Map Settings",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Far",
                      "group": "Shadow Map Settings",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Bias",
                      "group": "Shadow Map Settings",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Polygon Offset",
                      "group": "Shadow Map Settings",
                      "subType": "integer"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Trigger Out"
                  },
                  {
                      "type": 2,
                      "name": "Cubemap",
                      "objType": "texture"
                  },
                  {
                      "type": 0,
                      "name": "World Position X",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "World Position Y",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "World Position Z",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "simod",
          "docs": {
              "ports": [
                  {
                      "name": "Trigger In",
                      "text": "Trigger input"
                  },
                  {
                      "name": "Intensity",
                      "text": "intensity of the point light"
                  },
                  {
                      "name": "Radius",
                      "text": "effective radius of the point light"
                  },
                  {
                      "name": "X",
                      "text": "position x"
                  },
                  {
                      "name": "Y",
                      "text": "position y"
                  },
                  {
                      "name": "Z",
                      "text": "position z"
                  },
                  {
                      "name": "R",
                      "text": "diffuse color channel R"
                  },
                  {
                      "name": "G",
                      "text": "diffuse color channel G"
                  },
                  {
                      "name": "B",
                      "text": "diffuse color channel B"
                  },
                  {
                      "name": "Specular R",
                      "text": "specular color channel R"
                  },
                  {
                      "name": "Specular G",
                      "text": "specular color channel G"
                  },
                  {
                      "name": "Specular B",
                      "text": "specular color channel B"
                  },
                  {
                      "name": "Falloff",
                      "text": "falloff within effective radius"
                  },
                  {
                      "name": "Cast Shadow",
                      "text": "if activated, light will generate a shadow map to be used with the shadow material extension"
                  },
                  {
                      "name": "Map Size index",
                      "text": "index of the map size"
                  },
                  {
                      "name": "Map Size",
                      "text": "the size of the generated shadow map, possible values: 256, 512, 1024, 2048"
                  },
                  {
                      "name": "Shadow Strength",
                      "text": "strength of the shadows"
                  },
                  {
                      "name": "Near",
                      "text": "the near value of the shadow camera's frustum"
                  },
                  {
                      "name": "Far",
                      "text": "the far value of the shadow camera's frustum"
                  },
                  {
                      "name": "Bias",
                      "text": "biasing for the shadow comparison, refer to the shadow op for an in depth explanation"
                  },
                  {
                      "name": "Polygon Offset",
                      "text": "polygon offset for the shadow map rendering, refer to the shadow op for an in depth explanation"
                  },
                  {
                      "name": "Trigger Out",
                      "text": "trigger output"
                  },
                  {
                      "name": "Cubemap",
                      "text": "generated shadow cubemap output"
                  },
                  {
                      "name": "Cubemap Projection",
                      "text": "equirectangular projection of shadow cubemap"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1587737932336,
          "exampleProjectId": "MybtXU",
          "coreLibs": [
              "cgl_light",
              "cgl_cubemapframebuffer"
          ],
          "shortName": "PointLight_v5",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.Phong",
          "shortNameDisplay": "PointLight",
          "version": 5,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.Phong.PointLight",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Gl.Phong.PointLight_v4",
                  "versionString": "_v4",
                  "version": 4
              },
              {
                  "name": "Ops.Gl.Phong.PointLight_v5",
                  "versionString": "_v5",
                  "version": 5
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.Phong.ResetLights",
          "content": "<p>Use this op to exclude parts of your render path from the lighting system.</p>\n",
          "attachmentFiles": [],
          "summary": "reset lights for everything triggered after",
          "id": "3954ca2b-56c8-4501-9b47-feeaba71d75f",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Trigger In"
                  },
                  {
                      "type": 0,
                      "name": "Reset Lights",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Trigger Out"
                  }
              ]
          },
          "authorName": "simod",
          "docs": {
              "ports": [
                  {
                      "name": "Trigger In",
                      "text": "trigger input"
                  },
                  {
                      "name": "Reset Lights",
                      "text": "check to stop passing lights after this op"
                  },
                  {
                      "name": "Trigger Out",
                      "text": "trigger output"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1614768738258,
          "exampleProjectId": "eU7obI",
          "shortName": "ResetLights",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.Phong",
          "shortNameDisplay": "ResetLights",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.Phong.ResetLights",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.Phong.SpotLight_v5",
          "content": "<p>The spot light basically is a point light, with the difference that you can set an angle to control where the light gets cut off.</p>\n",
          "attachmentFiles": [],
          "summary": "spot light  that emits a cone of light",
          "id": "76418c17-abd5-401b-82e2-688db6f966ee",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Trigger In"
                  },
                  {
                      "type": 0,
                      "name": "Cast Light",
                      "group": "Light Attributes",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Intensity",
                      "group": "Light Attributes",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Radius",
                      "group": "Light Attributes",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "X",
                      "group": "Position",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Y",
                      "group": "Position",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Z",
                      "group": "Position",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Point At X",
                      "group": "Point At",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Point At Y",
                      "group": "Point At",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Point At Z",
                      "group": "Point At",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "R",
                      "group": "Color",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "G",
                      "group": "Color",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "B",
                      "group": "Color",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Specular R",
                      "group": "Specular Color",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Specular G",
                      "group": "Specular Color",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Specular B",
                      "group": "Specular Color",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Cone Angle",
                      "group": "Cone Attributes",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Inner Cone Angle",
                      "group": "Cone Attributes",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Spot Exponent",
                      "group": "Cone Attributes",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Falloff",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Cast Shadow",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Rendering Active",
                      "group": "Shadow Map Settings",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Shadow Strength",
                      "group": "Shadow Map Settings",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Trigger Out"
                  },
                  {
                      "type": 2,
                      "name": "Shadow Map",
                      "objType": "texture"
                  },
                  {
                      "type": 0,
                      "name": "World Position X",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "World Position Y",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "World Position Z",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "simod",
          "docs": {
              "ports": [
                  {
                      "name": "Trigger In",
                      "text": "Trigger input"
                  },
                  {
                      "name": "Intensity",
                      "text": "intensity of the spotlight"
                  },
                  {
                      "name": "Radius",
                      "text": "effective radius of the spot light"
                  },
                  {
                      "name": "X",
                      "text": "X position of the light"
                  },
                  {
                      "name": "Y",
                      "text": "Y position of the light"
                  },
                  {
                      "name": "Z",
                      "text": "Z position of the light"
                  },
                  {
                      "name": "Point At X",
                      "text": "where the light points at X"
                  },
                  {
                      "name": "Point At Y",
                      "text": "where the light points at Y"
                  },
                  {
                      "name": "Point At Z",
                      "text": "where the light points at Z"
                  },
                  {
                      "name": "R",
                      "text": "diffuse color channel R"
                  },
                  {
                      "name": "G",
                      "text": "diffuse color channel G"
                  },
                  {
                      "name": "B",
                      "text": "diffuse color channel B"
                  },
                  {
                      "name": "Specular R",
                      "text": "specular color channel R"
                  },
                  {
                      "name": "Specular G",
                      "text": "specular color channel G"
                  },
                  {
                      "name": "Specular B",
                      "text": "specular color channel B"
                  },
                  {
                      "name": "Cone Angle",
                      "text": "outter cone angle of the spot light, this parameter affects the camera of the shadow mapping"
                  },
                  {
                      "name": "Inner Cone Angle",
                      "text": "inner cone angle (soft area) of the spot light's cutoff"
                  },
                  {
                      "name": "Spot Exponent",
                      "text": "appearance of the spot light"
                  },
                  {
                      "name": "Falloff",
                      "text": "falloff in respect to effective radius"
                  },
                  {
                      "name": "Cast Shadow",
                      "text": "if activated, light will generate a shadow map to be used with the shadow material extension"
                  },
                  {
                      "name": "Map Size index",
                      "text": "index of the map size"
                  },
                  {
                      "name": "Map Size",
                      "text": "the size of the generated shadow map, possible values: 256, 512, 1024, 2048"
                  },
                  {
                      "name": "Shadow Strength",
                      "text": "strength of the shadows"
                  },
                  {
                      "name": "Near",
                      "text": "the near value of the shadow camera's frustum"
                  },
                  {
                      "name": "Far",
                      "text": "the far value of the shadow camera's frustum"
                  },
                  {
                      "name": "Bias",
                      "text": "biasing for the shadow comparison, refer to the shadow op for an in depth explanation"
                  },
                  {
                      "name": "Polygon Offset",
                      "text": "polygon offset for the shadow map rendering, refer to the shadow op for an in depth explanation"
                  },
                  {
                      "name": "Normal Offset",
                      "text": "normal offset for the shadow map rendering, refer to the shadow op for an in depth explanation"
                  },
                  {
                      "name": "Blur Amount",
                      "text": "blur factor for the variance shadow algorithm, refer to the shadow op for an in depth explanation"
                  },
                  {
                      "name": "MSAA",
                      "text": "MSAA factor"
                  },
                  {
                      "name": "Texture Filter",
                      "text": "texture filter type"
                  },
                  {
                      "name": "Anisotropic",
                      "text": "anisotropic factor"
                  },
                  {
                      "name": "Trigger Out",
                      "text": "trigger output"
                  },
                  {
                      "name": "Shadow Map",
                      "text": "generated shadow map output"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1587556120293,
          "exampleProjectId": "D5evXU",
          "coreLibs": [
              "cgl_light"
          ],
          "shortName": "SpotLight_v5",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.Phong",
          "shortNameDisplay": "SpotLight",
          "version": 5,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.Phong.SpotLight_v4",
                  "versionString": "_v4",
                  "version": 4
              },
              {
                  "name": "Ops.Gl.Phong.SpotLight_v5",
                  "versionString": "_v5",
                  "version": 5
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.PixelProjection_v3",
          "content": "<p>when enabling using viewport size drawing a rectangle with a width/height of 100, the screen space of that rectangle is exactly 100 pixels</p>\n",
          "attachmentFiles": [],
          "summary": "Remaps world co-ordinates to a pixel co-ordinate system",
          "id": "b11cd28f-d568-4544-84b0-ecfc4e332cd6",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "render"
                  },
                  {
                      "type": 0,
                      "name": "Size index",
                      "values": [
                          "Canvas",
                          "ViewPort",
                          "Manual"
                      ],
                      "group": "Size",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Width",
                      "group": "Size",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Height",
                      "group": "Size",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "frustum near",
                      "group": "Clipping",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "frustum far",
                      "group": "Clipping",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Position 0,0 index",
                      "values": [
                          "Top Left",
                          "Top Right",
                          "Center",
                          "Bottom Right",
                          "Bottom Left"
                      ],
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Flip X",
                      "group": "Flip",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Flip Y",
                      "group": "Flip",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Zero Y",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "trigger"
                  },
                  {
                      "type": 0,
                      "name": "Size Width",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Size Height",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "render",
                      "text": "Trigger the op"
                  },
                  {
                      "name": "Width",
                      "text": "Width if Use Viewport Size is disabled"
                  },
                  {
                      "name": "Height",
                      "text": "Height if Use Viewport Size is disabled"
                  },
                  {
                      "name": "trigger",
                      "text": "Trigger out"
                  }
              ]
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1701098416156,
          "exampleProjectId": "fsOPNS",
          "shortName": "PixelProjection_v3",
          "hasScreenshot": true,
          "namespace": "Ops.Gl",
          "shortNameDisplay": "PixelProjection",
          "version": 3,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.PixelProjection",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Gl.PixelProjection_v2",
                  "versionString": "_v2",
                  "version": 2
              },
              {
                  "name": "Ops.Gl.PixelProjection_v3",
                  "versionString": "_v3",
                  "version": 3
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.PointCollector",
          "content": "<p>creates an array, into which <code>PointCollectorCollect</code> will write into</p>\n",
          "attachmentFiles": [],
          "summary": "save points/coordinates in an array",
          "id": "52f368ee-303b-4d84-919d-450b0c002e39",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "render"
                  },
                  {
                      "type": 0,
                      "name": "Absolute",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "trigger"
                  },
                  {
                      "type": 3,
                      "name": "Points"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1506612473389,
          "exampleProjectId": "",
          "shortName": "PointCollector",
          "hasScreenshot": false,
          "namespace": "Ops.Gl",
          "shortNameDisplay": "PointCollector",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.PointCollector",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.PointCollectorCollect",
          "content": "<p>saves the current transformation xyz coodinate to an array</p>\n<p>see <a href=\"/op/Ops.Gl.PointCollector\" target=\"_blank\">Ops.Gl.PointCollector</a></p>\n",
          "attachmentFiles": [],
          "summary": "collect world space coordinates into an array",
          "id": "766147f4-94c5-4197-8e0b-f41320aac2c6",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "render"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "trigger"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1544360226445,
          "exampleProjectId": "",
          "shortName": "PointCollectorCollect",
          "hasScreenshot": false,
          "namespace": "Ops.Gl",
          "shortNameDisplay": "PointCollectorCollect",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.PointCollectorCollect",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.PointCollectorScreenCoords",
          "content": "",
          "attachmentFiles": [],
          "summary": "collect screen pixel coordinates into an array",
          "id": "ada03d29-07be-48f1-a428-7d0e8c52a163",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "render"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "trigger"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1519124229040,
          "exampleProjectId": "",
          "shortName": "PointCollectorScreenCoords",
          "hasScreenshot": false,
          "namespace": "Ops.Gl",
          "shortNameDisplay": "PointCollectorScreenCoords",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.PointCollectorScreenCoords",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.RandomCluster",
          "content": "<p>Transforms the child meshes randomly in space.</p>\n",
          "attachmentFiles": [],
          "summary": "Transforms objects randomly in space",
          "id": "ca3bc984-e596-48fb-b53d-502eb13979b0",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "exe"
                  },
                  {
                      "type": 0,
                      "name": "num",
                      "group": "Parameters",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "random seed",
                      "group": "Parameters",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "round",
                      "group": "Parameters",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "size",
                      "group": "Area",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "scaleX",
                      "group": "Area",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "scaleY",
                      "group": "Area",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "scaleZ",
                      "group": "Area",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Rotate X",
                      "group": "Rotation",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Rotate Y",
                      "group": "Rotation",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Rotate Z",
                      "group": "Rotation",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Scroll X",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "trigger"
                  },
                  {
                      "type": 0,
                      "name": "index",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "rnd",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "random seed",
                      "text": "`0`: different every time"
                  }
              ]
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [
              "DW9U5tv1GHM"
          ],
          "created": 1516269330315,
          "exampleProjectId": "Ah6Rj6",
          "shortName": "RandomCluster",
          "hasScreenshot": true,
          "namespace": "Ops.Gl",
          "shortNameDisplay": "RandomCluster",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.RandomCluster",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.RenderAnim_v2",
          "content": "<p>good ffmpeg settings to create a mp4 from image sequence and music file:</p>\n<p><code>ffmpeg -framerate 30 -i fertile.png_%d.png -i fertile.mp3 -vcodec libx264 -crf 15 -acodec copy fertilesound9.mp4</code></p>\n<p>how to make a video work also on ios devices:</p>\n<p><code>ffmpeg -framerate 30 -i loopDfast.png_%d.png -vcodec libx264 -profile:v main -crf 15 -pix_fmt yuv420p -x264-params ref=4 loopDfastIos.mp4</code>\nHow to download all images at once :</p>\n<p>Make sure to go to site settings and &quot;allow&quot; automatic downloads. This will allow you to download all of the image files in one go. Otherwise you&#39;ll be asked to confirm each files location.</p>\n",
          "attachmentFiles": [],
          "summary": "record, render an animation and save as webm video file or png image sequence",
          "id": "c05e54a3-3ed5-4941-a412-01134f53f0ac",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Render"
                  },
                  {
                      "type": 0,
                      "name": "File Type index",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "ZIP multiple files",
                      "group": "File",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Download Files",
                      "group": "File",
                      "subType": "boolean"
                  },
                  {
                      "type": 5,
                      "name": "Filename",
                      "group": "File"
                  },
                  {
                      "type": 0,
                      "name": "Quality",
                      "group": "File",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Duration Type index",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Duration",
                      "group": "Timing",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "FPS",
                      "group": "Timing",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Transparency",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Use Canvas Size",
                      "group": "Size",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "texture width",
                      "group": "Size",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "texture height",
                      "group": "Size",
                      "subType": "integer"
                  },
                  {
                      "type": 1,
                      "name": "Start"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  },
                  {
                      "type": 0,
                      "name": "Progress",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Frame",
                      "subType": "number"
                  },
                  {
                      "type": 5,
                      "name": "Status"
                  },
                  {
                      "type": 0,
                      "name": "Started",
                      "subType": "boolean"
                  },
                  {
                      "type": 5,
                      "name": "Data URL"
                  },
                  {
                      "type": 1,
                      "name": "Finished"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "FPS",
                      "text": "Frames per second for render."
                  }
              ]
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [
              "whammy.js",
              "jszip.js"
          ],
          "youtubeids": [],
          "created": 1573902410722,
          "exampleProjectId": "bQhm8i",
          "shortName": "RenderAnim_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Gl",
          "shortNameDisplay": "RenderAnim",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.RenderAnim",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Gl.RenderAnim_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.RenderGeometry_v2",
          "content": "<p>Can be used to re use a geometry at multiple places or render a modified geometry (e.g. tesselate) </p>\n",
          "attachmentFiles": [],
          "summary": "Render a geometry as mesh",
          "id": "0a9bdb39-8250-460e-8d99-50fe6825d956",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "render"
                  },
                  {
                      "type": 2,
                      "name": "Geometry",
                      "objType": "geometry"
                  },
                  {
                      "type": 0,
                      "name": "Add Vertex Numbers",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Render Mesh",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "trigger"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "render",
                      "text": "Trigger in "
                  },
                  {
                      "name": "Geometry",
                      "text": "Geometry object in to render"
                  },
                  {
                      "name": "trigger",
                      "text": "Trigger out"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1678359531644,
          "exampleProjectId": "w6QYlH",
          "shortName": "RenderGeometry_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Gl",
          "shortNameDisplay": "RenderGeometry",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.RenderGeometry",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Gl.RenderGeometry_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.RenderToTexture_v3",
          "content": "<p>Renders the following ops into a texture.\nThe resulting texture can be used e.g. to post process a 3d scene.</p>\n<p>RTT</p>\n",
          "attachmentFiles": [],
          "summary": "Render into an Image",
          "id": "41eec5c7-c480-477a-be81-04c3efac8357",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "render"
                  },
                  {
                      "type": 0,
                      "name": "Size index",
                      "values": [
                          "Canvas",
                          "Manual"
                      ],
                      "group": "Size",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "texture width",
                      "group": "Size",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "texture height",
                      "group": "Size",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Auto Aspect",
                      "group": "Size",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "filter index",
                      "values": [
                          "nearest",
                          "linear",
                          "mipmap"
                      ],
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Wrap index",
                      "values": [
                          "Clamp",
                          "Repeat",
                          "Mirror"
                      ],
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "MSAA index",
                      "values": [
                          "none",
                          "2x",
                          "4x",
                          "8x"
                      ],
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Pixel Format index",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Depth",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Clear",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "trigger"
                  },
                  {
                      "type": 2,
                      "name": "texture",
                      "objType": "texture"
                  },
                  {
                      "type": 2,
                      "name": "textureDepth",
                      "objType": "texture"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [
              "XmOk70epdf0"
          ],
          "created": 1687516885456,
          "exampleProjectId": "G2_my7",
          "shortName": "RenderToTexture_v3",
          "hasScreenshot": true,
          "namespace": "Ops.Gl",
          "shortNameDisplay": "RenderToTexture",
          "version": 3,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.RenderToTexture",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Gl.RenderToTexture_v2",
                  "versionString": "_v2",
                  "version": 2
              },
              {
                  "name": "Ops.Gl.RenderToTexture_v3",
                  "versionString": "_v3",
                  "version": 3
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.RenderToTextures_v3",
          "content": "",
          "attachmentFiles": [],
          "summary": "render to multiple textures at the same time",
          "id": "fb4f44d8-e255-4e81-b96e-38e870bc3238",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Render"
                  },
                  {
                      "type": 0,
                      "name": "Size index",
                      "values": [
                          "Canvas",
                          "Manual"
                      ],
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "texture width",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "texture height",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Auto Aspect",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Pixel Format index",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Filter index",
                      "values": [
                          "nearest",
                          "linear",
                          "mipmap"
                      ],
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Wrap index",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "MSAA index",
                      "values": [
                          "none",
                          "2x",
                          "4x",
                          "8x"
                      ],
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Clear",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Slots index",
                      "values": [
                          "1",
                          "2",
                          "3",
                          "4",
                          "5",
                          "6",
                          "7",
                          "8"
                      ],
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Texture 0 index",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Texture 1 index",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Texture 2 index",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Texture 3 index",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Texture 4 index",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Texture 5 index",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Texture 6 index",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Texture 7 index",
                      "subType": "integer"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  },
                  {
                      "type": 2,
                      "name": "Result Texture 0",
                      "objType": "texture"
                  },
                  {
                      "type": 2,
                      "name": "Result Texture 1",
                      "objType": "texture"
                  },
                  {
                      "type": 2,
                      "name": "Result Texture 2",
                      "objType": "texture"
                  },
                  {
                      "type": 2,
                      "name": "Result Texture 3",
                      "objType": "texture"
                  },
                  {
                      "type": 2,
                      "name": "Result Texture 4",
                      "objType": "texture"
                  },
                  {
                      "type": 2,
                      "name": "Result Texture 5",
                      "objType": "texture"
                  },
                  {
                      "type": 2,
                      "name": "Result Texture 6",
                      "objType": "texture"
                  },
                  {
                      "type": 2,
                      "name": "Result Texture 7",
                      "objType": "texture"
                  },
                  {
                      "type": 2,
                      "name": "textureDepth",
                      "objType": "texture"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1687516278322,
          "exampleProjectId": "muH2jG",
          "coreLibs": [
              "cgl_rendertargets",
              "cgl_shadermodifier"
          ],
          "issues": "requires WebGL2",
          "shortName": "RenderToTextures_v3",
          "hasScreenshot": true,
          "namespace": "Ops.Gl",
          "shortNameDisplay": "RenderToTextures",
          "version": 3,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.RenderToTextures",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Gl.RenderToTextures_v2",
                  "versionString": "_v2",
                  "version": 2
              },
              {
                  "name": "Ops.Gl.RenderToTextures_v3",
                  "versionString": "_v3",
                  "version": 3
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.ResetTransform",
          "content": "",
          "attachmentFiles": [],
          "summary": "reset current transforms to initial value (identity)",
          "id": "1bf7c63e-e2c2-42e2-abb3-42235e7e24f0",
          "layout": {
              "portsIn": [
                  {
                      "type": "1",
                      "name": "exe"
                  },
                  {
                      "type": "0",
                      "name": "Reset Model Transform",
                      "subType": "boolean"
                  },
                  {
                      "type": "0",
                      "name": "Reset View Transform",
                      "subType": "boolean"
                  },
                  {
                      "type": "0",
                      "name": "Default View",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": "1",
                      "name": "trigger"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1601560572709,
          "exampleProjectId": "kY3J8i",
          "shortName": "ResetTransform",
          "hasScreenshot": true,
          "namespace": "Ops.Gl",
          "shortNameDisplay": "ResetTransform",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.ResetTransform",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.SaveScreenShot_v3",
          "content": "<p>use <a href=\"/op/Ops.Gl.DownloadTexture_v2\" target=\"_blank\">Ops.Gl.DownloadTexture_v2</a> if you need more flexibility, like different resolutions, etc.</p>\n",
          "attachmentFiles": [],
          "summary": "Download the current screen content as png file",
          "id": "76843a4d-947f-41ca-9c8f-0faa6ce7380a",
          "layout": {
              "portsIn": [
                  {
                      "type": 5,
                      "name": "Filename"
                  },
                  {
                      "type": 0,
                      "name": "Use Canvas Size",
                      "subType": "boolean"
                  },
                  {
                      "type": 1,
                      "name": "Screenshot"
                  },
                  {
                      "type": 0,
                      "name": "Width",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Height",
                      "subType": "integer"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Finished"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "Filename",
                      "text": "name of saved file"
                  },
                  {
                      "name": "Use Canvas Size",
                      "text": "Uses canvas size"
                  },
                  {
                      "name": "Screenshot",
                      "text": "Trigger to make a screenshot"
                  },
                  {
                      "name": "Width",
                      "text": "Width of screenshot in pixels"
                  },
                  {
                      "name": "Height",
                      "text": "Height of screenshot in pixels"
                  },
                  {
                      "name": "Finished",
                      "text": "Trigger out when screenshot has been created"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1647956302961,
          "exampleProjectId": "OB0Qmi",
          "shortName": "SaveScreenShot_v3",
          "hasScreenshot": true,
          "namespace": "Ops.Gl",
          "shortNameDisplay": "SaveScreenShot",
          "version": 3,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.SaveScreenShot",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Gl.SaveScreenShot_v2",
                  "versionString": "_v2",
                  "version": 2
              },
              {
                  "name": "Ops.Gl.SaveScreenShot_v3",
                  "versionString": "_v3",
                  "version": 3
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.Shader.AttributeAsColorMaterial",
          "content": "",
          "attachmentFiles": [
              "att_normalsmaterial.frag",
              "att_normalsmaterial.vert"
          ],
          "summary": "render mesh normals as colors",
          "id": "2963fd23-a860-461a-a3cf-394b8261159f",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "render"
                  },
                  {
                      "type": 0,
                      "name": "Attribute index",
                      "values": [
                          "Position",
                          "TexCoords",
                          "TexCoords 1",
                          "Normals",
                          "Tangents",
                          "BiTangents"
                      ],
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Absolute",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "World Space",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "trigger"
                  },
                  {
                      "type": 2,
                      "name": "Shader"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1525434279614,
          "exampleProjectId": "bZEZGc",
          "shortName": "AttributeAsColorMaterial",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.Shader",
          "shortNameDisplay": "AttributeAsColorMaterial",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.Shader.AttributeAsColorMaterial",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false,
          "namespaceTitle": "Ops.Gl.Shader",
          "namespaceSummary": "WebGl Ops"
      },
      {
          "name": "Ops.Gl.Shader.BasicMaterial_v3",
          "content": "<p>Using the basicmaterial is an easy way to set the final color of objects. Despice having Basic in it&#39;s name it can be used for lots of use cases.</p>\n",
          "attachmentFiles": [
              "att_basicmaterial.frag",
              "att_basicmaterial.vert"
          ],
          "summary": "A material without shading",
          "id": "ec55d252-3843-41b1-b731-0482dbd9e72b",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "render"
                  },
                  {
                      "type": 0,
                      "name": "r",
                      "group": "Color",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "g",
                      "group": "Color",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "b",
                      "group": "Color",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "a",
                      "group": "Color",
                      "subType": "number"
                  },
                  {
                      "type": 2,
                      "name": "texture",
                      "group": "Color Texture",
                      "objType": "texture"
                  },
                  {
                      "type": 0,
                      "name": "colorizeTexture",
                      "group": "Color Texture",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Vertex Colors",
                      "group": "Color Texture",
                      "subType": "boolean"
                  },
                  {
                      "type": 2,
                      "name": "textureOpacity",
                      "group": "Opacity",
                      "objType": "texture"
                  },
                  {
                      "type": 0,
                      "name": "Alpha Mask Source index",
                      "values": [
                          "Luminance",
                          "R",
                          "G",
                          "B",
                          "A",
                          "1-A",
                          "1-R"
                      ],
                      "group": "Opacity",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Opacity TexCoords Transform",
                      "group": "Opacity",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Discard Transparent Pixels",
                      "group": "Opacity",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "diffuseRepeatX",
                      "group": "Texture Transform",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "diffuseRepeatY",
                      "group": "Texture Transform",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Tex Offset X",
                      "group": "Texture Transform",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Tex Offset Y",
                      "group": "Texture Transform",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Crop TexCoords",
                      "group": "Texture Transform",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "billboard",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "trigger"
                  },
                  {
                      "type": 2,
                      "name": "shader",
                      "objType": "shader"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "colorizeTexture",
                      "text": "Multiply the RGBA color by the Texture Color, can be used to tint the texture"
                  },
                  {
                      "name": "Vertex Colors",
                      "text": "If the current geometry provides vertex colors they will be used"
                  },
                  {
                      "name": "textureOpacity",
                      "text": "Texture input for settings opacity/alpha channel of the final color. An easy way to create a mask or holes in the object"
                  },
                  {
                      "name": "Alpha Mask Source index",
                      "text": "What information should control the final alpha channel/opacity ?"
                  },
                  {
                      "name": "diffuseRepeatX",
                      "text": "Repeat the texture on the X axis. e.g.: 2 - shows the images twice, 0.5 only shows half of the image"
                  },
                  {
                      "name": "Tex Offset X",
                      "text": "Scroll the texture on the X axis"
                  },
                  {
                      "name": "Crop TexCoords",
                      "text": "Do not repeat the image, for example when scrolling &gt; 1"
                  },
                  {
                      "name": "billboard",
                      "text": "Rotate the final object perpendicular to the camera"
                  }
              ]
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [
              "F-CUdHq40Pc"
          ],
          "created": 1583419753370,
          "exampleProjectId": "SKCL88",
          "shortName": "BasicMaterial_v3",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.Shader",
          "shortNameDisplay": "BasicMaterial",
          "version": 3,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.Shader.BasicMaterial",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Gl.Shader.BasicMaterial_v2",
                  "versionString": "_v2",
                  "version": 2
              },
              {
                  "name": "Ops.Gl.Shader.BasicMaterial_v3",
                  "versionString": "_v3",
                  "version": 3
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.Shader.ChromaKeyMaterial",
          "content": "",
          "attachmentFiles": [
              "att_chromakeymaterial.frag",
              "att_chromakeymaterial.vert"
          ],
          "summary": "display texture and replace a color with transparency",
          "id": "20be6064-b332-447c-a220-e70d5bc506e0",
          "layout": {
              "portsIn": [
                  {
                      "type": "1",
                      "name": "render"
                  },
                  {
                      "type": "2",
                      "name": "texture"
                  },
                  {
                      "type": "0",
                      "name": "Mode index",
                      "subType": "integer"
                  },
                  {
                      "type": "0",
                      "name": "weightMul",
                      "subType": "number"
                  },
                  {
                      "type": "0",
                      "name": "r",
                      "subType": "number"
                  },
                  {
                      "type": "0",
                      "name": "g",
                      "subType": "number"
                  },
                  {
                      "type": "0",
                      "name": "b",
                      "subType": "number"
                  },
                  {
                      "type": "0",
                      "name": "white",
                      "subType": "number"
                  },
                  {
                      "type": "0",
                      "name": "diffuseRepeatX",
                      "subType": "number"
                  },
                  {
                      "type": "0",
                      "name": "diffuseRepeatY",
                      "subType": "number"
                  },
                  {
                      "type": "0",
                      "name": "Tex Offset X",
                      "subType": "number"
                  },
                  {
                      "type": "0",
                      "name": "Tex Offset Y",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": "1",
                      "name": "trigger"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1519816612579,
          "exampleProjectId": "aDqoTq",
          "shortName": "ChromaKeyMaterial",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.Shader",
          "shortNameDisplay": "ChromaKeyMaterial",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.Shader.ChromaKeyMaterial",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false,
          "usedInProject": true
      },
      {
          "name": "Ops.Gl.Shader.CustomShader_v2",
          "content": "<p>Write your own custom shader and use it as a material.\nClick the edit button to edit the fragment or vertex shader.</p>\n<p>To turn it into a texture use it together with the  <a href=\"/op/Ops.Gl.Shader.Shader2Texture\" target=\"_blank\">Ops.Gl.Shader.Shader2Texture</a> op.</p>\n<p>UNIFORMS\nUNI float variableFloatName; //Use to create a uniform float\nUNI sampler2D variableTextureName; // use to create a texture input port\nIN vec2 texCoord; // Gives the UV co-ordinates from 0-1</p>\n<p>To display a texture on the screen \nVec4 texIn = texture(variableTextureName,texCoord);</p>\n",
          "attachmentFiles": [],
          "summary": "Write your own custom shader",
          "id": "a165fc89-a35b-4d39-8930-7345b098bd9d",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "render"
                  },
                  {
                      "type": 5,
                      "name": "Fragment Code",
                      "group": "Source Code"
                  },
                  {
                      "type": 5,
                      "name": "Vertex Code",
                      "group": "Source Code"
                  },
                  {
                      "type": 0,
                      "name": "Use As Material",
                      "group": "Options",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "trigger"
                  },
                  {
                      "type": 2,
                      "name": "Shader",
                      "objType": "shader"
                  },
                  {
                      "type": 0,
                      "name": "Has Errors",
                      "subType": "boolean"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "render",
                      "text": "Trigger in"
                  },
                  {
                      "name": "Fragment Code",
                      "text": "A string can be passed in as a fragment shader. It's better to use an attachment"
                  },
                  {
                      "name": "Vertex Code",
                      "text": "A string can be passed in as a vertex shader. It's better to use an attachment"
                  },
                  {
                      "name": "Use As Material",
                      "text": "Enable to use as a material"
                  },
                  {
                      "name": "trigger",
                      "text": "Trigger out"
                  },
                  {
                      "name": "Shader",
                      "text": "Shader/material out"
                  }
              ]
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [
              "Zfhn8xSM0SE"
          ],
          "created": 1557747300453,
          "exampleProjectId": "vWyGud",
          "coreLibs": [],
          "shortName": "CustomShader_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.Shader",
          "shortNameDisplay": "CustomShader",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.Shader.CustomShader",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Gl.Shader.CustomShader_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.Shader.ErrorMaterial",
          "content": "",
          "attachmentFiles": [],
          "summary": "draw meshes using the cables error material shader",
          "id": "a16c565a-574d-48d2-a95e-1bdce96dc00f",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "render"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "trigger"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1535879032157,
          "exampleProjectId": "",
          "shortName": "ErrorMaterial",
          "hasScreenshot": false,
          "namespace": "Ops.Gl.Shader",
          "shortNameDisplay": "ErrorMaterial",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.Shader.ErrorMaterial",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.Shader.FrontBacksideMaterial",
          "content": "<ul>\n<li>green is facing front</li>\n<li>red is facing back</li>\n</ul>\n<p>this is not directly defined by normals, but if the order of vertices is clockwise or not</p>\n",
          "attachmentFiles": [
              "att_frontbacksidematerial.frag"
          ],
          "summary": "visualize which faces are facing the camera",
          "id": "beb92b81-8fe8-4871-b790-efb71bfeefc4",
          "layout": {
              "portsIn": [
                  {
                      "type": "1",
                      "name": "render"
                  }
              ],
              "portsOut": [
                  {
                      "type": "1",
                      "name": "next"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1513338032368,
          "exampleProjectId": "Lm6p9r",
          "shortName": "FrontBacksideMaterial",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.Shader",
          "shortNameDisplay": "FrontBacksideMaterial",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.Shader.FrontBacksideMaterial",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.Shader.GetShader",
          "content": "",
          "attachmentFiles": [],
          "summary": "get current set shader",
          "id": "5cca905a-d72b-4a07-9574-d4e4f9a8f300",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Update"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  },
                  {
                      "type": 2,
                      "name": "Shader"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1608532639068,
          "exampleProjectId": "BweOVl",
          "shortName": "GetShader",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.Shader",
          "shortNameDisplay": "GetShader",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.Shader.GetShader",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false,
          "usedInProject": true
      },
      {
          "name": "Ops.Gl.Shader.MatCapMaterial_v3",
          "content": "<p>In 3D computer graphics, the appearance of an 3D object depends on several things:</p>\n<p>the surface normals (which determine how the object is shaded);\nthe point from which the object is viewed;\nthe lighting setup (orientation and types of lights);\nand how the surface reacts to that lighting (for example, how shiny it is).\nMatCap (Material Capture, also known as LitSphere) are complete materials, including lighting and reflections, so you can add it to an object and not have any need for, well, lighting and reflections. MatCaps allows you to create a surface material and lighting environment simply by painting an object so that it looks like how you want your surface to appear. This opens up all sorts of interesting possibilities for non-photoreal image rendering.</p>\n<p>The key to using a MatCap texture is that is is mapped to the object’s normals (which exist in relation to the camera) defining a color for every vertex normal direction relative to the camera, and your material is set to shadeless (because you don’t need lights to have any influence, as they are a part of the MatCap texture). So as the camera moves around the object, the reflections and highlights move around your object (as if the object were moving and not the camera). In other words, if your object were a sphere, no matter how you looked at it, it would look like the matcap sphere (reflections always in the same place, e.g.). But as your object takes non-spherical shapes, thus changing the normals, the material responds as if it were made of the complex material.</p>\n<p>MatCap is most commonly used for sculpting, as it gives quick and useful feedback on how an objects shape is changing. It also works with rendering, to an extent (good when you need to do a quick show-off-your-model render and don’t have time to set up any complex lights or materials). It&#39;s very cheap, and looks great when the camera doesn&#39;t rotate.</p>\n<p>Text taken from <a href=\"https://github.com/nidorx/matcaps\">https://github.com/nidorx/matcaps</a></p>\n<p>Be sure to check out the repository to find a huge archive of matcaps!</p>\n<p>Use at your own risk :)</p>\n",
          "attachmentFiles": [
              "att_matcap.frag",
              "att_matcap.vert"
          ],
          "summary": "Easy to use image based lighting Material",
          "id": "c1dd6e76-61b4-471a-b8d1-f550a5a9a4f4",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Render"
                  },
                  {
                      "type": 2,
                      "name": "MatCap",
                      "objType": "texture"
                  },
                  {
                      "type": 2,
                      "name": "Diffuse",
                      "group": "Texture Maps",
                      "objType": "texture"
                  },
                  {
                      "type": 2,
                      "name": "Normal",
                      "group": "Texture Maps",
                      "objType": "texture"
                  },
                  {
                      "type": 2,
                      "name": "Specular Mask",
                      "group": "Texture Maps",
                      "objType": "texture"
                  },
                  {
                      "type": 2,
                      "name": "Specular MatCap",
                      "group": "Texture Maps",
                      "objType": "texture"
                  },
                  {
                      "type": 2,
                      "name": "AO Texture",
                      "group": "Texture Maps",
                      "objType": "texture"
                  },
                  {
                      "type": 2,
                      "name": "Opacity Texture",
                      "group": "Texture Maps",
                      "objType": "texture"
                  },
                  {
                      "type": 0,
                      "name": "r",
                      "group": "Color",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "g",
                      "group": "Color",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "b",
                      "group": "Color",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Opacity",
                      "group": "Color",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "AO Intensity",
                      "group": "Texture Transforms",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Normal Map Intensity",
                      "group": "Texture Transforms",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Repeat X",
                      "group": "Texture Transforms",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Repeat Y",
                      "group": "Texture Transforms",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Offset X",
                      "group": "Texture Transforms",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Offset Y",
                      "group": "Texture Transforms",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Double Sided",
                      "group": "Normals",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Screen Space Normals",
                      "group": "Normals",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Calc normal tangents",
                      "group": "Normals",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Opacity TexCoords Transform",
                      "group": "Texture Opacity",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Discard Transparent Pixels",
                      "group": "Texture Opacity",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Alpha Mask Source index",
                      "values": [
                          "Luminance",
                          "R",
                          "G",
                          "B",
                          "A"
                      ],
                      "group": "Texture Opacity",
                      "subType": "integer"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  },
                  {
                      "type": 2,
                      "name": "Shader"
                  }
              ]
          },
          "authorName": "simod",
          "docs": {
              "ports": [
                  {
                      "name": "Render",
                      "text": "trigger input"
                  },
                  {
                      "name": "MatCap",
                      "text": "matcap texture input"
                  },
                  {
                      "name": "Diffuse",
                      "text": "diffuse texture input"
                  },
                  {
                      "name": "Normal",
                      "text": "normal map input"
                  },
                  {
                      "name": "Specular Mask",
                      "text": "specular mask input"
                  },
                  {
                      "name": "Specular MatCap",
                      "text": "specular matcap input"
                  },
                  {
                      "name": "AO Texture",
                      "text": "AO texture input"
                  },
                  {
                      "name": "Opacity Texture",
                      "text": "opacity texture input"
                  },
                  {
                      "name": "r",
                      "text": "R channel of diffuse color"
                  },
                  {
                      "name": "g",
                      "text": "G channel of diffuse color"
                  },
                  {
                      "name": "b",
                      "text": "B channel of diffuse color"
                  },
                  {
                      "name": "Opacity",
                      "text": "Alpha channel of diffuse color"
                  },
                  {
                      "name": "AO Intensity",
                      "text": "Intensity of AO texture"
                  },
                  {
                      "name": "Normal Map Intensity",
                      "text": "Intensity of Normal Map"
                  },
                  {
                      "name": "Repeat X",
                      "text": "Texture Repeat along the x-axis"
                  },
                  {
                      "name": "Repeat Y",
                      "text": "Texture Repeat along the y-axis"
                  },
                  {
                      "name": "Offset X",
                      "text": "Texture Coordinate offset along the x-axis"
                  },
                  {
                      "name": "Offset Y",
                      "text": "Texture Coordinate offset along the y-axis"
                  },
                  {
                      "name": "Screen Space Normals",
                      "text": "check to use screen space normals (flat shading)"
                  },
                  {
                      "name": "Calc normal tangents",
                      "text": "calculate normals & tangents"
                  },
                  {
                      "name": "Opacity TexCoords Transform",
                      "text": "invert y-axis of opacity texture texture coordinates"
                  },
                  {
                      "name": "Discard Transparent Pixels",
                      "text": "discard transparent pixels under a threshold of 0.2"
                  },
                  {
                      "name": "Alpha Mask Source index",
                      "text": "switch to choose which channel of the texture should be used for alpha mapping"
                  },
                  {
                      "name": "Alpha Mask Source",
                      "text": "switch to choose which channel of the texture should be used for alpha mapping"
                  },
                  {
                      "name": "Next",
                      "text": "output trigger"
                  },
                  {
                      "name": "Shader",
                      "text": "shader output"
                  }
              ]
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [
              "rtDA2S9SPQ4"
          ],
          "created": 1599664445091,
          "exampleProjectId": "gWkghi",
          "shortName": "MatCapMaterial_v3",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.Shader",
          "shortNameDisplay": "MatCapMaterial",
          "version": 3,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.Shader.MatCapMaterial",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Gl.Shader.MatCapMaterial_v2",
                  "versionString": "_v2",
                  "version": 2
              },
              {
                  "name": "Ops.Gl.Shader.MatCapMaterial_v3",
                  "versionString": "_v3",
                  "version": 3
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.Shader.MinifyGlsl",
          "content": "",
          "attachmentFiles": [],
          "summary": "Minify GLSL shader source code",
          "id": "76775369-3b1c-46bc-9749-43648a103891",
          "layout": {
              "portsIn": [
                  {
                      "type": 5,
                      "name": "Shader Source"
                  }
              ],
              "portsOut": [
                  {
                      "type": 5,
                      "name": "Minified Shader Source"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [
              "glsltokenizer.js"
          ],
          "youtubeids": [],
          "created": 1714126682361,
          "exampleProjectId": "t5H1Qc",
          "shortName": "MinifyGlsl",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.Shader",
          "shortNameDisplay": "MinifyGlsl",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.Shader.MinifyGlsl",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.Shader.PointMaterial_v6",
          "content": "<p>Draw all vertices as points / circles. Combine this op with pointCloudFromArray to draw point clouds with a xyz array.</p>\n<h2>Atlas</h2>\n<p>Atlas Feature lets the user use Textures that contain multiple Images. \nThe Images must be the same size and be arranged on the x axis.\nThe atlas texture input will be used as an index texture. every pixel is the index of the atlas to be used.\n0 is fist image, 1 is second image and so on.\nWhen using the Cross fade toggle, those images will be mixed: 0.5 is a 50% mix of the first and second image.</p>\n",
          "attachmentFiles": [
              "att_pointmat.frag",
              "att_pointmat.vert"
          ],
          "summary": "Draw all vertices as points / circles",
          "id": "e44df958-00c7-46e4-95bb-3e6ac6c4188f",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "render"
                  },
                  {
                      "type": 0,
                      "name": "PointSize",
                      "group": "Size",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Size in Pixels",
                      "group": "Size",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Random Size",
                      "group": "Size",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Round",
                      "group": "Size",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Round Antialias",
                      "group": "Size",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Scale by Distance",
                      "group": "Size",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "r",
                      "group": "Color",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "g",
                      "group": "Color",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "b",
                      "group": "Color",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "a",
                      "group": "Color",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Vertex Colors",
                      "group": "Color",
                      "subType": "boolean"
                  },
                  {
                      "type": 2,
                      "name": "texture",
                      "group": "Texture",
                      "objType": "texture"
                  },
                  {
                      "type": 0,
                      "name": "Colorize Texture",
                      "group": "Texture",
                      "subType": "boolean"
                  },
                  {
                      "type": 2,
                      "name": "Texture Mask",
                      "group": "Texture",
                      "objType": "texture"
                  },
                  {
                      "type": 0,
                      "name": "Mask Channel index",
                      "values": [
                          "R",
                          "A",
                          "Luminance"
                      ],
                      "group": "Texture",
                      "subType": "integer"
                  },
                  {
                      "type": 2,
                      "name": "Texture Colorize",
                      "group": "Texture",
                      "objType": "texture"
                  },
                  {
                      "type": 0,
                      "name": "Colorize Randomize",
                      "group": "Texture",
                      "subType": "boolean"
                  },
                  {
                      "type": 2,
                      "name": "Texture Opacity",
                      "group": "Texture",
                      "objType": "texture"
                  },
                  {
                      "type": 2,
                      "name": "Texture Point Size",
                      "group": "Size",
                      "objType": "texture"
                  },
                  {
                      "type": 0,
                      "name": "Point Size Channel index",
                      "values": [
                          "R",
                          "G",
                          "B"
                      ],
                      "group": "Size",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Texture Point Size Mul",
                      "group": "Size",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Map Size 0 index",
                      "values": [
                          "Black",
                          "Grey"
                      ],
                      "group": "Size",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Flip Texture",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Atlas Cross Fade",
                      "group": "Atlas",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Atlas Repeat X ",
                      "group": "Atlas",
                      "subType": "number"
                  },
                  {
                      "type": 2,
                      "name": "Atlas Lookup",
                      "group": "Atlas",
                      "objType": "texture"
                  },
                  {
                      "type": 2,
                      "name": "Rotate Texture",
                      "objType": "texture"
                  },
                  {
                      "type": 0,
                      "name": "Min Point Size",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "trigger"
                  },
                  {
                      "type": 2,
                      "name": "shader",
                      "objType": "shader"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1726500578566,
          "exampleProjectId": "O9yRO6",
          "shortName": "PointMaterial_v6",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.Shader",
          "shortNameDisplay": "PointMaterial",
          "version": 6,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.Shader.PointMaterial",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Gl.Shader.PointMaterial_v2",
                  "versionString": "_v2",
                  "version": 2
              },
              {
                  "name": "Ops.Gl.Shader.PointMaterial_v3",
                  "versionString": "_v3",
                  "version": 3
              },
              {
                  "name": "Ops.Gl.Shader.PointMaterial_v4",
                  "versionString": "_v4",
                  "version": 4
              },
              {
                  "name": "Ops.Gl.Shader.PointMaterial_v5",
                  "versionString": "_v5",
                  "version": 5
              },
              {
                  "name": "Ops.Gl.Shader.PointMaterial_v6",
                  "versionString": "_v6",
                  "version": 6
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.Shader.PositionAsColorMaterial",
          "content": "",
          "attachmentFiles": [
              "att_pos.frag",
              "att_pos.vert"
          ],
          "summary": "draw meshes using XYZ position coordinates as RGB color ",
          "id": "a654bbb7-bbde-4178-9fef-3209d0c352a4",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "render"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "trigger"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1667555233416,
          "exampleProjectId": "qbiIbk",
          "shortName": "PositionAsColorMaterial",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.Shader",
          "shortNameDisplay": "PositionAsColorMaterial",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.Shader.PositionAsColorMaterial",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.Shader.SetShader",
          "content": "<p>Reuse another shader at different points in the patch.</p>\n",
          "attachmentFiles": [],
          "summary": "Sets a shader",
          "id": "11d24181-1f1b-4131-bba0-3df410385a66",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "render"
                  },
                  {
                      "type": 2,
                      "name": "shader"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "trigger"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1519810855465,
          "exampleProjectId": "BweOVl",
          "shortName": "SetShader",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.Shader",
          "shortNameDisplay": "SetShader",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.Shader.SetShader",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false,
          "usedInProject": true
      },
      {
          "name": "Ops.Gl.Shader.SetUniformFloat_v2",
          "content": "",
          "attachmentFiles": [],
          "summary": "set a uniform value of the current shader",
          "id": "9e6328da-457d-4d80-a881-dcab25a0e0f8",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Render"
                  },
                  {
                      "type": 0,
                      "name": "Uniform index",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "X",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Y",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Z",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "W",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  },
                  {
                      "type": 5,
                      "name": "Type"
                  },
                  {
                      "type": 0,
                      "name": "Found",
                      "subType": "boolean"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1662556221198,
          "exampleProjectId": "5W7X2f",
          "shortName": "SetUniformFloat_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.Shader",
          "shortNameDisplay": "SetUniformFloat",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.Shader.SetUniformFloat",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Gl.Shader.SetUniformFloat_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.Shader.SetUniformTexture_v2",
          "content": "",
          "attachmentFiles": [],
          "summary": "set a uniform value of the current shader",
          "id": "26b6acbf-7c34-4552-8419-f1146ae3225f",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Render"
                  },
                  {
                      "type": 0,
                      "name": "Uniform index",
                      "subType": "integer"
                  },
                  {
                      "type": 2,
                      "name": "Texture",
                      "objType": "texture"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  },
                  {
                      "type": 0,
                      "name": "Found",
                      "subType": "boolean"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1683904593935,
          "exampleProjectId": "5W7X2f",
          "shortName": "SetUniformTexture_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.Shader",
          "shortNameDisplay": "SetUniformTexture",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.Shader.SetUniformTexture",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Gl.Shader.SetUniformTexture_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.Shader.ShaderDefine",
          "content": "",
          "attachmentFiles": [],
          "summary": "Set shader defines",
          "id": "1f870586-1ae4-4b7e-9dd7-24c300c989ba",
          "layout": {
              "portsIn": [
                  {
                      "type": "2",
                      "name": "Shader"
                  },
                  {
                      "type": "5",
                      "name": "Name"
                  },
                  {
                      "type": "5",
                      "name": "Value"
                  },
                  {
                      "type": "0",
                      "name": "Active",
                      "subType": "boolean"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1557744606556,
          "exampleProjectId": "",
          "todos": [
              {
                  "message": "Needs docs and an example",
                  "author": "andro",
                  "id": "7f787fa1-ac98-419b-95b4-863254b57853",
                  "date": 1558362029913,
                  "deleted": true,
                  "deletedBy": "cables",
                  "deletedDate": 1605512024212
              }
          ],
          "shortName": "ShaderDefine",
          "hasScreenshot": false,
          "namespace": "Ops.Gl.Shader",
          "shortNameDisplay": "ShaderDefine",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.Shader.ShaderDefine",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.Shader.ShaderInfo",
          "content": "",
          "attachmentFiles": [],
          "summary": "view current shader source code",
          "id": "7afaa77e-a976-4e65-8eb1-a6302b91c0d3",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Exec"
                  },
                  {
                      "type": 1,
                      "name": "Show Fragment"
                  },
                  {
                      "type": 1,
                      "name": "Show Vertex"
                  },
                  {
                      "type": 1,
                      "name": "Show Modules"
                  },
                  {
                      "type": 1,
                      "name": "Show Uniforms"
                  },
                  {
                      "type": 1,
                      "name": "State Info"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  },
                  {
                      "type": 5,
                      "name": "Source Frag"
                  },
                  {
                      "type": 5,
                      "name": "Source Vert"
                  },
                  {
                      "type": 5,
                      "name": "Name"
                  },
                  {
                      "type": 5,
                      "name": "Id"
                  },
                  {
                      "type": 0,
                      "name": "needsBarycentric",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Num Uniforms",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Num Attributes",
                      "subType": "number"
                  },
                  {
                      "type": 3,
                      "name": "Arributes Names"
                  },
                  {
                      "type": 3,
                      "name": "Num Defines"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1505487731611,
          "exampleProjectId": "",
          "shortName": "ShaderInfo",
          "hasScreenshot": false,
          "namespace": "Ops.Gl.Shader",
          "shortNameDisplay": "ShaderInfo",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.Shader.ShaderInfo",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.Shader.ShaderInfoUniforms_v2",
          "content": "",
          "attachmentFiles": [],
          "summary": "read back all uniforms values of the current bound shader",
          "id": "0648b136-4d35-410b-a208-75075ba1d15b",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Exec"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  },
                  {
                      "type": 3,
                      "name": "Uniforms"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1730125239280,
          "exampleProjectId": "",
          "shortName": "ShaderInfoUniforms_v2",
          "hasScreenshot": false,
          "namespace": "Ops.Gl.Shader",
          "shortNameDisplay": "ShaderInfoUniforms",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.Shader.ShaderInfoUniforms",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Gl.Shader.ShaderInfoUniforms_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.Shader.ShaderToTexture_v2",
          "content": "<p>Designed to be mainly used with the customShader op.</p>\n",
          "attachmentFiles": [],
          "summary": "render a shader into a texture",
          "id": "eb40e0e0-761b-4ce7-987a-014fff720873",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Render"
                  },
                  {
                      "type": 2,
                      "name": "Shader",
                      "objType": "shader"
                  },
                  {
                      "type": 0,
                      "name": "Size index",
                      "group": "Texture Size",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Width",
                      "group": "Texture Size",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Height",
                      "group": "Texture Size",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "filter index",
                      "group": "Texture settings",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Anisotropic index",
                      "group": "Texture settings",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "wrap index",
                      "group": "Texture settings",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Pixel Format index",
                      "group": "Texture settings",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Num Textures index",
                      "subType": "integer"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  },
                  {
                      "type": 2,
                      "name": "Texture",
                      "objType": "texture"
                  },
                  {
                      "type": 2,
                      "name": "Texture 2",
                      "objType": "texture"
                  },
                  {
                      "type": 2,
                      "name": "Texture 3",
                      "objType": "texture"
                  },
                  {
                      "type": 2,
                      "name": "Texture 4",
                      "objType": "texture"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "Render",
                      "text": "Trigger the op"
                  },
                  {
                      "name": "Shader",
                      "text": "Shader to turn into a texture"
                  },
                  {
                      "name": "Width",
                      "text": "Width of the texture in pixels"
                  },
                  {
                      "name": "Height",
                      "text": "Height of the texture in pixels"
                  },
                  {
                      "name": "filter index",
                      "text": "Pick a filter mode with an integer"
                  },
                  {
                      "name": "wrap index",
                      "text": "Pick a wrap mode with an integer"
                  },
                  {
                      "name": "Next",
                      "text": "Trigger out"
                  },
                  {
                      "name": "Texture",
                      "text": "Texture out"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1702996150218,
          "exampleProjectId": "vWyGud",
          "shortName": "ShaderToTexture_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.Shader",
          "shortNameDisplay": "ShaderToTexture",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.Shader.ShaderToTexture",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Gl.Shader.ShaderToTexture_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.Shader.SwitchShader",
          "content": "",
          "attachmentFiles": [],
          "summary": "Switch between two shaders",
          "id": "34ae93a7-ceb4-4e02-8d6f-a38f5e6c732b",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "render"
                  },
                  {
                      "type": 0,
                      "name": "value",
                      "subType": "boolean"
                  },
                  {
                      "type": 2,
                      "name": "shader true"
                  },
                  {
                      "type": 2,
                      "name": "shader false"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "trigger"
                  },
                  {
                      "type": 2,
                      "name": "shaderOut"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1519816251808,
          "exampleProjectId": "cDlpii",
          "shortName": "SwitchShader",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.Shader",
          "shortNameDisplay": "SwitchShader",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.Shader.SwitchShader",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.Shader.VertexColorMaterial",
          "content": "",
          "attachmentFiles": [
              "att_vertexcolor.frag",
              "att_vertexcolor.vert"
          ],
          "summary": "Draw a mesh, showing only its vertex colors",
          "id": "a01d592b-0e5e-48f3-a9fd-54b87ffd623b",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "render"
                  },
                  {
                      "type": 0,
                      "name": "opacity",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "trigger"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1513331905182,
          "exampleProjectId": "6MsLhR",
          "shortName": "VertexColorMaterial",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.Shader",
          "shortNameDisplay": "VertexColorMaterial",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.Shader.VertexColorMaterial",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.Shader.VertexNumberMaterial",
          "content": "<p>for use with RenderGeometry op</p>\n",
          "attachmentFiles": [],
          "summary": "visually debug vertices of your 3D geometry ",
          "id": "732ff263-1aeb-4f39-969f-c781d7776cc8",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "render"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "trigger"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1537519830894,
          "exampleProjectId": "x2PmHf",
          "shortName": "VertexNumberMaterial",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.Shader",
          "shortNameDisplay": "VertexNumberMaterial",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.Shader.VertexNumberMaterial",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.Shader.WireframeMaterial_v2",
          "content": "<p>This op doesn&#39;t work yet on mobile devices.</p>\n",
          "attachmentFiles": [
              "att_wireframe.frag",
              "att_wireframe.vert"
          ],
          "summary": "Renders following meshes as wireframes",
          "id": "a8dfa4ef-8d81-4408-91e2-76b997bd7bd9",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "render"
                  },
                  {
                      "type": 0,
                      "name": "enable depth testing",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "width",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "AntiAlias",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "diffuse r",
                      "group": "Color Wire",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "diffuse g",
                      "group": "Color Wire",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "diffuse b",
                      "group": "Color Wire",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "diffuse A",
                      "group": "Color Wire",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "fill",
                      "group": "Color Fill",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Fill R",
                      "group": "Color Fill",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Fill G",
                      "group": "Color Fill",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Fill B",
                      "group": "Color Fill",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Fill A",
                      "group": "Color Fill",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "trigger"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "fill",
                      "text": "If set, background will be drawn (currently the color cannot be chosen)."
                  },
                  {
                      "name": "width",
                      "text": "Line thickness"
                  },
                  {
                      "name": "opacity",
                      "text": "Opacity, used for stroke and fill. `0` = invisible, `1` = fully visible"
                  },
                  {
                      "name": "trigger",
                      "text": "Executes the next op"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1684839527813,
          "exampleProjectId": "bRlSDe",
          "shortName": "WireframeMaterial_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.Shader",
          "shortNameDisplay": "WireframeMaterial",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.Shader.WireframeMaterial",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Gl.Shader.WireframeMaterial_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.ShaderEffects.AreaDiscardPixel_v2",
          "content": "<p>This op will discard pixels within the defined area. \nThere are multiple modes:\nSphere, Box, Axis X Y or Z, Axis XY or XZ, Axis X Y or Z infinite</p>\n",
          "attachmentFiles": [
              "att_areadiscard.frag",
              "att_areadiscard_head.frag"
          ],
          "summary": "do not draw pixels inside a defined 3d area",
          "id": "0d39986b-c594-44d5-815d-c46a280fe16c",
          "layout": {
              "portsIn": [
                  {
                      "type": "1",
                      "name": "render"
                  },
                  {
                      "type": "0",
                      "name": "Invert",
                      "subType": "boolean"
                  },
                  {
                      "type": "0",
                      "name": "Area index",
                      "subType": "integer"
                  },
                  {
                      "type": "0",
                      "name": "Area",
                      "subType": "string"
                  },
                  {
                      "type": "0",
                      "name": "Size",
                      "group": "Size",
                      "subType": "number"
                  },
                  {
                      "type": "0",
                      "name": "Size X",
                      "group": "Size",
                      "subType": "number"
                  },
                  {
                      "type": "0",
                      "name": "Size Y",
                      "group": "Size",
                      "subType": "number"
                  },
                  {
                      "type": "0",
                      "name": "Size Z",
                      "group": "Size",
                      "subType": "number"
                  },
                  {
                      "type": "0",
                      "name": "Repeat",
                      "subType": "boolean"
                  },
                  {
                      "type": "0",
                      "name": "Repeat Distance",
                      "subType": "number"
                  },
                  {
                      "type": "0",
                      "name": "x",
                      "group": "Position",
                      "subType": "number"
                  },
                  {
                      "type": "0",
                      "name": "y",
                      "group": "Position",
                      "subType": "number"
                  },
                  {
                      "type": "0",
                      "name": "z",
                      "group": "Position",
                      "subType": "number"
                  },
                  {
                      "type": "0",
                      "name": "WorldSpace",
                      "group": "Position",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": "1",
                      "name": "trigger"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1596031051954,
          "exampleProjectId": "GQiw18",
          "coreLibs": [
              "cgl_shadermodifier"
          ],
          "shortName": "AreaDiscardPixel_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.ShaderEffects",
          "shortNameDisplay": "AreaDiscardPixel",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.ShaderEffects.AreaDiscardPixel",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Gl.ShaderEffects.AreaDiscardPixel_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "allowEdit": false,
          "usedInProject": true,
          "namespaceTitle": "Ops.Gl.ShaderEffects",
          "namespaceSummary": "WebGl Ops"
      },
      {
          "name": "Ops.Gl.ShaderEffects.AreaRotate_v2",
          "content": "",
          "attachmentFiles": [
              "att_area_rotate.vert"
          ],
          "summary": "rotate vertices in an area around a center point",
          "id": "ebfd3f0c-7a58-44d3-aba0-72d91fafd7ae",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "render"
                  },
                  {
                      "type": 0,
                      "name": "Size",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Strength",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Smooth",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "x",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "y",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "z",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "trigger"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1652966937221,
          "exampleProjectId": "7mss1Q",
          "coreLibs": [
              "cgl_shadermodifier"
          ],
          "shortName": "AreaRotate_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.ShaderEffects",
          "shortNameDisplay": "AreaRotate",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.ShaderEffects.AreaRotate",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Gl.ShaderEffects.AreaRotate_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "allowEdit": false,
          "usedInProject": true
      },
      {
          "name": "Ops.Gl.ShaderEffects.AreaScaler_v3",
          "content": "",
          "attachmentFiles": [
              "att_areascale.vert"
          ],
          "summary": "Scales the size of meshes within the area of influence",
          "id": "3b7c5601-881a-4748-91d1-aea4c7c1bf67",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "render"
                  },
                  {
                      "type": 0,
                      "name": "Area size",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Source index",
                      "group": "Influence",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Strength",
                      "group": "Influence",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Smoothstep",
                      "group": "Influence",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Min Size Original",
                      "group": "Influence",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Clamp size",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Clamp min",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Clamp max",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Pos X",
                      "group": "Position",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Pos Y",
                      "group": "Position",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Pos Z",
                      "group": "Position",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "render",
                      "text": "Trigger the op"
                  },
                  {
                      "name": "Area size",
                      "text": "Size of area to influence"
                  },
                  {
                      "name": "Source",
                      "text": "Vertex position or Object position"
                  },
                  {
                      "name": "Type index",
                      "text": "Distance or scalar. Scalar scales everything to one value."
                  },
                  {
                      "name": "Strength",
                      "text": "Strength of the effect"
                  },
                  {
                      "name": "Smoothstep",
                      "text": "Smoothstep mode to influence "
                  },
                  {
                      "name": "Clamp size",
                      "text": "Clamp the size to defined min max"
                  },
                  {
                      "name": "Clamp min",
                      "text": "Minimum size if clamp is enabled"
                  },
                  {
                      "name": "Clamp max",
                      "text": "Maximum size if clamp is enabled"
                  },
                  {
                      "name": "Pos X",
                      "text": "X position of the area"
                  },
                  {
                      "name": "Pos Y",
                      "text": "Y position of the area"
                  },
                  {
                      "name": "Pos Z",
                      "text": "Z position of the area"
                  },
                  {
                      "name": "Next",
                      "text": "Trigger out"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1652965261715,
          "exampleProjectId": "LXN7D-",
          "coreLibs": [
              "cgl_shadermodifier"
          ],
          "shortName": "AreaScaler_v3",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.ShaderEffects",
          "shortNameDisplay": "AreaScaler",
          "version": 3,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.ShaderEffects.AreaScaler",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Gl.ShaderEffects.AreaScaler_v2",
                  "versionString": "_v2",
                  "version": 2
              },
              {
                  "name": "Ops.Gl.ShaderEffects.AreaScaler_v3",
                  "versionString": "_v3",
                  "version": 3
              }
          ],
          "allowEdit": false,
          "usedInProject": true
      },
      {
          "name": "Ops.Gl.ShaderEffects.AreaTranslateFBMNoise",
          "content": "",
          "attachmentFiles": [
              "att_areascale.vert"
          ],
          "summary": "Translate object positions with a noise function",
          "id": "e755e88e-a2a7-4db2-84b3-0e76c423bdb6",
          "layout": {
              "portsIn": [
                  {
                      "type": "1",
                      "name": "render"
                  },
                  {
                      "type": "0",
                      "name": "Mode index",
                      "subType": "integer"
                  },
                  {
                      "type": "0",
                      "name": "Size",
                      "subType": "number"
                  },
                  {
                      "type": "0",
                      "name": "Strength",
                      "subType": "number"
                  },
                  {
                      "type": "0",
                      "name": "Smooth",
                      "subType": "boolean"
                  },
                  {
                      "type": "0",
                      "name": "x",
                      "group": "Area Position",
                      "subType": "number"
                  },
                  {
                      "type": "0",
                      "name": "y",
                      "group": "Area Position",
                      "subType": "number"
                  },
                  {
                      "type": "0",
                      "name": "z",
                      "group": "Area Position",
                      "subType": "number"
                  },
                  {
                      "type": "0",
                      "name": "Noise Scale",
                      "group": "Noise",
                      "subType": "number"
                  },
                  {
                      "type": "0",
                      "name": "Noise X",
                      "group": "Noise",
                      "subType": "number"
                  },
                  {
                      "type": "0",
                      "name": "Noise Y",
                      "group": "Noise",
                      "subType": "number"
                  },
                  {
                      "type": "0",
                      "name": "Noise Z",
                      "group": "Noise",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": "1",
                      "name": "trigger"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "render",
                      "text": "Trigger the op"
                  },
                  {
                      "name": "Mode",
                      "text": "Affect the rotation or the translation"
                  },
                  {
                      "name": "Size",
                      "text": "Area size of noise"
                  },
                  {
                      "name": "Strength",
                      "text": "Strength of the effect"
                  },
                  {
                      "name": "Smooth",
                      "text": "Smooth effect with distance"
                  },
                  {
                      "name": "x",
                      "text": "X position"
                  },
                  {
                      "name": "y",
                      "text": "Y position"
                  },
                  {
                      "name": "z",
                      "text": "Z position"
                  },
                  {
                      "name": "Noise Scale",
                      "text": "Scale of the noise"
                  },
                  {
                      "name": "trigger",
                      "text": "Trigger out"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1575287922281,
          "exampleProjectId": "hDcUC-",
          "shortName": "AreaTranslateFBMNoise",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.ShaderEffects",
          "shortNameDisplay": "AreaTranslateFBMNoise",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.ShaderEffects.AreaTranslateFBMNoise",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false,
          "usedInProject": true
      },
      {
          "name": "Ops.Gl.ShaderEffects.AreaTranslateMeshes_v3",
          "content": "<p>Offset the position of all meshes within the spherical area of influence</p>\n",
          "attachmentFiles": [
              "att_areascale.vert"
          ],
          "summary": "Change the position of all meshes inside of the area of influence",
          "id": "69f7a5b5-4824-441a-960c-e7b13b17790d",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "render"
                  },
                  {
                      "type": 0,
                      "name": "Size",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Strength",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "x",
                      "group": "Area Position",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "y",
                      "group": "Area Position",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "z",
                      "group": "Area Position",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Multiply x",
                      "group": "Axis Multiply",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Multiply y",
                      "group": "Axis Multiply",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Multiply z",
                      "group": "Axis Multiply",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "trigger"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1631620354495,
          "exampleProjectId": "yWVQC-",
          "coreLibs": [
              "cgl_shadermodifier"
          ],
          "shortName": "AreaTranslateMeshes_v3",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.ShaderEffects",
          "shortNameDisplay": "AreaTranslateMeshes",
          "version": 3,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.ShaderEffects.AreaTranslateMeshes",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Gl.ShaderEffects.AreaTranslateMeshes_v2",
                  "versionString": "_v2",
                  "version": 2
              },
              {
                  "name": "Ops.Gl.ShaderEffects.AreaTranslateMeshes_v3",
                  "versionString": "_v3",
                  "version": 3
              }
          ],
          "allowEdit": false,
          "usedInProject": true
      },
      {
          "name": "Ops.Gl.ShaderEffects.Bend_v2",
          "content": "",
          "attachmentFiles": [
              "att_bend.vert"
          ],
          "summary": "bend objects along an axis",
          "id": "7476156e-3ca3-445a-bd30-1b9373a6af4c",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "render"
                  },
                  {
                      "type": 0,
                      "name": "Amount",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "RotX",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "RotY",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "RotZ",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Scale",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Offset",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Limited",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "trigger"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1596030575082,
          "exampleProjectId": "HtcN9Z",
          "coreLibs": [
              "cgl_shadermodifier"
          ],
          "shortName": "Bend_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.ShaderEffects",
          "shortNameDisplay": "Bend",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.ShaderEffects.Bend",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Gl.ShaderEffects.Bend_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.ShaderEffects.ClampVertexPosition_v2",
          "content": "",
          "attachmentFiles": [
              "att_restrictVertex.vert"
          ],
          "summary": "clamp/restrict the vertex position to min/max values per axis",
          "id": "fa0b0f9a-bac9-4efa-85ef-c5d87aaa9356",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "render"
                  },
                  {
                      "type": 0,
                      "name": "Axis index",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "min",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "max",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Update Normals",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "trigger"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1664897906064,
          "exampleProjectId": "RP4O73",
          "coreLibs": [
              "cgl_shadermodifier"
          ],
          "shortName": "ClampVertexPosition_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.ShaderEffects",
          "shortNameDisplay": "ClampVertexPosition",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.ShaderEffects.ClampVertexPosition",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Gl.ShaderEffects.ClampVertexPosition_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.ShaderEffects.ColorArea_v5",
          "content": "",
          "attachmentFiles": [
              "att_colorarea.frag",
              "att_colorarea_head.frag"
          ],
          "summary": "Colorize all meshes around current position",
          "id": "3ea4bb8a-d2a0-4600-9d98-83d5a091ea4f",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Render"
                  },
                  {
                      "type": 0,
                      "name": "Area index",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Size",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Roundness",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Amount",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Falloff",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Falloff Curve index",
                      "values": [
                          "Linear",
                          "Smoothstep",
                          "pow2",
                          "pow3"
                      ],
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Invert",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Blend  index",
                      "values": [
                          "Normal",
                          "Multiply",
                          "Opacity",
                          "Add",
                          "Discard"
                      ],
                      "group": "Color",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "r",
                      "group": "Color",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "g",
                      "group": "Color",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "b",
                      "group": "Color",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "x",
                      "group": "Position",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "y",
                      "group": "Position",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "z",
                      "group": "Position",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Change Size",
                      "group": "Scale",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Size X",
                      "group": "Scale",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Size Y",
                      "group": "Scale",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Size Z",
                      "group": "Scale",
                      "subType": "number"
                  },
                  {
                      "type": 2,
                      "name": "Texture",
                      "objType": "texture"
                  },
                  {
                      "type": 0,
                      "name": "Space index",
                      "values": [
                          "World",
                          "Model",
                          "UV",
                          "Screen"
                      ],
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Priority",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [
              "cUU0fNw3rEg"
          ],
          "created": 1670867796353,
          "exampleProjectId": "0Ti2gT",
          "coreLibs": [
              "cgl_shadermodifier"
          ],
          "shortName": "ColorArea_v5",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.ShaderEffects",
          "shortNameDisplay": "ColorArea",
          "version": 5,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.ShaderEffects.ColorArea",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Gl.ShaderEffects.ColorArea_v2",
                  "versionString": "_v2",
                  "version": 2
              },
              {
                  "name": "Ops.Gl.ShaderEffects.ColorArea_v3",
                  "versionString": "_v3",
                  "version": 3
              },
              {
                  "name": "Ops.Gl.ShaderEffects.ColorArea_v4",
                  "versionString": "_v4",
                  "version": 4
              },
              {
                  "name": "Ops.Gl.ShaderEffects.ColorArea_v5",
                  "versionString": "_v5",
                  "version": 5
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.ShaderEffects.DeformArea",
          "content": "",
          "attachmentFiles": [
              "att_deformarea.vert"
          ],
          "summary": "deform a spherical area of a mesh",
          "id": "6c40cfcb-75c8-4c64-bc13-c37faaea73df",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "render"
                  },
                  {
                      "type": 0,
                      "name": "Size",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Strength",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Smooth",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "WorldSpace",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "x",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "y",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "z",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "trigger"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1504998113882,
          "exampleProjectId": "CQ0wmo",
          "coreLibs": [
              "cgl_shadermodifier"
          ],
          "shortName": "DeformArea",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.ShaderEffects",
          "shortNameDisplay": "DeformArea",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.ShaderEffects.DeformArea",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.ShaderEffects.DiscardMaterialAlpha",
          "content": "<p>coverage option needs MSAA enabled </p>\n",
          "attachmentFiles": [
              "att_alpha.frag",
              "att_alpha_head.frag"
          ],
          "summary": "discard transparent pixels in material textures",
          "id": "0cc7f41f-e933-4309-a63a-32a2446a5276",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "render"
                  },
                  {
                      "type": 0,
                      "name": "Method index",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Threshold",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "trigger"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1655223630763,
          "exampleProjectId": "3r_lf6",
          "coreLibs": [
              "cgl_shadermodifier"
          ],
          "shortName": "DiscardMaterialAlpha",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.ShaderEffects",
          "shortNameDisplay": "DiscardMaterialAlpha",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.ShaderEffects.DiscardMaterialAlpha",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false,
          "usedInProject": true
      },
      {
          "name": "Ops.Gl.ShaderEffects.ExplodeDividedMesh_v2",
          "content": "",
          "attachmentFiles": [
              "att_explode_divided_mesh.vert"
          ],
          "summary": "explode a (divided) mesh in the direction of faces normals",
          "id": "a12f2aab-0cde-44ce-923e-f78a605c783c",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Render"
                  },
                  {
                      "type": 0,
                      "name": "Distance",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Size",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Absolute",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "add x",
                      "group": "Add",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "add y",
                      "group": "Add",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "add z",
                      "group": "Add",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "mul x",
                      "group": "Multiply",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "mul y",
                      "group": "Multiply",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "mul z",
                      "group": "Multiply",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "x",
                      "group": "Position",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "y",
                      "group": "Position",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "z",
                      "group": "Position",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1601618392893,
          "exampleProjectId": "sYIxm1",
          "coreLibs": [
              "cgl_shadermodifier"
          ],
          "shortName": "ExplodeDividedMesh_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.ShaderEffects",
          "shortNameDisplay": "ExplodeDividedMesh",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.ShaderEffects.ExplodeDividedMesh",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Gl.ShaderEffects.ExplodeDividedMesh_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "allowEdit": false,
          "usedInProject": true
      },
      {
          "name": "Ops.Gl.ShaderEffects.FogEffect",
          "content": "",
          "attachmentFiles": [],
          "summary": "Fog as a shadereffect applied to a material",
          "id": "ad61e198-f178-42d0-8be9-cc776365cd3b",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "render"
                  },
                  {
                      "type": 0,
                      "name": "Mode index",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Start",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "End",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Amount",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "r",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "g",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "b",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "trigger"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1524478605086,
          "exampleProjectId": "3L3of6",
          "coreLibs": [
              "cgl_shadermodifier"
          ],
          "shortName": "FogEffect",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.ShaderEffects",
          "shortNameDisplay": "FogEffect",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.ShaderEffects.FogEffect",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false,
          "usedInProject": true
      },
      {
          "name": "Ops.Gl.ShaderEffects.FresnelGlow",
          "content": "<p>Use this op to add a shimmering glow around the edges of a geometry.</p>\n<p>The 3 parameters &quot;Intensity&quot;, &quot;Width&quot; and &quot;Exponent&quot; need to be tuned in relation to each other to achieve the best results.</p>\n",
          "attachmentFiles": [
              "att_fresnel_body.frag",
              "att_fresnel_body.vert",
              "att_fresnel_head.frag",
              "att_fresnel_head.vert"
          ],
          "summary": "add fresnel glow to any material",
          "id": "89979937-68a6-4736-8241-3c6b748103d4",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Trigger In"
                  },
                  {
                      "type": 0,
                      "name": "Active",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "R",
                      "group": "Color",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "G",
                      "group": "Color",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "B",
                      "group": "Color",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Fresnel Intensity",
                      "group": "Fresnel Settings",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Fresnel Exponent",
                      "group": "Fresnel Settings",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Trigger Out"
                  }
              ]
          },
          "authorName": "simod",
          "docs": {
              "ports": [
                  {
                      "name": "Trigger In",
                      "text": "trigger input"
                  },
                  {
                      "name": "Active",
                      "text": "activate or disactivate fresnel effect"
                  },
                  {
                      "name": "R",
                      "text": "R channel of fresnel color"
                  },
                  {
                      "name": "G",
                      "text": "G channel of fresnel color"
                  },
                  {
                      "name": "B",
                      "text": "B channel of fresnel color"
                  },
                  {
                      "name": "Fresnel Intensity",
                      "text": "intensity of the effect"
                  },
                  {
                      "name": "Fresnel Width",
                      "text": "width of the effect"
                  },
                  {
                      "name": "Fresnel Exponent",
                      "text": "falloff of the effect"
                  },
                  {
                      "name": "Trigger Out",
                      "text": "trigger output"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1591873381967,
          "exampleProjectId": "e02kYa",
          "coreLibs": [
              "cgl_shadermodifier"
          ],
          "shortName": "FresnelGlow",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.ShaderEffects",
          "shortNameDisplay": "FresnelGlow",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.ShaderEffects.FresnelGlow",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false,
          "usedInProject": true
      },
      {
          "name": "Ops.Gl.ShaderEffects.InstancedDisplacementMap_v2",
          "content": "",
          "attachmentFiles": [
              "att_displace.vert",
              "att_displace_head.vert"
          ],
          "summary": "displace positions of instanced meshes using a texture",
          "id": "e6ba9d95-20f3-4c1c-9967-26d48d278f0a",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Trigger"
                  },
                  {
                      "type": 2,
                      "name": "Texture",
                      "objType": "texture"
                  },
                  {
                      "type": 0,
                      "name": "Source index",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Mode index",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Strength",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Min",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Scale",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Clamp",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Colorize",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Debug Bounds",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Normalize",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Offset X",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Offset Y",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Abs",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Channel index",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "X",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Y",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Z",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1659099025548,
          "exampleProjectId": "yQJfFj",
          "coreLibs": [
              "cgl_shadermodifier"
          ],
          "shortName": "InstancedDisplacementMap_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.ShaderEffects",
          "shortNameDisplay": "InstancedDisplacementMap",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.ShaderEffects.InstancedDisplacementMap",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Gl.ShaderEffects.InstancedDisplacementMap_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "allowEdit": false,
          "usedInProject": true
      },
      {
          "name": "Ops.Gl.ShaderEffects.InstancedPerlinPosition_v2",
          "content": "",
          "attachmentFiles": [
              "att_perlin_instposition.vert"
          ],
          "summary": "displace position of instanced object by perlin noise value",
          "id": "716a9004-cbb8-4032-9f29-2b2f8c8973ba",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Render"
                  },
                  {
                      "type": 0,
                      "name": "Strength",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Scroll X",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Scroll Y",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Scroll Z",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Scale",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Method index",
                      "subType": "integer"
                  },
                  {
                      "type": 5,
                      "name": "Method"
                  },
                  {
                      "type": 0,
                      "name": "Mul X",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Mul Y",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Mul Z",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Min Scale",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "WorldSpace",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1613473695532,
          "exampleProjectId": "33bSY7",
          "coreLibs": [
              "cgl_shadermodifier"
          ],
          "shortName": "InstancedPerlinPosition_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.ShaderEffects",
          "shortNameDisplay": "InstancedPerlinPosition",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.ShaderEffects.InstancedPerlinPosition",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Gl.ShaderEffects.InstancedPerlinPosition_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.ShaderEffects.InstancedTextureColorize",
          "content": "",
          "attachmentFiles": [
              "att_colorize.frag",
              "att_colorize_head.frag",
              "att_displace.vert",
              "att_displace_head.vert"
          ],
          "summary": "colorize instanced meshes using a texture",
          "id": "7a13a699-6a7f-4fd1-84bb-51dd6c13c820",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Trigger"
                  },
                  {
                      "type": 2,
                      "name": "Texture",
                      "objType": "texture"
                  },
                  {
                      "type": 0,
                      "name": "Strength",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Scale",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Clamp",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Debug Bounds",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Offset X",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Offset Y",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Method index",
                      "subType": "integer"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1603091811352,
          "exampleProjectId": "yQJfFj",
          "coreLibs": [
              "cgl_shadermodifier"
          ],
          "shortName": "InstancedTextureColorize",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.ShaderEffects",
          "shortNameDisplay": "InstancedTextureColorize",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.ShaderEffects.InstancedTextureColorize",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.ShaderEffects.LimitMeshByTexCoord",
          "content": "<p>Uses on screen texture coordinates to discard a pixel if it&#39;s below a user defined threshold.\nHas multiple modes:\nX or Y \nXY\nXY inverted\nX and Y inverted</p>\n",
          "attachmentFiles": [
              "att_limitByTexCoords.frag"
          ],
          "summary": "discard pixel if texture coordinate is below threshold",
          "id": "b7482d75-913d-4564-92ae-81f8dbead3ce",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "render"
                  },
                  {
                      "type": 0,
                      "name": "Axis index",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "treshhold",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Sine Animation",
                      "group": "Sine Animation",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Time",
                      "group": "Sine Animation",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Sine Source index",
                      "group": "Sine Animation",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Frequency",
                      "group": "Sine Animation",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Amplitude",
                      "group": "Sine Animation",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "trigger"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "render",
                      "text": "Trigger in "
                  },
                  {
                      "name": "Axis",
                      "text": "Axis to use to discard pixels. Multiple modes"
                  },
                  {
                      "name": "treshhold",
                      "text": "Threshold used to discard pixels"
                  },
                  {
                      "name": "Sine Animation",
                      "text": "Enable or disable sine animation"
                  },
                  {
                      "name": "Time",
                      "text": "Time used to animate the sine option"
                  },
                  {
                      "name": "Sine Source",
                      "text": "Uses tex co-ordinate x or y, normally its the opposite Axis mode"
                  },
                  {
                      "name": "Frequency",
                      "text": "Frequency of the sine animation"
                  },
                  {
                      "name": "Amplitude",
                      "text": "Amplitude of the sine animation"
                  },
                  {
                      "name": "trigger",
                      "text": "Trigger out"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1513777600653,
          "exampleProjectId": "pHfgJ5",
          "todos": [
              {
                  "message": "Treshhold port name is incorrect should be Threshhold ",
                  "author": "andro",
                  "id": "94662ea6-0201-481d-9960-44d7b9229928",
                  "date": 1558012659008,
                  "deleted": true,
                  "deletedBy": "cables",
                  "deletedDate": 1605511815860
              },
              {
                  "message": "Whoops Treshhold port name is incorrect should be Threshold",
                  "author": "andro",
                  "id": "d5888278-366c-44ae-859e-e34e90803dbb",
                  "date": 1558012676684,
                  "deleted": true,
                  "deletedBy": "cables",
                  "deletedDate": 1605511815422
              },
              {
                  "message": "Sine source checkbox doesn't seem to affect anything",
                  "author": "andro",
                  "id": "3f56824a-7601-4b63-8945-53420f057eb7",
                  "date": 1558012834607,
                  "deleted": true,
                  "deletedBy": "cables",
                  "deletedDate": 1605511816392
              }
          ],
          "shortName": "LimitMeshByTexCoord",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.ShaderEffects",
          "shortNameDisplay": "LimitMeshByTexCoord",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.ShaderEffects.LimitMeshByTexCoord",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.ShaderEffects.MeshPixelNoise_v2",
          "content": "",
          "attachmentFiles": [
              "att_pixelnoise.frag"
          ],
          "summary": "3d space noise for mesh materials",
          "id": "f6240484-56b5-4bb8-92e6-ead30431771a",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "render"
                  },
                  {
                      "type": 0,
                      "name": "Scale",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Amount",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Blendmode index",
                      "subType": "integer"
                  },
                  {
                      "type": 5,
                      "name": "Blendmode"
                  },
                  {
                      "type": 0,
                      "name": "WorldSpace",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "r",
                      "group": "Color",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "g",
                      "group": "Color",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "b",
                      "group": "Color",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "x",
                      "group": "Position",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "y",
                      "group": "Position",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "z",
                      "group": "Position",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "trigger"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1595496761094,
          "exampleProjectId": "V7rjQ6",
          "coreLibs": [
              "cgl_shadermodifier"
          ],
          "shortName": "MeshPixelNoise_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.ShaderEffects",
          "shortNameDisplay": "MeshPixelNoise",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.ShaderEffects.MeshPixelNoise",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Gl.ShaderEffects.MeshPixelNoise_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "allowEdit": false,
          "usedInProject": true
      },
      {
          "name": "Ops.Gl.ShaderEffects.ModuloVertexPosition",
          "content": "",
          "attachmentFiles": [
              "att_trans.vert"
          ],
          "summary": "vertex shader modulo operation on vertex position ",
          "id": "5b657c67-2d43-43b7-855d-76c8aad90a0d",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "render"
                  },
                  {
                      "type": 0,
                      "name": "Axis index",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Modulo",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Trigger"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1658903351667,
          "exampleProjectId": "lMCl_8",
          "coreLibs": [
              "cgl_shadermodifier"
          ],
          "shortName": "ModuloVertexPosition",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.ShaderEffects",
          "shortNameDisplay": "ModuloVertexPosition",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.ShaderEffects.ModuloVertexPosition",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.ShaderEffects.PerlinAreaDeform_v4",
          "content": "<p>Use to get a smooth perlin noise vertex displacement on a mesh.\nCan be moved around in 3d space. </p>\n",
          "attachmentFiles": [
              "att_perlindeform.vert",
              "att_perlindeform_body.vert"
          ],
          "summary": "Displace vertices using perlin noise animation",
          "id": "060ef3c1-bb79-46a5-9ec0-3272067fe504",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "render"
                  },
                  {
                      "type": 0,
                      "name": "Scale",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Size",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Strength",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Calc Normals",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Flip Normals",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Falloff",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Output index",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Source index",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "x",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "y",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "z",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Scroll X",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Scroll Y",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Scroll Z",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "WorldSpace",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "trigger"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1595514110103,
          "exampleProjectId": "8RexP8",
          "coreLibs": [
              "cgl_shadermodifier"
          ],
          "shortName": "PerlinAreaDeform_v4",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.ShaderEffects",
          "shortNameDisplay": "PerlinAreaDeform",
          "version": 4,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.ShaderEffects.PerlinAreaDeform",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Gl.ShaderEffects.PerlinAreaDeform_v2",
                  "versionString": "_v2",
                  "version": 2
              },
              {
                  "name": "Ops.Gl.ShaderEffects.PerlinAreaDeform_v3",
                  "versionString": "_v3",
                  "version": 3
              },
              {
                  "name": "Ops.Gl.ShaderEffects.PerlinAreaDeform_v4",
                  "versionString": "_v4",
                  "version": 4
              }
          ],
          "allowEdit": false,
          "usedInProject": true
      },
      {
          "name": "Ops.Gl.ShaderEffects.ScaleByNormal_v2",
          "content": "",
          "attachmentFiles": [
              "att_scalebynormal.vert"
          ],
          "summary": "Scale vertices of an object in the direction of face normals",
          "id": "9c14f158-d634-4421-b581-51f3fd2044c5",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "render"
                  },
                  {
                      "type": 0,
                      "name": "Strength",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "trigger"
                  }
              ]
          },
          "authorName": "ratsnake",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1650542221509,
          "exampleProjectId": "Ft2xm1",
          "coreLibs": [
              "cgl_shadermodifier"
          ],
          "shortName": "ScaleByNormal_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.ShaderEffects",
          "shortNameDisplay": "ScaleByNormal",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.ShaderEffects.ScaleByNormal",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Gl.ShaderEffects.ScaleByNormal_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.ShaderEffects.Shadow_v2",
          "content": "<p>This op is an extension for all materials. If attached after one, the material will have the capabilities to receive shadows. \nFour different shadow algorithms are selectable. </p>\n<p>It is also possible to use an opacity mask to discard parts of a mesh (&quot;punch holes&quot; into shadows).</p>\n<p>The example on the right is a minimal example for the new Shadow op.</p>\n<p>For intermediate examples, please refer to the shadow documentation and these patches:</p>\n<p>Multiple occluders:\n<a href=\"https://cables.gl/p/Iqob_e\">https://cables.gl/p/Iqob_e</a></p>\n<p>Multiple occluders &amp; multiple lights:\n<a href=\"https://cables.gl/p/Hd5J_e\">https://cables.gl/p/Hd5J_e</a></p>\n<p>If you want to see a more advanced example, visit this patch:\n<a href=\"https://cables.gl/p/M0F2We\">https://cables.gl/p/M0F2We</a></p>\n",
          "attachmentFiles": [
              "att_head.frag",
              "att_shadow_body_directional.frag",
              "att_shadow_body_directional.vert",
              "att_shadow_body_point.frag",
              "att_shadow_body_point.vert",
              "att_shadow_body_spot.frag",
              "att_shadow_body_spot.vert",
              "att_shadow_head_directional.frag",
              "att_shadow_head_directional.vert",
              "att_shadow_head_point.frag",
              "att_shadow_head_point.vert",
              "att_shadow_head_spot.frag",
              "att_shadow_head_spot.vert"
          ],
          "summary": "add shadow capabilities to any material",
          "id": "f5214bd2-575d-4c0c-a7a9-4eff76915ac1",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Trigger In"
                  },
                  {
                      "type": 0,
                      "name": "Cast Shadow",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Receive Shadow",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Algorithm index",
                      "subType": "integer"
                  },
                  {
                      "type": 5,
                      "name": "Algorithm",
                      "group": "Shadow Settings"
                  },
                  {
                      "type": 0,
                      "name": "Samples index",
                      "subType": "integer"
                  },
                  {
                      "type": 5,
                      "name": "Samples",
                      "group": "Shadow Settings"
                  },
                  {
                      "type": 0,
                      "name": "Sample Distribution",
                      "group": "Shadow Settings",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "R",
                      "group": "Shadow Settings",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "G",
                      "group": "Shadow Settings",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "B",
                      "group": "Shadow Settings",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Discard Transparent",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Opacity Threshold",
                      "group": "Opacity Settings",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Alpha Mask Source index",
                      "subType": "integer"
                  },
                  {
                      "type": 5,
                      "name": "Alpha Mask Source",
                      "group": "Opacity Settings"
                  },
                  {
                      "type": 2,
                      "name": "Opacity Texture",
                      "group": "Opacity Settings",
                      "objType": "texture"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Trigger Out"
                  }
              ]
          },
          "authorName": "simod",
          "docs": {
              "ports": [
                  {
                      "name": "Trigger In",
                      "text": "trigger input"
                  },
                  {
                      "name": "Cast Shadow",
                      "text": "if true, following meshes will cast shadows, if false, following geometries will NOT cast shadows"
                  },
                  {
                      "name": "Receive Shadow",
                      "text": "if true, following meshes will receive shadows"
                  },
                  {
                      "name": "Algorithm index",
                      "text": "index for algorithm"
                  },
                  {
                      "name": "Algorithm",
                      "text": "choose between the 4 algorithms: Default, PCF (Percentage-Closer Filtered Shadows), Poisson, VSM (Variance Shadow Mapping)"
                  },
                  {
                      "name": "Samples",
                      "text": "only active when PCF or Poisson algorithm is used: amount of samples taken to soften shadows"
                  },
                  {
                      "name": "Sample Distribution",
                      "text": "distribution of sampled points, the higher the value, the smaller the \"wash\", if the value is too low, step artefacts can occur"
                  },
                  {
                      "name": "R",
                      "text": "R color channel of the shadow"
                  },
                  {
                      "name": "G",
                      "text": "G color channel of the shadow"
                  },
                  {
                      "name": "B",
                      "text": "B color channel of the shadow"
                  },
                  {
                      "name": "Opacity Threshold",
                      "text": "alpha threshold for discarding pixels "
                  },
                  {
                      "name": "Alpha Mask Source",
                      "text": "source channel of texture for discarding pixels: r, g, b, a or luminance"
                  },
                  {
                      "name": "Opacity Texture",
                      "text": "alpha texture input"
                  },
                  {
                      "name": "Trigger Out",
                      "text": "trigger output"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1593003889048,
          "exampleProjectId": "auVl18",
          "coreLibs": [
              "cgl_shadermodifier"
          ],
          "shortName": "Shadow_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.ShaderEffects",
          "shortNameDisplay": "Shadow",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.ShaderEffects.Shadow_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "allowEdit": false,
          "usedInProject": true
      },
      {
          "name": "Ops.Gl.ShaderEffects.SplineDeform_v2",
          "content": "",
          "attachmentFiles": [
              "att_splinedeform.vert",
              "att_splinedeform_head.vert"
          ],
          "summary": "Deform a mesh along a spline",
          "id": "d0cac165-2146-4a3c-863c-5042149c0e95",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Render"
                  },
                  {
                      "type": 0,
                      "name": "Size",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "offset",
                      "subType": "number"
                  },
                  {
                      "type": 3,
                      "name": "Points"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1609853302315,
          "exampleProjectId": "F-UNZ4",
          "coreLibs": [
              "cgl_shadermodifier"
          ],
          "shortName": "SplineDeform_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.ShaderEffects",
          "shortNameDisplay": "SplineDeform",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.ShaderEffects.SplineDeform",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Gl.ShaderEffects.SplineDeform_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.ShaderEffects.TextureProjection_v2",
          "content": "<p>This op allows you to project a texture onto an object such as a 3D mesh or MeshInstancer or Pointcloud. Should be placed after assigning a material.</p>\n<p>When using this op to control PointSize, you can use an HDR/32bit texture to allow you to force values outside of the 0-1 range. You can also use the Amount parameter with values outside of the 0-1 range by manually entering them into the parameter panel or connecting a number op.</p>\n",
          "attachmentFiles": [
              "att_maptexture.frag",
              "att_maptexture.vert",
              "att_maptexture_body.frag",
              "att_maptexture_body.vert"
          ],
          "summary": "texture projection on meshes",
          "id": "9be647c2-7afd-40ed-b669-9826ea6a50ca",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "render"
                  },
                  {
                      "type": 2,
                      "name": "Texture",
                      "objType": "texture"
                  },
                  {
                      "type": 0,
                      "name": "blendMode index",
                      "group": "Blending",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Amount",
                      "group": "Blending",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Target index",
                      "values": [
                          "Color",
                          "Pointsize",
                          "Alpha"
                      ],
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Scale",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Use Texture Alpha",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Pos X",
                      "group": "Position",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Pos Y",
                      "group": "Position",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Rot X",
                      "group": "Rotation",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Rot Y",
                      "group": "Rotation",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Rot Z",
                      "group": "Rotation",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Mapping index",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Discard",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "WorldSpace",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "trigger"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "Texture",
                      "text": "currently texture is auto sized to a square ratio"
                  },
                  {
                      "name": "Scale",
                      "text": "rescale incoming texture"
                  },
                  {
                      "name": "Target index",
                      "text": "color or pointsize"
                  },
                  {
                      "name": "Amount",
                      "text": "strength of texture colors or pointsize values"
                  },
                  {
                      "name": "Use Texture Alpha",
                      "text": "applies alpha channel from incoming texture. "
                  },
                  {
                      "name": "Mapping index",
                      "text": "XY, XZ, YZ, or screenspace"
                  },
                  {
                      "name": "Discard",
                      "text": "limit repeat of texture"
                  },
                  {
                      "name": "WorldSpace",
                      "text": "use world position coordinates"
                  }
              ]
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [
              "0Xgj7wKl7Ko",
              "DW9U5tv1GHM"
          ],
          "created": 1661780124355,
          "exampleProjectId": "fJHt0e",
          "coreLibs": [
              "cgl_shadermodifier"
          ],
          "shortName": "TextureProjection_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.ShaderEffects",
          "shortNameDisplay": "TextureProjection",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.ShaderEffects.TextureProjection",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Gl.ShaderEffects.TextureProjection_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "allowEdit": false,
          "usedInProject": true
      },
      {
          "name": "Ops.Gl.ShaderEffects.TransformTextureCoordinates",
          "content": "<p>Example:</p>\n<p>Degree 180 / Height 1 will twist a mesh of 1 height 180 degree.</p>\n<p>A mesh of 2 height will be twisted 360 degree !</p>\n",
          "attachmentFiles": [
              "att_trans.vert"
          ],
          "summary": "Transform and repeat texture coordinates of a mesh via vertex shader",
          "id": "54eeb750-1491-4fdf-bfd5-290e1b29bafd",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "render"
                  },
                  {
                      "type": 0,
                      "name": "Translate X",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Translate Y",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Repeat X",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Repeat Y",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Flip X",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Flip Y",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Rotation",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Trigger"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [
              "SaKWF6RnsyI"
          ],
          "created": 1652866606731,
          "exampleProjectId": "YzNrx8",
          "coreLibs": [
              "cgl_shadermodifier"
          ],
          "shortName": "TransformTextureCoordinates",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.ShaderEffects",
          "shortNameDisplay": "TransformTextureCoordinates",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.ShaderEffects.TransformTextureCoordinates",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.ShaderEffects.TransformVertex",
          "content": "<p>Example:</p>\n<p>Degree 180 / Height 1 will twist a mesh of 1 height 180 degree.</p>\n<p>A mesh of 2 height will be twisted 360 degree !</p>\n",
          "attachmentFiles": [
              "att_trans.vert",
              "att_trans_head.vert"
          ],
          "summary": "transform vertices of a mesh via vertex shader",
          "id": "68ca4a91-c3ce-4e81-bb84-3ba5f50dfaa1",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "render"
                  },
                  {
                      "type": 0,
                      "name": "Translate X",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Translate Y",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Translate Z",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Scale X",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Scale Y",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Scale Z",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Rotation X",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Rotation Y",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Rotation Z",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Transform normals",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Trigger"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [
              "SaKWF6RnsyI"
          ],
          "created": 1615314888700,
          "exampleProjectId": "u1iOhI",
          "coreLibs": [
              "cgl_shadermodifier"
          ],
          "shortName": "TransformVertex",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.ShaderEffects",
          "shortNameDisplay": "TransformVertex",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.ShaderEffects.TransformVertex",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false,
          "usedInProject": true
      },
      {
          "name": "Ops.Gl.ShaderEffects.Twist_v3",
          "content": "<p>Example:</p>\n<p>Degree 180 / Height 1 will twist a mesh of 1 height 180 degree.</p>\n<p>A mesh of 2 height will be twisted 360 degree !</p>\n",
          "attachmentFiles": [
              "att_twist.vert",
              "att_twist_head.vert"
          ],
          "summary": "twist a mesh around an axis",
          "id": "4635abe3-a6b1-413f-9cd1-fbf64f8c4942",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "render"
                  },
                  {
                      "type": 0,
                      "name": "Degree",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Height",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Axis index",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Axis",
                      "subType": "string"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Trigger"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1596029829412,
          "exampleProjectId": "VYPlJ5",
          "coreLibs": [
              "cgl_shadermodifier"
          ],
          "shortName": "Twist_v3",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.ShaderEffects",
          "shortNameDisplay": "Twist",
          "version": 3,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.ShaderEffects.Twist",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Gl.ShaderEffects.Twist_v2",
                  "versionString": "_v2",
                  "version": 2
              },
              {
                  "name": "Ops.Gl.ShaderEffects.Twist_v3",
                  "versionString": "_v3",
                  "version": 3
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.ShaderEffects.UseVertexColor",
          "content": "<p>currently only works with phongmaterial</p>\n",
          "attachmentFiles": [
              "att_colorarea.frag",
              "att_colorarea_head.frag"
          ],
          "summary": "Use vertex color as basecolor/diffuse color",
          "id": "8c3cc332-3bab-4cb7-ad0a-368814eb8282",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Render"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1613145214543,
          "exampleProjectId": "ep1Umu",
          "coreLibs": [
              "cgl_shadermodifier"
          ],
          "shortName": "UseVertexColor",
          "hasScreenshot": false,
          "namespace": "Ops.Gl.ShaderEffects",
          "shortNameDisplay": "UseVertexColor",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.ShaderEffects.UseVertexColor",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.ShaderEffects.VertexColorAsAlpha",
          "content": "",
          "attachmentFiles": [
              "att_colorarea.frag",
              "att_colorarea_head.frag"
          ],
          "summary": "Use mesh vertexcolor as Alpha/Opacity",
          "id": "3a3a4c1f-3824-4fa2-b287-1368bde0f0a0",
          "layout": {
              "portsIn": [
                  {
                      "type": "1",
                      "name": "Render"
                  },
                  {
                      "type": "0",
                      "name": "Input index",
                      "subType": "integer"
                  },
                  {
                      "type": "5",
                      "name": "Input"
                  },
                  {
                      "type": "0",
                      "name": "Invert",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": "1",
                      "name": "Next"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1603024159409,
          "exampleProjectId": "ChcFXk",
          "coreLibs": [
              "cgl_shadermodifier"
          ],
          "shortName": "VertexColorAsAlpha",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.ShaderEffects",
          "shortNameDisplay": "VertexColorAsAlpha",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.ShaderEffects.VertexColorAsAlpha",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.ShaderEffects.VertexDisplacementMap_v5",
          "content": "",
          "attachmentFiles": [
              "att_vertdisplace_body.vert",
              "att_vertdisplace_head.vert"
          ],
          "summary": "Displace the vertices of a mesh with the pixels brightness values from a texture",
          "id": "e55f21a2-b2cb-445c-bc38-32f8d8e5e2bf",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Render"
                  },
                  {
                      "type": 0,
                      "name": "Extrude",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Mode index",
                      "values": [
                          "Norm",
                          "Tang",
                          "BiTang",
                          "VertCol",
                          "*",
                          "+",
                          "/"
                      ],
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Axis index",
                      "values": [
                          "XYZ",
                          "XY",
                          "X",
                          "Y",
                          "Z"
                      ],
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Coordinates index",
                      "values": [
                          "Tex Coords",
                          "Mesh XY",
                          "Mesh XZ"
                      ],
                      "subType": "integer"
                  },
                  {
                      "type": 2,
                      "name": "Texture",
                      "group": "Input",
                      "objType": "texture"
                  },
                  {
                      "type": 0,
                      "name": "Channel index",
                      "values": [
                          "Luminance",
                          "R",
                          "G",
                          "B",
                          "A",
                          "RGB"
                      ],
                      "group": "Input",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Flip index",
                      "values": [
                          "None",
                          "X",
                          "Y",
                          "XY"
                      ],
                      "group": "Input",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Range index",
                      "values": [
                          "0-1",
                          "1-0",
                          "Normalized"
                      ],
                      "group": "Input",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Offset X",
                      "group": "Input",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Offset Y",
                      "group": "Input",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Scale",
                      "group": "Input",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Calc Normals",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Normal Axis index",
                      "values": [
                          "X",
                          "Y",
                          "Z"
                      ],
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Discard Zero Values",
                      "group": "Colorize",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "colorize",
                      "group": "Colorize",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Colorize Min",
                      "group": "Colorize",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Colorize Max",
                      "group": "Colorize",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "trigger"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [
              "a56wk9Xm9dY"
          ],
          "created": 1728400487378,
          "exampleProjectId": "aSWlLu",
          "coreLibs": [
              "cgl_shadermodifier"
          ],
          "shortName": "VertexDisplacementMap_v5",
          "hasScreenshot": false,
          "namespace": "Ops.Gl.ShaderEffects",
          "shortNameDisplay": "VertexDisplacementMap",
          "version": 5,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.ShaderEffects.VertexDisplacementMap",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Gl.ShaderEffects.VertexDisplacementMap_v2",
                  "versionString": "_v2",
                  "version": 2
              },
              {
                  "name": "Ops.Gl.ShaderEffects.VertexDisplacementMap_v3",
                  "versionString": "_v3",
                  "version": 3
              },
              {
                  "name": "Ops.Gl.ShaderEffects.VertexDisplacementMap_v4",
                  "versionString": "_v4",
                  "version": 4
              },
              {
                  "name": "Ops.Gl.ShaderEffects.VertexDisplacementMap_v5",
                  "versionString": "_v5",
                  "version": 5
              }
          ],
          "allowEdit": false,
          "usedInProject": true
      },
      {
          "name": "Ops.Gl.ShaderEffects.VertexNumberLimit_v2",
          "content": "",
          "attachmentFiles": [],
          "summary": "only draw the first X vertices of a mesh",
          "id": "3c1043bd-e65d-42ea-a154-456f235b197c",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Render"
                  },
                  {
                      "type": 0,
                      "name": "Min",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Max",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Invert",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1610102900337,
          "exampleProjectId": "gLrrJV",
          "coreLibs": [
              "cgl_shadermodifier"
          ],
          "shortName": "VertexNumberLimit_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.ShaderEffects",
          "shortNameDisplay": "VertexNumberLimit",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.ShaderEffects.VertexNumberLimit",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Gl.ShaderEffects.VertexNumberLimit_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.ShaderEffects.VertexPositionFromTexture_v2",
          "content": "",
          "attachmentFiles": [
              "att_vertposbody.vert"
          ],
          "summary": "set vertex positions of a mesh from a texture",
          "id": "30eea555-afda-456e-9c50-9a40b370fa1f",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "render"
                  },
                  {
                      "type": 2,
                      "name": "Texture",
                      "objType": "texture"
                  },
                  {
                      "type": 0,
                      "name": "Mode index",
                      "subType": "integer"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Trigger"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1602105147043,
          "exampleProjectId": "LDfZgL",
          "coreLibs": [
              "cgl_shadermodifier"
          ],
          "shortName": "VertexPositionFromTexture_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.ShaderEffects",
          "shortNameDisplay": "VertexPositionFromTexture",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.ShaderEffects.VertexPositionFromTexture",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Gl.ShaderEffects.VertexPositionFromTexture_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "allowEdit": false,
          "usedInProject": true
      },
      {
          "name": "Ops.Gl.ShaderEffects.VertexWobble_v2",
          "content": "",
          "attachmentFiles": [
              "att_sinewobble.vert"
          ],
          "summary": "sine wave vertex displacement",
          "id": "76983d1c-be6d-453d-b34f-472efe8221e7",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "render"
                  },
                  {
                      "type": 0,
                      "name": "Source index",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "amount",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Time",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Scale",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "axisX",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "axisY",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "axisZ",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Range index",
                      "values": [
                          "-1 to 1",
                          "0 to 1"
                      ],
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Area index",
                      "group": "Area",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Size",
                      "group": "Area",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Falloff",
                      "group": "Area",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "x",
                      "group": "Area",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "y",
                      "group": "Area",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "z",
                      "group": "Area",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "WorldSpace",
                      "group": "Area",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Invert",
                      "group": "Area",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "trigger"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1634817129349,
          "exampleProjectId": "0PxhuO",
          "coreLibs": [
              "cgl_shadermodifier"
          ],
          "shortName": "VertexWobble_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.ShaderEffects",
          "shortNameDisplay": "VertexWobble",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.ShaderEffects.VertexWobble",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Gl.ShaderEffects.VertexWobble_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.ShowNormals_v2",
          "content": "<p>This op is useful for debugging.</p>\n<p>It operates in 3 different modes: Normals, Tangents, Bitangents.</p>\n",
          "attachmentFiles": [
              "att_colorize_normals.frag"
          ],
          "summary": "visualize normals, tangents or bitangents",
          "id": "3d68b4d4-2945-48bf-8fc9-30567946deda",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "render"
                  },
                  {
                      "type": 0,
                      "name": "Draw",
                      "subType": "boolean"
                  },
                  {
                      "type": 2,
                      "name": "geometry",
                      "objType": "geometry"
                  },
                  {
                      "type": 0,
                      "name": "Vectors index",
                      "values": [
                          "Normals",
                          "Tangents",
                          "Bitangents"
                      ],
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Length",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Colorize",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "R",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "G",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "B",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "A",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "trigger"
                  },
                  {
                      "type": 2,
                      "name": "Line Geom",
                      "objType": "geometry"
                  }
              ]
          },
          "authorName": "simod",
          "docs": {
              "ports": [
                  {
                      "name": "render",
                      "text": "trigger input"
                  },
                  {
                      "name": "geometry",
                      "text": "geometry input"
                  },
                  {
                      "name": "Vectors index",
                      "text": "choose either: 0 - normals, 1 - tangents, 2 - bitangents"
                  },
                  {
                      "name": "Length",
                      "text": "length of visualized vectors"
                  },
                  {
                      "name": "Colorize",
                      "text": "activate to render the vectors with color"
                  },
                  {
                      "name": "R",
                      "text": "R color component"
                  },
                  {
                      "name": "G",
                      "text": "G color component"
                  },
                  {
                      "name": "B",
                      "text": "B color component"
                  },
                  {
                      "name": "A",
                      "text": "transparency component"
                  },
                  {
                      "name": "trigger",
                      "text": "trigger output"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1582113072428,
          "exampleProjectId": "4NeG02",
          "shortName": "ShowNormals_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Gl",
          "shortNameDisplay": "ShowNormals",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.ShowNormals",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Gl.ShowNormals_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.SurfaceScatter_v2",
          "content": "<p>Use various distribution methods to place many instances of a geometry along the surface of a mesh.\nThe following distribution modes are available:</p>\n<ul>\n<li>VERTEX - Will only add an instance to a vertex point</li>\n<li>TRIANGLE CENTER - Adds an instance to the center of a triangle</li>\n<li>TRIANGLE SIDE - Adds an instance to the sideof a triangle</li>\n<li>RANDOM TRIANGLE POINT - Adds an instance to a random point inside a triangle</li>\n</ul>\n",
          "attachmentFiles": [],
          "summary": "Scatter an object on the surface of a mesh with different distribution methods",
          "id": "18eb1e62-80fe-41ce-a57b-15653d00925b",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Render"
                  },
                  {
                      "type": 0,
                      "name": "draw",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Num",
                      "subType": "integer"
                  },
                  {
                      "type": 2,
                      "name": "Geom Surface"
                  },
                  {
                      "type": 0,
                      "name": "Distribution index",
                      "group": "Distribution",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Selection index",
                      "group": "Distribution",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Random Seed",
                      "group": "Distribution",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Size min",
                      "group": "Size",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Size max",
                      "group": "Size",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Limit",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Limit Num",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Random Rotate",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  },
                  {
                      "type": 3,
                      "name": "Positions"
                  },
                  {
                      "type": 3,
                      "name": "Scale"
                  },
                  {
                      "type": 3,
                      "name": "Quaternions"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [
              "tQr9hdNqBmQ"
          ],
          "created": 1595574998841,
          "exampleProjectId": "cfUzre",
          "shortName": "SurfaceScatter_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Gl",
          "shortNameDisplay": "SurfaceScatter",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.SurfaceScatter",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Gl.SurfaceScatter_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "allowEdit": false,
          "usedInProject": true
      },
      {
          "name": "Ops.Gl.TextMeshMSDF_v2",
          "content": "<p>Signed distance field based font rendering that must be used with <a href=\"/op/Ops.Gl.FontMSDF_v2\" target=\"_blank\">Ops.Gl.FontMSDF_v2</a></p>\n<p>more information about the tech behind MSDF: <a href=\"https://github.com/Chlumsky/msdfgen\">https://github.com/Chlumsky/msdfgen</a></p>\n",
          "attachmentFiles": [
              "att_textmeshsdf.frag",
              "att_textmeshsdf.vert"
          ],
          "summary": "draw text  using the FontMSDF operator",
          "id": "b5c99363-a749-4040-884b-66f91294bcad",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Render"
                  },
                  {
                      "type": 5,
                      "name": "Text"
                  },
                  {
                      "type": 0,
                      "name": "Scale",
                      "group": "Size",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Letter Spacing",
                      "group": "Size",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Line Height",
                      "group": "Size",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Align index",
                      "values": [
                          "Left",
                          "Center",
                          "Right"
                      ],
                      "group": "Alignment",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Vertical Align index",
                      "values": [
                          "Zero",
                          "Top",
                          "Middle",
                          "Bottom"
                      ],
                      "group": "Alignment",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "r",
                      "group": "Color",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "g",
                      "group": "Color",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "b",
                      "group": "Color",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "a",
                      "group": "Color",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "SDF",
                      "group": "Color",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Smoothing",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Border",
                      "group": "Border",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Border Width",
                      "group": "Border",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Smoothness",
                      "group": "Border",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Border r",
                      "group": "Border",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Border g",
                      "group": "Border",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Border b",
                      "group": "Border",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Shadow",
                      "subType": "boolean"
                  },
                  {
                      "type": 2,
                      "name": "Texture Color",
                      "objType": "texture"
                  },
                  {
                      "type": 2,
                      "name": "Texture Mask",
                      "objType": "texture"
                  },
                  {
                      "type": 3,
                      "name": "Positions",
                      "group": "Character Transformations"
                  },
                  {
                      "type": 3,
                      "name": "Scalings",
                      "group": "Character Transformations"
                  },
                  {
                      "type": 3,
                      "name": "Rotations",
                      "group": "Character Transformations"
                  },
                  {
                      "type": 3,
                      "name": "Colors"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  },
                  {
                      "type": 3,
                      "name": "Positions Original"
                  },
                  {
                      "type": 3,
                      "name": "Scales"
                  },
                  {
                      "type": 0,
                      "name": "Num Lines",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Width",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Height",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Start Y",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Num Chars",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1587309001718,
          "exampleProjectId": "9COr26",
          "shortName": "TextMeshMSDF_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Gl",
          "shortNameDisplay": "TextMeshMSDF",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.TextMeshMSDF",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Gl.TextMeshMSDF_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.TextureArray",
          "content": "",
          "attachmentFiles": [],
          "summary": "create an array of textures",
          "id": "fac012e2-43c8-4e21-85ac-189fe85d5723",
          "layout": {
              "portsIn": [
                  {
                      "type": 2,
                      "name": "Texture 0",
                      "objType": "texture"
                  },
                  {
                      "type": 2,
                      "name": "Texture 1",
                      "objType": "texture"
                  },
                  {
                      "type": 2,
                      "name": "Texture 2",
                      "objType": "texture"
                  },
                  {
                      "type": 2,
                      "name": "Texture 3",
                      "objType": "texture"
                  },
                  {
                      "type": 2,
                      "name": "Texture 4",
                      "objType": "texture"
                  },
                  {
                      "type": 2,
                      "name": "Texture 5",
                      "objType": "texture"
                  },
                  {
                      "type": 2,
                      "name": "Texture 6",
                      "objType": "texture"
                  },
                  {
                      "type": 2,
                      "name": "Texture 7",
                      "objType": "texture"
                  },
                  {
                      "type": 2,
                      "name": "Texture 8",
                      "objType": "texture"
                  },
                  {
                      "type": 2,
                      "name": "Texture 9",
                      "objType": "texture"
                  },
                  {
                      "type": 2,
                      "name": "Texture 10",
                      "objType": "texture"
                  },
                  {
                      "type": 2,
                      "name": "Texture 11",
                      "objType": "texture"
                  },
                  {
                      "type": 2,
                      "name": "Texture 12",
                      "objType": "texture"
                  },
                  {
                      "type": 2,
                      "name": "Texture 13",
                      "objType": "texture"
                  },
                  {
                      "type": 2,
                      "name": "Texture 14",
                      "objType": "texture"
                  }
              ],
              "portsOut": [
                  {
                      "type": 3,
                      "name": "Array"
                  },
                  {
                      "type": 0,
                      "name": "Count",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1519814244088,
          "exampleProjectId": "vS5fjz",
          "coreLibs": [
              "cgl_shadergraph"
          ],
          "shortName": "TextureArray",
          "hasScreenshot": true,
          "namespace": "Ops.Gl",
          "shortNameDisplay": "TextureArray",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.TextureArray",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.TextureArrayLoaderFromArray_v2",
          "content": "",
          "attachmentFiles": [],
          "summary": "load multiple texture from filenames given as an array",
          "id": "f994015c-72ab-42f4-9ef7-a6409a9efb9b",
          "layout": {
              "portsIn": [
                  {
                      "type": 3,
                      "name": "urls"
                  },
                  {
                      "type": 0,
                      "name": "filter index",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "wrap index",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Flip",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "unpackPreMultipliedAlpha",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Caching",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Asset in patch",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 3,
                      "name": "TextureArray"
                  },
                  {
                      "type": 0,
                      "name": "width",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "height",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "loading",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Aspect Ratio",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1677830842446,
          "exampleProjectId": "jFv097",
          "shortName": "TextureArrayLoaderFromArray_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Gl",
          "shortNameDisplay": "TextureArrayLoaderFromArray",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.TextureArrayLoaderFromArray",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Gl.TextureArrayLoaderFromArray_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.TextureArrayLoader_v2",
          "content": "<p>Use url with <code>XXX</code> as wildcard</p>\n<p>for example:</p>\n<p>url: <code>cat_XXX.jpg</code>\nIndex Start: <code>1</code>\nIndex End: <code>5</code></p>\n<p>will try to load: <code>cat_1.jpg</code>, <code>cat_2.jpg</code>, <code>cat_3.jpg</code>, <code>cat_4.jpg</code>, <code>cat_5.jpg</code></p>\n",
          "attachmentFiles": [],
          "summary": "load multiple images into an array",
          "id": "4bbb57ce-3c7b-49c1-84fd-2b6a27ff3afa",
          "layout": {
              "portsIn": [
                  {
                      "type": 5,
                      "name": "Url"
                  },
                  {
                      "type": 0,
                      "name": "Left Pad",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Index Start",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Index End",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "filter index",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "wrap index",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Flip",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "unpackPreMultipliedAlpha",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 3,
                      "name": "TextureArray"
                  },
                  {
                      "type": 0,
                      "name": "Width",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Height",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Loading",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Aspect Ratio",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "url",
                      "text": "The image URL-blueprint, choose the first file using the file chooser, then replace the number with XXX"
                  },
                  {
                      "name": "Left Pad",
                      "text": "Activate when your images have preceding zeros, e.g. `my_image_001.jpg`, … `my_image_056.jpg`"
                  },
                  {
                      "name": "Num Digits",
                      "text": "How many digits the numbers have, e.g. `my_image_0001.jpg` —> `4`, `my_image_01.jpg` —> `2`"
                  },
                  {
                      "name": "Index Start",
                      "text": "The first image number, e.g. `my_image_0005.jpg` —> `5`"
                  },
                  {
                      "name": "Index End",
                      "text": "The last image number, e.g. `my_image_0143.jpg` —> `143`"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1631107270910,
          "exampleProjectId": "OeGdjT",
          "shortName": "TextureArrayLoader_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Gl",
          "shortNameDisplay": "TextureArrayLoader",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.TextureArrayLoader",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Gl.TextureArrayLoader_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.TextureColorPick",
          "content": "",
          "attachmentFiles": [],
          "summary": "get the color of a pixel in a texture",
          "id": "060e740a-2432-4685-a081-5df6ab7418e4",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "update"
                  },
                  {
                      "type": 0,
                      "name": "Coordinates index",
                      "values": [
                          "Pixel",
                          "0-1"
                      ],
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "X",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Y",
                      "subType": "integer"
                  },
                  {
                      "type": 2,
                      "name": "texture",
                      "objType": "texture"
                  },
                  {
                      "type": 0,
                      "name": "Active",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "trigger"
                  },
                  {
                      "type": 0,
                      "name": "Red",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Green",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Blue",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Alpha",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1605275408120,
          "exampleProjectId": "bzVSwn",
          "coreLibs": [
              "cgl_pixelreader"
          ],
          "shortName": "TextureColorPick",
          "hasScreenshot": true,
          "namespace": "Ops.Gl",
          "shortNameDisplay": "TextureColorPick",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.TextureColorPick",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.TextureToArray_v3",
          "content": "<p>This op will take an incoming texture and convert each color pixel value to an Array 4 (RGBA). </p>\n<p>When using 32bit textures your array values will be in the range of 0.0-1.0.\n8bit textures will have values of 0-255.</p>\n<p>Be careful with using high resolution textures. For example a texture of only 100x100 pixel will result in 40,000 values.</p>\n",
          "attachmentFiles": [],
          "summary": "extract colors from a texture",
          "id": "946ca491-3455-495f-ab32-ed7c34830aeb",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "update"
                  },
                  {
                      "type": 2,
                      "name": "texture"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "trigger"
                  },
                  {
                      "type": 3,
                      "name": "Colors"
                  },
                  {
                      "type": 0,
                      "name": "Floating Point",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Num Pixel",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "update",
                      "text": "Trigger the op"
                  },
                  {
                      "name": "texture",
                      "text": "texture in to turn into an array. Beware of high resolutions."
                  },
                  {
                      "name": "trigger",
                      "text": "Trigger out"
                  },
                  {
                      "name": "Colors",
                      "text": "Outputs the RGBA arrays as one large array"
                  },
                  {
                      "name": "Floating Point",
                      "text": "If HDR is enable on Image compose this will be true else false"
                  }
              ]
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [
              "mQN8VtVOltQ"
          ],
          "created": 1725429533811,
          "exampleProjectId": "uZkd3x",
          "coreLibs": [
              "cgl_pixelreader"
          ],
          "shortName": "TextureToArray_v3",
          "hasScreenshot": true,
          "namespace": "Ops.Gl",
          "shortNameDisplay": "TextureToArray",
          "version": 3,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.TextureToArray",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Gl.TextureToArray_v2",
                  "versionString": "_v2",
                  "version": 2
              },
              {
                  "name": "Ops.Gl.TextureToArray_v3",
                  "versionString": "_v3",
                  "version": 3
              }
          ],
          "allowEdit": false,
          "usedInProject": true
      },
      {
          "name": "Ops.Gl.TextureToPointArray3",
          "content": "<p>threshold parameter to remove below a certain luminosity</p>\n",
          "attachmentFiles": [],
          "summary": "generate an array3 of grid positions from a texture",
          "id": "93f03721-4b1e-4dee-aef9-7ef17c9cd6c1",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "update"
                  },
                  {
                      "type": 0,
                      "name": "Center",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Threshold Remove",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Z Multiply",
                      "subType": "number"
                  },
                  {
                      "type": 2,
                      "name": "texture"
                  },
                  {
                      "type": 0,
                      "name": "Width",
                      "group": "Size",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Height",
                      "group": "Size",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "trigger"
                  },
                  {
                      "type": 3,
                      "name": "Points"
                  },
                  {
                      "type": 0,
                      "name": "Total Points",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Min Z",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Max Z",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1602053285517,
          "exampleProjectId": "U8IO1k",
          "shortName": "TextureToPointArray3",
          "hasScreenshot": true,
          "namespace": "Ops.Gl",
          "shortNameDisplay": "TextureToPointArray3",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.TextureToPointArray3",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.TextureToRandomPoints",
          "content": "",
          "attachmentFiles": [],
          "summary": "Create points by sampling texture",
          "id": "ff757f51-fbb0-4728-b158-644094cd160e",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "update"
                  },
                  {
                      "type": 0,
                      "name": "Num Points",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Seed",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Z Position index",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Z Multiply",
                      "subType": "number"
                  },
                  {
                      "type": 2,
                      "name": "texture"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "trigger"
                  },
                  {
                      "type": 3,
                      "name": "Points"
                  },
                  {
                      "type": 0,
                      "name": "NumPoints",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "Seed",
                      "text": "Seed value 0 will continuously randomize point position"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1560683773988,
          "exampleProjectId": "LAoKVJ",
          "shortName": "TextureToRandomPoints",
          "hasScreenshot": true,
          "namespace": "Ops.Gl",
          "shortNameDisplay": "TextureToRandomPoints",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.TextureToRandomPoints",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.Texture_v2",
          "content": "<p>Load an image as a webGL Texture.</p>\n<p>supported formats:</p>\n<ul>\n<li>PNG</li>\n<li>JPG</li>\n<li>JXL</li>\n<li>WEBP</li>\n<li>GIF (not animated)</li>\n</ul>\n",
          "attachmentFiles": [],
          "summary": "Load an image as a texture",
          "id": "790f3702-9833-464e-8e37-6f0f813f7e16",
          "layout": {
              "portsIn": [
                  {
                      "type": 5,
                      "name": "File"
                  },
                  {
                      "type": 0,
                      "name": "Filter index",
                      "values": [
                          "nearest",
                          "linear",
                          "mipmap"
                      ],
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Wrap index",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Anisotropic index",
                      "values": [
                          "0",
                          "1",
                          "2",
                          "4",
                          "8",
                          "16"
                      ],
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Data Format index",
                      "values": [
                          "R",
                          "RG",
                          "RGB",
                          "RGBA",
                          "SRGBA"
                      ],
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Flip",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Active",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Save Memory",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Add Cachebuster",
                      "subType": "boolean"
                  },
                  {
                      "type": 1,
                      "name": "Reload"
                  }
              ],
              "portsOut": [
                  {
                      "type": 2,
                      "name": "Texture",
                      "objType": "texture"
                  },
                  {
                      "type": 0,
                      "name": "Width",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Height",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Aspect Ratio",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Loaded",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Loading",
                      "subType": "boolean"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1581607123708,
          "exampleProjectId": "iRKrD-",
          "shortName": "Texture_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Gl",
          "shortNameDisplay": "Texture",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.Texture",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Gl.Texture_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.Textures.Base64ToTexture",
          "content": "<p>This can be handy if you are receiving an image over an AJAXRequest and want to convert it into a texture. Keep in mind that this is a very slow operation, so be careful with performance.</p>\n<p>Also note that there is an OP doing the opposite called TextureToBase64.</p>\n",
          "attachmentFiles": [],
          "summary": "Converts a base-64 image string into a texture",
          "id": "cd07e587-432a-4a81-a2b7-51273cf32171",
          "layout": {
              "portsIn": [
                  {
                      "type": 5,
                      "name": "Base64 / Data URI"
                  },
                  {
                      "type": 0,
                      "name": "filter index",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "wrap index",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Anisotropic index",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Pre Multiplied Alpha",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 2,
                      "name": "Texture",
                      "objType": "texture"
                  },
                  {
                      "type": 0,
                      "name": "Loading",
                      "subType": "boolean"
                  }
              ]
          },
          "authorName": "b2renger",
          "docs": {
              "ports": [
                  {
                      "name": "Base64 / Data URI",
                      "text": "Place either a Base64 string directly or as a Data URI to be converted"
                  },
                  {
                      "name": "Texture",
                      "text": "Texture conversion of the input string"
                  },
                  {
                      "name": "Loading",
                      "text": "Indicates whether it is still busy with converting the string"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1524902340627,
          "exampleProjectId": "dNuMWr",
          "shortName": "Base64ToTexture",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.Textures",
          "shortNameDisplay": "Base64ToTexture",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.Textures.Base64ToTexture",
                  "versionString": "",
                  "version": 0
              }
          ],
          "namespaceTitle": "Ops.Gl.Textures",
          "namespaceSummary": "WebGl Ops",
          "allowEdit": false,
          "usedInProject": true
      },
      {
          "name": "Ops.Gl.Textures.ColorTexture",
          "content": "",
          "attachmentFiles": [],
          "summary": "Simple texture filled with one color",
          "id": "59b94270-0364-4c0f-a9fc-ba2561696a23",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "r",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "g",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "b",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "a",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 2,
                      "name": "texture_out",
                      "objType": "texture"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1520152882433,
          "exampleProjectId": "QuT1X2",
          "shortName": "ColorTexture",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.Textures",
          "shortNameDisplay": "ColorTexture",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.Textures.ColorTexture",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.Textures.CombineTextures",
          "content": "",
          "attachmentFiles": [
              "att_rgbe2fp.frag"
          ],
          "summary": "combine multiple textures into one by copying colorchannels",
          "id": "5f33dd4a-a553-4f0f-b3b1-66a80cd240a7",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Execute"
                  },
                  {
                      "type": 0,
                      "name": "Filter index",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Wrap index",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Pixel Format index",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Size index",
                      "subType": "integer"
                  },
                  {
                      "type": 2,
                      "name": "R",
                      "group": "Red",
                      "objType": "texture"
                  },
                  {
                      "type": 0,
                      "name": "R Source index",
                      "group": "Red",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "R Value index",
                      "group": "Red",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "R Default",
                      "group": "Red",
                      "subType": "number"
                  },
                  {
                      "type": 2,
                      "name": "G",
                      "group": "Green",
                      "objType": "texture"
                  },
                  {
                      "type": 0,
                      "name": "G Source index",
                      "group": "Green",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "G Value index",
                      "group": "Green",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "G Default",
                      "group": "Green",
                      "subType": "number"
                  },
                  {
                      "type": 2,
                      "name": "B",
                      "group": "Blue",
                      "objType": "texture"
                  },
                  {
                      "type": 0,
                      "name": "B Source index",
                      "group": "Blue",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "B Value index",
                      "group": "Blue",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "B Default",
                      "group": "Blue",
                      "subType": "number"
                  },
                  {
                      "type": 2,
                      "name": "A",
                      "group": "Alpha",
                      "objType": "texture"
                  },
                  {
                      "type": 0,
                      "name": "A Source index",
                      "group": "Alpha",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "A Value index",
                      "group": "Alpha",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "A Default",
                      "group": "Alpha",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  },
                  {
                      "type": 2,
                      "name": "Texture",
                      "objType": "texture"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1643798809254,
          "exampleProjectId": "yZJ2WW",
          "coreLibs": [
              "cgl_copytexture"
          ],
          "shortName": "CombineTextures",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.Textures",
          "shortNameDisplay": "CombineTextures",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.Textures.CombineTextures",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false,
          "usedInProject": true
      },
      {
          "name": "Ops.Gl.Textures.CopyTexture_v3",
          "content": "",
          "attachmentFiles": [
              "att_copytexture.frag"
          ],
          "summary": "copy a texture and optionally resize it",
          "id": "25d77a01-ccfe-4b2e-b3c3-a09a8a018d0c",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "render"
                  },
                  {
                      "type": 2,
                      "name": "Texture",
                      "objType": "texture"
                  },
                  {
                      "type": 2,
                      "name": "Alpha Mask",
                      "objType": "texture"
                  },
                  {
                      "type": 0,
                      "name": "use original size",
                      "group": "Size",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "width",
                      "group": "Size",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "height",
                      "group": "Size",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "filter index",
                      "values": [
                          "nearest",
                          "linear",
                          "mipmap"
                      ],
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Pixel Format index",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Anisotropic index",
                      "values": [
                          "0",
                          "1",
                          "2",
                          "4",
                          "8",
                          "16"
                      ],
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "wrap index",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Invert A",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Flip X",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Flip Y",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "trigger"
                  },
                  {
                      "type": 2,
                      "name": "texture_out",
                      "objType": "texture"
                  },
                  {
                      "type": 0,
                      "name": "Aspect Ratio",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1702997856007,
          "exampleProjectId": "G2_my7",
          "shortName": "CopyTexture_v3",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.Textures",
          "shortNameDisplay": "CopyTexture",
          "version": 3,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.Textures.CopyTexture",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Gl.Textures.CopyTexture_v2",
                  "versionString": "_v2",
                  "version": 2
              },
              {
                  "name": "Ops.Gl.Textures.CopyTexture_v3",
                  "versionString": "_v3",
                  "version": 3
              }
          ],
          "allowEdit": false,
          "usedInProject": true
      },
      {
          "name": "Ops.Gl.Textures.EmptyTexture",
          "content": "",
          "attachmentFiles": [],
          "summary": "A very simple empty transparent texture with an opacity of 0",
          "id": "fc124913-0916-4f5c-83e0-702ddf66420c",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "width",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "height",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 2,
                      "name": "texture",
                      "objType": "texture"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1541052805439,
          "exampleProjectId": "QuT1X2",
          "shortName": "EmptyTexture",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.Textures",
          "shortNameDisplay": "EmptyTexture",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.Textures.EmptyTexture",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.Textures.ExrTexture",
          "content": "",
          "attachmentFiles": [],
          "summary": "load .exr floating point texture files",
          "id": "81a807c3-f814-4815-a43c-5914c223faf4",
          "layout": {
              "portsIn": [
                  {
                      "type": 5,
                      "name": "EXR File"
                  },
                  {
                      "type": 0,
                      "name": "Remove Alpha",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Filter index",
                      "subType": "integer"
                  }
              ],
              "portsOut": [
                  {
                      "type": 2,
                      "name": "Texture",
                      "objType": "texture"
                  },
                  {
                      "type": 0,
                      "name": "Width",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Height",
                      "subType": "number"
                  },
                  {
                      "type": 5,
                      "name": "Channels"
                  },
                  {
                      "type": 0,
                      "name": "Loading",
                      "subType": "boolean"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [
              "fflate.js",
              "exrloader.js"
          ],
          "youtubeids": [],
          "created": 1643638688319,
          "exampleProjectId": "zHxXMW",
          "shortName": "ExrTexture",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.Textures",
          "shortNameDisplay": "ExrTexture",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.Textures.ExrTexture",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false,
          "usedInProject": true
      },
      {
          "name": "Ops.Gl.Textures.GraphTexture",
          "content": "",
          "attachmentFiles": [],
          "summary": "draw a graph of a value into a texture",
          "id": "98d1c79e-71ea-468b-81fc-17da2cd3da89",
          "layout": {
              "portsIn": [
                  {
                      "type": "1",
                      "name": "trigger"
                  },
                  {
                      "type": "0",
                      "name": "value",
                      "subType": "number"
                  },
                  {
                      "type": "0",
                      "name": "index",
                      "subType": "integer"
                  },
                  {
                      "type": "1",
                      "name": "reset"
                  },
                  {
                      "type": "0",
                      "name": "Show Min/Max",
                      "subType": "boolean"
                  },
                  {
                      "type": "0",
                      "name": "Color Random Seed",
                      "subType": "number"
                  },
                  {
                      "type": "0",
                      "name": "Texture Width",
                      "subType": "integer"
                  },
                  {
                      "type": "0",
                      "name": "Texture Height",
                      "subType": "integer"
                  }
              ],
              "portsOut": [
                  {
                      "type": "2",
                      "name": "Texture"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "value",
                      "text": "input value to graph. When using with repeat, use a Number Switch connected to Repeat Op's index to feed multiple numbers"
                  },
                  {
                      "name": "index",
                      "text": "use a Repeat Op index out to add multiple graphs to your texture"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1519837569086,
          "exampleProjectId": "eqfKTx",
          "shortName": "GraphTexture",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.Textures",
          "shortNameDisplay": "GraphTexture",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.Textures.GraphTexture",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false,
          "usedInProject": true
      },
      {
          "name": "Ops.Gl.Textures.Histogram",
          "content": "",
          "attachmentFiles": [
              "att_histogram.frag",
              "att_histogram.vert",
              "att_histogram_wave.frag"
          ],
          "summary": "graphical representation of distribution of color in a texture",
          "id": "966cefee-8349-4ef3-b64e-69afca0395f5",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Trigger"
                  },
                  {
                      "type": 2,
                      "name": "Texture",
                      "objType": "texture"
                  }
              ],
              "portsOut": [
                  {
                      "type": 2,
                      "name": "Histogram Texture",
                      "objType": "texture"
                  },
                  {
                      "type": 2,
                      "name": "Histogram Data",
                      "objType": "texture"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1524902340627,
          "exampleProjectId": "Z315nc",
          "shortName": "Histogram",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.Textures",
          "shortNameDisplay": "Histogram",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.Textures.Histogram",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.Textures.MontageTextures_v2",
          "content": "",
          "attachmentFiles": [
              "att_rgbe2fp.frag"
          ],
          "summary": "combine multiple textures into one by copying colorchannels",
          "id": "32a05a9e-164d-4d1a-b5da-38c6a0e05da7",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Execute"
                  },
                  {
                      "type": 0,
                      "name": "Size index",
                      "values": [
                          "First",
                          "Single",
                          "Manual"
                      ],
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Arrangement index",
                      "values": [
                          "Columns",
                          "Rows",
                          "Grid",
                          "Overlap X",
                          "Overlap Y"
                      ],
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Flip Order",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Width",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Height",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Filter index",
                      "values": [
                          "nearest",
                          "linear",
                          "mipmap"
                      ],
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Wrap index",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Pixel Format index",
                      "subType": "integer"
                  },
                  {
                      "type": 2,
                      "name": "Texture 0",
                      "objType": "texture"
                  },
                  {
                      "type": 2,
                      "name": "Texture 1",
                      "objType": "texture"
                  },
                  {
                      "type": 2,
                      "name": "Texture 2",
                      "objType": "texture"
                  },
                  {
                      "type": 2,
                      "name": "Texture 3",
                      "objType": "texture"
                  },
                  {
                      "type": 2,
                      "name": "Texture 4",
                      "objType": "texture"
                  },
                  {
                      "type": 2,
                      "name": "Texture 5",
                      "objType": "texture"
                  },
                  {
                      "type": 2,
                      "name": "Texture 6",
                      "objType": "texture"
                  },
                  {
                      "type": 2,
                      "name": "Texture 7",
                      "objType": "texture"
                  },
                  {
                      "type": 2,
                      "name": "Texture 8",
                      "objType": "texture"
                  },
                  {
                      "type": 2,
                      "name": "Texture 9",
                      "objType": "texture"
                  },
                  {
                      "type": 2,
                      "name": "Texture 10",
                      "objType": "texture"
                  },
                  {
                      "type": 2,
                      "name": "Texture 11",
                      "objType": "texture"
                  },
                  {
                      "type": 2,
                      "name": "Texture 12",
                      "objType": "texture"
                  },
                  {
                      "type": 2,
                      "name": "Texture 13",
                      "objType": "texture"
                  },
                  {
                      "type": 2,
                      "name": "Texture 14",
                      "objType": "texture"
                  },
                  {
                      "type": 2,
                      "name": "Texture 15",
                      "objType": "texture"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  },
                  {
                      "type": 2,
                      "name": "Texture",
                      "objType": "texture"
                  },
                  {
                      "type": 0,
                      "name": "Columns",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Rows",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1707477783127,
          "exampleProjectId": "pM45O8",
          "coreLibs": [
              "cgl_copytexture"
          ],
          "shortName": "MontageTextures_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.Textures",
          "shortNameDisplay": "MontageTextures",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.Textures.MontageTextures",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Gl.Textures.MontageTextures_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.Textures.NoiseTexture",
          "content": "",
          "attachmentFiles": [],
          "summary": "Simple noisetexture",
          "id": "b781bc6b-b2cf-44fe-80eb-a840e430d27d",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "Width",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Height",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Filter index",
                      "values": [
                          "nearest",
                          "linear"
                      ],
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Wrap index",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Color",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Pixel Format index",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Integer",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Seed",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Channel R",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Min R",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Max R",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Channel G",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Min G",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Max G",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Channel B",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Min B",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Max B",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Channel A",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Min A",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Max A",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 2,
                      "name": "Texture",
                      "objType": "texture"
                  },
                  {
                      "type": 0,
                      "name": "Total Pixel",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1544452851096,
          "exampleProjectId": "Lv4hay",
          "shortName": "NoiseTexture",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.Textures",
          "shortNameDisplay": "NoiseTexture",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.Textures.NoiseTexture",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false,
          "usedInProject": true
      },
      {
          "name": "Ops.Gl.Textures.PaletteTexture",
          "content": "",
          "attachmentFiles": [],
          "summary": "Create a RGB color palette using an array",
          "id": "8117ed3b-a264-4a46-83a4-3cdb3f743d10",
          "layout": {
              "portsIn": [
                  {
                      "type": 3,
                      "name": "Palette array"
                  },
                  {
                      "type": 0,
                      "name": "Smooth",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 3,
                      "name": "Color Array"
                  },
                  {
                      "type": 2,
                      "name": "Texture",
                      "objType": "texture"
                  }
              ]
          },
          "authorName": "andro",
          "docs": {
              "ports": [
                  {
                      "name": "Palette array",
                      "text": "Array in which defines the palette"
                  },
                  {
                      "name": "Smooth",
                      "text": "Apply smoothing between all colors"
                  },
                  {
                      "name": "Color Array",
                      "text": "Color array out"
                  },
                  {
                      "name": "Texture",
                      "text": "Texture out containing the gradient"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1566548329850,
          "exampleProjectId": "tdRoSP",
          "shortName": "PaletteTexture",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.Textures",
          "shortNameDisplay": "PaletteTexture",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.Textures.PaletteTexture",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.Textures.SSAO",
          "content": "",
          "attachmentFiles": [
              "att_ssao.frag"
          ],
          "summary": "screen space ambient occlusion from depth texture",
          "id": "7331692b-1e5a-4b1e-8c6d-4dc006daac0e",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Execute"
                  },
                  {
                      "type": 2,
                      "name": "Depth Texture",
                      "objType": "texture"
                  },
                  {
                      "type": 0,
                      "name": "Radius",
                      "group": "SSAO",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Max Dist",
                      "group": "SSAO",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Begin",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "End",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Strength",
                      "group": "Strength",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Base",
                      "group": "Strength",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Filter index",
                      "subType": "integer"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  },
                  {
                      "type": 2,
                      "name": "SSAO",
                      "objType": "texture"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1673434160072,
          "exampleProjectId": "qt0JiG",
          "coreLibs": [
              "cgl_copytexture"
          ],
          "shortName": "SSAO",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.Textures",
          "shortNameDisplay": "SSAO",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.Textures.SSAO",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.Textures.SwitchTextureMultiPort",
          "content": "",
          "attachmentFiles": [],
          "summary": "Switch between multiple textures",
          "id": "9da21e77-53a4-4a0a-ac5a-24c38c818770",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "Index",
                      "subType": "integer"
                  },
                  {
                      "type": 2,
                      "name": "Textures_0",
                      "group": "Textures"
                  },
                  {
                      "type": 2,
                      "name": "Textures_1",
                      "uititle": "add port",
                      "group": "Textures"
                  }
              ],
              "portsOut": [
                  {
                      "type": 2,
                      "name": "Texture",
                      "objType": "texture"
                  },
                  {
                      "type": 0,
                      "name": "Num Textures",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1716885476679,
          "exampleProjectId": "pDGOrh",
          "shortName": "SwitchTextureMultiPort",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.Textures",
          "shortNameDisplay": "SwitchTextureMultiPort",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.Textures.SwitchTextureMultiPort",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false,
          "usedInProject": true
      },
      {
          "name": "Ops.Gl.Textures.SwitchTextures_v2",
          "content": "<p>Use an integer to switch between different textures</p>\n",
          "attachmentFiles": [],
          "summary": "Switch between different textures ",
          "id": "a82ae429-ac07-4760-882b-595a857c7ae0",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "exec"
                  },
                  {
                      "type": 0,
                      "name": "num",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Default Texture Transparent",
                      "subType": "boolean"
                  },
                  {
                      "type": 2,
                      "name": "texture0",
                      "objType": "texture"
                  },
                  {
                      "type": 2,
                      "name": "texture1",
                      "objType": "texture"
                  },
                  {
                      "type": 2,
                      "name": "texture2",
                      "objType": "texture"
                  },
                  {
                      "type": 2,
                      "name": "texture3",
                      "objType": "texture"
                  },
                  {
                      "type": 2,
                      "name": "texture4",
                      "objType": "texture"
                  },
                  {
                      "type": 2,
                      "name": "texture5",
                      "objType": "texture"
                  },
                  {
                      "type": 2,
                      "name": "texture6",
                      "objType": "texture"
                  },
                  {
                      "type": 2,
                      "name": "texture7",
                      "objType": "texture"
                  },
                  {
                      "type": 2,
                      "name": "texture8",
                      "objType": "texture"
                  },
                  {
                      "type": 2,
                      "name": "texture9",
                      "objType": "texture"
                  },
                  {
                      "type": 2,
                      "name": "texture10",
                      "objType": "texture"
                  },
                  {
                      "type": 2,
                      "name": "texture11",
                      "objType": "texture"
                  },
                  {
                      "type": 2,
                      "name": "texture12",
                      "objType": "texture"
                  },
                  {
                      "type": 2,
                      "name": "texture13",
                      "objType": "texture"
                  },
                  {
                      "type": 2,
                      "name": "texture14",
                      "objType": "texture"
                  },
                  {
                      "type": 2,
                      "name": "texture15",
                      "objType": "texture"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  },
                  {
                      "type": 2,
                      "name": "texture",
                      "objType": "texture"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "exec",
                      "text": "Trigger in"
                  },
                  {
                      "name": "num",
                      "text": "Input port to pick texture from"
                  },
                  {
                      "name": "Default Texture Transparent",
                      "text": "Enable transparency"
                  },
                  {
                      "name": "texture",
                      "text": "Selected texture output"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [
              "TdHgjqOLpnM"
          ],
          "created": 1583492820153,
          "exampleProjectId": "gsXwVJ",
          "shortName": "SwitchTextures_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.Textures",
          "shortNameDisplay": "SwitchTextures",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.Textures.SwitchTextures",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Gl.Textures.SwitchTextures_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.Textures.TextTexture_v6",
          "content": "<p>Render text into a texture.</p>\n<h3>Size parameter</h3>\n<p>AUTO - Texture Size will be calculated from fontsize and the amount of text. You may want to use another op to add linebreaks to the text.</p>\n<p>MANUAL - texture height will be calculated automatically. Line breaks will be added when text overflows the given width in pixels.</p>\n<h3>Padding</h3>\n<p>Padding will add Pixels to the left,right,up and bottom sides of the texture. This will be added on top of the size parameter settings.</p>\n",
          "attachmentFiles": [
              "att_text.frag",
              "att_text.vert"
          ],
          "summary": "Generates a texture of Text using one of the font ops",
          "id": "2c042efa-3604-4717-b8f4-5ad08d6740e5",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Render"
                  },
                  {
                      "type": 5,
                      "name": "text"
                  },
                  {
                      "type": 0,
                      "name": "Draw Mesh",
                      "group": "Rendering",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Scale Mesh",
                      "group": "Rendering",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Size index",
                      "values": [
                          "Auto",
                          "Manual"
                      ],
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Width",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Height",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Auto Height",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Auto Line Breaks",
                      "subType": "boolean"
                  },
                  {
                      "type": 5,
                      "name": "font",
                      "group": "Font"
                  },
                  {
                      "type": 5,
                      "name": "weight",
                      "group": "Font"
                  },
                  {
                      "type": 0,
                      "name": "fontSize",
                      "group": "Font",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "align index",
                      "values": [
                          "left",
                          "center",
                          "right"
                      ],
                      "group": "Font",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Vertical align index",
                      "values": [
                          "Top",
                          "Middle",
                          "Bottom"
                      ],
                      "group": "Font",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Letter Spacing",
                      "group": "Font",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Line Height Add",
                      "group": "Font",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Padding Y Top",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Padding Y Bottom",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Padding X",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "filter index",
                      "values": [
                          "nearest",
                          "linear",
                          "mipmap"
                      ],
                      "group": "Texture",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Wrap index",
                      "group": "Texture",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Anisotropic index",
                      "values": [
                          "0",
                          "1",
                          "2",
                          "4",
                          "8",
                          "16"
                      ],
                      "group": "Texture",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Reuse Texture",
                      "group": "Texture",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Show Debug",
                      "group": "Texture",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Redraw On Font Load",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "r",
                      "group": "Text Color",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "g",
                      "group": "Text Color",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "b",
                      "group": "Text Color",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Opacity",
                      "group": "Text Color",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "background R",
                      "group": "Background",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "background G",
                      "group": "Background",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "background B",
                      "group": "Background",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "background A",
                      "group": "Background",
                      "subType": "number"
                  },
                  {
                      "type": 1,
                      "name": "Force Redraw"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  },
                  {
                      "type": 0,
                      "name": "Ratio",
                      "subType": "number"
                  },
                  {
                      "type": 2,
                      "name": "texture",
                      "objType": "texture"
                  },
                  {
                      "type": 2,
                      "name": "Canvas",
                      "objType": "element"
                  },
                  {
                      "type": 0,
                      "name": "Aspect",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Num Lines",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "Render",
                      "text": "trigger input"
                  },
                  {
                      "name": "Draw Mesh",
                      "text": "check if rectangle with the texture should be drawn"
                  },
                  {
                      "name": "Scale Mesh",
                      "text": "size of the mesh"
                  },
                  {
                      "name": "text",
                      "text": "text to be put in the texture"
                  },
                  {
                      "name": "font",
                      "text": "the font to be used"
                  },
                  {
                      "name": "fontSize",
                      "text": "font size"
                  },
                  {
                      "name": "Reuse Texture",
                      "text": "check if texture should be reused"
                  },
                  {
                      "name": "Show Debug",
                      "text": "show outlines for debugging"
                  },
                  {
                      "name": "r",
                      "text": "r color of text"
                  },
                  {
                      "name": "g",
                      "text": "g color of text"
                  },
                  {
                      "name": "b",
                      "text": "b color of text"
                  },
                  {
                      "name": "Opacity",
                      "text": "alpha value of texture"
                  },
                  {
                      "name": "Next",
                      "text": "trigger output"
                  },
                  {
                      "name": "Ratio",
                      "text": "width / height ratio of texture"
                  },
                  {
                      "name": "texture",
                      "text": "texture output"
                  },
                  {
                      "name": "Aspect",
                      "text": "aspect ratio of texture canvas"
                  },
                  {
                      "name": "Num Lines",
                      "text": "amount of lines in text"
                  }
              ]
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1705328506169,
          "exampleProjectId": "RZsPWU",
          "coreLibs": [
              "cgl_wireframes"
          ],
          "shortName": "TextTexture_v6",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.Textures",
          "shortNameDisplay": "TextTexture",
          "version": 6,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.Textures.TextTexture",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Gl.Textures.TextTexture_v2",
                  "versionString": "_v2",
                  "version": 2
              },
              {
                  "name": "Ops.Gl.Textures.TextTexture_v3",
                  "versionString": "_v3",
                  "version": 3
              },
              {
                  "name": "Ops.Gl.Textures.TextTexture_v4",
                  "versionString": "_v4",
                  "version": 4
              },
              {
                  "name": "Ops.Gl.Textures.TextTexture_v5",
                  "versionString": "_v5",
                  "version": 5
              },
              {
                  "name": "Ops.Gl.Textures.TextTexture_v6",
                  "versionString": "_v6",
                  "version": 6
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.Textures.TextureArrayInfo",
          "content": "",
          "attachmentFiles": [],
          "summary": "Information about Textures in an array",
          "id": "afaa2e73-4f97-4e4a-bf23-c17e1dd1c0ad",
          "layout": {
              "portsIn": [
                  {
                      "type": 3,
                      "name": "Texture Array"
                  }
              ],
              "portsOut": [
                  {
                      "type": 3,
                      "name": "names"
                  },
                  {
                      "type": 3,
                      "name": "Widths"
                  },
                  {
                      "type": 3,
                      "name": "Heights"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1686129047736,
          "exampleProjectId": "vS5fjz",
          "shortName": "TextureArrayInfo",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.Textures",
          "shortNameDisplay": "TextureArrayInfo",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.Textures.TextureArrayInfo",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.Textures.TextureInfo_v2",
          "content": "",
          "attachmentFiles": [],
          "summary": "Outputs information about the connected texture",
          "id": "63d5ac1d-a21b-4449-ab93-1fae5c791cf2",
          "layout": {
              "portsIn": [
                  {
                      "type": 2,
                      "name": "Texture",
                      "objType": "texture"
                  }
              ],
              "portsOut": [
                  {
                      "type": 5,
                      "name": "Name"
                  },
                  {
                      "type": 5,
                      "name": "PixelFormat"
                  },
                  {
                      "type": 0,
                      "name": "Width",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Height",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Ratio",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Filter",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Wrap",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Flipped",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "HDR",
                      "uititle": "Float Texture",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Is Empty Default Texture",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Is Default Texture",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Is Cubemap",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Id",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1720616200691,
          "exampleProjectId": "y0A18i",
          "shortName": "TextureInfo_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.Textures",
          "shortNameDisplay": "TextureInfo",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.Textures.TextureInfo",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Gl.Textures.TextureInfo_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "allowEdit": false,
          "usedInProject": true
      },
      {
          "name": "Ops.Gl.Textures.TextureSVG_v2",
          "content": "",
          "attachmentFiles": [],
          "summary": "Load a SVG image and convert to a texture of pixels",
          "id": "e4f3d8f1-8a49-460a-896c-4d7adcda2494",
          "layout": {
              "portsIn": [
                  {
                      "type": 5,
                      "name": "File"
                  },
                  {
                      "type": 0,
                      "name": "Texture width",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Texture height",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Wrap index",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Filter index",
                      "subType": "integer"
                  }
              ],
              "portsOut": [
                  {
                      "type": 2,
                      "name": "Texture",
                      "objType": "texture"
                  },
                  {
                      "type": 0,
                      "name": "Loaded",
                      "subType": "boolean"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "File",
                      "text": "File to load"
                  },
                  {
                      "name": "Texture width",
                      "text": "Width of the texture"
                  },
                  {
                      "name": "Texture height",
                      "text": "Height of the texture"
                  },
                  {
                      "name": "Wrap index",
                      "text": "Wrap mode for texture - pick with an integer"
                  },
                  {
                      "name": "Wrap",
                      "text": "Current wrap mode"
                  },
                  {
                      "name": "Filter index",
                      "text": "Filter mode for texture - pick with an integer"
                  },
                  {
                      "name": "Filter",
                      "text": "Current filter mode"
                  },
                  {
                      "name": "Texture",
                      "text": "texture out"
                  },
                  {
                      "name": "Loaded",
                      "text": "is true when texture has been created"
                  }
              ]
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1599662335078,
          "exampleProjectId": "oqCKY6",
          "shortName": "TextureSVG_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.Textures",
          "shortNameDisplay": "TextureSVG",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.Textures.TextureSVG",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Gl.Textures.TextureSVG_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.Textures.TextureToBase64_v5",
          "content": "<p>This can be handy if you want to send a texture as an image over an AJAXRequest. Keep in mind that this is a very slow operation, so be careful with performance.</p>\n<p>Also note that there is an OP doing the opposite called Base64ToTexture.</p>\n",
          "attachmentFiles": [],
          "summary": "Converts a texture into a base-64 image string",
          "id": "ed772bc0-ab12-427e-8378-64ea4f7635ed",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Trigger"
                  },
                  {
                      "type": 2,
                      "name": "Texture",
                      "objType": "texture"
                  },
                  {
                      "type": 0,
                      "name": "Format index",
                      "values": [
                          "PNG",
                          "JPEG",
                          "WEBP"
                      ],
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Quality",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Output dataUrl",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "next"
                  },
                  {
                      "type": 0,
                      "name": "Binary Size",
                      "subType": "number"
                  },
                  {
                      "type": 5,
                      "name": "Base64 string"
                  },
                  {
                      "type": 0,
                      "name": "Loading",
                      "subType": "boolean"
                  },
                  {
                      "type": 1,
                      "name": "Finished"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "Trigger",
                      "text": "Trigger to do the conversion, put this behind a TriggerLimiter or TriggerOnce"
                  },
                  {
                      "name": "Texture",
                      "text": "Input texture to be converted"
                  },
                  {
                      "name": "Output dataUrl",
                      "text": "Choose whether to export a string that is only a Base64, or already as a DataUrl"
                  },
                  {
                      "name": "Base64 string",
                      "text": "The string conversion of the texture"
                  },
                  {
                      "name": "Loading",
                      "text": "Gives you the status of the conversion and whether it has finished"
                  }
              ]
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1716364260179,
          "exampleProjectId": "dNuMWr",
          "coreLibs": [
              "cgl_pixelreader"
          ],
          "shortName": "TextureToBase64_v5",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.Textures",
          "shortNameDisplay": "TextureToBase64",
          "version": 5,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.Textures.TextureToBase64",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Gl.Textures.TextureToBase64_v2",
                  "versionString": "_v2",
                  "version": 2
              },
              {
                  "name": "Ops.Gl.Textures.TextureToBase64_v3",
                  "versionString": "_v3",
                  "version": 3
              },
              {
                  "name": "Ops.Gl.Textures.TextureToBase64_v4",
                  "versionString": "_v4",
                  "version": 4
              },
              {
                  "name": "Ops.Gl.Textures.TextureToBase64_v5",
                  "versionString": "_v5",
                  "version": 5
              }
          ],
          "allowEdit": false,
          "usedInProject": true
      },
      {
          "name": "Ops.Gl.Textures.TextureToCoordinateGrid",
          "content": "",
          "attachmentFiles": [
              "att_rgbe2fp.frag"
          ],
          "summary": "convert a texture to a 3d coordinate grid storing coordinates in texture RGB channels",
          "id": "91f30465-4a4c-4447-9b16-072252f0a977",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Execute"
                  },
                  {
                      "type": 2,
                      "name": "RGBE Texture",
                      "uititle": "Texture",
                      "objType": "texture"
                  },
                  {
                      "type": 0,
                      "name": "Aspect",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Threshold",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Repeats",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Repeats Spacing",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  },
                  {
                      "type": 2,
                      "name": "HDR Texture",
                      "objType": "texture"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [
              "PrkdnENo8wQ"
          ],
          "created": 1643797752609,
          "exampleProjectId": "nMBUVW",
          "coreLibs": [
              "cgl_copytexture"
          ],
          "shortName": "TextureToCoordinateGrid",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.Textures",
          "shortNameDisplay": "TextureToCoordinateGrid",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.Textures.TextureToCoordinateGrid",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.Textures.VideoTexture_v3",
          "content": "",
          "attachmentFiles": [],
          "summary": "Play a video file and use it as a texture",
          "id": "9d66516f-d234-4114-b1d3-67b8e60f5dc6",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Update"
                  },
                  {
                      "type": 5,
                      "name": "file"
                  },
                  {
                      "type": 0,
                      "name": "play",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "loop",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Volume",
                      "group": "Audio",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "mute",
                      "group": "Audio",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Update FPS",
                      "group": "Texture",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Filter index",
                      "values": [
                          "nearest",
                          "linear"
                      ],
                      "group": "Texture",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Wrap index",
                      "group": "Texture",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "flip",
                      "group": "Texture",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "speed",
                      "group": "Timing",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "set time",
                      "group": "Timing",
                      "subType": "number"
                  },
                  {
                      "type": 1,
                      "name": "Rewind",
                      "group": "Timing"
                  },
                  {
                      "type": 0,
                      "name": "Preload",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Show Interaction needed Button",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  },
                  {
                      "type": 2,
                      "name": "texture",
                      "objType": "texture"
                  },
                  {
                      "type": 0,
                      "name": "duration",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "progress",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Interaction Needed",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "CurrentTime",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Loading",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Playing",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Can Play Through",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Width",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Height",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Aspect Ratio",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Has Error",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Auto FPS",
                      "subType": "boolean"
                  },
                  {
                      "type": 5,
                      "name": "Error Message"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "file",
                      "text": "File to play"
                  },
                  {
                      "name": "play",
                      "text": "Start playback"
                  },
                  {
                      "name": "loop",
                      "text": "Loop file when it reaches the end"
                  },
                  {
                      "name": "Volume",
                      "text": "Audio volume"
                  },
                  {
                      "name": "mute",
                      "text": "mute audio"
                  },
                  {
                      "name": "flip",
                      "text": "Flip the texture"
                  },
                  {
                      "name": "speed",
                      "text": "Speed of playback"
                  },
                  {
                      "name": "set time",
                      "text": "Set time to trigger playback from"
                  },
                  {
                      "name": "Preload",
                      "text": "Load into memory - useful when loading from a URL"
                  },
                  {
                      "name": "texture",
                      "text": "Texture out"
                  },
                  {
                      "name": "duration",
                      "text": "Duration of loaded media"
                  },
                  {
                      "name": "progress",
                      "text": "Playback progress"
                  },
                  {
                      "name": "Width",
                      "text": "Width of texture"
                  },
                  {
                      "name": "Height",
                      "text": "height of texture"
                  }
              ]
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1669641033925,
          "exampleProjectId": "RQCm0m",
          "coreLibs": [
              "interactionneededbutton"
          ],
          "shortName": "VideoTexture_v3",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.Textures",
          "shortNameDisplay": "VideoTexture",
          "version": 3,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.Textures.VideoTexture",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Gl.Textures.VideoTexture_v2",
                  "versionString": "_v2",
                  "version": 2
              },
              {
                  "name": "Ops.Gl.Textures.VideoTexture_v3",
                  "versionString": "_v3",
                  "version": 3
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.Textures.WebcamTexture_v3",
          "content": "<ul>\n<li>you need https for webcam to work on many browsers</li>\n</ul>\n",
          "attachmentFiles": [
              "att_texcopy.frag"
          ],
          "summary": "Use your webcam camera as a texture",
          "id": "71c0468d-e942-4574-a91d-b3d7271922d0",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Render"
                  },
                  {
                      "type": 0,
                      "name": "Active",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Generate Texture",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Webcam Input index",
                      "group": "Camera",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Requested Width",
                      "group": "Camera",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Requested Height",
                      "group": "Camera",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Flip X",
                      "group": "Texture",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Flip Y",
                      "group": "Texture",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Show HTML Element",
                      "group": "Video Element",
                      "subType": "boolean"
                  },
                  {
                      "type": 5,
                      "name": "CSS",
                      "group": "Video Element"
                  },
                  {
                      "type": 0,
                      "name": "Element Flip X",
                      "group": "Video Element",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Element Flip Y",
                      "group": "Video Element",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  },
                  {
                      "type": 2,
                      "name": "Texture",
                      "objType": "texture"
                  },
                  {
                      "type": 0,
                      "name": "Ratio",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Available",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Size Width",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Size Height",
                      "subType": "number"
                  },
                  {
                      "type": 5,
                      "name": "Error"
                  },
                  {
                      "type": 2,
                      "name": "HTML Element",
                      "objType": "element"
                  },
                  {
                      "type": 3,
                      "name": "Available devices"
                  },
                  {
                      "type": 5,
                      "name": "Active device"
                  },
                  {
                      "type": 1,
                      "name": "Texture updated"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "Render",
                      "text": "update the output texture with the current webcam picture"
                  },
                  {
                      "name": "Generate Texture",
                      "text": "activate / inactivate genration of the output texture"
                  },
                  {
                      "name": "Webcam Input index",
                      "text": "index of webcam to use from available cameras"
                  },
                  {
                      "name": "Requested Width",
                      "text": "request width from webcam"
                  },
                  {
                      "name": "Requested Height",
                      "text": "request height from webcam"
                  },
                  {
                      "name": "Show HTML Element",
                      "text": "display the html video element"
                  },
                  {
                      "name": "CSS",
                      "text": "css styles for the html video element"
                  },
                  {
                      "name": "Texture",
                      "text": "texture output"
                  },
                  {
                      "name": "Ratio",
                      "text": "aspect ratio"
                  },
                  {
                      "name": "Available",
                      "text": "webcam ready"
                  },
                  {
                      "name": "Size Width",
                      "text": "output size"
                  },
                  {
                      "name": "Size Height",
                      "text": "output height"
                  },
                  {
                      "name": "HTML Element",
                      "text": "the video element"
                  },
                  {
                      "name": "Available devices",
                      "text": "array of available devices"
                  },
                  {
                      "name": "Texture updated",
                      "text": "output trigger on updated texture"
                  }
              ]
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1617962508754,
          "exampleProjectId": "iwaEwm",
          "coreLibs": [
              "cgl_copytexture"
          ],
          "shortName": "WebcamTexture_v3",
          "hasScreenshot": true,
          "namespace": "Ops.Gl.Textures",
          "shortNameDisplay": "WebcamTexture",
          "version": 3,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.Textures.WebcamTexture",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Gl.Textures.WebcamTexture_v2",
                  "versionString": "_v2",
                  "version": 2
              },
              {
                  "name": "Ops.Gl.Textures.WebcamTexture_v3",
                  "versionString": "_v3",
                  "version": 3
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.TriggerOnCanvasResize",
          "content": "",
          "attachmentFiles": [],
          "summary": "will trigger when canvas was resized",
          "id": "856de8cf-b8d1-4668-b8ff-80c68bc73ddd",
          "layout": {
              "portsIn": [],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Resized"
                  }
              ]
          },
          "authorName": "pandur",
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1511515392015,
          "exampleProjectId": "",
          "shortName": "TriggerOnCanvasResize",
          "hasScreenshot": false,
          "namespace": "Ops.Gl",
          "shortNameDisplay": "TriggerOnCanvasResize",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.TriggerOnCanvasResize",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.ValidTexture",
          "content": "",
          "attachmentFiles": [],
          "summary": "output current input texture or a default texture",
          "id": "51c24850-aa8b-41e4-936e-68ba718b5e39",
          "layout": {
              "portsIn": [
                  {
                      "type": "2",
                      "name": "Texture"
                  },
                  {
                      "type": "0",
                      "name": "Default index",
                      "subType": "integer"
                  }
              ],
              "portsOut": [
                  {
                      "type": "2",
                      "name": "Result"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1593416037892,
          "exampleProjectId": "",
          "shortName": "ValidTexture",
          "hasScreenshot": false,
          "namespace": "Ops.Gl",
          "shortNameDisplay": "ValidTexture",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.ValidTexture",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Gl.ViewPortSize",
          "content": "",
          "attachmentFiles": [],
          "summary": "Outputs current viewport size",
          "id": "7cb99d8f-d7ef-478e-902b-54e054e387a0",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Exec"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  },
                  {
                      "type": 0,
                      "name": "X",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Y",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Width",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Height",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1559655378208,
          "exampleProjectId": "",
          "shortName": "ViewPortSize",
          "hasScreenshot": false,
          "namespace": "Ops.Gl",
          "shortNameDisplay": "ViewPortSize",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Gl.ViewPortSize",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Graphics.DepthTest",
          "content": "",
          "attachmentFiles": [],
          "summary": "change depth testing method (depthMask,depthWrite,depthFunc)",
          "id": "3996ed5d-8143-4bec-9cfd-c1b193a295af",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Render"
                  },
                  {
                      "type": 0,
                      "name": "Enable depth testing",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Depth Test Method index",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Write to depth buffer",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1518855027067,
          "exampleProjectId": "A9PD8i",
          "shortName": "DepthTest",
          "hasScreenshot": true,
          "namespace": "Ops.Graphics",
          "shortNameDisplay": "DepthTest",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Graphics.DepthTest",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false,
          "namespaceTitle": "Ops.Graphics",
          "namespaceSummary": ""
      },
      {
          "name": "Ops.Graphics.FaceCulling_v2",
          "content": "<p>Reference material : <a href=\"https://learnopengl.com/Advanced-OpenGL/Face-culling\">https://learnopengl.com/Advanced-OpenGL/Face-culling</a></p>\n",
          "attachmentFiles": [],
          "summary": "Disable the rendering of front or back facing triangles with culling",
          "id": "9dfd0ee4-81e1-438c-8a99-4894c64f41cb",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "render"
                  },
                  {
                      "type": 0,
                      "name": "Discard index",
                      "values": [
                          "Back Sides",
                          "Front Sides",
                          "All"
                      ],
                      "group": "Face Fulling",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Active",
                      "group": "Face Fulling",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "trigger"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "render",
                      "text": "Trigger in"
                  },
                  {
                      "name": "Discard",
                      "text": "Mode - Front - Back - All"
                  },
                  {
                      "name": "Active",
                      "text": "Enable or disable the op"
                  },
                  {
                      "name": "trigger",
                      "text": "Trigger out"
                  }
              ]
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1577014342965,
          "exampleProjectId": "mPwnD-",
          "shortName": "FaceCulling_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Graphics",
          "shortNameDisplay": "FaceCulling",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Graphics.FaceCulling",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Graphics.FaceCulling_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Graphics.Geometry.AlignGeometry",
          "content": "<p>Very handy op to change the center and pivot point of a shape or model.\nThere are 4 modes for each axis Xyz</p>\n<p>ignore = do nothing\nmin = pivot from the lowest vertex of the bounding box\nmax = pivot from the largest vertex of the bounding box\ncenter = pivot from the center of the bounding box</p>\n<p>Output normally goes into the RenderGeometry op</p>\n",
          "attachmentFiles": [],
          "summary": "align a geometry / change its pivot / center / origin point",
          "id": "955c1a40-17ca-4944-8cf6-07e14212be2d",
          "layout": {
              "portsIn": [
                  {
                      "type": 2,
                      "name": "Geometry"
                  },
                  {
                      "type": 0,
                      "name": "X index",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Y index",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Z index",
                      "subType": "integer"
                  }
              ],
              "portsOut": [
                  {
                      "type": 2,
                      "name": "Result"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "Geometry",
                      "text": "Geometry in"
                  },
                  {
                      "name": "X",
                      "text": "Pick mode for X axis"
                  },
                  {
                      "name": "Y",
                      "text": "Pick mode for Y axis"
                  },
                  {
                      "name": "Z",
                      "text": "Pick mode for Z axis"
                  },
                  {
                      "name": "Result",
                      "text": "Geometry out "
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1551781134371,
          "exampleProjectId": "FbXQ-G",
          "shortName": "AlignGeometry",
          "hasScreenshot": true,
          "namespace": "Ops.Graphics.Geometry",
          "shortNameDisplay": "AlignGeometry",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Graphics.Geometry.AlignGeometry",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false,
          "namespaceTitle": "Ops.Graphics.Geometry",
          "namespaceSummary": "",
          "usedInProject": true
      },
      {
          "name": "Ops.Graphics.Geometry.BoundingBox",
          "content": "",
          "attachmentFiles": [],
          "summary": "create a simple bounding box from width,height,depth",
          "id": "73dc3511-7c1d-4e42-9e00-f86bc952058a",
          "layout": {
              "portsIn": [
                  {
                      "type": "0",
                      "name": "Width",
                      "subType": "number"
                  },
                  {
                      "type": "0",
                      "name": "Height",
                      "subType": "number"
                  },
                  {
                      "type": "0",
                      "name": "Depth",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": "2",
                      "name": "Result"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1594041625407,
          "exampleProjectId": "",
          "shortName": "BoundingBox",
          "hasScreenshot": false,
          "namespace": "Ops.Graphics.Geometry",
          "shortNameDisplay": "BoundingBox",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Graphics.Geometry.BoundingBox",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false,
          "usedInProject": true
      },
      {
          "name": "Ops.Graphics.Geometry.CalculateNormals",
          "content": "",
          "attachmentFiles": [],
          "summary": "calculate normals of a geometry",
          "id": "c90c70e5-59eb-4b19-9c15-962e3e2f236b",
          "layout": {
              "portsIn": [
                  {
                      "type": 2,
                      "name": "Geometry"
                  },
                  {
                      "type": 0,
                      "name": "Smooth",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Force Z Up",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 2,
                      "name": "Geometry Out"
                  }
              ]
          },
          "authorName": "pandur",
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1512154593972,
          "exampleProjectId": "",
          "shortName": "CalculateNormals",
          "hasScreenshot": false,
          "namespace": "Ops.Graphics.Geometry",
          "shortNameDisplay": "CalculateNormals",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Graphics.Geometry.CalculateNormals",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false,
          "usedInProject": true
      },
      {
          "name": "Ops.Graphics.Geometry.DivideGeometry",
          "content": "",
          "attachmentFiles": [],
          "summary": "disconnect faces/polygons of a mesh ",
          "id": "ab0c768e-e684-47ba-b11f-f95d86532df2",
          "layout": {
              "portsIn": [
                  {
                      "type": "2",
                      "name": "Geometry"
                  }
              ],
              "portsOut": [
                  {
                      "type": "2",
                      "name": "Result"
                  }
              ]
          },
          "authorName": "pandur",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1511815465623,
          "exampleProjectId": "sYIxm1",
          "shortName": "DivideGeometry",
          "hasScreenshot": true,
          "namespace": "Ops.Graphics.Geometry",
          "shortNameDisplay": "DivideGeometry",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Graphics.Geometry.DivideGeometry",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Graphics.Geometry.FlipNormals",
          "content": "",
          "attachmentFiles": [],
          "summary": "flip all normals of a geometry",
          "id": "0055f588-dde6-4232-958b-4c19cdc67abd",
          "layout": {
              "portsIn": [
                  {
                      "type": 2,
                      "name": "Geometry"
                  },
                  {
                      "type": 0,
                      "name": "Flip",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Normalize",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 2,
                      "name": "Result"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1534325913498,
          "exampleProjectId": "cTfoii",
          "shortName": "FlipNormals",
          "hasScreenshot": true,
          "namespace": "Ops.Graphics.Geometry",
          "shortNameDisplay": "FlipNormals",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Graphics.Geometry.FlipNormals",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Graphics.Geometry.FreezeMeshes",
          "content": "<p>this currently does not work with mesh instancers</p>\n",
          "attachmentFiles": [],
          "summary": "capture all following meshes into one geometry",
          "id": "6bcd033d-3a20-477f-93f1-33d0c701528a",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Capture"
                  }
              ],
              "portsOut": [
                  {
                      "type": 2,
                      "name": "Geometry",
                      "objType": "geometry"
                  },
                  {
                      "type": 1,
                      "name": "Next"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1662735215159,
          "exampleProjectId": "BwxY2f",
          "shortName": "FreezeMeshes",
          "hasScreenshot": true,
          "namespace": "Ops.Graphics.Geometry",
          "shortNameDisplay": "FreezeMeshes",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Graphics.Geometry.FreezeMeshes",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Graphics.Geometry.GeometryAttributes",
          "content": "",
          "attachmentFiles": [],
          "summary": "Get vertices of a geometry as array3x (vertex vertices)",
          "id": "b215118b-de1f-4be9-8890-d07a2ecff010",
          "layout": {
              "portsIn": [
                  {
                      "type": 2,
                      "name": "Geometry"
                  }
              ],
              "portsOut": [
                  {
                      "type": 3,
                      "name": "Faces"
                  },
                  {
                      "type": 3,
                      "name": "Vertices"
                  },
                  {
                      "type": 3,
                      "name": "Normals"
                  },
                  {
                      "type": 3,
                      "name": "TexCoords"
                  },
                  {
                      "type": 3,
                      "name": "Vertex Colors"
                  },
                  {
                      "type": 3,
                      "name": "Tangents"
                  },
                  {
                      "type": 3,
                      "name": "BiTangents"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1513068797756,
          "exampleProjectId": "4VpJz6",
          "shortName": "GeometryAttributes",
          "hasScreenshot": true,
          "namespace": "Ops.Graphics.Geometry",
          "shortNameDisplay": "GeometryAttributes",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Graphics.Geometry.GeometryAttributes",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false,
          "usedInProject": true
      },
      {
          "name": "Ops.Graphics.Geometry.GeometryExtrude",
          "content": "",
          "attachmentFiles": [],
          "summary": "basic extrusion of flat geometry",
          "id": "64a34a29-000d-4350-875f-5b72b97a314f",
          "layout": {
              "portsIn": [
                  {
                      "type": 2,
                      "name": "Geometry",
                      "objType": "geometry"
                  },
                  {
                      "type": 0,
                      "name": "Height",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Smooth",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Walls",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Top",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Bottom",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 2,
                      "name": "Result Geometry",
                      "objType": "geometry"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1647367985009,
          "exampleProjectId": "Cp5VS3",
          "shortName": "GeometryExtrude",
          "hasScreenshot": true,
          "namespace": "Ops.Graphics.Geometry",
          "shortNameDisplay": "GeometryExtrude",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Graphics.Geometry.GeometryExtrude",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Graphics.Geometry.GeometryFromArrays",
          "content": "",
          "attachmentFiles": [],
          "summary": "Create a geometry from array data",
          "id": "8eea6cc6-6a71-4991-aca2-aab41f3200ad",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Render"
                  },
                  {
                      "type": 3,
                      "name": "Vertices"
                  },
                  {
                      "type": 3,
                      "name": "Faces"
                  },
                  {
                      "type": 3,
                      "name": "Texture Coords"
                  },
                  {
                      "type": 3,
                      "name": "Normals"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  },
                  {
                      "type": 2,
                      "name": "Geometry"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1677585967111,
          "exampleProjectId": "isWvii",
          "shortName": "GeometryFromArrays",
          "hasScreenshot": true,
          "namespace": "Ops.Graphics.Geometry",
          "shortNameDisplay": "GeometryFromArrays",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Graphics.Geometry.GeometryFromArrays",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Graphics.Geometry.GeometryInfo",
          "content": "",
          "attachmentFiles": [],
          "summary": "information about a geometry",
          "id": "a9208e84-e957-43ac-9a79-9c719eff95eb",
          "layout": {
              "portsIn": [
                  {
                      "type": 2,
                      "name": "Geometry",
                      "objType": "geometry"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "Indexed",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Faces",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Indices",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Vertices",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Normals",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "TexCoords",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Tangents",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "BiTangents",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "VertexColors",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Other Attributes",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1511863096901,
          "exampleProjectId": "",
          "shortName": "GeometryInfo",
          "hasScreenshot": false,
          "namespace": "Ops.Graphics.Geometry",
          "shortNameDisplay": "GeometryInfo",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Graphics.Geometry.GeometryInfo",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Graphics.Geometry.GeometryMerge",
          "content": "",
          "attachmentFiles": [],
          "summary": "merge two geometries to one",
          "id": "f915eaab-92df-495e-84ed-500ec301b6f7",
          "layout": {
              "portsIn": [
                  {
                      "type": "2",
                      "name": "Geometry"
                  },
                  {
                      "type": "2",
                      "name": "Geometry 2"
                  },
                  {
                      "type": "1",
                      "name": "Merge"
                  },
                  {
                      "type": "1",
                      "name": "Reset"
                  }
              ],
              "portsOut": [
                  {
                      "type": "2",
                      "name": "Geometry Result"
                  }
              ]
          },
          "authorName": "pandur",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1514901298206,
          "exampleProjectId": "3rCDz6",
          "shortName": "GeometryMerge",
          "hasScreenshot": true,
          "namespace": "Ops.Graphics.Geometry",
          "shortNameDisplay": "GeometryMerge",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Graphics.Geometry.GeometryMerge",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Graphics.Geometry.GeometryToObj",
          "content": "",
          "attachmentFiles": [],
          "summary": "Generate an .obj file as string from a geometry",
          "id": "3890b676-9ba6-42c1-9a57-659b74958e20",
          "layout": {
              "portsIn": [
                  {
                      "type": 2,
                      "name": "Geometry",
                      "objType": "geometry"
                  }
              ],
              "portsOut": [
                  {
                      "type": 5,
                      "name": "Obj"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1662735362236,
          "exampleProjectId": "BwxY2f",
          "shortName": "GeometryToObj",
          "hasScreenshot": true,
          "namespace": "Ops.Graphics.Geometry",
          "shortNameDisplay": "GeometryToObj",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Graphics.Geometry.GeometryToObj",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Graphics.Geometry.GeometryToWireframeArray3",
          "content": "",
          "attachmentFiles": [],
          "summary": "generate an array of lines from a mesh to render a wireframe",
          "id": "d6d0f3ce-5670-49bb-893a-7c9b0262b991",
          "layout": {
              "portsIn": [
                  {
                      "type": "2",
                      "name": "Geometry"
                  }
              ],
              "portsOut": [
                  {
                      "type": "3",
                      "name": "Array"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1595846817904,
          "exampleProjectId": "r--xve",
          "shortName": "GeometryToWireframeArray3",
          "hasScreenshot": true,
          "namespace": "Ops.Graphics.Geometry",
          "shortNameDisplay": "GeometryToWireframeArray3",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Graphics.Geometry.GeometryToWireframeArray3",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Graphics.Geometry.GeometryUnIndex",
          "content": "",
          "attachmentFiles": [],
          "summary": "convert geometry to only flat triangles without reusing vertices positions",
          "id": "b0b2430c-5206-4d1f-a0a6-bc5d79a29027",
          "layout": {
              "portsIn": [
                  {
                      "type": 2,
                      "name": "Geometry",
                      "objType": "geometry"
                  }
              ],
              "portsOut": [
                  {
                      "type": 2,
                      "name": "Result",
                      "objType": "geometry"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1513069070278,
          "exampleProjectId": "",
          "shortName": "GeometryUnIndex",
          "hasScreenshot": false,
          "namespace": "Ops.Graphics.Geometry",
          "shortNameDisplay": "GeometryUnIndex",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Graphics.Geometry.GeometryUnIndex",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Graphics.Geometry.ObjGeometry",
          "content": "",
          "attachmentFiles": [],
          "summary": "parse an obj string to a geometry object",
          "id": "8cebb27b-2a6e-4580-a543-b36a91f14879",
          "layout": {
              "portsIn": [
                  {
                      "type": 5,
                      "name": "Obj"
                  }
              ],
              "portsOut": [
                  {
                      "type": 2,
                      "name": "Geometry",
                      "objType": "geometry"
                  },
                  {
                      "type": 5,
                      "name": "Status"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1665654212950,
          "exampleProjectId": "JeA8ck",
          "shortName": "ObjGeometry",
          "hasScreenshot": true,
          "namespace": "Ops.Graphics.Geometry",
          "shortNameDisplay": "ObjGeometry",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Graphics.Geometry.ObjGeometry",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Graphics.Geometry.RandomizeTriangles",
          "content": "",
          "attachmentFiles": [],
          "summary": "randomize order of triangles in a geometry",
          "id": "e8a27786-bd11-4818-88a6-74eeb52018bd",
          "layout": {
              "portsIn": [
                  {
                      "type": "2",
                      "name": "Geometry"
                  },
                  {
                      "type": "0",
                      "name": "Seed",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": "2",
                      "name": "Result"
                  }
              ]
          },
          "authorName": "pandur",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1505074673882,
          "exampleProjectId": "gLrrJV",
          "shortName": "RandomizeTriangles",
          "hasScreenshot": true,
          "namespace": "Ops.Graphics.Geometry",
          "shortNameDisplay": "RandomizeTriangles",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Graphics.Geometry.RandomizeTriangles",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Graphics.Geometry.ReverseVertices",
          "content": "",
          "attachmentFiles": [],
          "summary": "Reverses the order of vertices in a geometry, back facing triangles become front facing ones",
          "id": "548079e7-616d-4f7a-98a0-509c9c7bc36d",
          "layout": {
              "portsIn": [
                  {
                      "type": 2,
                      "name": "Geometry"
                  },
                  {
                      "type": 0,
                      "name": "Flip",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 2,
                      "name": "Result"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1647448642143,
          "exampleProjectId": "u9N6v4",
          "shortName": "ReverseVertices",
          "hasScreenshot": true,
          "namespace": "Ops.Graphics.Geometry",
          "shortNameDisplay": "ReverseVertices",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Graphics.Geometry.ReverseVertices",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Graphics.Geometry.ScaleGeometry",
          "content": "",
          "attachmentFiles": [],
          "summary": "uniform scaling of geometry vertices",
          "id": "7730e67b-5916-4481-bcd1-54fa6e3a1d02",
          "layout": {
              "portsIn": [
                  {
                      "type": 2,
                      "name": "Geometry"
                  },
                  {
                      "type": 0,
                      "name": "Scale",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 2,
                      "name": "Result"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1521756312631,
          "exampleProjectId": "",
          "shortName": "ScaleGeometry",
          "hasScreenshot": false,
          "namespace": "Ops.Graphics.Geometry",
          "shortNameDisplay": "ScaleGeometry",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Graphics.Geometry.ScaleGeometry",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Graphics.Geometry.SortGeometryAxis",
          "content": "",
          "attachmentFiles": [],
          "summary": "sort geometry triangles by position ",
          "id": "8b0a635c-83f0-4d95-9b9c-1b5ca55c6724",
          "layout": {
              "portsIn": [
                  {
                      "type": 2,
                      "name": "Geometry"
                  },
                  {
                      "type": 0,
                      "name": "Sort index",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Reverse",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 2,
                      "name": "Result"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1511860038889,
          "exampleProjectId": "",
          "shortName": "SortGeometryAxis",
          "hasScreenshot": false,
          "namespace": "Ops.Graphics.Geometry",
          "shortNameDisplay": "SortGeometryAxis",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Graphics.Geometry.SortGeometryAxis",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Graphics.Geometry.SvgPathToGeometry_v2",
          "content": "",
          "attachmentFiles": [],
          "summary": "Generate a SVG path string of a string using an opentype font",
          "id": "4267b3e7-1285-4a3e-acc8-ea92a72a6bc0",
          "layout": {
              "portsIn": [
                  {
                      "type": 5,
                      "name": "SVG Path"
                  },
                  {
                      "type": 0,
                      "name": "Bezier Stepsize",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Rescale",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 2,
                      "name": "Geometry",
                      "objType": "geometry"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [
              "earcut.js"
          ],
          "youtubeids": [],
          "created": 1656063040878,
          "exampleProjectId": "Cp5VS3",
          "shortName": "SvgPathToGeometry_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Graphics.Geometry",
          "shortNameDisplay": "SvgPathToGeometry",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Graphics.Geometry.SvgPathToGeometry",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Graphics.Geometry.SvgPathToGeometry_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Graphics.Geometry.TesselateGeometry",
          "content": "",
          "attachmentFiles": [],
          "summary": "create new triangles in a mesh (subdivide)",
          "id": "eb3f0bd8-211c-4336-a3ad-fa31c50d705d",
          "layout": {
              "portsIn": [
                  {
                      "type": 2,
                      "name": "Geometry"
                  },
                  {
                      "type": 0,
                      "name": "Iterations",
                      "subType": "integer"
                  }
              ],
              "portsOut": [
                  {
                      "type": 2,
                      "name": "Result"
                  },
                  {
                      "type": 0,
                      "name": "Num Vertices",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1515175859293,
          "exampleProjectId": "gLrrJV",
          "shortName": "TesselateGeometry",
          "hasScreenshot": true,
          "namespace": "Ops.Graphics.Geometry",
          "shortNameDisplay": "TesselateGeometry",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Graphics.Geometry.TesselateGeometry",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false,
          "usedInProject": true
      },
      {
          "name": "Ops.Graphics.Geometry.TransformGeometry",
          "content": "",
          "attachmentFiles": [],
          "summary": "transform vertices of geometry",
          "id": "9678fee2-5436-499c-b94d-2603cdbeb380",
          "layout": {
              "portsIn": [
                  {
                      "type": 2,
                      "name": "Geometry"
                  },
                  {
                      "type": 0,
                      "name": "Translate X",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Translate Y",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Translate Z",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Scale X",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Scale Y",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Scale Z",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Rotation X",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Rotation Y",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Rotation Z",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 2,
                      "name": "Result",
                      "objType": "geometry"
                  }
              ]
          },
          "authorName": "pandur",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1511866169522,
          "exampleProjectId": "aoBFz6",
          "shortName": "TransformGeometry",
          "hasScreenshot": true,
          "namespace": "Ops.Graphics.Geometry",
          "shortNameDisplay": "TransformGeometry",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Graphics.Geometry.TransformGeometry",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Graphics.Geometry.TriangleArrayToGeometry_v2",
          "content": "<p>Array length should be a multiple of <code>9</code>.</p>\n<p>Format for one triangle is:</p>\n<pre><code>x1, y1, z1, x2, y2, z2, x3, y3, z3\n</code></pre>\n",
          "attachmentFiles": [],
          "summary": "Draws multiple triangles using coordinates from an array",
          "id": "ee4d9fa8-996d-44a4-80a0-4f14bbd85502",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Render"
                  },
                  {
                      "type": 3,
                      "name": "Points"
                  },
                  {
                      "type": 3,
                      "name": "Vertex Colors"
                  },
                  {
                      "type": 3,
                      "name": "TexCoords"
                  },
                  {
                      "type": 0,
                      "name": "Flat",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Render Mesh",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  },
                  {
                      "type": 2,
                      "name": "Geometry"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "Render",
                      "text": "Renders the triangles"
                  },
                  {
                      "name": "Points",
                      "text": "The points forming the triangles, one dimensional array"
                  },
                  {
                      "name": "Next",
                      "text": "Triggers the next op"
                  },
                  {
                      "name": "Geometry",
                      "text": "The geometry of the triangles"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1547129778134,
          "exampleProjectId": "0fnxrc",
          "shortName": "TriangleArrayToGeometry_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Graphics.Geometry",
          "shortNameDisplay": "TriangleArrayToGeometry",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Graphics.Geometry.TriangleArrayToGeometry",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Graphics.Geometry.TriangleArrayToGeometry_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Graphics.Geometry.Triangulate2dPath",
          "content": "",
          "attachmentFiles": [],
          "summary": "Triangulate a 2d path to a flat and filled 3d geometry",
          "id": "6165a15f-abf3-4398-87f7-541bedc109e5",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Update"
                  },
                  {
                      "type": 0,
                      "name": "Combine index",
                      "subType": "integer"
                  },
                  {
                      "type": 3,
                      "name": "2d Point Path"
                  },
                  {
                      "type": 3,
                      "name": "Path 2"
                  },
                  {
                      "type": 3,
                      "name": "Path 3"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  },
                  {
                      "type": 2,
                      "name": "Geometry"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [
              "tess2.js"
          ],
          "youtubeids": [],
          "created": 1567930396375,
          "exampleProjectId": "LzTAeT",
          "shortName": "Triangulate2dPath",
          "hasScreenshot": true,
          "namespace": "Ops.Graphics.Geometry",
          "shortNameDisplay": "Triangulate2dPath",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Graphics.Geometry.Triangulate2dPath",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false,
          "usedInProject": true
      },
      {
          "name": "Ops.Graphics.GeometryMergeSimple",
          "content": "",
          "attachmentFiles": [],
          "summary": "merge two geometries into one",
          "id": "e9a6c398-b6f2-4c53-a7ea-47aa835c6938",
          "layout": {
              "portsIn": [
                  {
                      "type": 2,
                      "name": "Geometry"
                  },
                  {
                      "type": 2,
                      "name": "Geometry 2"
                  }
              ],
              "portsOut": [
                  {
                      "type": 2,
                      "name": "Geometry Result"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1665668540752,
          "exampleProjectId": "4gsNve",
          "shortName": "GeometryMergeSimple",
          "hasScreenshot": true,
          "namespace": "Ops.Graphics",
          "shortNameDisplay": "GeometryMergeSimple",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Graphics.GeometryMergeSimple",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Graphics.GetMaterialId",
          "content": "<p>this can be a value in a render2textures target</p>\n",
          "attachmentFiles": [],
          "summary": "get the id/index of the current set material",
          "id": "acbbce81-4f4c-41ae-8095-0936a43d31ee",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Update"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  },
                  {
                      "type": 0,
                      "name": "Material Id",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1675708318812,
          "exampleProjectId": "PYpQit",
          "shortName": "GetMaterialId",
          "hasScreenshot": true,
          "namespace": "Ops.Graphics",
          "shortNameDisplay": "GetMaterialId",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Graphics.GetMaterialId",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Graphics.GetObjectId",
          "content": "<p>this can be a target for a render2texture data texture</p>\n",
          "attachmentFiles": [],
          "summary": "get the id/index of the current object/mesh",
          "id": "e19a04ba-fa78-4156-a9a8-7fa60f66b38c",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Update"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  },
                  {
                      "type": 0,
                      "name": "Material Id",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1681239759058,
          "exampleProjectId": "",
          "shortName": "GetObjectId",
          "hasScreenshot": false,
          "namespace": "Ops.Graphics",
          "shortNameDisplay": "GetObjectId",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Graphics.GetObjectId",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Graphics.Intersection.FilterIntersections",
          "content": "",
          "attachmentFiles": [],
          "summary": "Define filters to get colliding and intersecting bodies",
          "id": "92616156-f68b-4917-b054-b44306cb350b",
          "layout": {
              "portsIn": [
                  {
                      "type": 3,
                      "name": "Collisions"
                  },
                  {
                      "type": 5,
                      "name": "Name 1"
                  },
                  {
                      "type": 0,
                      "name": "Match Name 1 index",
                      "subType": "integer"
                  },
                  {
                      "type": 5,
                      "name": "Name 2"
                  },
                  {
                      "type": 0,
                      "name": "Match Name 2 index",
                      "subType": "integer"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "Colliding",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Num Collisions",
                      "subType": "number"
                  },
                  {
                      "type": 3,
                      "name": "Result Collisions"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": false,
          "libs": [],
          "youtubeids": [
              "lNbfCp0T55c"
          ],
          "created": 1686154804127,
          "exampleProjectId": "",
          "shortName": "FilterIntersections",
          "hasScreenshot": false,
          "namespace": "Ops.Graphics.Intersection",
          "shortNameDisplay": "FilterIntersections",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Graphics.Intersection.FilterIntersections",
                  "versionString": "",
                  "version": 0
              }
          ],
          "namespaceTitle": "Ops.Graphics.Intersection",
          "namespaceSummary": "",
          "allowEdit": false
      },
      {
          "name": "Ops.Graphics.Intersection.IntersectBody",
          "content": "",
          "attachmentFiles": [],
          "summary": "Add Bodies and check if they intersect/collide with each other",
          "id": "b2e39096-8a02-4a50-b2f5-3e68f2c16ad7",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Trigger"
                  },
                  {
                      "type": 0,
                      "name": "Shape index",
                      "values": [
                          "Sphere",
                          "BoxAA",
                          "Point"
                      ],
                      "subType": "integer"
                  },
                  {
                      "type": 5,
                      "name": "Name"
                  },
                  {
                      "type": 0,
                      "name": "Radius",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Size X",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Size Y",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Size Z",
                      "subType": "number"
                  },
                  {
                      "type": 3,
                      "name": "Positions",
                      "group": "Array"
                  },
                  {
                      "type": 0,
                      "name": "Append Index to name",
                      "group": "Array",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [
              "lNbfCp0T55c"
          ],
          "created": 1686149050119,
          "exampleProjectId": "ffRjjz",
          "shortName": "IntersectBody",
          "hasScreenshot": true,
          "namespace": "Ops.Graphics.Intersection",
          "shortNameDisplay": "IntersectBody",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Graphics.Intersection.IntersectBody",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Graphics.Intersection.IntersectTestBody",
          "content": "",
          "attachmentFiles": [],
          "summary": "test one body against all bodies in the world",
          "id": "1f5defea-f055-40dd-8381-831ed1eb2299",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Trigger"
                  },
                  {
                      "type": 5,
                      "name": "Name"
                  },
                  {
                      "type": 0,
                      "name": "Active",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  },
                  {
                      "type": 0,
                      "name": "Has Hit",
                      "subType": "boolean"
                  },
                  {
                      "type": 5,
                      "name": "Hit Body Name"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1715418524298,
          "exampleProjectId": "bg73Qc",
          "shortName": "IntersectTestBody",
          "hasScreenshot": true,
          "namespace": "Ops.Graphics.Intersection",
          "shortNameDisplay": "IntersectTestBody",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Graphics.Intersection.IntersectTestBody",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Graphics.Intersection.IntersectTestPoint",
          "content": "",
          "attachmentFiles": [],
          "summary": "test intersect bodies collision against a point/coordinate",
          "id": "77cd016c-8b26-4d86-85b0-ed7a990ec130",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Trigger"
                  },
                  {
                      "type": 0,
                      "name": "X",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Y",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Z",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Active",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  },
                  {
                      "type": 0,
                      "name": "Has Hit",
                      "subType": "boolean"
                  },
                  {
                      "type": 5,
                      "name": "Hit Body Name"
                  },
                  {
                      "type": 0,
                      "name": "Hit X",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Hit Y",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Hit Z",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1708346079899,
          "exampleProjectId": "c2DAO8",
          "shortName": "IntersectTestPoint",
          "hasScreenshot": true,
          "namespace": "Ops.Graphics.Intersection",
          "shortNameDisplay": "IntersectTestPoint",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Graphics.Intersection.IntersectTestPoint",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Graphics.Intersection.IntersectTestRaycast",
          "content": "",
          "attachmentFiles": [],
          "summary": "Cast a ray and check if it intersect/collide with bodies",
          "id": "dd5d9b39-75c2-40b1-98a4-7a0fdafdb5cb",
          "layout": {
              "portsIn": [
                  {
                      "type": "1",
                      "name": "Trigger"
                  },
                  {
                      "type": "0",
                      "name": "Coordinate Format index",
                      "values": [
                          "-1 to 1",
                          "XYZ-XYZ"
                      ],
                      "subType": "integer"
                  },
                  {
                      "type": "0",
                      "name": "X",
                      "subType": "number"
                  },
                  {
                      "type": "0",
                      "name": "Y",
                      "subType": "number"
                  },
                  {
                      "type": "0",
                      "name": "Z",
                      "subType": "number"
                  },
                  {
                      "type": "0",
                      "name": "To X",
                      "subType": "number"
                  },
                  {
                      "type": "0",
                      "name": "To Y",
                      "subType": "number"
                  },
                  {
                      "type": "0",
                      "name": "To Z",
                      "subType": "number"
                  },
                  {
                      "type": "0",
                      "name": "Active",
                      "subType": "boolean"
                  },
                  {
                      "type": "0",
                      "name": "Change Cursor",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": "1",
                      "name": "Next"
                  },
                  {
                      "type": "0",
                      "name": "Has Hit",
                      "subType": "boolean"
                  },
                  {
                      "type": "5",
                      "name": "Hit Body Name"
                  },
                  {
                      "type": "0",
                      "name": "Hit X",
                      "subType": "number"
                  },
                  {
                      "type": "0",
                      "name": "Hit Y",
                      "subType": "number"
                  },
                  {
                      "type": "0",
                      "name": "Hit Z",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [
              "lNbfCp0T55c"
          ],
          "created": 1686493436213,
          "exampleProjectId": "ffRjjz",
          "shortName": "IntersectTestRaycast",
          "hasScreenshot": true,
          "namespace": "Ops.Graphics.Intersection",
          "shortNameDisplay": "IntersectTestRaycast",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Graphics.Intersection.IntersectTestRaycast",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Graphics.Intersection.IntersectWorld",
          "content": "",
          "attachmentFiles": [],
          "summary": "Define a world to check for intersections and collisions",
          "id": "6ebdec23-6e10-48c9-87cf-43d488e4290f",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Trigger"
                  },
                  {
                      "type": 0,
                      "name": "Check Body Collisions",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  },
                  {
                      "type": 0,
                      "name": "Total Bodies",
                      "subType": "number"
                  },
                  {
                      "type": 3,
                      "name": "Collisions"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [
              "lNbfCp0T55c"
          ],
          "created": 1686149045279,
          "exampleProjectId": "ffRjjz",
          "shortName": "IntersectWorld",
          "hasScreenshot": true,
          "namespace": "Ops.Graphics.Intersection",
          "shortNameDisplay": "IntersectWorld",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Graphics.Intersection.IntersectWorld",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Html.AlignElement",
          "content": "<p>xxx</p>\n",
          "attachmentFiles": [],
          "summary": "Align a HTML element to another, keep positioning",
          "id": "ac562885-ea7b-4dc0-a832-0dda50ce49c1",
          "layout": {
              "portsIn": [
                  {
                      "type": 2,
                      "name": "Element",
                      "objType": "element"
                  },
                  {
                      "type": 2,
                      "name": "Align Element",
                      "objType": "element"
                  },
                  {
                      "type": 0,
                      "name": "Horizontal Align index",
                      "values": [
                          "Left",
                          "Center",
                          "Right"
                      ],
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Vertical Align index",
                      "values": [
                          "Top",
                          "Center",
                          "Bottom"
                      ],
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Horizontal Orientation index",
                      "values": [
                          "Left",
                          "Center",
                          "Right"
                      ],
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Vertical Orientation index",
                      "values": [
                          "Top",
                          "Center",
                          "Bottom"
                      ],
                      "subType": "integer"
                  }
              ],
              "portsOut": [
                  {
                      "type": 2,
                      "name": "Element passthrough"
                  },
                  {
                      "type": 2,
                      "name": "Aligned Element"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1730384737202,
          "exampleProjectId": "jKcTdv",
          "shortName": "AlignElement",
          "hasScreenshot": true,
          "namespace": "Ops.Html",
          "shortNameDisplay": "AlignElement",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Html.AlignElement",
                  "versionString": "",
                  "version": 0
              }
          ],
          "namespaceTitle": "Ops.Html",
          "namespaceSummary": "",
          "allowEdit": false,
          "usedInProject": true
      },
      {
          "name": "Ops.Html.AppendChild_v2",
          "content": "<p>Forms a parent —&gt; child relationship.</p>\n",
          "attachmentFiles": [],
          "summary": "Appends a HTML DOM Element to another",
          "id": "e15cfbc7-d2fa-4348-8964-66d02aec77aa",
          "layout": {
              "portsIn": [
                  {
                      "type": 2,
                      "name": "Parent",
                      "objType": "element"
                  },
                  {
                      "type": 2,
                      "name": "Child",
                      "objType": "element"
                  }
              ],
              "portsOut": [
                  {
                      "type": 2,
                      "name": "Parent Out",
                      "objType": "element"
                  },
                  {
                      "type": 2,
                      "name": "Child Out",
                      "objType": "element"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "Parent",
                      "text": "The parent DOM element"
                  },
                  {
                      "name": "Child",
                      "text": "The child DOM element"
                  },
                  {
                      "name": "Parent Out",
                      "text": "The same element as the input"
                  }
              ]
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1605277835250,
          "exampleProjectId": "PakK8i",
          "shortName": "AppendChild_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Html",
          "shortNameDisplay": "AppendChild",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Html.AppendChild",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Html.AppendChild_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Html.Attributes.ElementAccessibility",
          "content": "",
          "attachmentFiles": [],
          "summary": "Element Accessibility properties for screen reader",
          "id": "9cf8120c-807a-4adc-9007-6830187553d5",
          "layout": {
              "portsIn": [
                  {
                      "type": 2,
                      "name": "Element",
                      "group": "Element"
                  },
                  {
                      "type": 0,
                      "name": "aria hidden",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 2,
                      "name": "HTML Element"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1732781761113,
          "exampleProjectId": "R5XS8x",
          "shortName": "ElementAccessibility",
          "hasScreenshot": true,
          "namespace": "Ops.Html.Attributes",
          "shortNameDisplay": "ElementAccessibility",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Html.Attributes.ElementAccessibility",
                  "versionString": "",
                  "version": 0
              }
          ],
          "namespaceTitle": "Ops.Html.Attributes",
          "namespaceSummary": "",
          "allowEdit": false
      },
      {
          "name": "Ops.Html.Attributes.ElementAttributes",
          "content": "",
          "attachmentFiles": [],
          "summary": "Get all attributes from an element an object",
          "id": "3c70f743-4414-4c72-9ba9-907d3d2dc865",
          "layout": {
              "portsIn": [
                  {
                      "type": 2,
                      "name": "Element"
                  }
              ],
              "portsOut": [
                  {
                      "type": 2,
                      "name": "Attribs"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1733742921199,
          "exampleProjectId": "Gflosw",
          "shortName": "ElementAttributes",
          "hasScreenshot": true,
          "namespace": "Ops.Html.Attributes",
          "shortNameDisplay": "ElementAttributes",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Html.Attributes.ElementAttributes",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Html.Attributes.ElementGetAttribute",
          "content": "",
          "attachmentFiles": [],
          "summary": "Read or Get the value of an HTML element Attribute",
          "id": "609d4cda-d568-44ab-8813-f7e2e51514ea",
          "layout": {
              "portsIn": [
                  {
                      "type": 2,
                      "name": "Element"
                  },
                  {
                      "type": 5,
                      "name": "Attribute Name"
                  }
              ],
              "portsOut": [
                  {
                      "type": 5,
                      "name": "Value"
                  },
                  {
                      "type": 0,
                      "name": "Has Attribute",
                      "subType": "boolean"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1733147862972,
          "exampleProjectId": "lfiS8x",
          "shortName": "ElementGetAttribute",
          "hasScreenshot": true,
          "namespace": "Ops.Html.Attributes",
          "shortNameDisplay": "ElementGetAttribute",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Html.Attributes.ElementGetAttribute",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Html.Attributes.ElementSetAttribute",
          "content": "",
          "attachmentFiles": [],
          "summary": "Write or Set the value of an HTML element Attribute",
          "id": "d5864a5d-bb65-417a-99c1-2a3b340fd9bb",
          "layout": {
              "portsIn": [
                  {
                      "type": 2,
                      "name": "Element",
                      "group": "Element"
                  },
                  {
                      "type": 5,
                      "name": "Attribute",
                      "group": "Attributes"
                  },
                  {
                      "type": 5,
                      "name": "Value",
                      "group": "Attributes"
                  },
                  {
                      "type": 0,
                      "name": "Active",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 2,
                      "name": "HTML Element"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1733147090655,
          "exampleProjectId": "lfiS8x",
          "shortName": "ElementSetAttribute",
          "hasScreenshot": true,
          "namespace": "Ops.Html.Attributes",
          "shortNameDisplay": "ElementSetAttribute",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Html.Attributes.ElementSetAttribute",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Html.BrowserSpecificFile_v2",
          "content": "<p>Browsers support file-types differently. E.g. to create a gapless audio loop, you cannot simply loop an MP3 file, you need to create an M4A-file for Safari, an OGG-file for Firefox and an MP3-file for Chrome (and the other browsers). Otherwise the loop will have a tiny, but noticeable gap.\nThis op let’s you specify filenames specific for each browser. It does not handle loading of files, just the filenames.</p>\n<p>Safari on the desktop supports any media the installed version of QuickTime can play. This includes media encoded using codecs QuickTime does not natively support, provided the codecs are installed on the user’s computer as QuickTime codec components.</p>\n<p>Safari on iOS (including iPad) currently supports uncompressed WAV and AIF audio, MP3 audio, and AAC-LC or HE-AAC audio. HE-AAC is the preferred format.</p>\n<p>Safari on iOS (including iPad) currently supports MPEG-4 video (Baseline profile) and QuickTime movies encoded with H.264 video (Baseline profile) and one of the supported audio types.</p>\n<p>iPad and iPhone 3G and later support H.264 Baseline profile 3.1. Earlier versions of iPhone support H.264 Baseline profile 3.0.</p>\n<p>To see what Safari supports in detail, click here:</p>\n<p><a href=\"https://developer.apple.com/library/archive/documentation/AudioVideo/Conceptual/Using_HTML5_Audio_Video/Device-SpecificConsiderations/Device-SpecificConsiderations.html#//apple_ref/doc/uid/TP40009523-CH5-SW1\">https://developer.apple.com/library/archive/documentation/AudioVideo/Conceptual/Using_HTML5_Audio_Video/Device-SpecificConsiderations/Device-SpecificConsiderations.html#//apple_ref/doc/uid/TP40009523-CH5-SW1</a></p>\n",
          "attachmentFiles": [],
          "summary": "set file dependant on browser",
          "id": "d6432fde-9bc5-4183-a9be-bd87ffcb5392",
          "layout": {
              "portsIn": [
                  {
                      "type": "5",
                      "name": "Chrome File"
                  },
                  {
                      "type": "5",
                      "name": "Firefox File"
                  },
                  {
                      "type": "5",
                      "name": "Safari File"
                  },
                  {
                      "type": "5",
                      "name": "IE <= 11 File"
                  },
                  {
                      "type": "5",
                      "name": "Edge File"
                  },
                  {
                      "type": "5",
                      "name": "Opera File"
                  },
                  {
                      "type": "5",
                      "name": "Default File"
                  }
              ],
              "portsOut": [
                  {
                      "type": "5",
                      "name": "Browser Specific File"
                  },
                  {
                      "type": "5",
                      "name": "Detected Browser"
                  }
              ]
          },
          "authorName": "simod",
          "docs": {
              "ports": [
                  {
                      "name": "Chrome File",
                      "text": "Filename to be used in Googe Chrome"
                  },
                  {
                      "name": "Firefox File",
                      "text": "Filename to be used in Firefox"
                  },
                  {
                      "name": "Safari File",
                      "text": "Filename to be used in Safari"
                  },
                  {
                      "name": "IE <= 11 File",
                      "text": "Filename to be used in Internet Explorer <= 11"
                  },
                  {
                      "name": "Edge File",
                      "text": "Filename to be used in Edge"
                  },
                  {
                      "name": "Opera File",
                      "text": "Filename to be used in Opera"
                  },
                  {
                      "name": "Default File",
                      "text": "Filename to be used if there is no specific file defined for the current browser"
                  },
                  {
                      "name": "Browser Specific File",
                      "text": "The filename specific to the current browser"
                  },
                  {
                      "name": "Detected Browser",
                      "text": "The detected browser"
                  }
              ]
          },
          "hasExample": true,
          "libs": [
              "platform.js"
          ],
          "youtubeids": [],
          "created": 1602764204882,
          "exampleProjectId": "CfJkIk",
          "shortName": "BrowserSpecificFile_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Html",
          "shortNameDisplay": "BrowserSpecificFile",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Html.BrowserSpecificFile",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Html.BrowserSpecificFile_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Html.CSS.BackgroundImage_v2",
          "content": "",
          "attachmentFiles": [],
          "summary": "Load a background image and use css styling",
          "id": "081c4328-984d-4acd-8758-5d1379cc3a30",
          "layout": {
              "portsIn": [
                  {
                      "type": 2,
                      "name": "Element"
                  },
                  {
                      "type": 5,
                      "name": "image file"
                  },
                  {
                      "type": 0,
                      "name": "Size index",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Repeat index",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Position index",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "active",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Never Unset",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 2,
                      "name": "HTML Element"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1581502794546,
          "exampleProjectId": "J3aC0H",
          "shortName": "BackgroundImage_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Html.CSS",
          "shortNameDisplay": "BackgroundImage",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Html.CSS.BackgroundImage",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Html.CSS.BackgroundImage_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "allowEdit": false,
          "namespaceTitle": "Ops.Html.CSS",
          "namespaceSummary": ""
      },
      {
          "name": "Ops.Html.CSS.CSSFilter",
          "content": "",
          "attachmentFiles": [],
          "summary": "set css filter to html element (blur/opacity/contrast)",
          "id": "33befabf-7eef-45f6-869f-30e0e4f44739",
          "layout": {
              "portsIn": [
                  {
                      "type": 2,
                      "name": "Element"
                  },
                  {
                      "type": 0,
                      "name": "method index",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Value",
                      "subType": "number"
                  }
              ],
              "portsOut": []
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1537780664530,
          "exampleProjectId": "xpfcbo",
          "shortName": "CSSFilter",
          "hasScreenshot": true,
          "namespace": "Ops.Html.CSS",
          "shortNameDisplay": "CSSFilter",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Html.CSS.CSSFilter",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false,
          "usedInProject": true
      },
      {
          "name": "Ops.Html.CSS.CSSPropertyString",
          "content": "<p>Example : margin : 10px 5px 10px 5px\nCheck the example patch for a clear example on how to concatenate strings together.</p>\n",
          "attachmentFiles": [],
          "summary": "Modify a css property of an element with a string",
          "id": "a7abdfb9-4c2a-4ddb-8fc6-55b3fdfbdaf3",
          "layout": {
              "portsIn": [
                  {
                      "type": 2,
                      "name": "Element",
                      "group": "Element"
                  },
                  {
                      "type": 5,
                      "name": "Property",
                      "group": "Attributes"
                  },
                  {
                      "type": 5,
                      "name": "Value",
                      "group": "Attributes"
                  },
                  {
                      "type": 0,
                      "name": "Active",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 2,
                      "name": "HTML Element"
                  }
              ]
          },
          "authorName": "andro",
          "docs": {
              "ports": [
                  {
                      "name": "Element",
                      "text": "Parent element to modify"
                  },
                  {
                      "name": "Property",
                      "text": "Property to modify"
                  },
                  {
                      "name": "Value",
                      "text": "String value in "
                  }
              ]
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [
              "qnPFY8qYBUQ"
          ],
          "created": 1594657882461,
          "exampleProjectId": "6leHfe",
          "shortName": "CSSPropertyString",
          "hasScreenshot": true,
          "namespace": "Ops.Html.CSS",
          "shortNameDisplay": "CSSPropertyString",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Html.CSS.CSSPropertyString",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false,
          "usedInProject": true
      },
      {
          "name": "Ops.Html.CSS.CSSProperty_v2",
          "content": "",
          "attachmentFiles": [],
          "summary": "Set css style properties of a html element",
          "id": "c179aa0e-b558-4130-8c2d-2deab2919a07",
          "layout": {
              "portsIn": [
                  {
                      "type": 2,
                      "name": "Element",
                      "group": "Element"
                  },
                  {
                      "type": 5,
                      "name": "Property",
                      "group": "Attributes"
                  },
                  {
                      "type": 0,
                      "name": "Value",
                      "group": "Attributes",
                      "subType": "number"
                  },
                  {
                      "type": 5,
                      "name": "Value Suffix",
                      "group": "Attributes"
                  }
              ],
              "portsOut": [
                  {
                      "type": 2,
                      "name": "HTML Element",
                      "objType": "element"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [
              "qnPFY8qYBUQ"
          ],
          "created": 1582125443369,
          "exampleProjectId": "Y8Nrlo",
          "shortName": "CSSProperty_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Html.CSS",
          "shortNameDisplay": "CSSProperty",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Html.CSS.CSSProperty",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Html.CSS.CSSProperty_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "allowEdit": false,
          "usedInProject": true
      },
      {
          "name": "Ops.Html.CSS.CSS_v3",
          "content": "<h2>CSS Rule Conflicts</h2>\n<p>HTML element created by cables always have a class called &quot;cablesEle&quot;.</p>\n<p>If you have problems with existing styles of cables, use css selectors to define them to use only childs:</p>\n<pre><code>.cablesEle.myDiv \n{\n    background-color:red;\n    border:10px solid blue;\n}\n\n.cablesEle h1\n{\n    color:red;\n}\n</code></pre>\n<h2>Using assets in CSS properties</h2>\n<p>use css variables to use file urls, e.g: <a href=\"/op/Ops.Html.SetCssVariableUrl\" target=\"_blank\">Ops.Html.SetCssVariableUrl</a></p>\n<h2>Nesting</h2>\n<p>in v3 the nesting parameter was introduced. it will use a the CSS feature <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_nesting\">nesting</a> to make sure the styles are only applied to the correct elements.\nthe default value will make sure the styles are only apllied to elements below &quot;.cablesContainer&quot; this way only elements that were created below and by cables are influenced.</p>\n",
          "attachmentFiles": [],
          "summary": "Define a custom stylesheet",
          "id": "aa44a0e9-b9fe-4eed-93a3-38e41a91b623",
          "layout": {
              "portsIn": [
                  {
                      "type": 5,
                      "name": "css code"
                  },
                  {
                      "type": 5,
                      "name": "Nesting Parent"
                  },
                  {
                      "type": 0,
                      "name": "Active",
                      "subType": "boolean"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1717747087681,
          "exampleProjectId": "z_3M4y",
          "shortName": "CSS_v3",
          "hasScreenshot": true,
          "namespace": "Ops.Html.CSS",
          "shortNameDisplay": "CSS",
          "version": 3,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Html.CSS.CSS",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Html.CSS.CSS_v2",
                  "versionString": "_v2",
                  "version": 2
              },
              {
                  "name": "Ops.Html.CSS.CSS_v3",
                  "versionString": "_v3",
                  "version": 3
              }
          ],
          "allowEdit": false,
          "usedInProject": true
      },
      {
          "name": "Ops.Html.CSS.CssFile",
          "content": "",
          "attachmentFiles": [],
          "summary": "load a css asset file",
          "id": "baae1ab2-116c-4c18-ad93-37ced0aafdd6",
          "layout": {
              "portsIn": [
                  {
                      "type": 5,
                      "name": "CSS File"
                  },
                  {
                      "type": 5,
                      "name": "Media"
                  },
                  {
                      "type": 0,
                      "name": "Active",
                      "subType": "boolean"
                  }
              ],
              "portsOut": []
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1712225481948,
          "exampleProjectId": "lc4mY8",
          "shortName": "CssFile",
          "hasScreenshot": true,
          "namespace": "Ops.Html.CSS",
          "shortNameDisplay": "CssFile",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Html.CSS.CssFile",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Html.CSS.ElementCss3DTransform",
          "content": "<p>This 3d transformation is unrelated to the webGL transformation matrix. </p>\n<ul>\n<li>to use the webgl transformation matrix, use <a href=\"/op/Ops.Html.TransformCSS3DElement\" target=\"_blank\">Ops.Html.TransformCSS3DElement</a></li>\n</ul>\n",
          "attachmentFiles": [],
          "summary": "3d Transform a HTML element by using CSS3D properties",
          "id": "ee4f2f09-17df-4d26-bda3-9db51cf78b9d",
          "layout": {
              "portsIn": [
                  {
                      "type": 2,
                      "name": "Element"
                  },
                  {
                      "type": 0,
                      "name": "X",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Y",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Z",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Rot X",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Rot Y",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Rot Z",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Perspective",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Backface-Visibility",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 2,
                      "name": "HTML Element",
                      "objType": "element"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1729951882161,
          "exampleProjectId": "WLpPjs",
          "shortName": "ElementCss3DTransform",
          "hasScreenshot": true,
          "namespace": "Ops.Html.CSS",
          "shortNameDisplay": "ElementCss3DTransform",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Html.CSS.ElementCss3DTransform",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Html.CSS.ElementCssBorder",
          "content": "",
          "attachmentFiles": [],
          "summary": "Set CSS border properties of a HTML element",
          "id": "e1c84aec-667d-426f-8922-99fa8a175bad",
          "layout": {
              "portsIn": [
                  {
                      "type": 2,
                      "name": "Element"
                  },
                  {
                      "type": 0,
                      "name": "Thickness",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Radius",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Color R",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Color G",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Color B",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Color A",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 2,
                      "name": "HTML Element",
                      "objType": "element"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1723567532363,
          "exampleProjectId": "KmnVEm",
          "shortName": "ElementCssBorder",
          "hasScreenshot": true,
          "namespace": "Ops.Html.CSS",
          "shortNameDisplay": "ElementCssBorder",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Html.CSS.ElementCssBorder",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false,
          "usedInProject": true
      },
      {
          "name": "Ops.Html.CSS.ElementCssColor",
          "content": "",
          "attachmentFiles": [],
          "summary": "Set text and background colors of an HTML element",
          "id": "6061a9d6-f914-4790-9336-3b2c2a924845",
          "layout": {
              "portsIn": [
                  {
                      "type": 2,
                      "name": "Element",
                      "objType": "element"
                  },
                  {
                      "type": 0,
                      "name": "Set Color",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Color R",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Color G",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Color B",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Color A",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Set Background",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Background Color R",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Background Color G",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Background Color B",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Background Color A",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 2,
                      "name": "HTML Element",
                      "objType": "element"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1723566813058,
          "exampleProjectId": "KmnVEm",
          "shortName": "ElementCssColor",
          "hasScreenshot": true,
          "namespace": "Ops.Html.CSS",
          "shortNameDisplay": "ElementCssColor",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Html.CSS.ElementCssColor",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false,
          "usedInProject": true
      },
      {
          "name": "Ops.Html.CSS.ElementCssPadding_v2",
          "content": "",
          "attachmentFiles": [],
          "summary": "Set css padding of a html element",
          "id": "82665a37-2666-4b26-9172-7abb055f8ea0",
          "layout": {
              "portsIn": [
                  {
                      "type": 2,
                      "name": "Element",
                      "objType": "element"
                  },
                  {
                      "type": 0,
                      "name": "Padding",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Padding Top",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Padding Bottom",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Padding Left",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Padding Right",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 2,
                      "name": "HTML Element",
                      "objType": "element"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1732634532609,
          "exampleProjectId": "KmnVEm",
          "shortName": "ElementCssPadding_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Html.CSS",
          "shortNameDisplay": "ElementCssPadding",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Html.CSS.ElementCssPadding",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Html.CSS.ElementCssPadding_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "allowEdit": false,
          "usedInProject": true
      },
      {
          "name": "Ops.Html.CSS.ElementCssShadow",
          "content": "",
          "attachmentFiles": [],
          "summary": "Add shadows to html elements",
          "id": "d57433b7-7662-4ae3-8016-e09414705f77",
          "layout": {
              "portsIn": [
                  {
                      "type": 2,
                      "name": "Element"
                  },
                  {
                      "type": 0,
                      "name": "Type index",
                      "values": [
                          "drop filter",
                          "box",
                          "text"
                      ],
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "X",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Y",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Blur",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Color r",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Color g",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Color b",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Color a",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 2,
                      "name": "HTML Element"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1720601721314,
          "exampleProjectId": "jcjuii",
          "shortName": "ElementCssShadow",
          "hasScreenshot": true,
          "namespace": "Ops.Html.CSS",
          "shortNameDisplay": "ElementCssShadow",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Html.CSS.ElementCssShadow",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Html.CSS.ElementCssSize",
          "content": "<p>Size can be given in pixels or percent.\nWhen choosing a fixed aspect ration, only width needs to be specified</p>\n",
          "attachmentFiles": [],
          "summary": "Set the size of an element",
          "id": "c53a770c-cf02-41be-a7a6-ff7be8016055",
          "layout": {
              "portsIn": [
                  {
                      "type": 2,
                      "name": "Element"
                  },
                  {
                      "type": 0,
                      "name": "Method index",
                      "values": [
                          "Absolute",
                          "Aspect Ratio"
                      ],
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Width",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Height",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Aspect",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Unit index",
                      "values": [
                          "px",
                          "%"
                      ],
                      "subType": "integer"
                  }
              ],
              "portsOut": [
                  {
                      "type": 2,
                      "name": "HTML Element",
                      "objType": "element"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1733843476895,
          "exampleProjectId": "wekU8x",
          "shortName": "ElementCssSize",
          "hasScreenshot": true,
          "namespace": "Ops.Html.CSS",
          "shortNameDisplay": "ElementCssSize",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Html.CSS.ElementCssSize",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Html.CSS.ElementCssText",
          "content": "",
          "attachmentFiles": [],
          "summary": "Set font and text properties of a html element",
          "id": "8413b842-6b92-487e-b74b-da3c0259bd08",
          "layout": {
              "portsIn": [
                  {
                      "type": 2,
                      "name": "Element",
                      "objType": "element"
                  },
                  {
                      "type": 5,
                      "name": "Font Family"
                  },
                  {
                      "type": 0,
                      "name": "Text Size",
                      "subType": "number"
                  },
                  {
                      "type": 5,
                      "name": "Font Weight"
                  },
                  {
                      "type": 0,
                      "name": "Text Align index",
                      "values": [
                          "Left",
                          "Center",
                          "Right",
                          "Justify"
                      ],
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Overflow Ellipsis",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Letter Spacing",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Line Height",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 2,
                      "name": "HTML Element",
                      "objType": "element"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1723570981057,
          "exampleProjectId": "KmnVEm",
          "shortName": "ElementCssText",
          "hasScreenshot": true,
          "namespace": "Ops.Html.CSS",
          "shortNameDisplay": "ElementCssText",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Html.CSS.ElementCssText",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false,
          "usedInProject": true
      },
      {
          "name": "Ops.Html.CSS.ElementCssTransform_v2",
          "content": "",
          "attachmentFiles": [],
          "summary": "translate,scale and rotate a HTML element using css transform",
          "id": "11381bfe-38b0-4051-aef9-69d83c292f0d",
          "layout": {
              "portsIn": [
                  {
                      "type": 2,
                      "name": "Element",
                      "group": "Element",
                      "objType": "element"
                  },
                  {
                      "type": 0,
                      "name": "Translate Active",
                      "group": "Translation",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Translate X",
                      "group": "Translation",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Translate Y",
                      "group": "Translation",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Unit index",
                      "values": [
                          "px",
                          "%"
                      ],
                      "group": "Translation",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Scale Active",
                      "group": "Scaling",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Scale",
                      "group": "Scaling",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Rotate Active",
                      "group": "Rotation",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Rot Z",
                      "group": "Rotation",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Set Origin",
                      "group": "Origin",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Origin X index",
                      "values": [
                          "left",
                          "center",
                          "right"
                      ],
                      "group": "Origin",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Origin Y index",
                      "values": [
                          "top",
                          "center",
                          "bottom"
                      ],
                      "group": "Origin",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Z Index Active",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Z Index",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 2,
                      "name": "Passthrough",
                      "objType": "element"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1729176595822,
          "exampleProjectId": "UyQDCu",
          "shortName": "ElementCssTransform_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Html.CSS",
          "shortNameDisplay": "ElementCssTransform",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Html.CSS.ElementCssTransform",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Html.CSS.ElementCssTransform_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "allowEdit": false,
          "usedInProject": true
      },
      {
          "name": "Ops.Html.CSS.GetCssVariable",
          "content": "",
          "attachmentFiles": [],
          "summary": "gets current value of CSS Variable",
          "id": "ef03f407-e365-47c7-9829-be54ba53c54d",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Update"
                  },
                  {
                      "type": 5,
                      "name": "Var Name"
                  }
              ],
              "portsOut": [
                  {
                      "type": 5,
                      "name": "Result"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1543860974763,
          "exampleProjectId": "Zqkkt7",
          "shortName": "GetCssVariable",
          "hasScreenshot": true,
          "namespace": "Ops.Html.CSS",
          "shortNameDisplay": "GetCssVariable",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Html.CSS.GetCssVariable",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false,
          "usedInProject": true
      },
      {
          "name": "Ops.Html.CSS.SetCssVariableColor",
          "content": "<p>&quot;CSS variables are entities defined by CSS authors that contain specific values to be reused throughout a document. &quot;</p>\n<p>from: <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_variables\">https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_variables</a></p>\n",
          "attachmentFiles": [],
          "summary": "set color value of a CSS variable",
          "id": "3a478c83-1dcd-4d06-baa9-96d02ebf941f",
          "layout": {
              "portsIn": [
                  {
                      "type": 5,
                      "name": "Var Name"
                  },
                  {
                      "type": 0,
                      "name": "r",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "g",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "b",
                      "subType": "number"
                  }
              ],
              "portsOut": []
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1543860176781,
          "exampleProjectId": "lzT-cu",
          "shortName": "SetCssVariableColor",
          "hasScreenshot": true,
          "namespace": "Ops.Html.CSS",
          "shortNameDisplay": "SetCssVariableColor",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Html.CSS.SetCssVariableColor",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false,
          "usedInProject": true
      },
      {
          "name": "Ops.Html.CSS.SetCssVariableString",
          "content": "",
          "attachmentFiles": [],
          "summary": "set CSS variable string value",
          "id": "e7b4ea20-ef7e-461d-92f8-6aff58c5ba6f",
          "layout": {
              "portsIn": [
                  {
                      "type": 5,
                      "name": "Var Name"
                  },
                  {
                      "type": 5,
                      "name": "Value"
                  },
                  {
                      "type": 0,
                      "name": "Output quoted string",
                      "subType": "boolean"
                  }
              ],
              "portsOut": []
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1543859675351,
          "exampleProjectId": "F7s1du",
          "shortName": "SetCssVariableString",
          "hasScreenshot": true,
          "namespace": "Ops.Html.CSS",
          "shortNameDisplay": "SetCssVariableString",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Html.CSS.SetCssVariableString",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false,
          "usedInProject": true
      },
      {
          "name": "Ops.Html.CSS.SetCssVariableUrl",
          "content": "<p>will set a variable to an url string, e.g: <code>url(/assets/xyz/test.png)</code></p>\n<p>so you can use it in your css like <code>background-image:var(--varName)</code></p>\n",
          "attachmentFiles": [],
          "summary": "Set CSS variable URL value",
          "id": "1f5d5618-7364-4cd1-bec2-9549b7cfd18e",
          "layout": {
              "portsIn": [
                  {
                      "type": 5,
                      "name": "Var Name"
                  },
                  {
                      "type": 5,
                      "name": "Value"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1727104995274,
          "exampleProjectId": "xIpuvs",
          "shortName": "SetCssVariableUrl",
          "hasScreenshot": true,
          "namespace": "Ops.Html.CSS",
          "shortNameDisplay": "SetCssVariableUrl",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Html.CSS.SetCssVariableUrl",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Html.CSS.ToggleClass",
          "content": "",
          "attachmentFiles": [],
          "summary": "add or remove css class to/from a HTML element",
          "id": "6dd90fb9-7f28-427f-acd8-589f21a906bb",
          "layout": {
              "portsIn": [
                  {
                      "type": 2,
                      "name": "HTML Element"
                  },
                  {
                      "type": 5,
                      "name": "Classname"
                  },
                  {
                      "type": 0,
                      "name": "Active",
                      "subType": "boolean"
                  }
              ],
              "portsOut": []
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1556285686229,
          "exampleProjectId": "y-ZC0H",
          "shortName": "ToggleClass",
          "hasScreenshot": true,
          "namespace": "Ops.Html.CSS",
          "shortNameDisplay": "ToggleClass",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Html.CSS.ToggleClass",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false,
          "usedInProject": true
      },
      {
          "name": "Ops.Html.CSS.TransformCSS3DElement",
          "content": "<p>converts the current transformation to css3d transforms</p>\n<p>this lets you place HTML elements in 3d space.</p>\n<p>webgl content can not overlap this html elements, they are always on top</p>\n<p>also look at: <a href=\"/op/Ops.Html.TransformElement\" target=\"_blank\">Ops.Html.TransformElement</a></p>\n",
          "attachmentFiles": [],
          "summary": "Transform an Element in 3d space using CSS3D  ",
          "id": "7b81ed97-6fb9-4044-a731-962a2a11db27",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "trigger"
                  },
                  {
                      "type": 2,
                      "name": "DOMElement"
                  },
                  {
                      "type": 0,
                      "name": "origin index",
                      "subType": "integer"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "next"
                  }
              ]
          },
          "authorName": "_LJ_",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1534245119396,
          "exampleProjectId": "jC_6-u",
          "shortName": "TransformCSS3DElement",
          "hasScreenshot": true,
          "namespace": "Ops.Html.CSS",
          "shortNameDisplay": "TransformCSS3DElement",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Html.CSS.TransformCSS3DElement",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Html.CSS.TransformElement",
          "content": "<p>set html element left/top CSS attributes.</p>\n<p>also look at: <a href=\"/op/Ops.Html.TransformCSS3DElement\" target=\"_blank\">Ops.Html.TransformCSS3DElement</a></p>\n",
          "attachmentFiles": [],
          "summary": "Move html element to current transformation in screen space",
          "id": "caca0307-d460-47df-8674-b7d2601239ab",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Exec"
                  },
                  {
                      "type": 2,
                      "name": "Element"
                  },
                  {
                      "type": 0,
                      "name": "Scale",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Orthogonal",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Rotate",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Hide out of view",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Align Vertical index",
                      "values": [
                          "Left",
                          "Center",
                          "Right"
                      ],
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Align Horizontal index",
                      "values": [
                          "Top",
                          "Center",
                          "Bottom"
                      ],
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Active",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  },
                  {
                      "type": 2,
                      "name": "HTML Element",
                      "objType": "element"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [
              "E-IZCKf_0c0"
          ],
          "created": 1536133065934,
          "exampleProjectId": "P4Itro",
          "shortName": "TransformElement",
          "hasScreenshot": true,
          "namespace": "Ops.Html.CSS",
          "shortNameDisplay": "TransformElement",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Html.CSS.TransformElement",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false,
          "usedInProject": true
      },
      {
          "name": "Ops.Html.CompareImages_v2",
          "content": "",
          "attachmentFiles": [],
          "summary": "compares two images and shows the difference as a pink color",
          "id": "dea4e0a3-75e2-4470-9883-2d2e13918515",
          "layout": {
              "portsIn": [
                  {
                      "type": 5,
                      "name": "Image 1"
                  },
                  {
                      "type": 5,
                      "name": "Image 2"
                  },
                  {
                      "type": 1,
                      "name": "Start"
                  }
              ],
              "portsOut": [
                  {
                      "type": 5,
                      "name": "Difference Image"
                  },
                  {
                      "type": 0,
                      "name": "Mismatch Percentage",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Same Dimensions",
                      "subType": "boolean"
                  },
                  {
                      "type": 2,
                      "name": "Resemble Data"
                  },
                  {
                      "type": 1,
                      "name": "Finished"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [
              "resemble.js"
          ],
          "youtubeids": [],
          "created": 1716307154631,
          "exampleProjectId": "1xkRN8",
          "shortName": "CompareImages_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Html",
          "shortNameDisplay": "CompareImages",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Html.CompareImages",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Html.CompareImages_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Html.Cursor_v2",
          "content": "",
          "attachmentFiles": [],
          "summary": "Set the mouse cursor",
          "id": "39486799-bdad-42d3-a300-4642c23578a8",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Update"
                  },
                  {
                      "type": 0,
                      "name": "CSS Cursors index",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Set Parent Element",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1602571699195,
          "exampleProjectId": "_f5W8s",
          "shortName": "Cursor_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Html",
          "shortNameDisplay": "Cursor",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Html.Cursor",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Html.Cursor_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Html.ElementChildsMultiPort",
          "content": "<p>will replace appendChild and elementChilds ops</p>\n",
          "attachmentFiles": [],
          "summary": "add child elements to another HTML Element",
          "id": "d1929eb8-8839-4d4b-ba3d-7d53a4c17813",
          "layout": {
              "portsIn": [
                  {
                      "type": 2,
                      "name": "Parent",
                      "objType": "element"
                  },
                  {
                      "type": 2,
                      "name": "Childs_0",
                      "group": "Childs"
                  },
                  {
                      "type": 2,
                      "name": "Childs_1",
                      "uititle": "add port",
                      "group": "Childs"
                  }
              ],
              "portsOut": [
                  {
                      "type": 2,
                      "name": "Parent Out",
                      "objType": "element"
                  },
                  {
                      "type": 0,
                      "name": "Num Values",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1720508423655,
          "exampleProjectId": "zC9iWh",
          "shortName": "ElementChildsMultiPort",
          "hasScreenshot": true,
          "namespace": "Ops.Html",
          "shortNameDisplay": "ElementChildsMultiPort",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Html.ElementChildsMultiPort",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Html.ElementChilds_v2",
          "content": "",
          "attachmentFiles": [],
          "summary": "Set childs of a HTML Element",
          "id": "ad7eea9a-f4af-4ab7-bb70-922242529681",
          "layout": {
              "portsIn": [
                  {
                      "type": 2,
                      "name": "Parent",
                      "objType": "element"
                  },
                  {
                      "type": 2,
                      "name": "Child 1",
                      "objType": "element"
                  },
                  {
                      "type": 2,
                      "name": "Child 2",
                      "objType": "element"
                  },
                  {
                      "type": 2,
                      "name": "Child 3",
                      "objType": "element"
                  },
                  {
                      "type": 2,
                      "name": "Child 4",
                      "objType": "element"
                  },
                  {
                      "type": 2,
                      "name": "Child 5",
                      "objType": "element"
                  },
                  {
                      "type": 2,
                      "name": "Child 6",
                      "objType": "element"
                  },
                  {
                      "type": 2,
                      "name": "Child 7",
                      "objType": "element"
                  },
                  {
                      "type": 2,
                      "name": "Child 8",
                      "objType": "element"
                  },
                  {
                      "type": 2,
                      "name": "Child 9",
                      "objType": "element"
                  },
                  {
                      "type": 2,
                      "name": "Child 10",
                      "objType": "element"
                  }
              ],
              "portsOut": [
                  {
                      "type": 2,
                      "name": "Parent Out",
                      "objType": "element"
                  }
              ]
          },
          "authorName": "stephan",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1648049930133,
          "exampleProjectId": "S4VD0H",
          "shortName": "ElementChilds_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Html",
          "shortNameDisplay": "ElementChilds",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Html.ElementChilds",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Html.ElementChilds_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Html.ElementClientRect",
          "content": "<p>see:\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect\">https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect</a></p>\n",
          "attachmentFiles": [],
          "summary": "get html element absolute position and size in pixels on screen",
          "id": "7a046f98-2adc-4f8e-ad47-c600e3ef5bca",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Update"
                  },
                  {
                      "type": 2,
                      "name": "Element",
                      "objType": "element"
                  },
                  {
                      "type": 0,
                      "name": "Pixel Units index",
                      "values": [
                          "CSS Pixels",
                          "Display Pixels"
                      ],
                      "subType": "integer"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "X",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Y",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Width",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Height",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1612194849967,
          "exampleProjectId": "1Z8oLu",
          "shortName": "ElementClientRect",
          "hasScreenshot": true,
          "namespace": "Ops.Html",
          "shortNameDisplay": "ElementClientRect",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Html.ElementClientRect",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Html.ElementCssString",
          "content": "",
          "attachmentFiles": [],
          "summary": "Output css attributes of an element as a string",
          "id": "5f446f36-de03-454e-bce6-42eb878baa8b",
          "layout": {
              "portsIn": [
                  {
                      "type": 2,
                      "name": "Element",
                      "objType": "element"
                  }
              ],
              "portsOut": [
                  {
                      "type": 5,
                      "name": "CSS"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1723568596361,
          "exampleProjectId": "KmnVEm",
          "shortName": "ElementCssString",
          "hasScreenshot": true,
          "namespace": "Ops.Html",
          "shortNameDisplay": "ElementCssString",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Html.ElementCssString",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Html.ElementFadeInOut",
          "content": "",
          "attachmentFiles": [
              "att_fadeInOut.css"
          ],
          "summary": "fade html elements in or out",
          "id": "392e65eb-4ebe-4adb-8711-e4cfe059c6c9",
          "layout": {
              "portsIn": [
                  {
                      "type": 2,
                      "name": "HTML Element"
                  },
                  {
                      "type": 0,
                      "name": "Visible",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Duration",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Opacity",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 2,
                      "name": "PassThrough",
                      "objType": "element"
                  },
                  {
                      "type": 0,
                      "name": "Is Showing",
                      "subType": "boolean"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1520435372077,
          "exampleProjectId": "Whj018",
          "shortName": "ElementFadeInOut",
          "hasScreenshot": true,
          "namespace": "Ops.Html",
          "shortNameDisplay": "ElementFadeInOut",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Html.ElementFadeInOut",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Html.ElementInteraction",
          "content": "",
          "attachmentFiles": [],
          "summary": "Html element interaction events",
          "id": "bc2903a0-ee7f-4918-b1d8-ea3a6262e3ee",
          "layout": {
              "portsIn": [
                  {
                      "type": 2,
                      "name": "Element"
                  },
                  {
                      "type": 0,
                      "name": "Active",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "Mouse Is Down Left",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Mouse Is Down Right",
                      "subType": "boolean"
                  },
                  {
                      "type": 1,
                      "name": "Mouse Down Left"
                  },
                  {
                      "type": 1,
                      "name": "Mouse Down Right"
                  },
                  {
                      "type": 1,
                      "name": "Mouse Up Left"
                  },
                  {
                      "type": 1,
                      "name": "Mouse Up Right"
                  },
                  {
                      "type": 0,
                      "name": "Mouse Over",
                      "subType": "boolean"
                  },
                  {
                      "type": 1,
                      "name": "Mouse Enter"
                  },
                  {
                      "type": 1,
                      "name": "Mouse Leave"
                  },
                  {
                      "type": 0,
                      "name": "Offset X",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Offset Y",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1605626752465,
          "exampleProjectId": "W0WpUr",
          "shortName": "ElementInteraction",
          "hasScreenshot": true,
          "namespace": "Ops.Html",
          "shortNameDisplay": "ElementInteraction",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Html.ElementInteraction",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Html.Elements.AudioMediaElement",
          "content": "",
          "attachmentFiles": [],
          "summary": "Simple Audio Player, using HTML5 Audio, does not need WebAudio",
          "id": "82c14cd9-e2e7-4944-a04e-cca1bf3ed63e",
          "layout": {
              "portsIn": [
                  {
                      "type": 5,
                      "name": "file"
                  },
                  {
                      "type": 0,
                      "name": "Play",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Volume",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Loop",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "Playing",
                      "subType": "number"
                  },
                  {
                      "type": 2,
                      "name": "Element",
                      "objType": "element"
                  },
                  {
                      "type": 1,
                      "name": "Has Ended"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1558014685535,
          "exampleProjectId": "ftHtx3",
          "shortName": "AudioMediaElement",
          "hasScreenshot": true,
          "namespace": "Ops.Html.Elements",
          "shortNameDisplay": "AudioMediaElement",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Html.Elements.AudioMediaElement",
                  "versionString": "",
                  "version": 0
              }
          ],
          "namespaceTitle": "Ops.Html.Elements",
          "namespaceSummary": "",
          "allowEdit": false
      },
      {
          "name": "Ops.Html.Elements.DivElement_v3",
          "content": "",
          "attachmentFiles": [],
          "summary": "Create a html DIV element",
          "id": "d55d398c-e68e-486b-b0ce-d9c4bdf7df05",
          "layout": {
              "portsIn": [
                  {
                      "type": 5,
                      "name": "Text"
                  },
                  {
                      "type": 5,
                      "name": "Id"
                  },
                  {
                      "type": 5,
                      "name": "Class"
                  },
                  {
                      "type": 5,
                      "name": "Style"
                  },
                  {
                      "type": 0,
                      "name": "Interactive",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Visible",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Convert Line Breaks",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Propagate Click-Events",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 2,
                      "name": "DOM Element",
                      "objType": "element"
                  },
                  {
                      "type": 0,
                      "name": "Hover",
                      "subType": "boolean"
                  },
                  {
                      "type": 1,
                      "name": "Clicked"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "Text",
                      "text": "text to display within the div"
                  },
                  {
                      "name": "Id",
                      "text": "Unique ID of div"
                  },
                  {
                      "name": "Class",
                      "text": "class to be accessed from CSS op"
                  },
                  {
                      "name": "Style",
                      "text": "write css styling for the div with the built in editor"
                  },
                  {
                      "name": "Interactive",
                      "text": "Allows interaction from mouse or touch screen"
                  },
                  {
                      "name": "Visible",
                      "text": "decides if the div is included in the css layout"
                  },
                  {
                      "name": "Convert Line Breaks",
                      "text": "convert line breaks in text string"
                  },
                  {
                      "name": "Hover",
                      "text": "outputs a 1 if the mouse hovers over the div"
                  },
                  {
                      "name": "Clicked",
                      "text": "Triggers when clicked"
                  }
              ]
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [
              "ooW2FL0vnWM"
          ],
          "created": 1675343717091,
          "exampleProjectId": "pOQqlo",
          "shortName": "DivElement_v3",
          "hasScreenshot": true,
          "namespace": "Ops.Html.Elements",
          "shortNameDisplay": "DivElement",
          "version": 3,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Html.Elements.DivElement",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Html.Elements.DivElement_v2",
                  "versionString": "_v2",
                  "version": 2
              },
              {
                  "name": "Ops.Html.Elements.DivElement_v3",
                  "versionString": "_v3",
                  "version": 3
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Html.Elements.Element_v2",
          "content": "",
          "attachmentFiles": [],
          "summary": "A more convinient version of div element op, that can be used for creating html without writing much css code",
          "id": "a0d2cc80-0b2f-4422-ba2d-c903ac9ca297",
          "layout": {
              "portsIn": [
                  {
                      "type": 5,
                      "name": "Text"
                  },
                  {
                      "type": 0,
                      "name": "Position index",
                      "values": [
                          "Absolute",
                          "Static",
                          "Relative",
                          "Fixed"
                      ],
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Interactive index",
                      "values": [
                          "True",
                          "False",
                          "No Pointer Events"
                      ],
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Set Size",
                      "group": "Area",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Width",
                      "group": "Area",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Height",
                      "group": "Area",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Overflow index",
                      "values": [
                          "Visible",
                          "Hidden",
                          "Scroll",
                          "Auto"
                      ],
                      "group": "Area",
                      "subType": "integer"
                  },
                  {
                      "type": 5,
                      "name": "Inline Style",
                      "group": "CSS"
                  },
                  {
                      "type": 5,
                      "name": "CSS Class",
                      "group": "CSS"
                  },
                  {
                      "type": 5,
                      "name": "Disable CSS Props",
                      "group": "CSS"
                  },
                  {
                      "type": 0,
                      "name": "Display index",
                      "subType": "integer"
                  },
                  {
                      "type": 5,
                      "name": "Tag Name"
                  },
                  {
                      "type": 0,
                      "name": "Opacity",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Propagate Click-Events",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 2,
                      "name": "DOM Element",
                      "objType": "element"
                  },
                  {
                      "type": 0,
                      "name": "Hovering",
                      "subType": "boolean"
                  },
                  {
                      "type": 1,
                      "name": "Clicked"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1725443366749,
          "exampleProjectId": "KmnVEm",
          "shortName": "Element_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Html.Elements",
          "shortNameDisplay": "Element",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Html.Elements.Element",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Html.Elements.Element_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Html.Elements.IFrame_v3",
          "content": "<p>Some web addresses will not allow the page to be displayed in an iFrame.</p>\n",
          "attachmentFiles": [],
          "summary": "Show another website in an iframe element",
          "id": "9e74b275-a1ed-4d10-aba4-4b3311363a99",
          "layout": {
              "portsIn": [
                  {
                      "type": 5,
                      "name": "URL",
                      "group": "Attributes"
                  },
                  {
                      "type": 5,
                      "name": "ID",
                      "group": "Attributes"
                  },
                  {
                      "type": 0,
                      "name": "Active",
                      "subType": "boolean"
                  },
                  {
                      "type": 5,
                      "name": "Style"
                  }
              ],
              "portsOut": [
                  {
                      "type": 2,
                      "name": "Element"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "URL",
                      "text": "URL to load into the iFrame"
                  },
                  {
                      "name": "ID",
                      "text": "Unique CSS ID"
                  },
                  {
                      "name": "Active",
                      "text": "Active and render on screen"
                  },
                  {
                      "name": "Style",
                      "text": "Open built in editor to define the CSS style"
                  },
                  {
                      "name": "Element",
                      "text": "Element out"
                  }
              ]
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1590486864887,
          "exampleProjectId": "SLesr2",
          "shortName": "IFrame_v3",
          "hasScreenshot": true,
          "namespace": "Ops.Html.Elements",
          "shortNameDisplay": "IFrame",
          "version": 3,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Html.Elements.IFrame",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Html.Elements.IFrame_v2",
                  "versionString": "_v2",
                  "version": 2
              },
              {
                  "name": "Ops.Html.Elements.IFrame_v3",
                  "versionString": "_v3",
                  "version": 3
              }
          ],
          "allowEdit": false,
          "usedInProject": true
      },
      {
          "name": "Ops.Html.Elements.ImageElement_v3",
          "content": "",
          "attachmentFiles": [],
          "summary": "create an image(img) html element",
          "id": "c760cd5e-0b4f-4c78-bd6c-c1dd87f4759e",
          "layout": {
              "portsIn": [
                  {
                      "type": 5,
                      "name": "File"
                  },
                  {
                      "type": 0,
                      "name": "Position index",
                      "values": [
                          "Absolute",
                          "Static",
                          "Relative",
                          "Fixed"
                      ],
                      "subType": "integer"
                  },
                  {
                      "type": 5,
                      "name": "Class"
                  },
                  {
                      "type": 5,
                      "name": "Style"
                  },
                  {
                      "type": 0,
                      "name": "CSS Display index",
                      "values": [
                          "not set",
                          "none"
                      ],
                      "subType": "integer"
                  },
                  {
                      "type": 5,
                      "name": "Alt Text"
                  }
              ],
              "portsOut": [
                  {
                      "type": 2,
                      "name": "Image Element",
                      "objType": "element"
                  },
                  {
                      "type": 0,
                      "name": "Width",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Height",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1733844146830,
          "exampleProjectId": "OZaVN8",
          "shortName": "ImageElement_v3",
          "hasScreenshot": true,
          "namespace": "Ops.Html.Elements",
          "shortNameDisplay": "ImageElement",
          "version": 3,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Html.Elements.ImageElement",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Html.Elements.ImageElement_v2",
                  "versionString": "_v2",
                  "version": 2
              },
              {
                  "name": "Ops.Html.Elements.ImageElement_v3",
                  "versionString": "_v3",
                  "version": 3
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Html.Elements.InputElement",
          "content": "",
          "attachmentFiles": [],
          "summary": "HTML input/textarea element to allow the user to enter text ",
          "id": "b7e1635c-b5c0-43e1-be03-2f137e6e61ea",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "Element index",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Type index",
                      "subType": "integer"
                  },
                  {
                      "type": 5,
                      "name": "Default Value"
                  },
                  {
                      "type": 5,
                      "name": "Placeholder"
                  },
                  {
                      "type": 5,
                      "name": "Id"
                  },
                  {
                      "type": 5,
                      "name": "Class"
                  },
                  {
                      "type": 5,
                      "name": "Style"
                  },
                  {
                      "type": 0,
                      "name": "Autocomplete",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Max Length",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Interactive",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Visible",
                      "subType": "boolean"
                  },
                  {
                      "type": 1,
                      "name": "Focus"
                  },
                  {
                      "type": 1,
                      "name": "Blur"
                  },
                  {
                      "type": 1,
                      "name": "Clear"
                  },
                  {
                      "type": 1,
                      "name": "Select"
                  }
              ],
              "portsOut": [
                  {
                      "type": 2,
                      "name": "DOM Element",
                      "objType": "element"
                  },
                  {
                      "type": 5,
                      "name": "Value"
                  },
                  {
                      "type": 0,
                      "name": "Hover",
                      "subType": "boolean"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1692307353078,
          "exampleProjectId": "L83aeG",
          "shortName": "InputElement",
          "hasScreenshot": true,
          "namespace": "Ops.Html.Elements",
          "shortNameDisplay": "InputElement",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Html.Elements.InputElement",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false,
          "usedInProject": true
      },
      {
          "name": "Ops.Html.Elements.VideoElement",
          "content": "",
          "attachmentFiles": [],
          "summary": "html video player element",
          "id": "5315a156-3a4f-4ff3-80c7-1b73c839d388",
          "layout": {
              "portsIn": [
                  {
                      "type": 5,
                      "name": "File",
                      "group": "Attributes"
                  },
                  {
                      "type": 5,
                      "name": "ID",
                      "group": "Attributes"
                  },
                  {
                      "type": 0,
                      "name": "Play",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Autoplay",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Controls",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Active",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Loop",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Muted",
                      "subType": "boolean"
                  },
                  {
                      "type": 5,
                      "name": "Style"
                  },
                  {
                      "type": 1,
                      "name": "Rewind"
                  }
              ],
              "portsOut": [
                  {
                      "type": 2,
                      "name": "Element"
                  },
                  {
                      "type": 0,
                      "name": "Playing",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Can Play Through",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Time",
                      "subType": "number"
                  },
                  {
                      "type": 1,
                      "name": "Ended"
                  },
                  {
                      "type": 0,
                      "name": "Has Error",
                      "subType": "boolean"
                  },
                  {
                      "type": 5,
                      "name": "Error Message"
                  },
                  {
                      "type": 0,
                      "name": "Video Width",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Video Height",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1594469942229,
          "exampleProjectId": "1QTBve",
          "shortName": "VideoElement",
          "hasScreenshot": true,
          "namespace": "Ops.Html.Elements",
          "shortNameDisplay": "VideoElement",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Html.Elements.VideoElement",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Html.ElementsPositionsByClass",
          "content": "",
          "attachmentFiles": [],
          "summary": "get html element absolute positions and sizes by classname",
          "id": "43cf60ec-1a62-4bd0-98ee-2aa85681020f",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Update"
                  },
                  {
                      "type": 5,
                      "name": "Classname"
                  }
              ],
              "portsOut": [
                  {
                      "type": 3,
                      "name": "Position"
                  },
                  {
                      "type": 3,
                      "name": "Size"
                  },
                  {
                      "type": 0,
                      "name": "Total Elements",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1612262729289,
          "exampleProjectId": "",
          "shortName": "ElementsPositionsByClass",
          "hasScreenshot": false,
          "namespace": "Ops.Html",
          "shortNameDisplay": "ElementsPositionsByClass",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Html.ElementsPositionsByClass",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Html.Event.ElementEventListener_v2",
          "content": "<p>Adds a custom event listener to the HTML DOM element.</p>\n",
          "attachmentFiles": [],
          "summary": "Add a custom event listener",
          "id": "c20ac53e-7ec7-4ac6-8ab9-88c1ad1ea6ea",
          "layout": {
              "portsIn": [
                  {
                      "type": "2",
                      "name": "Element"
                  },
                  {
                      "type": "5",
                      "name": "Event Name"
                  },
                  {
                      "type": "0",
                      "name": "Use Capture",
                      "subType": "boolean"
                  },
                  {
                      "type": "0",
                      "name": "Prevent Default",
                      "subType": "boolean"
                  },
                  {
                      "type": "0",
                      "name": "Stop Propagation",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": "1",
                      "name": "Event Trigger"
                  },
                  {
                      "type": "2",
                      "name": "Event Object"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "Element",
                      "text": "The HTML DOM element to add the listener to"
                  },
                  {
                      "name": "Use Capture",
                      "text": "If multiple elements register an event listener, setting `Use Capture` will make sure the listener will be called before the regular (bubble) listeners. For more infos read here: [javascript.info/bubbling-and-capturing](https://javascript.info/bubbling-and-capturing)."
                  },
                  {
                      "name": "Prevent Default",
                      "text": "If set the default browser action for the event will not be executed. See [developer.mozilla.org](https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault)."
                  },
                  {
                      "name": "Stop Propagation",
                      "text": "Stops other elements’ event listeneres from getting called. See [developer.mozilla.org](https://developer.mozilla.org/en-US/docs/Web/API/Event/stopPropagation)."
                  },
                  {
                      "name": "Event Trigger",
                      "text": "Trigger when the event occured"
                  },
                  {
                      "name": "Event Object",
                      "text": "The event object contains details about the event"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1706603656087,
          "exampleProjectId": "9ixt13",
          "shortName": "ElementEventListener_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Html.Event",
          "shortNameDisplay": "ElementEventListener",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Html.Event.ElementEventListener",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Html.Event.ElementEventListener_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "namespaceTitle": "Ops.Html.Event",
          "namespaceSummary": "",
          "allowEdit": false
      },
      {
          "name": "Ops.Html.Event.ElementPointerEvents_v2",
          "content": "",
          "attachmentFiles": [],
          "summary": "Listen to events of an element",
          "id": "8b1f169d-9005-4d44-9e82-1a91a9a025c2",
          "layout": {
              "portsIn": [
                  {
                      "type": "2",
                      "name": "Dom Element"
                  }
              ],
              "portsOut": [
                  {
                      "type": "2",
                      "name": "Event Object"
                  },
                  {
                      "type": "1",
                      "name": "Pointer Down"
                  },
                  {
                      "type": "1",
                      "name": "Pointer Enter"
                  },
                  {
                      "type": "1",
                      "name": "Pointer Up"
                  },
                  {
                      "type": "1",
                      "name": "Pointer Move"
                  },
                  {
                      "type": "1",
                      "name": "Pointer Over"
                  },
                  {
                      "type": "1",
                      "name": "Pointer Out"
                  },
                  {
                      "type": "1",
                      "name": "Pointer Leave"
                  },
                  {
                      "type": "1",
                      "name": "Pointer Cancel"
                  },
                  {
                      "type": "5",
                      "name": "Event Name"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1706604186625,
          "exampleProjectId": "ZjYu13",
          "shortName": "ElementPointerEvents_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Html.Event",
          "shortNameDisplay": "ElementPointerEvents",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Html.Event.ElementPointerEvents",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Html.Event.ElementPointerEvents_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Html.Event.PreventDefault",
          "content": "<p>See <a href=\"https://www.w3schools.com/jsref/event_preventdefault.asp\">w3schools: preventDefault()</a></p>\n<p>Some examples when you might want to prevent the default on an event:</p>\n<ul>\n<li>Clicking on a «Submit» button, prevent it from submitting a form</li>\n<li>Clicking on a link, prevent the link from following the URL</li>\n</ul>\n",
          "attachmentFiles": [],
          "summary": "Prevents the default on a JavaScript event",
          "id": "f5eaa284-2c01-4f1d-ab12-7f392bbbcadf",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Execute"
                  },
                  {
                      "type": 2,
                      "name": "Event In"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  },
                  {
                      "type": 2,
                      "name": "Event Out"
                  }
              ]
          },
          "authorName": "tim",
          "docs": {
              "ports": [
                  {
                      "name": "Execute",
                      "text": "Only execute once per Event"
                  },
                  {
                      "name": "Event In",
                      "text": "The event on which you want to prevent the default"
                  },
                  {
                      "name": "Next",
                      "text": "Triggers after"
                  },
                  {
                      "name": "Event Out",
                      "text": "Same as Event In"
                  }
              ]
          },
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1517606773724,
          "exampleProjectId": "",
          "shortName": "PreventDefault",
          "hasScreenshot": false,
          "namespace": "Ops.Html.Event",
          "shortNameDisplay": "PreventDefault",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Html.Event.PreventDefault",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Html.Event.StopPropagation",
          "content": "<p>Prevents further propagation of the current event in the capturing and bubbling phases.\nSee <a href=\"https://javascript.info/bubbling-and-capturing\">javascript.info – Bubbling and Capturing</a></p>\n",
          "attachmentFiles": [],
          "summary": "Stop a JavaScript event (bubbling / capturing)",
          "id": "8a0f1c05-3ed7-4d50-b8ec-e8298050988d",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Execute"
                  },
                  {
                      "type": 2,
                      "name": "Event In"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  },
                  {
                      "type": 2,
                      "name": "Event Out"
                  }
              ]
          },
          "authorName": "tim",
          "docs": {
              "ports": [
                  {
                      "name": "Execute",
                      "text": "Only execute once per event"
                  },
                  {
                      "name": "Event In",
                      "text": "The event to stop"
                  },
                  {
                      "name": "Next",
                      "text": "Triggers after event was stopped"
                  },
                  {
                      "name": "Event Out",
                      "text": "Same as Input Event"
                  }
              ]
          },
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1517606255138,
          "exampleProjectId": "",
          "shortName": "StopPropagation",
          "hasScreenshot": false,
          "namespace": "Ops.Html.Event",
          "shortNameDisplay": "StopPropagation",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Html.Event.StopPropagation",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Html.FontFile_v2",
          "content": "<p>font is loaded via css. enter a family name and use this as font name in other ops or css properties</p>\n",
          "attachmentFiles": [],
          "summary": "Load a font file like .otf, .ttf, .woff via css",
          "id": "68177370-116e-4c76-aef3-3b10d68e7227",
          "layout": {
              "portsIn": [
                  {
                      "type": 5,
                      "name": "file"
                  },
                  {
                      "type": 5,
                      "name": "family"
                  },
                  {
                      "type": 0,
                      "name": "Active",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "Loaded",
                      "subType": "boolean"
                  },
                  {
                      "type": 1,
                      "name": "Loaded Trigger"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1582125874800,
          "exampleProjectId": "xR9zIR",
          "shortName": "FontFile_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Html",
          "shortNameDisplay": "FontFile",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Html.FontFile",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Html.FontFile_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Html.FontsLoaded",
          "content": "",
          "attachmentFiles": [],
          "summary": "triggers when asynchronous requests finised loading",
          "id": "5c072a3d-c307-4bcd-8f3b-7487e30f4d73",
          "layout": {
              "portsIn": [],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Font Loaded"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1704727937128,
          "exampleProjectId": "xP04r1",
          "shortName": "FontsLoaded",
          "hasScreenshot": true,
          "namespace": "Ops.Html",
          "shortNameDisplay": "FontsLoaded",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Html.FontsLoaded",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Html.FullscreenMode",
          "content": "",
          "attachmentFiles": [],
          "summary": "Switch webgl to fullscreen",
          "id": "fe933b35-696d-4738-be03-c0c011ed67a0",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Request Fullscreen"
                  },
                  {
                      "type": 1,
                      "name": "Exit Fullscreen"
                  },
                  {
                      "type": 0,
                      "name": "Element index",
                      "values": [
                          "Canvas",
                          "Document"
                      ],
                      "subType": "integer"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "Is Fullscreen",
                      "subType": "boolean"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1558014424320,
          "exampleProjectId": "CCoJji",
          "shortName": "FullscreenMode",
          "hasScreenshot": true,
          "namespace": "Ops.Html",
          "shortNameDisplay": "FullscreenMode",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Html.FullscreenMode",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Html.HyperLink_v2",
          "content": "<p>For target name and spec options see: <a href=\"https://www.w3schools.com/jsref/met_win_open.asp\">https://www.w3schools.com/jsref/met_win_open.asp</a></p>\n",
          "attachmentFiles": [],
          "summary": "Open another website",
          "id": "a669d4f7-1e35-463c-bf8b-08c9f1b68e04",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Open"
                  },
                  {
                      "type": 5,
                      "name": "URL"
                  },
                  {
                      "type": 5,
                      "name": "Target Name"
                  },
                  {
                      "type": 5,
                      "name": "Specs"
                  }
              ],
              "portsOut": []
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1556293022756,
          "exampleProjectId": "ilts7O",
          "shortName": "HyperLink_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Html",
          "shortNameDisplay": "HyperLink",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Html.HyperLink",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Html.HyperLink_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "allowEdit": false,
          "usedInProject": true
      },
      {
          "name": "Ops.Html.InnerHTML",
          "content": "",
          "attachmentFiles": [],
          "summary": "Set innerHTML or innerTEXT of an HTML element",
          "id": "f90c2267-50b7-4127-85f5-e48139c2c80b",
          "layout": {
              "portsIn": [
                  {
                      "type": 2,
                      "name": "Element"
                  },
                  {
                      "type": 5,
                      "name": "Value"
                  },
                  {
                      "type": 0,
                      "name": "Type index",
                      "values": [
                          "HTML",
                          "Text"
                      ],
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Active",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 2,
                      "name": "HTML Element"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1732780988420,
          "exampleProjectId": "jgArsw",
          "shortName": "InnerHTML",
          "hasScreenshot": true,
          "namespace": "Ops.Html",
          "shortNameDisplay": "InnerHTML",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Html.InnerHTML",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false,
          "usedInProject": true
      },
      {
          "name": "Ops.Html.MailtoLink",
          "content": "",
          "attachmentFiles": [],
          "summary": "creates a mailto: link to open the default email app",
          "id": "6d03ec3b-f8b2-4544-bdb3-df771e857069",
          "layout": {
              "portsIn": [
                  {
                      "type": 5,
                      "name": "Email"
                  },
                  {
                      "type": 5,
                      "name": "Subject"
                  },
                  {
                      "type": 1,
                      "name": "Execute"
                  }
              ],
              "portsOut": []
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1565640164194,
          "exampleProjectId": "ilts7O",
          "shortName": "MailtoLink",
          "hasScreenshot": true,
          "namespace": "Ops.Html",
          "shortNameDisplay": "MailtoLink",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Html.MailtoLink",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Html.MarkdownToHtml",
          "content": "<p><a href=\"https://en.wikipedia.org/wiki/Markdown\">https://en.wikipedia.org/wiki/Markdown</a></p>\n",
          "attachmentFiles": [],
          "summary": "markdown markup language to html parser",
          "id": "26c97760-6e6b-4ff7-9715-dc510d23ab22",
          "layout": {
              "portsIn": [
                  {
                      "type": 5,
                      "name": "Markdown"
                  }
              ],
              "portsOut": [
                  {
                      "type": 5,
                      "name": "Html"
                  }
              ]
          },
          "authorName": "stephan",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [
              "marked.js"
          ],
          "youtubeids": [],
          "created": 1669976600784,
          "exampleProjectId": "52Zlij",
          "shortName": "MarkdownToHtml",
          "hasScreenshot": true,
          "namespace": "Ops.Html",
          "shortNameDisplay": "MarkdownToHtml",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Html.MarkdownToHtml",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Html.ModalOverlay",
          "content": "",
          "attachmentFiles": [],
          "summary": "create a modal HTML overlay with a darkened background",
          "id": "a8ba593a-4d5a-4b55-8ee7-9b6f9920da1f",
          "layout": {
              "portsIn": [
                  {
                      "type": 2,
                      "name": "Content Element"
                  },
                  {
                      "type": 1,
                      "name": "Show"
                  },
                  {
                      "type": 1,
                      "name": "Close"
                  },
                  {
                      "type": 0,
                      "name": "Show Closebutton",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Opacity",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "Visible",
                      "subType": "boolean"
                  },
                  {
                      "type": 1,
                      "name": "Closed"
                  },
                  {
                      "type": 2,
                      "name": "Element"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1583501447053,
          "exampleProjectId": "RXU-K2",
          "shortName": "ModalOverlay",
          "hasScreenshot": true,
          "namespace": "Ops.Html",
          "shortNameDisplay": "ModalOverlay",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Html.ModalOverlay",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Html.MouseCursorImage_v2",
          "content": "",
          "attachmentFiles": [],
          "summary": "Use image as mouse cursor",
          "id": "2a6be938-3db8-438e-82f2-60167529eb47",
          "layout": {
              "portsIn": [
                  {
                      "type": "1",
                      "name": "Update"
                  },
                  {
                      "type": "5",
                      "name": "file"
                  },
                  {
                      "type": "0",
                      "name": "Offset X",
                      "subType": "integer"
                  },
                  {
                      "type": "0",
                      "name": "Offset Y",
                      "subType": "integer"
                  }
              ],
              "portsOut": [
                  {
                      "type": "1",
                      "name": "Next"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1602572307067,
          "exampleProjectId": "y8dT4y",
          "shortName": "MouseCursorImage_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Html",
          "shortNameDisplay": "MouseCursorImage",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Html.MouseCursorImage",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Html.MouseCursorImage_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Html.QuerySelectorAll",
          "content": "<p>If you want to do something withmultiple elements, you can get it from the DOM using QuerySelectorAll. See <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector\">developer.mozilla.org – querySelector</a>.</p>\n",
          "attachmentFiles": [],
          "summary": "Selects all matching elements in the DOM",
          "id": "001799c7-9ddf-4f3e-b260-e865f0ed2c0e",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Update"
                  },
                  {
                      "type": 5,
                      "name": "Query"
                  },
                  {
                      "type": 0,
                      "name": "Mode index",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Type index",
                      "subType": "integer"
                  },
                  {
                      "type": 5,
                      "name": "Document"
                  }
              ],
              "portsOut": [
                  {
                      "type": 3,
                      "name": "Elements"
                  }
              ]
          },
          "authorName": "stephan",
          "docs": {
              "ports": [
                  {
                      "name": "Query",
                      "text": "E.g. \".some-classname\", '#some-id' or \"footer\""
                  }
              ]
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1637067837289,
          "exampleProjectId": "HPRqIR",
          "shortName": "QuerySelectorAll",
          "hasScreenshot": true,
          "namespace": "Ops.Html",
          "shortNameDisplay": "QuerySelectorAll",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Html.QuerySelectorAll",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Html.QuerySelector_v2",
          "content": "<p>If you want to do something with an element, you can get it from the DOM using QuerySelector. See <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector\">developer.mozilla.org – querySelector</a>.</p>\n",
          "attachmentFiles": [],
          "summary": "Selects an element in the DOM",
          "id": "a1a2189b-564c-4dd7-b3d9-a6cebc0cd94e",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Update"
                  },
                  {
                      "type": 5,
                      "name": "Query"
                  },
                  {
                      "type": 0,
                      "name": "Mode index",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Type index",
                      "subType": "integer"
                  },
                  {
                      "type": 5,
                      "name": "Document"
                  }
              ],
              "portsOut": [
                  {
                      "type": 2,
                      "name": "Element"
                  }
              ]
          },
          "authorName": "tim",
          "docs": {
              "ports": [
                  {
                      "name": "Query",
                      "text": "E.g. \".some-classname\", '#some-id' or \"footer\""
                  },
                  {
                      "name": "Element",
                      "text": "The first element which can be found using the query or null (no results)"
                  }
              ]
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1582126224873,
          "exampleProjectId": "HPRqIR",
          "shortName": "QuerySelector_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Html",
          "shortNameDisplay": "QuerySelector",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Html.QuerySelector",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Html.QuerySelector_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Html.ReloadPage",
          "content": "",
          "attachmentFiles": [],
          "summary": "reload the website",
          "id": "d0060a4e-ffed-4a8d-8f6d-bfd9a23319de",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Exec"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1558014677907,
          "exampleProjectId": "BPeCci",
          "shortName": "ReloadPage",
          "hasScreenshot": true,
          "namespace": "Ops.Html",
          "shortNameDisplay": "ReloadPage",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Html.ReloadPage",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Html.ScrollIntoView",
          "content": "",
          "attachmentFiles": [],
          "summary": "Scroll an area, so the html element is visible/in view",
          "id": "69c16334-5f9d-4286-84b5-7ac12aa54e37",
          "layout": {
              "portsIn": [
                  {
                      "type": 2,
                      "name": "Element",
                      "objType": "element"
                  },
                  {
                      "type": 0,
                      "name": "Behaviour index",
                      "values": [
                          "smooth",
                          "instant"
                      ],
                      "subType": "integer"
                  },
                  {
                      "type": 1,
                      "name": "Scroll Into View"
                  }
              ],
              "portsOut": [
                  {
                      "type": 2,
                      "name": "HTML Element",
                      "objType": "element"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1724765849078,
          "exampleProjectId": "KmnVEm",
          "shortName": "ScrollIntoView",
          "hasScreenshot": true,
          "namespace": "Ops.Html",
          "shortNameDisplay": "ScrollIntoView",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Html.ScrollIntoView",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Html.ScrollPosition_v2",
          "content": "<p>if element is not connected it will use the document body element</p>\n",
          "attachmentFiles": [],
          "summary": "the current x y  top left scrolling position of html page or element",
          "id": "16e3f40e-62dd-4a49-b2c4-e20eda508d5e",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Update"
                  },
                  {
                      "type": 2,
                      "name": "Element",
                      "objType": "element"
                  },
                  {
                      "type": 1,
                      "name": "Scroll to top"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  },
                  {
                      "type": 0,
                      "name": "left",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "top",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Percentage X",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Percentage Y",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1674471286214,
          "exampleProjectId": "",
          "shortName": "ScrollPosition_v2",
          "hasScreenshot": false,
          "namespace": "Ops.Html",
          "shortNameDisplay": "ScrollPosition",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Html.ScrollPosition",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Html.ScrollPosition_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Html.Utils.CablesLink",
          "content": "",
          "attachmentFiles": [],
          "summary": "create a cables logo which links to cables gl",
          "id": "aba114d1-b042-484a-9b66-a9bfe6590b3d",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "size",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Opacity",
                      "subType": "number"
                  }
              ],
              "portsOut": []
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1558014374347,
          "exampleProjectId": "ilts7O",
          "shortName": "CablesLink",
          "hasScreenshot": true,
          "namespace": "Ops.Html.Utils",
          "shortNameDisplay": "CablesLink",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Html.Utils.CablesLink",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false,
          "namespaceTitle": "Ops.Html.Utils",
          "namespaceSummary": ""
      },
      {
          "name": "Ops.Html.Utils.LoadingIndicator",
          "content": "",
          "attachmentFiles": [
              "att_css_ellipsis.css",
              "att_css_ring.css",
              "att_css_spinner.css"
          ],
          "summary": "show a typical web loading/progress indicator animation",
          "id": "e102834c-6dcf-459c-9e22-44ebccfc0d3b",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "Visible",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Style index",
                      "values": [
                          "Spinner",
                          "Ring",
                          "Ellipsis"
                      ],
                      "subType": "integer"
                  }
              ],
              "portsOut": []
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1605699652435,
          "exampleProjectId": "EsV74q",
          "shortName": "LoadingIndicator",
          "hasScreenshot": false,
          "namespace": "Ops.Html.Utils",
          "shortNameDisplay": "LoadingIndicator",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Html.Utils.LoadingIndicator",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Html.Utils.Notification",
          "content": "<p>The pop up will fade in and move to the end position.\nThen it will fade out and move to the starting position.\nIt&#39;s a basic div so more styling can be applied.</p>\n",
          "attachmentFiles": [
              "att_defaultstyle.txt"
          ],
          "summary": "Trigger a simple pop up notification on the screen",
          "id": "cf3960f3-ced0-4928-9082-a9cf7f8573a6",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Trigger animation"
                  },
                  {
                      "type": 5,
                      "name": "Text",
                      "group": "HTML CSS"
                  },
                  {
                      "type": 5,
                      "name": "Class",
                      "group": "HTML CSS"
                  },
                  {
                      "type": 5,
                      "name": "Style",
                      "group": "HTML CSS"
                  },
                  {
                      "type": 0,
                      "name": "Active",
                      "group": "HTML CSS",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Convert Line Breaks",
                      "group": "HTML CSS",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Fade in",
                      "group": "Animation",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Hold ",
                      "group": "Animation",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Fade out",
                      "group": "Animation",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "mode index",
                      "group": "Positioning",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Side index",
                      "group": "Positioning",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Starting position",
                      "group": "Positioning",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Ending position",
                      "group": "Positioning",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Finished trigger"
                  },
                  {
                      "type": 0,
                      "name": "Finished",
                      "subType": "boolean"
                  },
                  {
                      "type": 2,
                      "name": "DOM Element"
                  }
              ]
          },
          "authorName": "andro",
          "docs": {
              "ports": [
                  {
                      "name": "Trigger animation",
                      "text": "Trigger the animation"
                  },
                  {
                      "name": "Animation duration",
                      "text": "Animation duration for each stage"
                  },
                  {
                      "name": "Side index",
                      "text": "Pick from top or bottom"
                  },
                  {
                      "name": "Start point",
                      "text": "Starting point can be pixels or percentage"
                  },
                  {
                      "name": "End point",
                      "text": "Starting point can be pixels or percentage"
                  },
                  {
                      "name": "Style",
                      "text": "CSS styling"
                  },
                  {
                      "name": "Interactive",
                      "text": "If true then div can be interacted with"
                  },
                  {
                      "name": "Visible",
                      "text": "Set visibility on screen"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1600939484776,
          "exampleProjectId": "2Rue0j",
          "shortName": "Notification",
          "hasScreenshot": true,
          "namespace": "Ops.Html.Utils",
          "shortNameDisplay": "Notification",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Html.Utils.Notification",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false,
          "usedInProject": true
      },
      {
          "name": "Ops.Html.Utils.PlayButton",
          "content": "<p>after the play button is pressed, it will disappear and from then continue triggering the next ops.</p>\n<p><code>audiocontext.resume()</code> is executed when clicking.</p>\n",
          "attachmentFiles": [
              "att_inner.css",
              "att_outer.css"
          ],
          "summary": "shows a playbutton for forcing a simple user interaction",
          "id": "32e53fa2-4545-4c53-a94d-2204aa079246",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Trigger"
                  },
                  {
                      "type": 0,
                      "name": "Only if Audio Suspended",
                      "subType": "boolean"
                  },
                  {
                      "type": 1,
                      "name": "Reset"
                  },
                  {
                      "type": 5,
                      "name": "Style Outer"
                  },
                  {
                      "type": 5,
                      "name": "Style Inner"
                  },
                  {
                      "type": 0,
                      "name": "Active",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  },
                  {
                      "type": 1,
                      "name": "Not Clicked"
                  },
                  {
                      "type": 5,
                      "name": "Audiocontext State"
                  },
                  {
                      "type": 2,
                      "name": "Element"
                  },
                  {
                      "type": 0,
                      "name": "Clicked",
                      "subType": "boolean"
                  },
                  {
                      "type": 1,
                      "name": "Clicked Trigger"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "Only if Audio Suspended",
                      "text": "only show play button if audiocontext needs a user interaction (when audiocontext is suspended)"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1542036186881,
          "exampleProjectId": "WoGy8s",
          "shortName": "PlayButton",
          "hasScreenshot": true,
          "namespace": "Ops.Html.Utils",
          "shortNameDisplay": "PlayButton",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Html.Utils.PlayButton",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Html.Utils.PlayerControlPanel_v2",
          "content": "<p>shows a player-ui that can be used to control mediaplayers or the timeline</p>\n",
          "attachmentFiles": [
              "att_css_progressui.css"
          ],
          "summary": "simple html ui for timeline/mediaplayers (was: TimeLineUI)",
          "id": "12ac1d94-f043-454d-92a8-60733d2908b2",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "Length",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Current",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Clamp",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Is Playing",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Visible",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Show Time",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Show Skip Buttons",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Play clicked"
                  },
                  {
                      "type": 1,
                      "name": "Pause clicked"
                  },
                  {
                      "type": 1,
                      "name": "Rewind clicked"
                  },
                  {
                      "type": 1,
                      "name": "Skip Back clicked"
                  },
                  {
                      "type": 1,
                      "name": "Skip Forward clicked"
                  },
                  {
                      "type": 1,
                      "name": "Dragged"
                  },
                  {
                      "type": 0,
                      "name": "Current Value",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Dragging",
                      "subType": "boolean"
                  },
                  {
                      "type": 2,
                      "name": "DOM Element",
                      "objType": "element"
                  }
              ]
          },
          "authorName": "stephan",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1663064258683,
          "exampleProjectId": "3F6DOe",
          "shortName": "PlayerControlPanel_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Html.Utils",
          "shortNameDisplay": "PlayerControlPanel",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Html.Utils.PlayerControlPanel_v1",
                  "versionString": "_v1",
                  "version": 1
              },
              {
                  "name": "Ops.Html.Utils.PlayerControlPanel_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Html.Utils.QrCode",
          "content": "",
          "attachmentFiles": [],
          "summary": "Generate a qr code as a texture",
          "id": "7e27a058-8162-4fd3-b08d-eba16f0fb551",
          "layout": {
              "portsIn": [
                  {
                      "type": 5,
                      "name": "Text"
                  }
              ],
              "portsOut": [
                  {
                      "type": 5,
                      "name": "Image DataUrl"
                  },
                  {
                      "type": 2,
                      "name": "Element",
                      "objType": "element"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [
              "qrcode.js"
          ],
          "youtubeids": [],
          "created": 1652087190354,
          "exampleProjectId": "QjlEo-",
          "shortName": "QrCode",
          "hasScreenshot": true,
          "namespace": "Ops.Html.Utils",
          "shortNameDisplay": "QrCode",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Html.Utils.QrCode",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Html.Utils.YoutubePlayer",
          "content": "<p>create an html element that contains a youtube player</p>\n<p>see <a href=\"/op/Ops.Html.ModalOverlay\" target=\"_blank\">Ops.Html.ModalOverlay</a> for a good overlay example</p>\n",
          "attachmentFiles": [],
          "summary": "play a youtube video in a HTML element",
          "id": "b60ad395-d6ad-4309-86c5-c6bbffaf176c",
          "layout": {
              "portsIn": [
                  {
                      "type": "5",
                      "name": "Video Id"
                  },
                  {
                      "type": "0",
                      "name": "Active",
                      "subType": "boolean"
                  },
                  {
                      "type": "5",
                      "name": "Style"
                  },
                  {
                      "type": "5",
                      "name": "ElementID"
                  },
                  {
                      "type": "0",
                      "name": "Autoplay",
                      "group": "Youtube Options",
                      "subType": "boolean"
                  },
                  {
                      "type": "0",
                      "name": "Display Captions",
                      "group": "Youtube Options",
                      "subType": "boolean"
                  },
                  {
                      "type": "0",
                      "name": "Loop",
                      "group": "Youtube Options",
                      "subType": "boolean"
                  },
                  {
                      "type": "0",
                      "name": "Allow Fullscreen",
                      "group": "Youtube Options",
                      "subType": "boolean"
                  },
                  {
                      "type": "0",
                      "name": "Hide Controls",
                      "group": "Youtube Options",
                      "subType": "boolean"
                  },
                  {
                      "type": "0",
                      "name": "Start at Second",
                      "group": "Youtube Options",
                      "subType": "integer"
                  }
              ],
              "portsOut": [
                  {
                      "type": "2",
                      "name": "Element"
                  },
                  {
                      "type": "5",
                      "name": "Direct Link"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1583493050766,
          "exampleProjectId": "aMkD16",
          "shortName": "YoutubePlayer",
          "hasScreenshot": true,
          "namespace": "Ops.Html.Utils",
          "shortNameDisplay": "YoutubePlayer",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Html.Utils.YoutubePlayer",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Html.WindowClose",
          "content": "<p>this will not work in cables itself or in iframes.</p>\n<p>it can be used to close an electron application</p>\n<p>it actually just executes javascript <code>window.close()</code></p>\n",
          "attachmentFiles": [],
          "summary": "close current window",
          "id": "4f5d56b9-28a0-47fe-86f7-7b765268d694",
          "layout": {
              "portsIn": [
                  {
                      "type": "1",
                      "name": "Close"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1586550107160,
          "exampleProjectId": "WGBCci",
          "shortName": "WindowClose",
          "hasScreenshot": true,
          "namespace": "Ops.Html",
          "shortNameDisplay": "WindowClose",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Html.WindowClose",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Html.WindowHasFocus",
          "content": "",
          "attachmentFiles": [],
          "summary": "detect if the browser window/tab has focus",
          "id": "6542896e-aa13-4b57-81e0-163597f4149a",
          "layout": {
              "portsOut": [
                  {
                      "type": 0,
                      "name": "has focus",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Tab Visible",
                      "subType": "boolean"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1520526123752,
          "exampleProjectId": "uI9yOg",
          "shortName": "WindowHasFocus",
          "hasScreenshot": true,
          "namespace": "Ops.Html",
          "shortNameDisplay": "WindowHasFocus",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Html.WindowHasFocus",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Html.WindowInfo",
          "content": "<p>provides information about the current windows (or iframe) width, height and pixel density.</p>\n<p>orientation info uses: <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/ScreenOrientation\">https://developer.mozilla.org/en-US/docs/Web/API/ScreenOrientation</a></p>\n",
          "attachmentFiles": [],
          "summary": "size of browser window in pixels",
          "id": "9655045c-3539-457d-be65-a1456a58906a",
          "layout": {
              "portsOut": [
                  {
                      "type": 0,
                      "name": "clientWidth",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "clientHeight",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "body scroll Height",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Device Pixel Ratio",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Iframe Parent",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Orientation Angle",
                      "subType": "number"
                  },
                  {
                      "type": 5,
                      "name": "Orientation Type"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1566822681581,
          "exampleProjectId": "DyHxSP",
          "caniusequery": "ScreenOrientation",
          "shortName": "WindowInfo",
          "hasScreenshot": true,
          "namespace": "Ops.Html",
          "shortNameDisplay": "WindowInfo",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Html.WindowInfo",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Json.CopyObject",
          "content": "<p>Uses JSON serialization to create a copy of an object.</p>\n",
          "attachmentFiles": [],
          "summary": "Creates a copy of a JSON object",
          "id": "be18afda-378b-4a57-a0f5-cec152c6ad41",
          "layout": {
              "portsIn": [
                  {
                      "type": 2,
                      "name": "Input"
                  }
              ],
              "portsOut": [
                  {
                      "type": 2,
                      "name": "Output"
                  },
                  {
                      "type": 0,
                      "name": "Valid",
                      "subType": "boolean"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1698315329826,
          "exampleProjectId": "xJCXJK",
          "shortName": "CopyObject",
          "hasScreenshot": true,
          "namespace": "Ops.Json",
          "shortNameDisplay": "CopyObject",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Json.CopyObject",
                  "versionString": "",
                  "version": 0
              }
          ],
          "namespaceTitle": "Ops.Json",
          "namespaceSummary": "",
          "allowEdit": false
      },
      {
          "name": "Ops.Json.CsvArray",
          "content": "<p>Let’s you open uploaded <a href=\"https://en.wikipedia.org/wiki/Comma-separated_values\">CSV</a> (character-separated-values)-files, which can be used to store tabular data, e.g.</p>\n<pre><code>Year,Make,Model,Description,Price\n1997,Ford,E350,&quot;ac, abs, moon&quot;,3000.00\n1999,Chevy,&quot;Venture &quot;&quot;Extended Edition&quot;&quot;&quot;,&quot;&quot;,4900.00\n1999,Chevy,&quot;Venture &quot;&quot;Extended Edition, Very Large&quot;&quot;&quot;,,5000.00\n1996,Jeep,Grand Cherokee,&quot;MUST SELL!\nair, moon roof, loaded&quot;,4799.00\n</code></pre>\n<p>If your CSV-file has a header-row, you have to manually ignore it (index 0), or just delete it from the file. \nThe result will be a two-dimensional array containing the rows and individual row-values.</p>\n",
          "attachmentFiles": [],
          "summary": "parse CSV files as array",
          "id": "2e76c1f8-19ac-4e9d-8db8-58b2f9fbc1d3",
          "layout": {
              "portsIn": [
                  {
                      "type": "5",
                      "name": "file"
                  }
              ],
              "portsOut": [
                  {
                      "type": "3",
                      "name": "result"
                  },
                  {
                      "type": "0",
                      "name": "num items",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "file",
                      "text": "The CSV-file you want to use in cables as an array"
                  },
                  {
                      "name": "result",
                      "text": "The parsed two-dimensional array containing all the rows and columns from the CSV-file"
                  },
                  {
                      "name": "num items",
                      "text": "The number of rows "
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1519816793278,
          "exampleProjectId": "UlL2G1",
          "shortName": "CsvArray",
          "hasScreenshot": true,
          "namespace": "Ops.Json",
          "shortNameDisplay": "CsvArray",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Json.CsvArray",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Json.CsvColumnArray_v2",
          "content": "",
          "attachmentFiles": [],
          "summary": "get all values of a CSV column as array of strings",
          "id": "2503021e-1599-40d9-b038-bf5a36c6b2c7",
          "layout": {
              "portsIn": [
                  {
                      "type": 5,
                      "name": "Column Name"
                  },
                  {
                      "type": 3,
                      "name": "CSV Array"
                  },
                  {
                      "type": 0,
                      "name": "Numbers",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 3,
                      "name": "Result"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1640618485563,
          "exampleProjectId": "",
          "shortName": "CsvColumnArray_v2",
          "hasScreenshot": false,
          "namespace": "Ops.Json",
          "shortNameDisplay": "CsvColumnArray",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Json.CsvColumnArray",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Json.CsvColumnArray_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Json.EmptyObject",
          "content": "",
          "attachmentFiles": [],
          "summary": "An empty Object",
          "id": "1b98cb80-8487-47d8-9a50-40a645c4e2b4",
          "layout": {
              "portsIn": [],
              "portsOut": [
                  {
                      "type": 2,
                      "name": "Result"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1692304956642,
          "exampleProjectId": "piMxeG",
          "shortName": "EmptyObject",
          "hasScreenshot": true,
          "namespace": "Ops.Json",
          "shortNameDisplay": "EmptyObject",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Json.EmptyObject",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Json.FilterValidObject",
          "content": "<p>invalid objects will be ignored and not outputed</p>\n",
          "attachmentFiles": [],
          "summary": "Filter valid objects",
          "id": "a851cddb-74e5-41e7-ac75-709beae914fd",
          "layout": {
              "portsIn": [
                  {
                      "type": 2,
                      "name": "Object"
                  }
              ],
              "portsOut": [
                  {
                      "type": 2,
                      "name": "Last Valid Object"
                  },
                  {
                      "type": 0,
                      "name": "Is Valid",
                      "subType": "boolean"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1587048768999,
          "exampleProjectId": "",
          "shortName": "FilterValidObject",
          "hasScreenshot": false,
          "namespace": "Ops.Json",
          "shortNameDisplay": "FilterValidObject",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Json.FilterValidObject",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Json.GateObject",
          "content": "",
          "attachmentFiles": [],
          "summary": "Will only allow an Object to to be output if the the pass through parameter evaluates to true",
          "id": "95e04331-49d6-42da-81d8-5a75261ab22f",
          "layout": {
              "portsIn": [
                  {
                      "type": 2,
                      "name": "Object In"
                  },
                  {
                      "type": 0,
                      "name": "Pass Through",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "When False index",
                      "values": [
                          "keep last object",
                          "null"
                      ],
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Only Valid Objects",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 2,
                      "name": "Object Out"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "Object In",
                      "text": "Object in "
                  },
                  {
                      "name": "Pass Through",
                      "text": "Opens or closes the gate"
                  },
                  {
                      "name": "Object Out",
                      "text": "Object output if pass through is true"
                  }
              ]
          },
          "hasExample": false,
          "libs": [],
          "youtubeids": [
              "gT1jXP5As9A"
          ],
          "created": 1556101725907,
          "exampleProjectId": "",
          "shortName": "GateObject",
          "hasScreenshot": false,
          "namespace": "Ops.Json",
          "shortNameDisplay": "GateObject",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Json.GateObject",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Json.HttpRequest_v3",
          "content": "",
          "attachmentFiles": [],
          "summary": "Request a json file and output an object (ajax, url, json)",
          "id": "ba2131a6-782d-40fe-9710-57a8e57051bb",
          "layout": {
              "portsIn": [
                  {
                      "type": 5,
                      "name": "file",
                      "uititle": "URL"
                  },
                  {
                      "type": 2,
                      "name": "headers"
                  },
                  {
                      "type": 5,
                      "name": "body"
                  },
                  {
                      "type": 0,
                      "name": "HTTP Method index",
                      "subType": "integer"
                  },
                  {
                      "type": 5,
                      "name": "Content-Type"
                  },
                  {
                      "type": 0,
                      "name": "Content index",
                      "values": [
                          "JSON",
                          "String",
                          "Binary",
                          "Binary Base64"
                      ],
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Auto request",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Send Credentials",
                      "subType": "boolean"
                  },
                  {
                      "type": 1,
                      "name": "reload"
                  }
              ],
              "portsOut": [
                  {
                      "type": 2,
                      "name": "Response Json Object"
                  },
                  {
                      "type": 5,
                      "name": "Response String"
                  },
                  {
                      "type": 5,
                      "name": "Response Data Url"
                  },
                  {
                      "type": 0,
                      "name": "Duration MS",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Status Code",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Is Loading",
                      "subType": "boolean"
                  },
                  {
                      "type": 1,
                      "name": "Loaded"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "headers",
                      "text": "a key/value-object of additional headers to send"
                  },
                  {
                      "name": "body",
                      "text": "an optional body to send (for POST/PATCH/PUT)"
                  },
                  {
                      "name": "HTTP Method index",
                      "text": "the http method to use"
                  },
                  {
                      "name": "Content-Type",
                      "text": "the content type of the body sent (if any)"
                  },
                  {
                      "name": "Auto request",
                      "text": "trigger the request on any value change (or on pagereload)"
                  },
                  {
                      "name": "Send Credentials",
                      "text": "indicates whether or not cross-site Access-Control requests should be made using credentials such as cookies, authorization headers or TLS client certificates. "
                  },
                  {
                      "name": "reload",
                      "text": "refresh data from remote (overrides an inactive \"auto request\")"
                  },
                  {
                      "name": "Is Loading",
                      "text": "currently loading"
                  },
                  {
                      "name": "Loaded",
                      "text": "triggers when finished"
                  }
              ]
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1696585492394,
          "exampleProjectId": "5FQ08W",
          "shortName": "HttpRequest_v3",
          "hasScreenshot": true,
          "namespace": "Ops.Json",
          "shortNameDisplay": "HttpRequest",
          "version": 3,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Json.HttpRequest",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Json.HttpRequest_v2",
                  "versionString": "_v2",
                  "version": 2
              },
              {
                  "name": "Ops.Json.HttpRequest_v3",
                  "versionString": "_v3",
                  "version": 3
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Json.Object",
          "content": "",
          "attachmentFiles": [],
          "summary": "An empty Object",
          "id": "d618f2e1-4e60-4ac4-91aa-218bab2a6742",
          "layout": {
              "portsIn": [
                  {
                      "type": 2,
                      "name": "Object"
                  }
              ],
              "portsOut": [
                  {
                      "type": 2,
                      "name": "Result"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1712929758277,
          "exampleProjectId": "",
          "shortName": "Object",
          "hasScreenshot": false,
          "namespace": "Ops.Json",
          "shortNameDisplay": "Object",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Json.Object",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Json.ObjectDeleteKey",
          "content": "",
          "attachmentFiles": [],
          "summary": "Remove a Property from an Object by Key",
          "id": "57a80386-b565-4915-a365-61b2dccf5ccc",
          "layout": {
              "portsIn": [
                  {
                      "type": 2,
                      "name": "Object"
                  },
                  {
                      "type": 5,
                      "name": "Key"
                  }
              ],
              "portsOut": [
                  {
                      "type": 2,
                      "name": "Object Result"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1692282851977,
          "exampleProjectId": "piMxeG",
          "shortName": "ObjectDeleteKey",
          "hasScreenshot": true,
          "namespace": "Ops.Json",
          "shortNameDisplay": "ObjectDeleteKey",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Json.ObjectDeleteKey",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Json.ObjectFilterContentByKey",
          "content": "",
          "attachmentFiles": [],
          "summary": "filter values from an object if key starts with input string ",
          "id": "89bddc38-000b-4982-8b37-b6e48f0b001b",
          "layout": {
              "portsIn": [
                  {
                      "type": 2,
                      "name": "Object"
                  },
                  {
                      "type": 5,
                      "name": "name"
                  },
                  {
                      "type": 0,
                      "name": "Remove Null",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 2,
                      "name": "Result"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1612941958112,
          "exampleProjectId": "KEDALu",
          "shortName": "ObjectFilterContentByKey",
          "hasScreenshot": true,
          "namespace": "Ops.Json",
          "shortNameDisplay": "ObjectFilterContentByKey",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Json.ObjectFilterContentByKey",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Json.ObjectFunnel",
          "content": "",
          "attachmentFiles": [],
          "summary": "outputs the last changed object",
          "id": "ff67d867-098e-4eb1-8b37-00ec0863ce5e",
          "layout": {
              "portsIn": [
                  {
                      "type": 2,
                      "name": "Object1"
                  },
                  {
                      "type": 2,
                      "name": "Object2"
                  },
                  {
                      "type": 2,
                      "name": "Object3"
                  },
                  {
                      "type": 2,
                      "name": "Object4"
                  },
                  {
                      "type": 2,
                      "name": "Object5"
                  }
              ],
              "portsOut": [
                  {
                      "type": 2,
                      "name": "Out Object"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1519813843868,
          "exampleProjectId": "",
          "shortName": "ObjectFunnel",
          "hasScreenshot": false,
          "namespace": "Ops.Json",
          "shortNameDisplay": "ObjectFunnel",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Json.ObjectFunnel",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Json.ObjectGetArray_v2",
          "content": "<p>Can be used e.g. for third-party API requests</p>\n<p>For example if you want to have the array <code>myArr</code>, you would pass in the JSON-object as well as the array-key <code>myArr</code></p>\n<p><code>{     &quot;myArr&quot;:  [1, 3, 5, 7],     ... }</code></p>\n",
          "attachmentFiles": [],
          "summary": "Returns an array from a JSON-object",
          "id": "7c06a818-9c07-493a-8c4f-04eb2c7796f5",
          "layout": {
              "portsIn": [
                  {
                      "type": 2,
                      "name": "data"
                  },
                  {
                      "type": 5,
                      "name": "key"
                  }
              ],
              "portsOut": [
                  {
                      "type": 3,
                      "name": "result"
                  },
                  {
                      "type": 0,
                      "name": "Length",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "data",
                      "text": "The Json-object you want to extract an array from"
                  },
                  {
                      "name": "key",
                      "text": "The key of the array"
                  },
                  {
                      "name": "result",
                      "text": "An Array"
                  },
                  {
                      "name": "Length",
                      "text": "The length of the array"
                  }
              ]
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1557827880199,
          "exampleProjectId": "yU2Pet",
          "shortName": "ObjectGetArray_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Json",
          "shortNameDisplay": "ObjectGetArray",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Json.ObjectGetArray",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Json.ObjectGetArray_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Json.ObjectGetNumber_v2",
          "content": "",
          "attachmentFiles": [],
          "summary": "Get a number from an object",
          "id": "a7335e79-046e-40da-9e9c-db779b0a5e53",
          "layout": {
              "portsIn": [
                  {
                      "type": 2,
                      "name": "Data"
                  },
                  {
                      "type": 5,
                      "name": "Key"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "Result",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Found",
                      "subType": "boolean"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1567760965947,
          "exampleProjectId": "",
          "shortName": "ObjectGetNumber_v2",
          "hasScreenshot": false,
          "namespace": "Ops.Json",
          "shortNameDisplay": "ObjectGetNumber",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Json.ObjectGetNumber",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Json.ObjectGetNumber_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Json.ObjectGetObject_v2",
          "content": "",
          "attachmentFiles": [],
          "summary": "Get an object from an object",
          "id": "d1dfa305-89db-4ca1-b0ac-2d6321d76ae8",
          "layout": {
              "portsIn": [
                  {
                      "type": 2,
                      "name": "Object"
                  },
                  {
                      "type": 5,
                      "name": "Key"
                  }
              ],
              "portsOut": [
                  {
                      "type": 2,
                      "name": "Result"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1567761034900,
          "exampleProjectId": "",
          "shortName": "ObjectGetObject_v2",
          "hasScreenshot": false,
          "namespace": "Ops.Json",
          "shortNameDisplay": "ObjectGetObject",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Json.ObjectGetObject",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Json.ObjectGetObject_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Json.ObjectGetString",
          "content": "",
          "attachmentFiles": [],
          "summary": "Get string from object by key",
          "id": "7d86cd28-f7d8-44a1-a4da-466c4782aaec",
          "layout": {
              "portsIn": [
                  {
                      "type": 2,
                      "name": "data"
                  },
                  {
                      "type": 5,
                      "name": "Key"
                  }
              ],
              "portsOut": [
                  {
                      "type": 5,
                      "name": "Result"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1567704869743,
          "exampleProjectId": "Sn0k9Q",
          "coreLibs": [
              "vargetset"
          ],
          "shortName": "ObjectGetString",
          "hasScreenshot": true,
          "namespace": "Ops.Json",
          "shortNameDisplay": "ObjectGetString",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Json.ObjectGetString",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Json.ObjectIsNull",
          "content": "",
          "attachmentFiles": [],
          "summary": "check if object is null or a valid object",
          "id": "2fd858a8-3dff-43e4-bd85-a62c7d23b5a2",
          "layout": {
              "portsIn": [
                  {
                      "type": 2,
                      "name": "Object"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "Result",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1534671620425,
          "exampleProjectId": "",
          "shortName": "ObjectIsNull",
          "hasScreenshot": false,
          "namespace": "Ops.Json",
          "shortNameDisplay": "ObjectIsNull",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Json.ObjectIsNull",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Json.ObjectKeys",
          "content": "",
          "attachmentFiles": [],
          "summary": "returns an array of strings, which contain the keys of the object",
          "id": "83b4d148-8cb3-4a45-8824-957eeaf02e22",
          "layout": {
              "portsIn": [
                  {
                      "type": 2,
                      "name": "Object"
                  }
              ],
              "portsOut": [
                  {
                      "type": 3,
                      "name": "Keys"
                  },
                  {
                      "type": 0,
                      "name": "Num Keys",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1520334880901,
          "exampleProjectId": "3pkLji",
          "shortName": "ObjectKeys",
          "hasScreenshot": true,
          "namespace": "Ops.Json",
          "shortNameDisplay": "ObjectKeys",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Json.ObjectKeys",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Json.ObjectMerge",
          "content": "",
          "attachmentFiles": [],
          "summary": "merge key+values of two objects",
          "id": "0eb48a27-6fe8-4900-93d8-de68bde44ffb",
          "layout": {
              "portsIn": [
                  {
                      "type": 2,
                      "name": "Object 1"
                  },
                  {
                      "type": 2,
                      "name": "Object 2"
                  }
              ],
              "portsOut": [
                  {
                      "type": 2,
                      "name": "Object Result"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1692282588865,
          "exampleProjectId": "LNJHeG",
          "shortName": "ObjectMerge",
          "hasScreenshot": true,
          "namespace": "Ops.Json",
          "shortNameDisplay": "ObjectMerge",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Json.ObjectMerge",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Json.ObjectOr",
          "content": "",
          "attachmentFiles": [],
          "summary": "result is first connected valid object",
          "id": "98c9a790-c018-466a-9c36-7afd0d2a8826",
          "layout": {
              "portsIn": [
                  {
                      "type": 2,
                      "name": "Object 1"
                  },
                  {
                      "type": 2,
                      "name": "Object 2"
                  },
                  {
                      "type": 2,
                      "name": "Object 3"
                  },
                  {
                      "type": 2,
                      "name": "Object 4"
                  },
                  {
                      "type": 2,
                      "name": "Object 5"
                  },
                  {
                      "type": 2,
                      "name": "Object 6"
                  },
                  {
                      "type": 2,
                      "name": "Object 7"
                  },
                  {
                      "type": 2,
                      "name": "Object 8"
                  }
              ],
              "portsOut": [
                  {
                      "type": 2,
                      "name": "Result"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1520335781652,
          "exampleProjectId": "",
          "shortName": "ObjectOr",
          "hasScreenshot": false,
          "namespace": "Ops.Json",
          "shortNameDisplay": "ObjectOr",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Json.ObjectOr",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Json.ObjectRecorder",
          "content": "",
          "attachmentFiles": [],
          "summary": "record objects and download as json file",
          "id": "5a6c7435-34ee-4897-9fda-548db54aff02",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Exec"
                  },
                  {
                      "type": 1,
                      "name": "reset"
                  },
                  {
                      "type": 1,
                      "name": "download"
                  },
                  {
                      "type": 2,
                      "name": "Object"
                  }
              ],
              "portsOut": [
                  {
                      "type": 3,
                      "name": "Result"
                  },
                  {
                      "type": 0,
                      "name": "Num Objects",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1515776236771,
          "exampleProjectId": "",
          "shortName": "ObjectRecorder",
          "hasScreenshot": false,
          "namespace": "Ops.Json",
          "shortNameDisplay": "ObjectRecorder",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Json.ObjectRecorder",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Json.ObjectSetArray_v2",
          "content": "",
          "attachmentFiles": [],
          "summary": "Set array by key in an object",
          "id": "47dfdb45-3364-451a-a288-acfa02510990",
          "layout": {
              "portsIn": [
                  {
                      "type": 2,
                      "name": "Object"
                  },
                  {
                      "type": 5,
                      "name": "Key"
                  },
                  {
                      "type": 3,
                      "name": "Value"
                  }
              ],
              "portsOut": [
                  {
                      "type": 2,
                      "name": "Result Object"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1694610610786,
          "exampleProjectId": "",
          "shortName": "ObjectSetArray_v2",
          "hasScreenshot": false,
          "namespace": "Ops.Json",
          "shortNameDisplay": "ObjectSetArray",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Json.ObjectSetArray",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Json.ObjectSetArray_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Json.ObjectSetColorArray",
          "content": "",
          "attachmentFiles": [],
          "summary": "Set rgba array by key in an object",
          "id": "8ca272a7-bc56-4879-9648-283caf075f6a",
          "layout": {
              "portsIn": [
                  {
                      "type": 2,
                      "name": "Object"
                  },
                  {
                      "type": 5,
                      "name": "Key"
                  },
                  {
                      "type": 0,
                      "name": "r",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "g",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "b",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "a",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 2,
                      "name": "Result Object"
                  },
                  {
                      "type": 0,
                      "name": "Out R",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Out G",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Out B",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Out A",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1698329419376,
          "exampleProjectId": "joA-JK",
          "shortName": "ObjectSetColorArray",
          "hasScreenshot": true,
          "namespace": "Ops.Json",
          "shortNameDisplay": "ObjectSetColorArray",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Json.ObjectSetColorArray",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Json.ObjectSetNumber_v2",
          "content": "",
          "attachmentFiles": [],
          "summary": "set number at key in an object",
          "id": "20f7bcab-ed71-45d1-9fae-d89aacf3961b",
          "layout": {
              "portsIn": [
                  {
                      "type": 2,
                      "name": "Object"
                  },
                  {
                      "type": 5,
                      "name": "Key"
                  },
                  {
                      "type": 0,
                      "name": "Number",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 2,
                      "name": "Result Object"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1694609742924,
          "exampleProjectId": "",
          "shortName": "ObjectSetNumber_v2",
          "hasScreenshot": false,
          "namespace": "Ops.Json",
          "shortNameDisplay": "ObjectSetNumber",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Json.ObjectSetNumber",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Json.ObjectSetNumber_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Json.ObjectSetObject_v2",
          "content": "<p>simple version to set an object as value in an object without a trigger</p>\n",
          "attachmentFiles": [],
          "summary": "set object as value in an object",
          "id": "84283526-5687-4bdc-92aa-22c81972a3a7",
          "layout": {
              "portsIn": [
                  {
                      "type": 2,
                      "name": "Object"
                  },
                  {
                      "type": 5,
                      "name": "Key"
                  },
                  {
                      "type": 2,
                      "name": "Object Value"
                  }
              ],
              "portsOut": [
                  {
                      "type": 2,
                      "name": "Result Object"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1694610247814,
          "exampleProjectId": "7X58nR",
          "shortName": "ObjectSetObject_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Json",
          "shortNameDisplay": "ObjectSetObject",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Json.ObjectSetObject_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Json.ObjectSetString_v2",
          "content": "",
          "attachmentFiles": [],
          "summary": "set a string value by key in an object",
          "id": "1ed8f375-c3d7-4662-88c7-1afbc3dc6129",
          "layout": {
              "portsIn": [
                  {
                      "type": 2,
                      "name": "Object"
                  },
                  {
                      "type": 5,
                      "name": "Key"
                  },
                  {
                      "type": 5,
                      "name": "Value"
                  }
              ],
              "portsOut": [
                  {
                      "type": 2,
                      "name": "Result Object"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1694609466137,
          "exampleProjectId": "",
          "shortName": "ObjectSetString_v2",
          "hasScreenshot": false,
          "namespace": "Ops.Json",
          "shortNameDisplay": "ObjectSetString",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Json.ObjectSetString",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Json.ObjectSetString_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Json.ObjectStringify_v2",
          "content": "<p>basically javascripts JSON.stringify()</p>\n",
          "attachmentFiles": [],
          "summary": "Convert object to string",
          "id": "89fc70ea-2350-4a0e-9a24-4efca10cced6",
          "layout": {
              "portsIn": [
                  {
                      "type": 2,
                      "name": "Object"
                  },
                  {
                      "type": 0,
                      "name": "Beautify",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 5,
                      "name": "Result"
                  },
                  {
                      "type": 0,
                      "name": "Error",
                      "subType": "boolean"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1543048614948,
          "exampleProjectId": "7X58nR",
          "shortName": "ObjectStringify_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Json",
          "shortNameDisplay": "ObjectStringify",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Json.ObjectStringify",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Json.ObjectStringify_v1",
                  "versionString": "_v1",
                  "version": 1
              },
              {
                  "name": "Ops.Json.ObjectStringify_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Json.ObjectToArray",
          "content": "<p>this should only be used with ajaxrequest, when you are sure it returns an array.</p>\n<p>it does not convert anything, just casting. </p>\n<p>use carefully</p>\n",
          "attachmentFiles": [],
          "summary": "cast an object port to an array port",
          "id": "f8ac4574-ffe3-4618-a27f-30d190308e2c",
          "layout": {
              "portsIn": [
                  {
                      "type": 2,
                      "name": "Object"
                  }
              ],
              "portsOut": [
                  {
                      "type": 3,
                      "name": "Array"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1515778637377,
          "exampleProjectId": "",
          "shortName": "ObjectToArray",
          "hasScreenshot": false,
          "namespace": "Ops.Json",
          "shortNameDisplay": "ObjectToArray",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Json.ObjectToArray",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Json.ObjectTrigger",
          "content": "",
          "attachmentFiles": [],
          "summary": "set output object when triggered",
          "id": "e437c074-190f-4adb-8265-3fddea27fe33",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Trigger"
                  },
                  {
                      "type": 2,
                      "name": "Object"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  },
                  {
                      "type": 2,
                      "name": "Result"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1520334722051,
          "exampleProjectId": "",
          "shortName": "ObjectTrigger",
          "hasScreenshot": false,
          "namespace": "Ops.Json",
          "shortNameDisplay": "ObjectTrigger",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Json.ObjectTrigger",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false,
          "usedInProject": true
      },
      {
          "name": "Ops.Json.ObjectValuesAsArray",
          "content": "",
          "attachmentFiles": [],
          "summary": "extract all object values as an array",
          "id": "32ff73f5-7947-42b0-83fa-e079af7beb5c",
          "layout": {
              "portsIn": [
                  {
                      "type": 2,
                      "name": "Object"
                  }
              ],
              "portsOut": [
                  {
                      "type": 3,
                      "name": "Values"
                  },
                  {
                      "type": 0,
                      "name": "Num values",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "kikohs",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1623827076879,
          "exampleProjectId": "bIQ8cI",
          "shortName": "ObjectValuesAsArray",
          "hasScreenshot": true,
          "namespace": "Ops.Json",
          "shortNameDisplay": "ObjectValuesAsArray",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Json.ObjectValuesAsArray",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Json.ParseObject_v2",
          "content": "<p>Basically <code>JSON.parse()</code>, parses a string to an object. Valid objects are enclosed by <code>{}</code> and use double quotation marks for the keys, e.g.:  </p>\n<pre><code>{ &quot;foo&quot;: &quot;bar&quot;, &quot;baz&quot;: 123 }\n</code></pre>\n",
          "attachmentFiles": [],
          "summary": "Parses a string to a JSON object ",
          "id": "2ce8a4d3-37d3-4cdc-abd1-a560fbe841ee",
          "layout": {
              "portsIn": [
                  {
                      "type": 5,
                      "name": "JSON String"
                  }
              ],
              "portsOut": [
                  {
                      "type": 2,
                      "name": "Result"
                  },
                  {
                      "type": 0,
                      "name": "Valid",
                      "subType": "boolean"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "JSON String",
                      "text": "Json string in"
                  },
                  {
                      "name": "Result",
                      "text": "Object out"
                  },
                  {
                      "name": "Valid",
                      "text": "Is true if the key is found"
                  }
              ]
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1567760862485,
          "exampleProjectId": "Z17vG8",
          "shortName": "ParseObject_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Json",
          "shortNameDisplay": "ParseObject",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Json.ParseObject",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Json.ParseObject_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Json.RouteObject",
          "content": "<p>If no object is plugged into the default object port then the output is null</p>\n",
          "attachmentFiles": [],
          "summary": "Route an object to an output port",
          "id": "bc969951-32b5-4226-9944-80a719a65497",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "index",
                      "subType": "integer"
                  },
                  {
                      "type": 2,
                      "name": "Object in"
                  },
                  {
                      "type": 2,
                      "name": "default object"
                  }
              ],
              "portsOut": [
                  {
                      "type": 2,
                      "name": "Index 0 Object"
                  },
                  {
                      "type": 2,
                      "name": "Index 1 Object"
                  },
                  {
                      "type": 2,
                      "name": "Index 2 Object"
                  },
                  {
                      "type": 2,
                      "name": "Index 3 Object"
                  },
                  {
                      "type": 2,
                      "name": "Index 4 Object"
                  },
                  {
                      "type": 2,
                      "name": "Index 5 Object"
                  },
                  {
                      "type": 2,
                      "name": "Index 6 Object"
                  },
                  {
                      "type": 2,
                      "name": "Index 7 Object"
                  },
                  {
                      "type": 2,
                      "name": "Index 8 Object"
                  },
                  {
                      "type": 2,
                      "name": "Index 9 Object"
                  }
              ]
          },
          "authorName": "andro",
          "docs": {
              "ports": [
                  {
                      "name": "index",
                      "text": "Port to route the input to"
                  },
                  {
                      "name": "Object in",
                      "text": "Object that is sent to output port"
                  },
                  {
                      "name": "default object",
                      "text": "Object to send out of all other ports"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1587986662115,
          "exampleProjectId": "-xrxX8",
          "shortName": "RouteObject",
          "hasScreenshot": true,
          "namespace": "Ops.Json",
          "shortNameDisplay": "RouteObject",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Json.RouteObject",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Json.SaveJsonFile",
          "content": "",
          "attachmentFiles": [],
          "summary": "save/download an object as json file",
          "id": "04596a28-9563-4f42-8756-2d2a831baa60",
          "layout": {
              "portsIn": [
                  {
                      "type": "1",
                      "name": "download"
                  },
                  {
                      "type": "5",
                      "name": "Filename"
                  },
                  {
                      "type": "2",
                      "name": "Object"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1520424090381,
          "exampleProjectId": "J0c008",
          "shortName": "SaveJsonFile",
          "hasScreenshot": true,
          "namespace": "Ops.Json",
          "shortNameDisplay": "SaveJsonFile",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Json.SaveJsonFile",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Json.SequenceObjects",
          "content": "",
          "attachmentFiles": [],
          "summary": "control order and flow of objects",
          "id": "2ce0a537-cd45-4199-93f7-02a9379e00f2",
          "layout": {
              "portsIn": [
                  {
                      "type": "2",
                      "name": "Number 0"
                  },
                  {
                      "type": "2",
                      "name": "Number 1"
                  },
                  {
                      "type": "2",
                      "name": "Number 2"
                  },
                  {
                      "type": "2",
                      "name": "Number 3"
                  },
                  {
                      "type": "2",
                      "name": "Number 4"
                  },
                  {
                      "type": "2",
                      "name": "Number 5"
                  },
                  {
                      "type": "2",
                      "name": "Number 6"
                  },
                  {
                      "type": "2",
                      "name": "Number 7"
                  },
                  {
                      "type": "2",
                      "name": "Number 8"
                  },
                  {
                      "type": "2",
                      "name": "Number 9"
                  },
                  {
                      "type": "2",
                      "name": "Number 10"
                  },
                  {
                      "type": "2",
                      "name": "Number 11"
                  },
                  {
                      "type": "2",
                      "name": "Number 12"
                  },
                  {
                      "type": "2",
                      "name": "Number 13"
                  },
                  {
                      "type": "2",
                      "name": "Number 14"
                  },
                  {
                      "type": "2",
                      "name": "Number 15"
                  }
              ],
              "portsOut": [
                  {
                      "type": "2",
                      "name": "Output 0"
                  },
                  {
                      "type": "2",
                      "name": "Output 1"
                  },
                  {
                      "type": "2",
                      "name": "Output 2"
                  },
                  {
                      "type": "2",
                      "name": "Output 3"
                  },
                  {
                      "type": "2",
                      "name": "Output 4"
                  },
                  {
                      "type": "2",
                      "name": "Output 5"
                  },
                  {
                      "type": "2",
                      "name": "Output 6"
                  },
                  {
                      "type": "2",
                      "name": "Output 7"
                  },
                  {
                      "type": "2",
                      "name": "Output 8"
                  },
                  {
                      "type": "2",
                      "name": "Output 9"
                  },
                  {
                      "type": "2",
                      "name": "Output 10"
                  },
                  {
                      "type": "2",
                      "name": "Output 11"
                  },
                  {
                      "type": "2",
                      "name": "Output 12"
                  },
                  {
                      "type": "2",
                      "name": "Output 13"
                  },
                  {
                      "type": "2",
                      "name": "Output 14"
                  },
                  {
                      "type": "2",
                      "name": "Output 15"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1595152299862,
          "exampleProjectId": "",
          "shortName": "SequenceObjects",
          "hasScreenshot": false,
          "namespace": "Ops.Json",
          "shortNameDisplay": "SequenceObjects",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Json.SequenceObjects",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Json.SwitchObject",
          "content": "",
          "attachmentFiles": [],
          "summary": "Allows switching between objects",
          "id": "345d535e-267d-49fb-98c0-c8a8f9424160",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "Object Index",
                      "subType": "integer"
                  },
                  {
                      "type": 2,
                      "name": "object port 0"
                  },
                  {
                      "type": 2,
                      "name": "object port 1"
                  },
                  {
                      "type": 2,
                      "name": "object port 2"
                  },
                  {
                      "type": 2,
                      "name": "object port 3"
                  },
                  {
                      "type": 2,
                      "name": "object port 4"
                  },
                  {
                      "type": 2,
                      "name": "object port 5"
                  },
                  {
                      "type": 2,
                      "name": "object port 6"
                  },
                  {
                      "type": 2,
                      "name": "object port 7"
                  }
              ],
              "portsOut": [
                  {
                      "type": 2,
                      "name": "object out"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "Object Index",
                      "text": "Index to look up object from ports"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [
              "TdHgjqOLpnM"
          ],
          "created": 1541226181893,
          "exampleProjectId": "X55cRo",
          "shortName": "SwitchObject",
          "hasScreenshot": true,
          "namespace": "Ops.Json",
          "shortNameDisplay": "SwitchObject",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Json.SwitchObject",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Json.SwitchObjectMultiPort",
          "content": "",
          "attachmentFiles": [],
          "summary": "Switch between multiple object inputs",
          "id": "a69533a0-86ed-4c36-b3c1-ff22152acce8",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "Index",
                      "subType": "integer"
                  },
                  {
                      "type": 2,
                      "name": "Objects_0",
                      "group": "Objects"
                  },
                  {
                      "type": 2,
                      "name": "Objects_1",
                      "uititle": "add port",
                      "group": "Objects"
                  }
              ],
              "portsOut": [
                  {
                      "type": 2,
                      "name": "Object"
                  },
                  {
                      "type": 0,
                      "name": "Num Values",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1716885207101,
          "exampleProjectId": "PI2xsh",
          "shortName": "SwitchObjectMultiPort",
          "hasScreenshot": true,
          "namespace": "Ops.Json",
          "shortNameDisplay": "SwitchObjectMultiPort",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Json.SwitchObjectMultiPort",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Json.TriggerObjectSetNumber",
          "content": "",
          "attachmentFiles": [],
          "summary": "set a number value of an object using trigger",
          "id": "ecc96e87-c51f-49bf-ad90-25f283c73e87",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Trigger"
                  },
                  {
                      "type": 2,
                      "name": "Object"
                  },
                  {
                      "type": 5,
                      "name": "Key"
                  },
                  {
                      "type": 0,
                      "name": "Number",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  },
                  {
                      "type": 2,
                      "name": "Result"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1711464202670,
          "exampleProjectId": "",
          "shortName": "TriggerObjectSetNumber",
          "hasScreenshot": false,
          "namespace": "Ops.Json",
          "shortNameDisplay": "TriggerObjectSetNumber",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Json.TriggerObjectSetNumber",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Json.TriggerObjectSetString",
          "content": "",
          "attachmentFiles": [],
          "summary": "set a string value of an object using trigger",
          "id": "35c75443-8587-4bae-9f87-34b2bcd96441",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Trigger"
                  },
                  {
                      "type": 2,
                      "name": "Object"
                  },
                  {
                      "type": 5,
                      "name": "Key"
                  },
                  {
                      "type": 5,
                      "name": "String"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  },
                  {
                      "type": 2,
                      "name": "Result"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1711464434636,
          "exampleProjectId": "",
          "shortName": "TriggerObjectSetString",
          "hasScreenshot": false,
          "namespace": "Ops.Json",
          "shortNameDisplay": "TriggerObjectSetString",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Json.TriggerObjectSetString",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Math.Abs",
          "content": "<p>Converts negative numbers to positives, e.g. <code>-3</code> —&gt; <code>3</code>.</p>\n",
          "attachmentFiles": [],
          "summary": "Returns the absolute, positive value",
          "id": "6b5af21d-065f-44d2-9442-8b7a254753f6",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "number",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "result",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "number",
                      "text": "The number you want to make positive."
                  },
                  {
                      "name": "result",
                      "text": "The absolute value of `Number` (always positive)"
                  }
              ]
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1540919817048,
          "exampleProjectId": "vtPZ7i",
          "shortName": "Abs",
          "hasScreenshot": true,
          "namespace": "Ops.Math",
          "shortNameDisplay": "Abs",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Math.Abs",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false,
          "namespaceTitle": "Ops.Math",
          "namespaceSummary": ""
      },
      {
          "name": "Ops.Math.Accumulator",
          "content": "<p>Handy when used with devices like gamepads or counters</p>\n",
          "attachmentFiles": [],
          "summary": "Add to and multiply a number, set to current value",
          "id": "460574ca-dca2-4283-8c37-57a8c446a51f",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Trigger in"
                  },
                  {
                      "type": 0,
                      "name": "Add to number",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Multiplier to add number",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Default Value",
                      "subType": "number"
                  },
                  {
                      "type": 1,
                      "name": "Set Default Value"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "Current value",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "Trigger in",
                      "text": "Trigger the op"
                  },
                  {
                      "name": "Add to number",
                      "text": "this number will be added to the current number. Accepts positive and negative values"
                  },
                  {
                      "name": "Multiplier to add number",
                      "text": "Multiplies \"add to number\" by this amount"
                  },
                  {
                      "name": "Default Value",
                      "text": "When \"set default value\" is triggered this sets the current number"
                  },
                  {
                      "name": "Set Default Value",
                      "text": "Trigger this to make the current number the \"default value\""
                  },
                  {
                      "name": "Current value",
                      "text": "The current number"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1547736315988,
          "exampleProjectId": "Ejzvsx",
          "shortName": "Accumulator",
          "hasScreenshot": true,
          "namespace": "Ops.Math",
          "shortNameDisplay": "Accumulator",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Math.Accumulator",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Math.AddUp",
          "content": "",
          "attachmentFiles": [],
          "summary": "add up numbers",
          "id": "f1c76976-4c8f-43a5-a9c7-6e4c7d21c749",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "Number",
                      "subType": "number"
                  },
                  {
                      "type": 1,
                      "name": "Add"
                  },
                  {
                      "type": 1,
                      "name": "Reset"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "Result",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1511652890319,
          "exampleProjectId": "cWh78i",
          "shortName": "AddUp",
          "hasScreenshot": true,
          "namespace": "Ops.Math",
          "shortNameDisplay": "AddUp",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Math.AddUp",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Math.AngleBetweenPoints",
          "content": "",
          "attachmentFiles": [],
          "summary": "outputs the angle between two points (degree)",
          "id": "03e20aba-a22a-40de-9287-a32fc495a643",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "Point 1 X",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Point 1 Y",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Point 2 X",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Point 2 Y",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "Angle",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1527697177118,
          "exampleProjectId": "aMsTGc",
          "shortName": "AngleBetweenPoints",
          "hasScreenshot": true,
          "namespace": "Ops.Math",
          "shortNameDisplay": "AngleBetweenPoints",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Math.AngleBetweenPoints",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Math.Array3MultiplyMatrix",
          "content": "",
          "attachmentFiles": [],
          "summary": "multiply every XYZ coordinate with a matrix",
          "id": "a83aca4c-48ab-41ad-9943-3f4d03777ae8",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Update"
                  },
                  {
                      "type": 3,
                      "name": "Array"
                  },
                  {
                      "type": 3,
                      "name": "Matrix"
                  }
              ],
              "portsOut": [
                  {
                      "type": 3,
                      "name": "Result"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1517319361414,
          "exampleProjectId": "",
          "shortName": "Array3MultiplyMatrix",
          "hasScreenshot": false,
          "namespace": "Ops.Math",
          "shortNameDisplay": "Array3MultiplyMatrix",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Math.Array3MultiplyMatrix",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Math.Array3To2dProjection",
          "content": "<p>project 3d coordinates to a 2d space </p>\n",
          "attachmentFiles": [],
          "summary": "calculate 2d positions of an array3x",
          "id": "8ac0bd90-ba6f-40f7-8429-21bff899cb14",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Exec"
                  },
                  {
                      "type": 3,
                      "name": "Array3x"
                  },
                  {
                      "type": 0,
                      "name": "fov",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "w",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "h",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Pos X",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Pos Y",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "mul",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  },
                  {
                      "type": 3,
                      "name": "Array2x"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1519813779726,
          "exampleProjectId": "",
          "shortName": "Array3To2dProjection",
          "hasScreenshot": false,
          "namespace": "Ops.Math",
          "shortNameDisplay": "Array3To2dProjection",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Math.Array3To2dProjection",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Math.Atan2",
          "content": "",
          "attachmentFiles": [],
          "summary": "Calculates the angle from a specified point to the coordinate origin.",
          "id": "93ebaebf-0ebf-4aae-b0d8-2996ae44f1ed",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "X",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Y",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Phase",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Frequency",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "Result",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "action",
          "docs": {
              "ports": [
                  {
                      "name": "Result",
                      "text": "Output as a float in the range from PI to -PI. (radians)"
                  }
              ]
          },
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1527699223211,
          "exampleProjectId": "",
          "shortName": "Atan2",
          "hasScreenshot": false,
          "namespace": "Ops.Math",
          "shortNameDisplay": "Atan2",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Math.Atan2",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Math.Average",
          "content": "",
          "attachmentFiles": [],
          "summary": "average of last two values",
          "id": "12a93cd3-348b-460a-aa02-f66690062322",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "number",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Influence",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "result",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1519023942732,
          "exampleProjectId": "",
          "shortName": "Average",
          "hasScreenshot": false,
          "namespace": "Ops.Math",
          "shortNameDisplay": "Average",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Math.Average",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Math.ButterflyCurve",
          "content": "<p>A curve shaped like a butterfly.\n<a href=\"https://en.wikipedia.org/wiki/Butterfly_curve_(transcendental)\">wikipedia</a></p>\n",
          "attachmentFiles": [],
          "summary": "generate coordinates of a butterfly curve",
          "id": "d9023bba-8122-4eed-8d61-32461cad8aba",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "Value",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "X",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Y",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1519024012236,
          "exampleProjectId": "",
          "shortName": "ButterflyCurve",
          "hasScreenshot": false,
          "namespace": "Ops.Math",
          "shortNameDisplay": "ButterflyCurve",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Math.ButterflyCurve",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Math.Ceil",
          "content": "",
          "attachmentFiles": [],
          "summary": "Returns the smallest integer greater than or equal to a given number",
          "id": "15ba7aa9-b1c3-4b20-b6bf-b52a3ba8c8c5",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "Number",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "Result",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "Number",
                      "text": "The number to process"
                  },
                  {
                      "name": "Result",
                      "text": "Ceiled number"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1540919753368,
          "exampleProjectId": "nPvVW2",
          "shortName": "Ceil",
          "hasScreenshot": true,
          "namespace": "Ops.Math",
          "shortNameDisplay": "Ceil",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Math.Ceil",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false,
          "usedInProject": true
      },
      {
          "name": "Ops.Math.CircleCoordinates",
          "content": "",
          "attachmentFiles": [],
          "summary": "x and y coordinates of a circle",
          "id": "76fdea4d-1653-46d6-80f3-af34018f043d",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "Position",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Radius",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "X",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Y",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1512035138842,
          "exampleProjectId": "uAkdL5",
          "shortName": "CircleCoordinates",
          "hasScreenshot": true,
          "namespace": "Ops.Math",
          "shortNameDisplay": "CircleCoordinates",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Math.CircleCoordinates",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Math.Clamp",
          "content": "",
          "attachmentFiles": [],
          "summary": "Makes sure a value is within range  cuts off the rest",
          "id": "cda1a98e-5e16-40bd-9b18-a67e9eaad5a1",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "val",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "min",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "max",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "ignore outside values",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "result",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "val",
                      "text": "The number you want to make sure is in range [`Minimum`, `Maximum`]"
                  },
                  {
                      "name": "min",
                      "text": "The minimum the `Result` will be"
                  },
                  {
                      "name": "max",
                      "text": "The maximum the `Result` will be"
                  },
                  {
                      "name": "result",
                      "text": "The clamped value of `Val`"
                  }
              ]
          },
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1541052219739,
          "exampleProjectId": "",
          "shortName": "Clamp",
          "hasScreenshot": false,
          "namespace": "Ops.Math",
          "shortNameDisplay": "Clamp",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Math.Clamp",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Math.Compare.Between",
          "content": "<p>Checks if <code>Value</code> is in the range [<code>Range 1</code>, <code>Range 2</code>] and returns true then. <code>Range 1</code> does not have to be smaller than <code>Range 2</code>.  Returns <code>false</code> if <code>Value</code> is equal to <code>Range 1</code> or <code>Range 2</code> or if it is completely out of range.</p>\n",
          "attachmentFiles": [],
          "summary": "result is true if value is between number1 and number2",
          "id": "d629959e-838d-4541-b12f-15e2d6ff5131",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "value",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "number1",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "number2",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "result",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "value",
                      "text": "The number you want to check"
                  },
                  {
                      "name": "result",
                      "text": "`true` if `Value` is in range, `false` otherwise"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1519023735805,
          "exampleProjectId": "pixllg",
          "shortName": "Between",
          "hasScreenshot": true,
          "namespace": "Ops.Math.Compare",
          "shortNameDisplay": "Between",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Math.Compare.Between",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false,
          "namespaceTitle": "Ops.Math.Compare",
          "namespaceSummary": ""
      },
      {
          "name": "Ops.Math.Compare.BetweenEquals",
          "content": "<p>Checks if <code>Value</code> is in the range [<code>Range 1</code>, <code>Range 2</code>] and returns true then. <code>Range 1</code> does not have to be smaller than <code>Range 2</code>.<br>Also returns <code>true</code>if <code>Value</code> is equal to <code>Range 1</code> or <code>Range 2</code>.</p>\n",
          "attachmentFiles": [],
          "summary": "result is true if value is between or equal number1 and number2 ",
          "id": "e2d6d6c4-84c7-42d7-a1b2-e9c5d4c5c13e",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "Value",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Range 1",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Range 2",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "Result",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "Value",
                      "text": "The number you want to check"
                  },
                  {
                      "name": "Range 2",
                      "text": "`true` if `Value` is in range, `false` otherwise"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1519023820432,
          "exampleProjectId": "pixllg",
          "shortName": "BetweenEquals",
          "hasScreenshot": true,
          "namespace": "Ops.Math.Compare",
          "shortNameDisplay": "BetweenEquals",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Math.Compare.BetweenEquals",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Math.Compare.CompareNumbers",
          "content": "<p>The following modes are available\nIf any of the following evaluates to true then the output is 1 else 0</p>\n<pre><code>&gt;  Greater than\n&lt;   Less than\n&gt;=  Greater Than or equal\n&lt;=  Less than or equal \n==   Equals\n!=    Not equal to \n&gt;&lt;    Between\n&gt;=&lt;  Between or equals\n</code></pre>\n",
          "attachmentFiles": [],
          "summary": "Performs logical comparisons on numbers (compare, operators)",
          "id": "169137db-9853-4384-ac5b-d10a0bbda5c2",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "Value in",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Comparison mode index",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Condition value",
                      "uititle": "Condition value",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Max",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "Result",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "andro",
          "docs": {
              "ports": [
                  {
                      "name": "Comparison mode index",
                      "text": "Pick a mode with an integer"
                  },
                  {
                      "name": "Comparison mode",
                      "text": "Comparison mode"
                  },
                  {
                      "name": "Value in",
                      "text": "Number in to check"
                  },
                  {
                      "name": "Condition value",
                      "text": "Becomes min when between mode enabled"
                  },
                  {
                      "name": "Max",
                      "text": "Becomes max when between mode enabled"
                  },
                  {
                      "name": "Result",
                      "text": "Outputs 1 for true 0 for false"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1577977290989,
          "exampleProjectId": "54YpN-",
          "shortName": "CompareNumbers",
          "hasScreenshot": true,
          "namespace": "Ops.Math.Compare",
          "shortNameDisplay": "CompareNumbers",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Math.Compare.CompareNumbers",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Math.Compare.Equals",
          "content": "",
          "attachmentFiles": [],
          "summary": "result is true if number1 and number2 are equal",
          "id": "4dd3cc55-eebc-4187-9d4e-2e053a956fab",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "number1",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "number2",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "result",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1540919909532,
          "exampleProjectId": "",
          "shortName": "Equals",
          "hasScreenshot": false,
          "namespace": "Ops.Math.Compare",
          "shortNameDisplay": "Equals",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Math.Compare.Equals",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Math.Compare.GreaterOrEquals",
          "content": "<p>Needs two numbers to work. Outputs a true if number 1 is greater or equal to number 2\nexample. Commonly known as &gt;=\n10 6 &gt;= true\n4 5   &gt;= false\n3 3   &gt;= true</p>\n",
          "attachmentFiles": [],
          "summary": "result is true if number 1 is greater or equals number 2",
          "id": "5f9ce320-1e8d-49cb-9927-337e0b3f4d45",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "number1",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "number2",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "result",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "number1",
                      "text": "1st number to compare to number 2"
                  },
                  {
                      "name": "number2",
                      "text": "2nd number to compare to number 1"
                  },
                  {
                      "name": "result",
                      "text": "True if number 1 is greater or equal to number 2"
                  }
              ]
          },
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1554448375543,
          "exampleProjectId": "",
          "shortName": "GreaterOrEquals",
          "hasScreenshot": false,
          "namespace": "Ops.Math.Compare",
          "shortNameDisplay": "GreaterOrEquals",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Math.Compare.GreaterOrEquals",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Math.Compare.GreaterThan",
          "content": "",
          "attachmentFiles": [],
          "summary": "result is true if number1 is greater than number2",
          "id": "b250d606-f7f8-44d3-b099-c29efff2608a",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "number1",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "number2",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "result",
                      "subType": "boolean"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "number1",
                      "text": "The number you want to check"
                  },
                  {
                      "name": "number2",
                      "text": "The value you want to check against"
                  },
                  {
                      "name": "result",
                      "text": "`true` if `Value` is in greater than `Reference Value`, `false` otherwise"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1540919889895,
          "exampleProjectId": "pixllg",
          "shortName": "GreaterThan",
          "hasScreenshot": true,
          "namespace": "Ops.Math.Compare",
          "shortNameDisplay": "GreaterThan",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Math.Compare.GreaterThan",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Math.Compare.IfBetweenThen",
          "content": "",
          "attachmentFiles": [],
          "summary": "triggers when value is between min and max",
          "id": "c80437f0-f0e1-465c-9cea-8a044aa2feaa",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "exe"
                  },
                  {
                      "type": 0,
                      "name": "number",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "min",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "max",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "then"
                  },
                  {
                      "type": 1,
                      "name": "else"
                  },
                  {
                      "type": 0,
                      "name": "bs between",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1521646716030,
          "exampleProjectId": "",
          "shortName": "IfBetweenThen",
          "hasScreenshot": false,
          "namespace": "Ops.Math.Compare",
          "shortNameDisplay": "IfBetweenThen",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Math.Compare.IfBetweenThen",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Math.Compare.IsEven",
          "content": "",
          "attachmentFiles": [],
          "summary": "Checks if Value is even or not",
          "id": "f462c64a-3e17-4de8-a77d-6735725fc9cc",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "number1",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "result",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "number1",
                      "text": "The number you want to check"
                  },
                  {
                      "name": "result",
                      "text": "`true` if `Number` is even, `false` otherwise."
                  }
              ]
          },
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1511163194086,
          "exampleProjectId": "",
          "shortName": "IsEven",
          "hasScreenshot": false,
          "namespace": "Ops.Math.Compare",
          "shortNameDisplay": "IsEven",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Math.Compare.IsEven",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Math.Compare.LessThan",
          "content": "<p>Checks if <code>Number 1</code> is smaller than <code>Number 2</code> and returns <code>true</code> then, otherwise <code>false</code>.</p>\n",
          "attachmentFiles": [],
          "summary": "Is n1 smaller than n2? (lesser, less)",
          "id": "04fd113f-ade1-43fb-99fa-f8825f8814c0",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "number1",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "number2",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "result",
                      "subType": "boolean"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "number1",
                      "text": "The number you want to check if it is smaller than `Number 2`"
                  },
                  {
                      "name": "number2",
                      "text": "The number you want to check if it is bigger than `Number 1`"
                  },
                  {
                      "name": "result",
                      "text": "Returns `true` if `Number 1` is smaller than `Number 2`, otherwise `false`"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1540919866860,
          "exampleProjectId": "pixllg",
          "shortName": "LessThan",
          "hasScreenshot": true,
          "namespace": "Ops.Math.Compare",
          "shortNameDisplay": "LessThan",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Math.Compare.LessThan",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Math.Cosine",
          "content": "<p>This function expects the values of the angle parameter to be provided in radians.</p>\n",
          "attachmentFiles": [],
          "summary": "Calculates the cosine of an angle.",
          "id": "b51166c4-e0a8-441a-b724-1531effdc52f",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "Value",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Phase",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Frequency",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Amplitude",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "asine",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "Result",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "action",
          "docs": {
              "ports": [
                  {
                      "name": "Value",
                      "text": "Value input in radians"
                  },
                  {
                      "name": "Result",
                      "text": "Output in the range -1 to 1"
                  }
              ]
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1527699215931,
          "exampleProjectId": "RhfUW2",
          "shortName": "Cosine",
          "hasScreenshot": true,
          "namespace": "Ops.Math",
          "shortNameDisplay": "Cosine",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Math.Cosine",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Math.Cross",
          "content": "",
          "attachmentFiles": [],
          "summary": "Computes the cross product of two vec3's ",
          "id": "ad783119-cfbc-41d6-92f9-16c110e8d2a2",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Exec"
                  },
                  {
                      "type": 0,
                      "name": "X1",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Y1",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Z1",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "X2",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Y2",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Z2",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  },
                  {
                      "type": 0,
                      "name": "X",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Y",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Z",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1688653053202,
          "exampleProjectId": "",
          "shortName": "Cross",
          "hasScreenshot": false,
          "namespace": "Ops.Math",
          "shortNameDisplay": "Cross",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Math.Cross",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Math.Crossfade",
          "content": "<p>This handy op allows you to crossfade between 2 numbers. You can set the min and max range.  </p>\n<p>Please note that the range from the crossfade input is always 0 - 1, even if the min and max are set lower or higher.</p>\n",
          "attachmentFiles": [],
          "summary": "crossfade between 2 values",
          "id": "6c8d01a2-dc8c-43c3-a569-c2ab0ba42747",
          "layout": {
              "portsIn": [
                  {
                      "type": "0",
                      "name": "Crossfade",
                      "subType": "number"
                  },
                  {
                      "type": "0",
                      "name": "Out Min",
                      "group": "Range",
                      "subType": "number"
                  },
                  {
                      "type": "0",
                      "name": "Out Max",
                      "group": "Range",
                      "subType": "number"
                  },
                  {
                      "type": "0",
                      "name": "Easing",
                      "group": "Easing",
                      "subType": "string"
                  }
              ],
              "portsOut": [
                  {
                      "type": "0",
                      "name": "A",
                      "subType": "number"
                  },
                  {
                      "type": "0",
                      "name": "B",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "simod",
          "docs": {
              "ports": [
                  {
                      "name": "Crossfade",
                      "text": "crossfade"
                  },
                  {
                      "name": "Out Min",
                      "text": "minimum out value"
                  },
                  {
                      "name": "Out Max",
                      "text": "maximum out value"
                  },
                  {
                      "name": "Easing",
                      "text": "type of easing"
                  },
                  {
                      "name": "A",
                      "text": "A output "
                  },
                  {
                      "name": "B",
                      "text": "B output"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1574855239568,
          "exampleProjectId": "U_a2d-",
          "shortName": "Crossfade",
          "hasScreenshot": true,
          "namespace": "Ops.Math",
          "shortNameDisplay": "Crossfade",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Math.Crossfade",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Math.DegreeToVector",
          "content": "<p>If you e.g. pass in <code>90</code>, <code>x</code> will be <code>-1</code> and <code>y</code> <code>0</code> (so counter-clockwise)</p>\n",
          "attachmentFiles": [],
          "summary": "Calculates a vector (x and y) based on an angle in degrees",
          "id": "56b1618b-4eed-41a8-87a2-57397ffc9029",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "degree",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "x",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "y",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "exe",
                      "text": "Executes the op"
                  },
                  {
                      "name": "degree",
                      "text": "The angle you want to convert (in degrees)"
                  },
                  {
                      "name": "x",
                      "text": "The x-vector in the range `[-1, 1]`"
                  },
                  {
                      "name": "y",
                      "text": "The y-vector in the range `[-1, 1]`"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1558014622113,
          "exampleProjectId": "QXvKog",
          "shortName": "DegreeToVector",
          "hasScreenshot": true,
          "namespace": "Ops.Math",
          "shortNameDisplay": "DegreeToVector",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Math.DegreeToVector",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Math.Degrees",
          "content": "<p>Trigonometric functions in Javascript require their parameters to be specified in radians.</p>\n",
          "attachmentFiles": [],
          "summary": "Converts a radian measurement to its corresponding value in degrees.",
          "id": "53385f87-13eb-4c19-8b04-6632a72e967c",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "Radians",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "Result",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "action",
          "docs": {
              "ports": [
                  {
                      "name": "Result",
                      "text": "Output in Degrees"
                  }
              ]
          },
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1527697029505,
          "exampleProjectId": "",
          "shortName": "Degrees",
          "hasScreenshot": false,
          "namespace": "Ops.Math",
          "shortNameDisplay": "Degrees",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Math.Degrees",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Math.Delta",
          "content": "",
          "attachmentFiles": [],
          "summary": "difference to the last value (previous, store)",
          "id": "0f203337-e13c-47ec-a09f-b309212540b0",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "Value",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Change Always",
                      "subType": "boolean"
                  },
                  {
                      "type": 1,
                      "name": "Reset"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "Delta",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "tim",
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1517650300323,
          "exampleProjectId": "",
          "shortName": "Delta",
          "hasScreenshot": false,
          "namespace": "Ops.Math",
          "shortNameDisplay": "Delta",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Math.Delta",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Math.DeltaSum",
          "content": "",
          "attachmentFiles": [],
          "summary": "add delta values to an clamped absolute value",
          "id": "d9d4b3db-c24b-48da-b798-9e6230d861f7",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "Delta Value",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Default Value",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Multiply",
                      "subType": "number"
                  },
                  {
                      "type": 1,
                      "name": "Reset"
                  },
                  {
                      "type": 0,
                      "name": "Limit",
                      "group": "Limit",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Min",
                      "group": "Limit",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Max",
                      "group": "Limit",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Rubberband",
                      "group": "Limit",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "Absolute Value",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1519312271232,
          "exampleProjectId": "hH8f_6",
          "shortName": "DeltaSum",
          "hasScreenshot": true,
          "namespace": "Ops.Math",
          "shortNameDisplay": "DeltaSum",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Math.DeltaSum",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Math.Difference",
          "content": "<p>result will always be a positive number or zero</p>\n",
          "attachmentFiles": [],
          "summary": "Difference between two numbers",
          "id": "5431b943-18aa-46e4-bd32-a7eee30d4e51",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "Number A",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Number B",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "Result",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1542700519159,
          "exampleProjectId": "",
          "shortName": "Difference",
          "hasScreenshot": false,
          "namespace": "Ops.Math",
          "shortNameDisplay": "Difference",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Math.Difference",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Math.Distance2d",
          "content": "<p>Updates the output (<code>Distance</code>) every time one of the values changes.</p>\n",
          "attachmentFiles": [],
          "summary": "Calculates the Distance between two 2d points",
          "id": "d181cc7c-adbb-467b-842b-e6a854c58bfc",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "x1",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "y1",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "x2",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "y2",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "distance",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "x1",
                      "text": "X-coordinate of the first point"
                  },
                  {
                      "name": "y1",
                      "text": "Y-coordinate of the first point"
                  },
                  {
                      "name": "x2",
                      "text": "X-coordinate of the second point"
                  },
                  {
                      "name": "y2",
                      "text": "Y-coordinate of the second point"
                  },
                  {
                      "name": "distance",
                      "text": "The distance between point 1 and point 2"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1511163204549,
          "exampleProjectId": "7mTKgg",
          "shortName": "Distance2d",
          "hasScreenshot": true,
          "namespace": "Ops.Math",
          "shortNameDisplay": "Distance2d",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Math.Distance2d",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Math.Distance3d_v2",
          "content": "",
          "attachmentFiles": [],
          "summary": "distance between two 3d points, calculated when triggered",
          "id": "6b344add-6c4d-4365-858f-a365e4adb183",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Calc"
                  },
                  {
                      "type": 0,
                      "name": "x1",
                      "group": "Point 1",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "y1",
                      "group": "Point 1",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "z1",
                      "group": "Point 1",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "x2",
                      "group": "Point 2",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "y2",
                      "group": "Point 2",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "z2",
                      "group": "Point 2",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  },
                  {
                      "type": 0,
                      "name": "distance",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1519025139408,
          "exampleProjectId": "",
          "shortName": "Distance3d_v2",
          "hasScreenshot": false,
          "namespace": "Ops.Math",
          "shortNameDisplay": "Distance3d",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Math.Distance3d",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Math.Distance3d_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Math.Divide",
          "content": "",
          "attachmentFiles": [],
          "summary": "Divides a number by another",
          "id": "86fcfd8c-038d-4b91-9820-a08114f6b7eb",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "number1",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "number2",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "result",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "number1",
                      "text": "`a` in `a / b`"
                  },
                  {
                      "name": "number2",
                      "text": "`b` in `a / b`"
                  },
                  {
                      "name": "result",
                      "text": "Result of the division"
                  }
              ]
          },
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1511163171260,
          "exampleProjectId": "",
          "shortName": "Divide",
          "hasScreenshot": false,
          "namespace": "Ops.Math",
          "shortNameDisplay": "Divide",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Math.Divide",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Math.Ease",
          "content": "<p>Check this page for a visual guide to the different easing options.\n<a href=\"https://easings.net/\">https://easings.net/</a></p>\n",
          "attachmentFiles": [],
          "summary": "map a value to an easing curve",
          "id": "8f6e4a08-33e6-408f-ac4a-198bd03b417b",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "Value",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Min",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Max",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Easing index",
                      "subType": "integer"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "Result",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "Value",
                      "text": "value to ease"
                  },
                  {
                      "name": "Min",
                      "text": "minimum value"
                  },
                  {
                      "name": "Max",
                      "text": "maximum value"
                  },
                  {
                      "name": "Easing",
                      "text": "Pick the easing mode"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1519295219006,
          "exampleProjectId": "rLxYY6",
          "shortName": "Ease",
          "hasScreenshot": true,
          "namespace": "Ops.Math",
          "shortNameDisplay": "Ease",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Math.Ease",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Math.Exp",
          "content": "<p>See <a href=\"https://en.wikipedia.org/wiki/E_(mathematical_constant)\">Euler’s number</a> (e^1, e^2, …)</p>\n",
          "attachmentFiles": [],
          "summary": "Calculates the power of Euler’s number",
          "id": "612727c2-b2e5-446c-99bb-7e30132f2ff6",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "number",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "result",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "number",
                      "text": "Power of e, (e^x)"
                  },
                  {
                      "name": "result",
                      "text": "The result in the calculation `e^Number`"
                  }
              ]
          },
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1518717928149,
          "exampleProjectId": "",
          "shortName": "Exp",
          "hasScreenshot": false,
          "namespace": "Ops.Math",
          "shortNameDisplay": "Exp",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Math.Exp",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false,
          "usedInProject": true
      },
      {
          "name": "Ops.Math.FlipSign",
          "content": "",
          "attachmentFiles": [],
          "summary": "positive numbers become negative and vice versa (negate)",
          "id": "f5c858a2-2654-4108-86fe-319efa70ecec",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "Value",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "Result",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1547412698647,
          "exampleProjectId": "",
          "shortName": "FlipSign",
          "hasScreenshot": false,
          "namespace": "Ops.Math",
          "shortNameDisplay": "FlipSign",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Math.FlipSign",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Math.Floor",
          "content": "",
          "attachmentFiles": [],
          "summary": "returns the largest integer less than or equal to a given number",
          "id": "0c77617c-b688-4b55-addf-2cbcaabf98af",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "Number",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "Result",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "Result",
                      "text": "floored number"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1540980206914,
          "exampleProjectId": "nPvVW2",
          "shortName": "Floor",
          "hasScreenshot": true,
          "namespace": "Ops.Math",
          "shortNameDisplay": "Floor",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Math.Floor",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Math.Fract",
          "content": "<p>E.g. value: <code>1.5</code>, result: <code>0.5</code></p>\n",
          "attachmentFiles": [],
          "summary": "returns the fractional part of a number",
          "id": "12573ba7-866d-40c4-9ddd-14d9331ffe6f",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "Value",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "Result",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1542698065793,
          "exampleProjectId": "VWb2t7",
          "shortName": "Fract",
          "hasScreenshot": true,
          "namespace": "Ops.Math",
          "shortNameDisplay": "Fract",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Math.Fract",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Math.GaussianRandomArray",
          "content": "",
          "attachmentFiles": [],
          "summary": "random numbers fitting a Gaussian, or normal, distribution",
          "id": "1a8c3535-6fce-4cba-8601-ddb7a5dd7656",
          "layout": {
              "portsIn": [
                  {
                      "type": "0",
                      "name": "Num",
                      "subType": "integer"
                  },
                  {
                      "type": "0",
                      "name": "Deviation",
                      "subType": "number"
                  },
                  {
                      "type": "0",
                      "name": "Random Seed",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": "3",
                      "name": "Array"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1504997489272,
          "exampleProjectId": "i14QNS",
          "shortName": "GaussianRandomArray",
          "hasScreenshot": true,
          "namespace": "Ops.Math",
          "shortNameDisplay": "GaussianRandomArray",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Math.GaussianRandomArray",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Math.Incrementor",
          "content": "<p>Note updating &#39;default&#39; input will immediately reset the Incrementor to the default value. \nIf you want the incrementor to only change to default state on reset you can achieve this with a TriggerNumber op gating the &#39;default&#39; input. </p>\n",
          "attachmentFiles": [],
          "summary": "increment a number by triggering",
          "id": "45cc0011-ada8-4423-8f5b-39a3810b8389",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Increment"
                  },
                  {
                      "type": 1,
                      "name": "Decrement"
                  },
                  {
                      "type": 0,
                      "name": "Limit",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Length",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Mode index",
                      "values": [
                          "Rewind",
                          "Stop at Max"
                      ],
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Default",
                      "subType": "integer"
                  },
                  {
                      "type": 1,
                      "name": "Reset"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Changed"
                  },
                  {
                      "type": 0,
                      "name": "Value",
                      "subType": "number"
                  },
                  {
                      "type": 1,
                      "name": "Restarted"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1516875152747,
          "exampleProjectId": "OdcvGu",
          "shortName": "Incrementor",
          "hasScreenshot": true,
          "namespace": "Ops.Math",
          "shortNameDisplay": "Incrementor",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Math.Incrementor",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Math.IndexFraction",
          "content": "<p>Example:\nValue is 3.25\nat index 1 result is 1\nat index 2 result is 1\nat index 3 result is 0.25\nat index 4 result is 0\nat index 5 result is 0</p>\n",
          "attachmentFiles": [],
          "summary": "return fraction of value by index",
          "id": "924f3516-7d1c-4829-a24d-515bf3e7f43f",
          "layout": {
              "portsIn": [
                  {
                      "type": "0",
                      "name": "Number",
                      "subType": "number"
                  },
                  {
                      "type": "0",
                      "name": "Index",
                      "subType": "integer"
                  }
              ],
              "portsOut": [
                  {
                      "type": "0",
                      "name": "Result",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1566911482757,
          "exampleProjectId": "SV3NPO",
          "shortName": "IndexFraction",
          "hasScreenshot": true,
          "namespace": "Ops.Math",
          "shortNameDisplay": "IndexFraction",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Math.IndexFraction",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false,
          "usedInProject": true
      },
      {
          "name": "Ops.Math.Interpolate",
          "content": "",
          "attachmentFiles": [],
          "summary": "Interpolate between values, lerp, linear interpolate",
          "id": "d126e2c8-221e-428f-8ff4-8b8c5f6b8905",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "Value 1",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Value 2",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Percentage",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "Result",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1558014630016,
          "exampleProjectId": "",
          "shortName": "Interpolate",
          "hasScreenshot": false,
          "namespace": "Ops.Math",
          "shortNameDisplay": "Interpolate",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Math.Interpolate",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Math.IsNumberRising",
          "content": "",
          "attachmentFiles": [],
          "summary": "detect if a number rising or falling ",
          "id": "1598fbdf-eab9-41a1-98de-794795255359",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "Number",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "Rising",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1620741333163,
          "exampleProjectId": "UN11cI",
          "shortName": "IsNumberRising",
          "hasScreenshot": true,
          "namespace": "Ops.Math",
          "shortNameDisplay": "IsNumberRising",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Math.IsNumberRising",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Math.Log",
          "content": "",
          "attachmentFiles": [],
          "summary": "Calculates the logarithm of Number",
          "id": "7440b1ca-71d9-42a3-a927-d7b45b8857f9",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "number",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "result",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "number",
                      "text": "The value you want to know the logarithm of"
                  },
                  {
                      "name": "result",
                      "text": "Logarithm of `Number`"
                  }
              ]
          },
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1541050999644,
          "exampleProjectId": "",
          "shortName": "Log",
          "hasScreenshot": false,
          "namespace": "Ops.Math",
          "shortNameDisplay": "Log",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Math.Log",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false,
          "usedInProject": true
      },
      {
          "name": "Ops.Math.MapGeoCoordsSpherical",
          "content": "",
          "attachmentFiles": [],
          "summary": "map geo locations (latitude - longitude) to spherical coordinates",
          "id": "e4c6786b-abf6-4762-b8f9-ed89dd532e23",
          "layout": {
              "portsIn": [
                  {
                      "type": 3,
                      "name": "Coordinates"
                  },
                  {
                      "type": 0,
                      "name": "Radius",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 3,
                      "name": "Result"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1567762648383,
          "exampleProjectId": "BvXW5Q",
          "shortName": "MapGeoCoordsSpherical",
          "hasScreenshot": true,
          "namespace": "Ops.Math",
          "shortNameDisplay": "MapGeoCoordsSpherical",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Math.MapGeoCoordsSpherical",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Math.MapRange",
          "content": "<p>changes a number&#39;s relative value by mapping within one range to the equivalent position in another range. \nFor example, given the range of 0 to 100, 50 would be halfway between. so if it were mapped to a range of 0 to 50, it would be 25 (because 25 is exactly half that range).</p>\n",
          "attachmentFiles": [],
          "summary": "Maps a value from one range into another.",
          "id": "2617b407-60a0-4ff6-b4a7-18136cfa7817",
          "layout": {
              "portsIn": [
                  {
                      "type": "0",
                      "name": "value",
                      "subType": "number"
                  },
                  {
                      "type": "0",
                      "name": "old min",
                      "group": "Input Range",
                      "subType": "number"
                  },
                  {
                      "type": "0",
                      "name": "old max",
                      "group": "Input Range",
                      "subType": "number"
                  },
                  {
                      "type": "0",
                      "name": "new min",
                      "group": "Output Range",
                      "subType": "number"
                  },
                  {
                      "type": "0",
                      "name": "new max",
                      "group": "Output Range",
                      "subType": "number"
                  },
                  {
                      "type": "0",
                      "name": "Easing index",
                      "subType": "integer"
                  },
                  {
                      "type": "0",
                      "name": "Clamp",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": "0",
                      "name": "result",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "value",
                      "text": "The value you want to map"
                  },
                  {
                      "name": "old min",
                      "text": "The minimum of the old range"
                  },
                  {
                      "name": "old max",
                      "text": "The maximum of the old range"
                  },
                  {
                      "name": "new min",
                      "text": "The minimum of the new range"
                  },
                  {
                      "name": "new max",
                      "text": "The maximum of the new range"
                  },
                  {
                      "name": "result",
                      "text": "Result of the mapping"
                  }
              ]
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [
              "5VmIC1xA4EU"
          ],
          "created": 1511163241689,
          "exampleProjectId": "YFIVGc",
          "shortName": "MapRange",
          "hasScreenshot": true,
          "namespace": "Ops.Math",
          "shortNameDisplay": "MapRange",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Math.MapRange",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Math.Math",
          "content": "<p>Allows the following mathematical modes to be applied to 2 numbers.\n<code>+ - * / %</code> min max</p>\n",
          "attachmentFiles": [],
          "summary": "Allows different mathematical operations to be applied to two numbers",
          "id": "e9fdcaca-a007-4563-8a4d-e94e08506e0f",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "number 0",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "number 1",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "math mode index",
                      "subType": "integer"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "result",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "andro",
          "docs": {
              "ports": [
                  {
                      "name": "number 0",
                      "text": "Number 0 in"
                  },
                  {
                      "name": "number 1",
                      "text": "Number 1 in"
                  },
                  {
                      "name": "math mode",
                      "text": "Select a math mode"
                  },
                  {
                      "name": "result",
                      "text": "Result out"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1561047442391,
          "exampleProjectId": "mTqdVJ",
          "shortName": "Math",
          "hasScreenshot": true,
          "namespace": "Ops.Math",
          "shortNameDisplay": "Math",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Math.Math",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Math.MathExpression",
          "content": "<p>With this op, you can write your own mathematical expression to be calculated. You can use up to 4 numbers (a, b, c, d) in this equation. Just type in the lower-case letter of the port you want to use in the equation input.</p>\n<p>Here are a few example equations to get you started:</p>\n<p>(a+b)<em>c-d\nsin(a+b)-cos(c-d)\na</em>log(b + c * 2) / pow(b, 4)</p>\n<p>For a reference of mathematical functions availible, please refer to the Javascript Math object: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math</a></p>\n",
          "attachmentFiles": [],
          "summary": "calculates a user defined mathematical expression",
          "id": "d2343a1e-64ea-45b2-99ed-46e167bbdcd3",
          "layout": {
              "portsIn": [
                  {
                      "type": "0",
                      "name": "A",
                      "group": "Parameters",
                      "subType": "number"
                  },
                  {
                      "type": "0",
                      "name": "B",
                      "group": "Parameters",
                      "subType": "number"
                  },
                  {
                      "type": "0",
                      "name": "C",
                      "group": "Parameters",
                      "subType": "number"
                  },
                  {
                      "type": "0",
                      "name": "D",
                      "group": "Parameters",
                      "subType": "number"
                  },
                  {
                      "type": "5",
                      "name": "Expression",
                      "group": "Expression"
                  }
              ],
              "portsOut": [
                  {
                      "type": "0",
                      "name": "Result",
                      "subType": "number"
                  },
                  {
                      "type": "0",
                      "name": "Expression Valid",
                      "subType": "boolean"
                  }
              ]
          },
          "authorName": "simod",
          "docs": {
              "ports": [
                  {
                      "name": "A",
                      "text": "a input, default value if not connected: 0"
                  },
                  {
                      "name": "B",
                      "text": "b input, default value if not connected: 0"
                  },
                  {
                      "name": "C",
                      "text": "c input, default value if not connected: 0"
                  },
                  {
                      "name": "D",
                      "text": "d input, default value if not connected: 0"
                  },
                  {
                      "name": "Expression",
                      "text": "mathematical expression to be calculated: the variables a, b, c, d can be used here"
                  },
                  {
                      "name": "Result",
                      "text": "result of the equation"
                  },
                  {
                      "name": "Expression Valid",
                      "text": "returns true if the expression is valid, false otherwise"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1595496215377,
          "exampleProjectId": "s5-tve",
          "shortName": "MathExpression",
          "hasScreenshot": true,
          "namespace": "Ops.Math",
          "shortNameDisplay": "MathExpression",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Math.MathExpression",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Math.Max",
          "content": "",
          "attachmentFiles": [],
          "summary": "Sets the output to the input value which is higher",
          "id": "07f0be49-c226-4029-8039-3b620145dc2a",
          "layout": {
              "portsIn": [
                  {
                      "type": "0",
                      "name": "value",
                      "subType": "number"
                  },
                  {
                      "type": "0",
                      "name": "Maximum",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": "0",
                      "name": "result",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "value",
                      "text": "Value 1"
                  },
                  {
                      "name": "Maximum",
                      "text": "Value 2"
                  },
                  {
                      "name": "result",
                      "text": "The higher value of the two input values"
                  }
              ]
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1542026227242,
          "exampleProjectId": "hV3X7i",
          "shortName": "Max",
          "hasScreenshot": true,
          "namespace": "Ops.Math",
          "shortNameDisplay": "Max",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Math.Max",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Math.MaxSinceReset",
          "content": "",
          "attachmentFiles": [],
          "summary": "Outputs the maximum value since reset has been triggered",
          "id": "d3fdb4e1-199d-487a-a719-1315aa49fcfb",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "Value",
                      "subType": "number"
                  },
                  {
                      "type": 1,
                      "name": "Reset"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "Maximum",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "tim",
          "docs": {
              "ports": []
          },
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1519300845608,
          "exampleProjectId": "",
          "shortName": "MaxSinceReset",
          "hasScreenshot": false,
          "namespace": "Ops.Math",
          "shortNameDisplay": "MaxSinceReset",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Math.MaxSinceReset",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Math.MercatorCoord",
          "content": "",
          "attachmentFiles": [],
          "summary": "project mercator coordinates",
          "id": "d95c5ba8-ed6e-4147-bf5f-8e44be3ef6cf",
          "layout": {
              "portsIn": [
                  {
                      "type": "0",
                      "name": "Latitude"
                  },
                  {
                      "type": "0",
                      "name": "Longitude"
                  },
                  {
                      "type": "0",
                      "name": "MapWidth"
                  },
                  {
                      "type": "0",
                      "name": "MapHeight"
                  }
              ],
              "portsOut": [
                  {
                      "type": "0",
                      "name": "X"
                  },
                  {
                      "type": "0",
                      "name": "Y"
                  }
              ]
          },
          "authorName": "pandur",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1516871184749,
          "exampleProjectId": "oi9AI4",
          "shortName": "MercatorCoord",
          "hasScreenshot": true,
          "namespace": "Ops.Math",
          "shortNameDisplay": "MercatorCoord",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Math.MercatorCoord",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false,
          "usedInProject": true
      },
      {
          "name": "Ops.Math.MercatorCoordsArray",
          "content": "<p>The globe is unrolled into a flat plane.\nIf you would be looking at country like Germany then a map width of 100 would suffice due to the large size.\nLooking at a city like Berlin which is much smaller would require a map width of 1800 to make it visible on the screen.</p>\n",
          "attachmentFiles": [],
          "summary": "Mercator map and center an array of latitudes and longitudes to a local coordinate system",
          "id": "96e77c88-58b8-4948-bd61-c95d604a2607",
          "layout": {
              "portsIn": [
                  {
                      "type": "3",
                      "name": "LatLon Array"
                  },
                  {
                      "type": "0",
                      "name": "MapWidth",
                      "subType": "number"
                  },
                  {
                      "type": "0",
                      "name": "Center Lat",
                      "subType": "number"
                  },
                  {
                      "type": "0",
                      "name": "Center Lon",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": "3",
                      "name": "Result"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "LatLon Array",
                      "text": "An array of latitude and longitude points"
                  },
                  {
                      "name": "MapWidth",
                      "text": "width of the map"
                  },
                  {
                      "name": "MapHeight",
                      "text": "Height of the map"
                  },
                  {
                      "name": "Center Lat",
                      "text": "Center latitude, use infoArray2 to get this information. Check example file"
                  },
                  {
                      "name": "Center Lon",
                      "text": "Center longitude, use infoArray2 to get this information. Check example file"
                  },
                  {
                      "name": "Result",
                      "text": "Array2 out. Use Array2to3 to add zeroes on the z component. See example file"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1571059591652,
          "exampleProjectId": "vgRDeT",
          "shortName": "MercatorCoordsArray",
          "hasScreenshot": true,
          "namespace": "Ops.Math",
          "shortNameDisplay": "MercatorCoordsArray",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Math.MercatorCoordsArray",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Math.MinSinceReset",
          "content": "",
          "attachmentFiles": [],
          "summary": "Outputs the minimum value since reset has been triggered",
          "id": "30da693f-70bd-46bf-97d5-9f31e7f76bba",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "Value",
                      "subType": "number"
                  },
                  {
                      "type": 1,
                      "name": "Reset"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "Minimum",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "tim",
          "docs": {
              "ports": []
          },
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1519300144014,
          "exampleProjectId": "",
          "shortName": "MinSinceReset",
          "hasScreenshot": false,
          "namespace": "Ops.Math",
          "shortNameDisplay": "MinSinceReset",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Math.MinSinceReset",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Math.Min_v3",
          "content": "<p><code>Result</code> will be the smaller number – either <code>Value</code> or <code>Minimum</code></p>\n",
          "attachmentFiles": [],
          "summary": "Result will be the smaller number of the inputs",
          "id": "24a9062d-380c-4690-8fe7-6703787fa94c",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "Value 1",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Value 2",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "result",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1542700406454,
          "exampleProjectId": "rvAW7i",
          "shortName": "Min_v3",
          "hasScreenshot": true,
          "namespace": "Ops.Math",
          "shortNameDisplay": "Min",
          "version": 3,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Math.Min",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Math.Min_v3",
                  "versionString": "_v3",
                  "version": 3
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Math.Modulo",
          "content": "<p>The result of a division, e.g. if you divide <code>5</code> by <code>2</code>, the rest is <code>1</code>, this is modulo.</p>\n<p>Modulo can be used to create looping animations. e.g. timer connected to a modulo 2 would output a value between 0 and 2. after reaching 2 it will begin from 0 again.</p>\n",
          "attachmentFiles": [],
          "summary": "outputs the remainder after division of one number by another",
          "id": "ebc13b25-3705-4265-8f06-5f985b6a7bb1",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "number1",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "number2",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "pingpong",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "result",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "number1",
                      "text": "`a` in `a % b`"
                  },
                  {
                      "name": "number2",
                      "text": "`b` in `a % b`"
                  },
                  {
                      "name": "pingpong",
                      "text": "This is a handy little helper. If you e.g. use `Modulo` with the time this can be used to prevent *jumps*, the output will then alternate between smaller and bigger values instead of going up, then to zero and back up again."
                  }
              ]
          },
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1504983424434,
          "exampleProjectId": "",
          "shortName": "Modulo",
          "hasScreenshot": false,
          "namespace": "Ops.Math",
          "shortNameDisplay": "Modulo",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Math.Modulo",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Math.MulMatrixXyz",
          "content": "",
          "attachmentFiles": [],
          "summary": "multiply XYZ values with a gl matrix vec3 x mat4",
          "id": "69cc5915-fd7f-4c6c-9a8c-8553c6bab0c5",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Update"
                  },
                  {
                      "type": 0,
                      "name": "X",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Y",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Z",
                      "subType": "number"
                  },
                  {
                      "type": 3,
                      "name": "Matrix"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  },
                  {
                      "type": 0,
                      "name": "Result X",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Result Y",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Result Z",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1668508312343,
          "exampleProjectId": "QlOcck",
          "shortName": "MulMatrixXyz",
          "hasScreenshot": true,
          "namespace": "Ops.Math",
          "shortNameDisplay": "MulMatrixXyz",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Math.MulMatrixXyz",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Math.Multiply",
          "content": "",
          "attachmentFiles": [],
          "summary": "Multiplies two numbers",
          "id": "1bbdae06-fbb2-489b-9bcc-36c9d65bd441",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "number1",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "number2",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "result",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "result",
                      "text": "Result of the multiplication"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1523828700087,
          "exampleProjectId": "0010r1",
          "shortName": "Multiply",
          "hasScreenshot": true,
          "namespace": "Ops.Math",
          "shortNameDisplay": "Multiply",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Math.Multiply",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Math.Multiply3Numbers",
          "content": "",
          "attachmentFiles": [],
          "summary": "multiply three numbers",
          "id": "b058255d-2193-4399-bf40-793558362d6f",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "R",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "G",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "B",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Multiply",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "ResultR",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "ResultG",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "ResultB",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1700499131748,
          "exampleProjectId": "",
          "shortName": "Multiply3Numbers",
          "hasScreenshot": false,
          "namespace": "Ops.Math",
          "shortNameDisplay": "Multiply3Numbers",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Math.Multiply3Numbers",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Math.Normalize",
          "content": "",
          "attachmentFiles": [],
          "summary": "normalize a vector",
          "id": "1e2319d9-3512-4c5c-833d-b372d3084b28",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "X",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Y",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Z",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "Result X",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Result Y",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Result Z",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1708341041421,
          "exampleProjectId": "O8S5O8",
          "shortName": "Normalize",
          "hasScreenshot": true,
          "namespace": "Ops.Math",
          "shortNameDisplay": "Normalize",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Math.Normalize",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Math.NumberDivisible",
          "content": "",
          "attachmentFiles": [],
          "summary": "is a number capable of being divided.",
          "id": "4059e4ee-da93-490a-a00c-6fe0f0ee8efc",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "Number",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Divisor",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "Result",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1515962918465,
          "exampleProjectId": "-IqoJ5",
          "shortName": "NumberDivisible",
          "hasScreenshot": true,
          "namespace": "Ops.Math",
          "shortNameDisplay": "NumberDivisible",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Math.NumberDivisible",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Math.OneMinus",
          "content": "",
          "attachmentFiles": [],
          "summary": "subtract a number from one",
          "id": "f34d019d-59ae-40d6-a55d-a7691bbc40e0",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "Value",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "Result",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1512423370795,
          "exampleProjectId": "8-XQ5d",
          "shortName": "OneMinus",
          "hasScreenshot": true,
          "namespace": "Ops.Math",
          "shortNameDisplay": "OneMinus",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Math.OneMinus",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Math.PerlinNoise_v2",
          "content": "<p>Uses a controllable Perlin Noise function to output a value. </p>\n",
          "attachmentFiles": [],
          "summary": "outputs a perlin noise value like random ",
          "id": "b1a19b32-4ccd-4bce-a37d-e386e53dfc1c",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "X",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Y",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Z",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Scale",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Seed",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "Result",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "X",
                      "text": "Scroll noise values in the X dimension."
                  },
                  {
                      "name": "Y",
                      "text": "Scroll noise values in the Y dimension."
                  },
                  {
                      "name": "Z",
                      "text": "Scroll noise values in the Z dimension."
                  },
                  {
                      "name": "Scale",
                      "text": "Noise Scale - affects rate of change in values. The smaller the Scale number, the smoother the changes of the output."
                  },
                  {
                      "name": "Seed",
                      "text": "Noise Seed"
                  },
                  {
                      "name": "Result",
                      "text": "Output range 0-1"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1616136180876,
          "exampleProjectId": "gOCdhL",
          "shortName": "PerlinNoise_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Math",
          "shortNameDisplay": "PerlinNoise",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Math.PerlinNoise",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Math.PerlinNoise_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Math.Pi",
          "content": "<p>Outputs PI * multiply amount.</p>\n",
          "attachmentFiles": [],
          "summary": "returns PI (3.141592653589793) * multiply amount",
          "id": "311e8179-9a7c-43de-9eb2-84577d702974",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "Multiply amount",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "Pi",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "Multiply amount",
                      "text": "PI multiplied by this number - default 1"
                  },
                  {
                      "name": "Pi",
                      "text": "Output"
                  }
              ]
          },
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1519296680513,
          "exampleProjectId": "",
          "shortName": "Pi",
          "hasScreenshot": false,
          "namespace": "Ops.Math",
          "shortNameDisplay": "Pi",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Math.Pi",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Math.PointInRectangle2d",
          "content": "",
          "attachmentFiles": [],
          "summary": "test if a point is in or outside of a rectangle",
          "id": "6d722288-0fec-43da-bf41-0372426fb685",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "x",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "y",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "rect top",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "rect left",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "rect right",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "rect bottom",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "Result",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Pos x",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Pos y",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1512577086504,
          "exampleProjectId": "dG4B98",
          "shortName": "PointInRectangle2d",
          "hasScreenshot": true,
          "namespace": "Ops.Math",
          "shortNameDisplay": "PointInRectangle2d",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Math.PointInRectangle2d",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Math.Pow",
          "content": "<p>returns the base to the exponent power, that is, base exponent.</p>\n",
          "attachmentFiles": [],
          "summary": "value of x to the power of y",
          "id": "3bb3f98f-27d6-44c4-b4e5-186e10f0809d",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "Base",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Exponent",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "Result",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1515148823503,
          "exampleProjectId": "",
          "shortName": "Pow",
          "hasScreenshot": false,
          "namespace": "Ops.Math",
          "shortNameDisplay": "Pow",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Math.Pow",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Math.PowerOfTwoSize",
          "content": "",
          "attachmentFiles": [],
          "summary": "Return the next values as power of two",
          "id": "58e01e34-0f42-4861-ad9a-ed96e08f8565",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "Width",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Height",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Strategy index",
                      "subType": "integer"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "Width Result",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Height Result",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1544711567131,
          "exampleProjectId": "",
          "shortName": "PowerOfTwoSize",
          "hasScreenshot": false,
          "namespace": "Ops.Math",
          "shortNameDisplay": "PowerOfTwoSize",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Math.PowerOfTwoSize",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Math.Radians",
          "content": "<p>Trigonometric functions in Javascript require their parameters to be specified in radians.</p>\n",
          "attachmentFiles": [],
          "summary": "Converts a degree measurement to its corresponding value in radians.",
          "id": "d6daab6e-791e-4c4c-ac01-d887447de4f9",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "Degrees",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "Result",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "action",
          "docs": {
              "ports": [
                  {
                      "name": "Result",
                      "text": "Output in Radians"
                  }
              ]
          },
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1527697052132,
          "exampleProjectId": "",
          "shortName": "Radians",
          "hasScreenshot": false,
          "namespace": "Ops.Math",
          "shortNameDisplay": "Radians",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Math.Radians",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Math.RandomCounter",
          "content": "",
          "attachmentFiles": [],
          "summary": "add up random numbers by triggering",
          "id": "48c712f0-bb8e-4a0b-9b97-26da68a68223",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Count"
                  },
                  {
                      "type": 0,
                      "name": "Step Min",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Step Max",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "Result",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1616194215397,
          "exampleProjectId": "I8AxeE",
          "shortName": "RandomCounter",
          "hasScreenshot": true,
          "namespace": "Ops.Math",
          "shortNameDisplay": "RandomCounter",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Math.RandomCounter",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Math.RandomNumbersFromString",
          "content": "",
          "attachmentFiles": [],
          "summary": "Random number generator from a string seed",
          "id": "f20d260e-f2e1-4277-850c-6b7526d41d22",
          "layout": {
              "portsIn": [
                  {
                      "type": 5,
                      "name": "Input string"
                  },
                  {
                      "type": 0,
                      "name": "Random number count",
                      "subType": "integer"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "Random value",
                      "subType": "number"
                  },
                  {
                      "type": 3,
                      "name": "Random Numbers"
                  }
              ]
          },
          "authorName": "kikohs",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1730822472048,
          "exampleProjectId": "aAaJgt",
          "shortName": "RandomNumbersFromString",
          "hasScreenshot": true,
          "namespace": "Ops.Math",
          "shortNameDisplay": "RandomNumbersFromString",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Math.RandomNumbersFromString",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Math.RandomNumbers_v3",
          "content": "<p>Outputs four generated numbers of a selected seed within the range set by &quot;Min&quot; and &quot;Max&quot; values.</p>\n",
          "attachmentFiles": [],
          "summary": "Simple way to get random numbers without using arrays",
          "id": "d2b970e1-9406-4459-995c-5a594acd88e3",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "Seed",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Min",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Max",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "X",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Y",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Z",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "W",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [
              "ASp7LEqZUIE"
          ],
          "created": 1616093403854,
          "exampleProjectId": "W_z9bI",
          "shortName": "RandomNumbers_v3",
          "hasScreenshot": true,
          "namespace": "Ops.Math",
          "shortNameDisplay": "RandomNumbers",
          "version": 3,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Math.RandomNumbers",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Math.RandomNumbers_v2",
                  "versionString": "_v2",
                  "version": 2
              },
              {
                  "name": "Ops.Math.RandomNumbers_v3",
                  "versionString": "_v3",
                  "version": 3
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Math.RotationFromNormal",
          "content": "",
          "attachmentFiles": [],
          "summary": "Create rotation matrix from normal",
          "id": "9b39dd02-9558-4297-ba8a-8f21f690d128",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "Normal X",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Normal Y",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Normal Z",
                      "subType": "number"
                  },
                  {
                      "type": 1,
                      "name": "recalculate"
                  }
              ],
              "portsOut": [
                  {
                      "type": 3,
                      "name": "RotationMatrix"
                  }
              ]
          },
          "authorName": "_LJ_",
          "docs": {
              "ports": []
          },
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1539269021984,
          "exampleProjectId": "",
          "shortName": "RotationFromNormal",
          "hasScreenshot": false,
          "namespace": "Ops.Math",
          "shortNameDisplay": "RotationFromNormal",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Math.RotationFromNormal",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Math.Round",
          "content": "",
          "attachmentFiles": [],
          "summary": "Outputs number rounded to the nearest integer",
          "id": "1a1ef636-6d02-42ba-ae1e-627b917d0d2b",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "number",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Decimal Places",
                      "subType": "integer"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "result",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "number",
                      "text": "The number to round"
                  },
                  {
                      "name": "Decimal Places",
                      "text": "How many decimals"
                  },
                  {
                      "name": "result",
                      "text": "Rounded number"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1512035642075,
          "exampleProjectId": "nPvVW2",
          "shortName": "Round",
          "hasScreenshot": true,
          "namespace": "Ops.Math",
          "shortNameDisplay": "Round",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Math.Round",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Math.RoundEven",
          "content": "",
          "attachmentFiles": [],
          "summary": "round to the next even number",
          "id": "b4c116ba-ab64-4903-80bb-35c8d65819a1",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "Number",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Mode index",
                      "subType": "integer"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "Result",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "Number",
                      "text": "the number"
                  },
                  {
                      "name": "Mode index",
                      "text": "round up (ceil) or down (floor)"
                  },
                  {
                      "name": "Mode",
                      "text": "round up (ceil) or down (floor)"
                  },
                  {
                      "name": "Result",
                      "text": "the rounded output"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1560245783276,
          "exampleProjectId": "a0z7hL",
          "shortName": "RoundEven",
          "hasScreenshot": true,
          "namespace": "Ops.Math",
          "shortNameDisplay": "RoundEven",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Math.RoundEven",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Math.SchlickBias",
          "content": "",
          "attachmentFiles": [],
          "summary": "Custom easing curve via schlick bias and gain",
          "id": "ea957aae-c9c7-4d2a-a227-c2a10042f554",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "Value",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Gain",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Bias",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "Result",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1653203366131,
          "exampleProjectId": "FO9IG3",
          "shortName": "SchlickBias",
          "hasScreenshot": true,
          "namespace": "Ops.Math",
          "shortNameDisplay": "SchlickBias",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Math.SchlickBias",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Math.Sign",
          "content": "<p>result is 1 if value is positive or -1 if value is negative</p>\n",
          "attachmentFiles": [],
          "summary": "get sign of value",
          "id": "a0d6ed0e-9b6b-4d84-a599-882feeadd769",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "Value",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Remove zero",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "Result",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "action",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1543617110426,
          "exampleProjectId": "pixllg",
          "shortName": "Sign",
          "hasScreenshot": true,
          "namespace": "Ops.Math",
          "shortNameDisplay": "Sign",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Math.Sign",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Math.SimpleMovingAverage",
          "content": "",
          "attachmentFiles": [],
          "summary": "Calculate the Average of the last X values",
          "id": "b28c1e66-1c88-4394-bf73-327c0e82ea34",
          "layout": {
              "portsIn": [
                  {
                      "type": "0",
                      "name": "Value",
                      "subType": "number"
                  },
                  {
                      "type": "0",
                      "name": "Number of Values",
                      "subType": "integer"
                  }
              ],
              "portsOut": [
                  {
                      "type": "0",
                      "name": "Result",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1542700173818,
          "exampleProjectId": "",
          "shortName": "SimpleMovingAverage",
          "hasScreenshot": false,
          "namespace": "Ops.Math",
          "shortNameDisplay": "SimpleMovingAverage",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Math.SimpleMovingAverage",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Math.Sine",
          "content": "<p>This function expects the values of the angle parameter to be provided in radians.</p>\n",
          "attachmentFiles": [],
          "summary": "Calculates the sine of an angle.",
          "id": "d24da018-9f3d-428b-85c9-6ff14d77548b",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "value",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "phase",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "frequency",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "amplitude",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "asine",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "result",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1527697396067,
          "exampleProjectId": "RhfUW2",
          "shortName": "Sine",
          "hasScreenshot": true,
          "namespace": "Ops.Math",
          "shortNameDisplay": "Sine",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Math.Sine",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Math.SmoothStep_v2",
          "content": "<p>value must be between <code>min</code> and <code>max</code></p>\n<p>see <a href=\"https://en.wikipedia.org/wiki/Smoothstep\">https://en.wikipedia.org/wiki/Smoothstep</a></p>\n",
          "attachmentFiles": [],
          "summary": "Interpolate smoothly between two input values",
          "id": "b5c41eea-ac30-4ac7-9481-eefe42e8199c",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "number",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "min",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "max",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "result",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1651821384844,
          "exampleProjectId": "ntfPz6",
          "shortName": "SmoothStep_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Math",
          "shortNameDisplay": "SmoothStep",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Math.SmoothStep",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Math.SmoothStep_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Math.SmootherStep",
          "content": "",
          "attachmentFiles": [],
          "summary": "interpolate smoothly between two input values",
          "id": "c66da84f-ff2f-45de-b3c2-557bdf1cb946",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "val",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "min",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "max",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "result",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1518871989206,
          "exampleProjectId": "ntfPz6",
          "shortName": "SmootherStep",
          "hasScreenshot": true,
          "namespace": "Ops.Math",
          "shortNameDisplay": "SmootherStep",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Math.SmootherStep",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Math.Speed",
          "content": "",
          "attachmentFiles": [],
          "summary": "measure speed of how much a value changes",
          "id": "ff6b8c7b-00c6-48f2-9b43-d059e52143fe",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Update"
                  },
                  {
                      "type": 0,
                      "name": "Value",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "Speed",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1521544961995,
          "exampleProjectId": "Sgmd39",
          "shortName": "Speed",
          "hasScreenshot": true,
          "namespace": "Ops.Math",
          "shortNameDisplay": "Speed",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Math.Speed",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Math.Sqrt",
          "content": "",
          "attachmentFiles": [],
          "summary": "square root of a number",
          "id": "dec567c3-231d-4146-964d-891fde8924f1",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "number",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "result",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "result",
                      "text": "square root of `Number`"
                  }
              ]
          },
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1523828801414,
          "exampleProjectId": "",
          "shortName": "Sqrt",
          "hasScreenshot": false,
          "namespace": "Ops.Math",
          "shortNameDisplay": "Sqrt",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Math.Sqrt",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Math.Subtract",
          "content": "",
          "attachmentFiles": [],
          "summary": "Subtracts Number2 from Number1 (minus, -)",
          "id": "a4ffe852-d200-4b96-9347-68feb01122ca",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "number1",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "number2",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "result",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "number1",
                      "text": "`a` in `a - b`"
                  },
                  {
                      "name": "number2",
                      "text": "`b` in `a - b`"
                  },
                  {
                      "name": "result",
                      "text": "Result of the division"
                  }
              ]
          },
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1511163198003,
          "exampleProjectId": "",
          "shortName": "Subtract",
          "hasScreenshot": false,
          "namespace": "Ops.Math",
          "shortNameDisplay": "Subtract",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Math.Subtract",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Math.Sum",
          "content": "",
          "attachmentFiles": [],
          "summary": "Add two values",
          "id": "c8fb181e-0b03-4b41-9e55-06b6267bc634",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "number1",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "number2",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "result",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "result",
                      "text": "Result of the addition"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1506754707366,
          "exampleProjectId": "P7d1r1",
          "shortName": "Sum",
          "hasScreenshot": true,
          "namespace": "Ops.Math",
          "shortNameDisplay": "Sum",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Math.Sum",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Math.Tangent",
          "content": "<p>This function expects the values of the angle parameter to be provided in radians.</p>\n",
          "attachmentFiles": [],
          "summary": "Calculates the ratio of the sine and cosine of an angle.",
          "id": "be52d1f0-1004-4161-9ba9-7921c38955c0",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "Value",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Phase",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Frequency",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Amplitude",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "asine",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "Result",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "action",
          "docs": {
              "ports": [
                  {
                      "name": "Value",
                      "text": "Value input in radians"
                  },
                  {
                      "name": "Result",
                      "text": "Outout in the range infinity to -infinity"
                  }
              ]
          },
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1527697077719,
          "exampleProjectId": "",
          "shortName": "Tangent",
          "hasScreenshot": false,
          "namespace": "Ops.Math",
          "shortNameDisplay": "Tangent",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Math.Tangent",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Math.TriggerMathExpression",
          "content": "",
          "attachmentFiles": [],
          "summary": "calculates a user defined mathematical expression",
          "id": "7ba04c59-5b31-44f9-bd15-865a6db67c81",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Calculate"
                  },
                  {
                      "type": 5,
                      "name": "Expression"
                  },
                  {
                      "type": 0,
                      "name": "X",
                      "group": "Parameters",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Y",
                      "group": "Parameters",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Z",
                      "group": "Parameters",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "W",
                      "group": "Parameters",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "A",
                      "group": "Parameters",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "B",
                      "group": "Parameters",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "C",
                      "group": "Parameters",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "D",
                      "group": "Parameters",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "I",
                      "group": "Parameters",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  },
                  {
                      "type": 0,
                      "name": "Result",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Expression Valid",
                      "subType": "boolean"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1659271134423,
          "exampleProjectId": "6K7A5f",
          "shortName": "TriggerMathExpression",
          "hasScreenshot": true,
          "namespace": "Ops.Math",
          "shortNameDisplay": "TriggerMathExpression",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Math.TriggerMathExpression",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Math.TriggerRandomNumber_v2",
          "content": "",
          "attachmentFiles": [],
          "summary": "generate random number between min and max (was: random2)",
          "id": "26f446cc-9107-4164-8209-5254487fa132",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Generate"
                  },
                  {
                      "type": 0,
                      "name": "min",
                      "group": "Value Range",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "max",
                      "group": "Value Range",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Integer",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "No consecutive duplicates",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "next"
                  },
                  {
                      "type": 0,
                      "name": "result",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1579793391418,
          "exampleProjectId": "s3FP7f",
          "shortName": "TriggerRandomNumber_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Math",
          "shortNameDisplay": "TriggerRandomNumber",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Math.TriggerRandomNumber",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Math.TriggerRandomNumber_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Math.VectorLength",
          "content": "",
          "attachmentFiles": [],
          "summary": "length of a vector",
          "id": "a9e7bda2-7f57-4df2-83e3-74cdf63371d7",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "X",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Y",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Z",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "Length",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1558014398331,
          "exampleProjectId": "",
          "shortName": "VectorLength",
          "hasScreenshot": false,
          "namespace": "Ops.Math",
          "shortNameDisplay": "VectorLength",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Math.VectorLength",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Net.CorsProxy_v2",
          "content": "<p>Prefixes the given URL with the URL of the cables.gl CORS proxy.\nThe resulting URL can be used in any request to circumevents Same-Origin-Policy restrictions.\nThe proxy itself does not store or alter the data received from the server.</p>\n",
          "attachmentFiles": [],
          "summary": "create a cables.gl CORS proxy URL",
          "id": "0cac2fb2-cac2-4b50-82c1-f7047ef96e0a",
          "layout": {
              "portsIn": [
                  {
                      "type": 5,
                      "name": "URL"
                  }
              ],
              "portsOut": [
                  {
                      "type": 5,
                      "name": "CORS URL"
                  }
              ]
          },
          "authorName": "stephan",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1574240002061,
          "exampleProjectId": "PAedBi",
          "shortName": "CorsProxy_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Net",
          "shortNameDisplay": "CorsProxy",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Net.CorsProxy",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Net.CorsProxy_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "namespaceTitle": "Ops.Net",
          "namespaceSummary": "",
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Net.WebSocket.WebSocketSend",
          "content": "",
          "attachmentFiles": [],
          "summary": "send an object to a websocket connection",
          "id": "071149e8-5ac5-43dd-a052-e32dbd80cae2",
          "layout": {
              "portsIn": [
                  {
                      "type": 2,
                      "name": "Connection",
                      "objType": "Websocket"
                  },
                  {
                      "type": 2,
                      "name": "Object"
                  },
                  {
                      "type": 1,
                      "name": "Send"
                  },
                  {
                      "type": 0,
                      "name": "Send String",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "Sent",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1558014390255,
          "exampleProjectId": "gu7DBo",
          "shortName": "WebSocketSend",
          "hasScreenshot": true,
          "namespace": "Ops.Net.WebSocket",
          "shortNameDisplay": "WebSocketSend",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Net.WebSocket.WebSocketSend",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Net.WebSocket.WebSocket_v2",
          "content": "",
          "attachmentFiles": [],
          "summary": "Create a websocket connection and receive data from it",
          "id": "e747dc72-8214-41ca-9aae-9041f20dd6ac",
          "layout": {
              "portsIn": [
                  {
                      "type": 5,
                      "name": "URL"
                  }
              ],
              "portsOut": [
                  {
                      "type": 2,
                      "name": "Result"
                  },
                  {
                      "type": 0,
                      "name": "Valid JSON",
                      "subType": "boolean"
                  },
                  {
                      "type": 2,
                      "name": "Connection",
                      "objType": "Websocket"
                  },
                  {
                      "type": 0,
                      "name": "Connected",
                      "subType": "boolean"
                  },
                  {
                      "type": 1,
                      "name": "Received Data"
                  },
                  {
                      "type": 5,
                      "name": "Raw Data"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1600247178087,
          "exampleProjectId": "gu7DBo",
          "shortName": "WebSocket_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Net.WebSocket",
          "shortNameDisplay": "WebSocket",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Net.WebSocket.WebSocket",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Net.WebSocket.WebSocket_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "namespaceTitle": "Ops.Net.WebSocket",
          "namespaceSummary": "",
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Number.DelayNumberSimple",
          "content": "",
          "attachmentFiles": [],
          "summary": "delay the value data flow by x seconds",
          "id": "89ea7e9c-0dfb-4e1e-8e61-4e79112ee533",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "Value",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Delay",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "Out Value",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1519230727595,
          "exampleProjectId": "",
          "shortName": "DelayNumberSimple",
          "hasScreenshot": false,
          "namespace": "Ops.Number",
          "shortNameDisplay": "DelayNumberSimple",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Number.DelayNumberSimple",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Number.DelayedNumber",
          "content": "",
          "attachmentFiles": [],
          "summary": "delay a value by seconds",
          "id": "8e7741e0-0b1b-40f3-a62c-ac8a8828dffb",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Update"
                  },
                  {
                      "type": 0,
                      "name": "Value",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Delay",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Clear on Change",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "easing index",
                      "subType": "integer"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "Result",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1519030450682,
          "exampleProjectId": "",
          "shortName": "DelayedNumber",
          "hasScreenshot": false,
          "namespace": "Ops.Number",
          "shortNameDisplay": "DelayedNumber",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Number.DelayedNumber",
                  "versionString": "",
                  "version": 0
              }
          ],
          "namespaceTitle": "Ops.Number",
          "namespaceSummary": "",
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Number.FilterValidNumber",
          "content": "<p>invalid numbers will be ignored and not outputed</p>\n",
          "attachmentFiles": [],
          "summary": "Filter valid numbers",
          "id": "5a4db4ef-33d2-4131-9825-aa926f1f5a98",
          "layout": {
              "portsIn": [
                  {
                      "type": "0",
                      "name": "Number",
                      "subType": "number"
                  },
                  {
                      "type": "0",
                      "name": "Invalid when 0",
                      "subType": "boolean"
                  },
                  {
                      "type": "0",
                      "name": "Invalid when <0",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": "0",
                      "name": "Last Valid Number",
                      "subType": "number"
                  },
                  {
                      "type": "0",
                      "name": "Is Valid",
                      "subType": "boolean"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1585906041486,
          "exampleProjectId": "",
          "shortName": "FilterValidNumber",
          "hasScreenshot": false,
          "namespace": "Ops.Number",
          "shortNameDisplay": "FilterValidNumber",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Number.FilterValidNumber",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Number.FreezeNumber",
          "content": "",
          "attachmentFiles": [],
          "summary": "capture the current input and copy it to the output, even after a reload",
          "id": "97dea923-f00f-44cf-bef9-808a2556105b",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "Number",
                      "subType": "number"
                  },
                  {
                      "type": 1,
                      "name": "Button"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "Frozen Number",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "Number",
                      "text": "current input value"
                  },
                  {
                      "name": "Button",
                      "text": "freeze the output value"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1644069298775,
          "exampleProjectId": "MuPepX",
          "shortName": "FreezeNumber",
          "hasScreenshot": true,
          "namespace": "Ops.Number",
          "shortNameDisplay": "FreezeNumber",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Number.FreezeNumber",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Number.GateNumber",
          "content": "<p>Useful to allow or stop a number from being output</p>\n",
          "attachmentFiles": [],
          "summary": "Let’s a number through only if control bool is true, like a gate",
          "id": "594105c8-1fdb-4f3c-bbd5-29b9ad6b33e0",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "Value In",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Pass Through",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "When False index",
                      "values": [
                          "keep last number",
                          "custom"
                      ],
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Custom Value",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "Value Out",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "tim",
          "docs": {
              "ports": [
                  {
                      "name": "Value In",
                      "text": "The number to let through"
                  },
                  {
                      "name": "Pass Through",
                      "text": "Control bool, if `true` `Value In` will be let through to `Value Out`"
                  },
                  {
                      "name": "Value Out",
                      "text": "Same value as `Value In` if `Pass Through` is set to `true`"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [
              "gT1jXP5As9A"
          ],
          "created": 1519832716109,
          "exampleProjectId": "JJSflJ",
          "shortName": "GateNumber",
          "hasScreenshot": true,
          "namespace": "Ops.Number",
          "shortNameDisplay": "GateNumber",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Number.GateNumber",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Number.Integer",
          "content": "",
          "attachmentFiles": [],
          "summary": "Number op which only outputs integers ",
          "id": "17bc01d7-04ad-4aab-b88b-bb09744c4a69",
          "layout": {
              "portsIn": [
                  {
                      "type": "0",
                      "name": "Integer",
                      "subType": "integer"
                  }
              ],
              "portsOut": [
                  {
                      "type": "0",
                      "name": "Number out",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "andro",
          "docs": {
              "ports": [
                  {
                      "name": "Integer",
                      "text": "Integer number input"
                  },
                  {
                      "name": "Number out",
                      "text": "Integer number output"
                  }
              ]
          },
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1582563660326,
          "exampleProjectId": "",
          "shortName": "Integer",
          "hasScreenshot": false,
          "namespace": "Ops.Number",
          "shortNameDisplay": "Integer",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Number.Integer",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Number.MaximumSafeInteger",
          "content": "<p>The maximum safe integer is the biggest number without digits which can be used in JavaScript.\nUses <code>Number.MAX_SAFE_INTEGER</code> internally.</p>\n",
          "attachmentFiles": [],
          "summary": "Returns the maximum safe integer (number, constant)",
          "id": "0efefbb7-461c-4a34-b7fd-28b89b0ceb3f",
          "layout": {
              "portsIn": [],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "Max Int",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "tim",
          "docs": {
              "ports": [
                  {
                      "name": "Max Int",
                      "text": "The maximum safe integer"
                  }
              ]
          },
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1520347604810,
          "exampleProjectId": "",
          "shortName": "MaximumSafeInteger",
          "hasScreenshot": false,
          "namespace": "Ops.Number",
          "shortNameDisplay": "MaximumSafeInteger",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Number.MaximumSafeInteger",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Number.MinimumSafeInteger",
          "content": "<p>The minimum safe integer is the smallest number without digits which can be used in JavaScript.\nUses <code>Number.MIN_SAFE_INTEGER</code> internally.</p>\n",
          "attachmentFiles": [],
          "summary": "Returns the minimum safe integer (number, constant)",
          "id": "d74e5528-8049-4cbc-984b-1221532a2fd4",
          "layout": {
              "portsIn": [],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "Min Int",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "tim",
          "docs": {
              "ports": [
                  {
                      "name": "Min Int",
                      "text": "The minimum safe integer"
                  }
              ]
          },
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1520348579776,
          "exampleProjectId": "",
          "shortName": "MinimumSafeInteger",
          "hasScreenshot": false,
          "namespace": "Ops.Number",
          "shortNameDisplay": "MinimumSafeInteger",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Number.MinimumSafeInteger",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Number.Number",
          "content": "<p>If you want to use the same value on multiple places this op is handy – you can specify the value just one time and connect it to other ops.</p>\n",
          "attachmentFiles": [],
          "summary": "Stores a value, use the same value in different places (was: value.value)",
          "id": "8fb2bb5d-665a-4d0a-8079-12710ae453be",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "value",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "result",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "value",
                      "text": "The value"
                  },
                  {
                      "name": "result",
                      "text": "Same as the input `Value`"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1524498802165,
          "exampleProjectId": "0010r1",
          "shortName": "Number",
          "hasScreenshot": true,
          "namespace": "Ops.Number",
          "shortNameDisplay": "Number",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Number.Number",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Number.NumberSequence",
          "content": "<p>This op is very similar to <a href=\"/op/Ops.Sequence\" target=\"_blank\">Ops.Sequence</a> – the ports are set in order (from left to right) once the input value changes. This is helpful sometimes when multiple ops depend on the value of another and the order of op-execution matters.</p>\n",
          "attachmentFiles": [],
          "summary": "Copies the input value to the output ports (value sequence)",
          "id": "33b08c9a-639a-4edc-8908-fa4df58a4b51",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "In Value",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Value Changed"
                  },
                  {
                      "type": 0,
                      "name": "Out Value 0",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Out Value 1",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Out Value 2",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Out Value 3",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "tim",
          "docs": {
              "ports": [
                  {
                      "name": "In Value",
                      "text": "The original value which will be copied to the output ports"
                  },
                  {
                      "name": "Out Value 0",
                      "text": "Copy of `In Value`, port is set first"
                  },
                  {
                      "name": "Out Value 1",
                      "text": "Copy of `In Value`, port is set second"
                  },
                  {
                      "name": "Out Value 2",
                      "text": "Copy of `In Value`, port is set third"
                  },
                  {
                      "name": "Out Value 3",
                      "text": "Copy of `In Value`, port is set fourth"
                  },
                  {
                      "name": "Value Changed",
                      "text": "Triggers when `In Value` changed, after all out ports have been set"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1524055059631,
          "exampleProjectId": "GfgpOb",
          "shortName": "NumberSequence",
          "hasScreenshot": true,
          "namespace": "Ops.Number",
          "shortNameDisplay": "NumberSequence",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Number.NumberSequence",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Number.Preset",
          "content": "<p>The preset op allows you to capture the current state of all parameters that have been connected to it.</p>\n<ul>\n<li>To get started add the preset op to your patch.</li>\n<li>Now click and drag the <code>Create Variable</code> output port to the input port you which to store as a preset. This can be one or more parameters.</li>\n<li>This will create a variable which is now controllable via the preset op itself. </li>\n<li>To change those parameters now click the preset op and change them there.</li>\n<li>When you are happy with the current state click `create new&#39; and give your new preset a name.</li>\n<li>Continue to do this for as many presets as you&#39;d like.</li>\n<li>Click the dropdown menu to select a preset.</li>\n<li>You can now use multiple <code>interpolation</code> modes.</li>\n</ul>\n<p>Modes explanation</p>\n<ul>\n<li>None - Use this to create presets</li>\n<li>xfade - Allows you to fade between all presets. If you had 5 presets and put the fade amount on 2.25 then the parameters would be 75% of parameter 2 and 25% of preset 3</li>\n<li>a-b - pick two presets and then interpolate between them with a range of 0-1</li>\n</ul>\n",
          "attachmentFiles": [],
          "summary": "State management of all parameters connected to it - Create presets of multiple ops",
          "id": "ffe981a5-67df-4da5-a6a9-7fcb910fc982",
          "layout": {
              "portsIn": [
                  {
                      "type": "5",
                      "name": "data"
                  },
                  {
                      "type": "5",
                      "name": "sets"
                  },
                  {
                      "type": "5",
                      "name": "presetid"
                  },
                  {
                      "type": "0",
                      "name": "Interpolation index",
                      "subType": "integer"
                  },
                  {
                      "type": "5",
                      "name": "Interpolation"
                  },
                  {
                      "type": "0",
                      "name": "Preset A",
                      "subType": "number"
                  },
                  {
                      "type": "0",
                      "name": "Preset B",
                      "subType": "number"
                  },
                  {
                      "type": "0",
                      "name": "Fade",
                      "subType": "number"
                  },
                  {
                      "type": "0",
                      "name": "Preset index",
                      "subType": "integer"
                  },
                  {
                      "type": "0",
                      "name": "Preset",
                      "group": "Manage Presets",
                      "subType": "string"
                  },
                  {
                      "type": "1",
                      "name": "Create new",
                      "group": "Manage Presets"
                  },
                  {
                      "type": "1",
                      "name": "Update",
                      "group": "Manage Presets"
                  },
                  {
                      "type": "1",
                      "name": "move",
                      "group": "Manage Presets"
                  },
                  {
                      "type": "1",
                      "name": "Delete",
                      "group": "Manage Presets"
                  },
                  {
                      "type": "1",
                      "name": "Rename",
                      "group": "Manage Presets"
                  }
              ],
              "portsOut": [
                  {
                      "type": "4",
                      "name": "Create Variable"
                  },
                  {
                      "type": "0",
                      "name": "Num Presets",
                      "subType": "number"
                  },
                  {
                      "type": "0",
                      "name": "current Preset",
                      "subType": "number"
                  },
                  {
                      "type": "3",
                      "name": "dbg_data"
                  },
                  {
                      "type": "3",
                      "name": "dbg_sets"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "data",
                      "text": "Used internally by op"
                  },
                  {
                      "name": "sets",
                      "text": "Used internally by op"
                  },
                  {
                      "name": "presetid",
                      "text": "Used internally by op"
                  },
                  {
                      "name": "Interpolation",
                      "text": "Interpolation mode - none - xfade - a-b"
                  },
                  {
                      "name": "Preset A",
                      "text": "xfade mode preset A"
                  },
                  {
                      "name": "Preset B",
                      "text": "xfade mode preset B"
                  },
                  {
                      "name": "Fade",
                      "text": "Morph between preset A -B with xfade mode"
                  },
                  {
                      "name": "Preset",
                      "text": "Preset number"
                  },
                  {
                      "name": "Create new",
                      "text": "Create a new preset"
                  },
                  {
                      "name": "Update",
                      "text": "update current preset to current values"
                  },
                  {
                      "name": "Delete",
                      "text": "Delete preset"
                  },
                  {
                      "name": "Create Variable",
                      "text": "Connect this port to a parameter to map it to the preset op"
                  },
                  {
                      "name": "Num Presets",
                      "text": "Number of stored presets"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [
              "2eKIpiTv6ww"
          ],
          "created": 1562937887698,
          "exampleProjectId": "KI3veT",
          "shortName": "Preset",
          "hasScreenshot": true,
          "namespace": "Ops.Number",
          "shortNameDisplay": "Preset",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Number.Preset",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Number.PreviousNumberStore",
          "content": "",
          "attachmentFiles": [],
          "summary": "remember/store last set number ",
          "id": "01716872-67bd-4b31-a4a2-e0ccadf48411",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "Value",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "Current Value",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Previous Value",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1535465357281,
          "exampleProjectId": "XhZWfo",
          "shortName": "PreviousNumberStore",
          "hasScreenshot": true,
          "namespace": "Ops.Number",
          "shortNameDisplay": "PreviousNumberStore",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Number.PreviousNumberStore",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Number.RouteNumber",
          "content": "",
          "attachmentFiles": [],
          "summary": "Routes the value to one of the output ports (based on index, relay)",
          "id": "e3b1fc2d-a813-4d9b-8cb0-595fc95af4e2",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "Index",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Value",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Default VaonlyOnePortlue",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Set inactive to default",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "Index 0 Value",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Index 1 Value",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Index 2 Value",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Index 3 Value",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Index 4 Value",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Index 5 Value",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Index 6 Value",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Index 7 Value",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Index 8 Value",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Index 9 Value",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "tim",
          "docs": {
              "ports": [
                  {
                      "name": "Index",
                      "text": "Controls to which output port the value is routed"
                  },
                  {
                      "name": "Value",
                      "text": "The value to be routed to one of the output ports"
                  },
                  {
                      "name": "Default Value",
                      "text": "The default value for all ports"
                  },
                  {
                      "name": "Set inactive to default",
                      "text": "Reset inactive ports to default value"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1519148999110,
          "exampleProjectId": "qJcKT6",
          "shortName": "RouteNumber",
          "hasScreenshot": true,
          "namespace": "Ops.Number",
          "shortNameDisplay": "RouteNumber",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Number.RouteNumber",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Number.SequenceNumbers",
          "content": "",
          "attachmentFiles": [],
          "summary": "control order and flow of numbers",
          "id": "98e8a6cf-1f2f-4cb8-9e33-e5189e3d70ce",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "Number 0",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Number 1",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Number 2",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Number 3",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Number 4",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Number 5",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Number 6",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Number 7",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Number 8",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Number 9",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Number 10",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Number 11",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Number 12",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Number 13",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Number 14",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Number 15",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "Output 0",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Output 1",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Output 2",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Output 3",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Output 4",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Output 5",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Output 6",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Output 7",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Output 8",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Output 9",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Output 10",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Output 11",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Output 12",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Output 13",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Output 14",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Output 15",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1593424776815,
          "exampleProjectId": "",
          "shortName": "SequenceNumbers",
          "hasScreenshot": false,
          "namespace": "Ops.Number",
          "shortNameDisplay": "SequenceNumbers",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Number.SequenceNumbers",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Number.SwitchNumber",
          "content": "",
          "attachmentFiles": [],
          "summary": "switch between number values by index",
          "id": "fbb89f72-f2e3-4d34-ad01-7d884a1bcdc0",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "Index",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Value 0",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Value 1",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Value 2",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Value 3",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Value 4",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Value 5",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Value 6",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Value 7",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Value 8",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Value 9",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Value 10",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Value 11",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Value 12",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Value 13",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Value 14",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Value 15",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "Result",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "Index",
                      "text": "Index to get number from"
                  },
                  {
                      "name": "Result",
                      "text": "Number out"
                  }
              ]
          },
          "hasExample": false,
          "libs": [],
          "youtubeids": [
              "TdHgjqOLpnM"
          ],
          "created": 1519816588260,
          "exampleProjectId": "",
          "shortName": "SwitchNumber",
          "hasScreenshot": false,
          "namespace": "Ops.Number",
          "shortNameDisplay": "SwitchNumber",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Number.SwitchNumber",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Number.SwitchNumberMultiPort",
          "content": "",
          "attachmentFiles": [],
          "summary": "Switch between multiple number inputs",
          "id": "6061c7ae-ac4b-45e7-ba7c-06b14ada2f19",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "Index",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Numbers_0",
                      "group": "Numbers",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Numbers_1",
                      "uititle": "add port",
                      "group": "Numbers",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "Number",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Num Values",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1716884900492,
          "exampleProjectId": "",
          "shortName": "SwitchNumberMultiPort",
          "hasScreenshot": false,
          "namespace": "Ops.Number",
          "shortNameDisplay": "SwitchNumberMultiPort",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Number.SwitchNumberMultiPort",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Number.SwitchNumberOnTrigger",
          "content": "<p>Trigger any of the trigger ports to set a specific value. Can be easily used with <a href=\"/op/Ops.Anim.SimpleAnim\" target=\"_blank\">Ops.Anim.SimpleAnim</a> to animate the value change.</p>\n",
          "attachmentFiles": [],
          "summary": "Sets a specific output value on trigger",
          "id": "338032c5-bf47-454b-8ae1-cd91f17e5c5b",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Trigger 0"
                  },
                  {
                      "type": 0,
                      "name": "Value 0",
                      "subType": "number"
                  },
                  {
                      "type": 1,
                      "name": "Trigger 1"
                  },
                  {
                      "type": 0,
                      "name": "Value 1",
                      "subType": "number"
                  },
                  {
                      "type": 1,
                      "name": "Trigger 2"
                  },
                  {
                      "type": 0,
                      "name": "Value 2",
                      "subType": "number"
                  },
                  {
                      "type": 1,
                      "name": "Trigger 3"
                  },
                  {
                      "type": 0,
                      "name": "Value 3",
                      "subType": "number"
                  },
                  {
                      "type": 1,
                      "name": "Trigger 4"
                  },
                  {
                      "type": 0,
                      "name": "Value 4",
                      "subType": "number"
                  },
                  {
                      "type": 1,
                      "name": "Trigger 5"
                  },
                  {
                      "type": 0,
                      "name": "Value 5",
                      "subType": "number"
                  },
                  {
                      "type": 1,
                      "name": "Trigger 6"
                  },
                  {
                      "type": 0,
                      "name": "Value 6",
                      "subType": "number"
                  },
                  {
                      "type": 1,
                      "name": "Trigger 7"
                  },
                  {
                      "type": 0,
                      "name": "Value 7",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Default Value",
                      "subType": "string"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "Value",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Last Value",
                      "subType": "number"
                  },
                  {
                      "type": 1,
                      "name": "Triggered"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "Trigger 0",
                      "text": "When triggered `Value 0` is used"
                  },
                  {
                      "name": "Value 0",
                      "text": "The value to use when `Trigger 0` was triggered"
                  },
                  {
                      "name": "Trigger 1",
                      "text": "When triggered `Value 1` is used"
                  },
                  {
                      "name": "Value 1",
                      "text": "The value to use when `Trigger 1` was triggered"
                  },
                  {
                      "name": "Trigger 2",
                      "text": "When triggered `Value 2` is used"
                  },
                  {
                      "name": "Value 2",
                      "text": "The value to use when `Trigger 2` was triggered"
                  },
                  {
                      "name": "Trigger 3",
                      "text": "When triggered `Value 3` is used"
                  },
                  {
                      "name": "Value 3",
                      "text": "The value to use when `Trigger 3` was triggered"
                  },
                  {
                      "name": "Trigger 4",
                      "text": "When triggered `Value 4` is used"
                  },
                  {
                      "name": "Value 4",
                      "text": "The value to use when `Trigger 4` was triggered"
                  },
                  {
                      "name": "Trigger 5",
                      "text": "When triggered `Value 5` is used"
                  },
                  {
                      "name": "Value 5",
                      "text": "The value to use when `Trigger 5` was triggered"
                  },
                  {
                      "name": "Trigger 6",
                      "text": "When triggered `Value 6` is used"
                  },
                  {
                      "name": "Value 6",
                      "text": "The value to use when `Trigger 6` was triggered"
                  },
                  {
                      "name": "Trigger 7",
                      "text": "When triggered `Value 7` is used"
                  },
                  {
                      "name": "Value 7",
                      "text": "The value to use when `Trigger 7` was triggered"
                  },
                  {
                      "name": "Default Value",
                      "text": "Set at the beginning, before any of the trigger ports were triggered"
                  },
                  {
                      "name": "Value",
                      "text": "The value of the most recent input port which was triggered"
                  },
                  {
                      "name": "Last Value",
                      "text": "The value before the last trigger"
                  },
                  {
                      "name": "Triggered",
                      "text": "Triggers after any of the input ports were triggered"
                  }
              ]
          },
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1520685565879,
          "exampleProjectId": "",
          "shortName": "SwitchNumberOnTrigger",
          "hasScreenshot": false,
          "namespace": "Ops.Number",
          "shortNameDisplay": "SwitchNumberOnTrigger",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Number.SwitchNumberOnTrigger",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Number.Trigger3Numbers",
          "content": "<p>If you use 3D-values on multiple positions in your patch it is handy to just write them down once and connect the <em>Value3d</em>-op to various other ops which use the values.<br>The output ports will mirror the input ports.</p>\n",
          "attachmentFiles": [],
          "summary": "Stores a 3D coordinate (was Value3)",
          "id": "d56326a2-6351-4261-898a-635ca0636dd0",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "exe"
                  },
                  {
                      "type": 0,
                      "name": "value x",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "value y",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "value z",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "result x",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "result y",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "result z",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "value x",
                      "text": "X value, will be copied to the output port"
                  },
                  {
                      "name": "value y",
                      "text": "Y value, will be copied to the output port"
                  },
                  {
                      "name": "value z",
                      "text": "Z value, will be copied to the output port"
                  },
                  {
                      "name": "result x",
                      "text": "Same as input `Value X`"
                  },
                  {
                      "name": "result y",
                      "text": "Same as input `Value Y`"
                  },
                  {
                      "name": "result z",
                      "text": "Same as input `Value Z`"
                  }
              ]
          },
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1519030581468,
          "exampleProjectId": "",
          "shortName": "Trigger3Numbers",
          "hasScreenshot": false,
          "namespace": "Ops.Number",
          "shortNameDisplay": "Trigger3Numbers",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Number.Trigger3Numbers",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Number.TriggerOnChangeNumber",
          "content": "",
          "attachmentFiles": [],
          "summary": "triggers every time the input value changed",
          "id": "f5c8c433-ce13-49c4-9a33-74e98f110ed0",
          "layout": {
              "portsIn": [
                  {
                      "type": "0",
                      "name": "Value",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": "1",
                      "name": "Next"
                  },
                  {
                      "type": "0",
                      "name": "Number",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "Value",
                      "text": "number in"
                  },
                  {
                      "name": "Next",
                      "text": "trigger out when number in changes"
                  },
                  {
                      "name": "Number",
                      "text": "the input value"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1520332469405,
          "exampleProjectId": "8y5hVJ",
          "todos": [
              {
                  "message": "rename to Ops.Value.TriggerOnChangeNumber",
                  "author": "pandur",
                  "id": "c5a06cf4-8651-42cb-81ff-e23fec6bfcdb",
                  "date": 1557996991073,
                  "deleted": true,
                  "deletedBy": "stephan",
                  "deletedDate": 1628170082434
              }
          ],
          "shortName": "TriggerOnChangeNumber",
          "hasScreenshot": true,
          "namespace": "Ops.Number",
          "shortNameDisplay": "TriggerOnChangeNumber",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Number.TriggerOnChangeNumber",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Sidebar.Button_v2",
          "content": "",
          "attachmentFiles": [],
          "summary": "sidebar push button/trigger element",
          "id": "5e9c6933-0605-4bf7-8671-a016d917f327",
          "layout": {
              "portsIn": [
                  {
                      "type": 2,
                      "name": "link"
                  },
                  {
                      "type": 5,
                      "name": "Text"
                  },
                  {
                      "type": 0,
                      "name": "Grey Out",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Visible",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 2,
                      "name": "childs"
                  },
                  {
                      "type": 1,
                      "name": "Pressed Trigger"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [
              "cpRVswVdvI0"
          ],
          "created": 1591882062170,
          "exampleProjectId": "aDgYX5",
          "shortName": "Button_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Sidebar",
          "shortNameDisplay": "Button",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Sidebar.Button",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Sidebar.Button_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "usedInProject": true,
          "allowEdit": false,
          "namespaceTitle": "Ops.Sidebar",
          "namespaceSummary": ""
      },
      {
          "name": "Ops.Sidebar.ColorPicker_v3",
          "content": "",
          "attachmentFiles": [
              "att_colorrick.css"
          ],
          "summary": "Shows a color-picker in the sidebar",
          "id": "52dc1ef8-deb0-4664-a924-4c5548aa8a55",
          "layout": {
              "portsIn": [
                  {
                      "type": 2,
                      "name": "Link"
                  },
                  {
                      "type": 5,
                      "name": "Text"
                  },
                  {
                      "type": 0,
                      "name": "Input Red",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Input Green",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Input Blue",
                      "subType": "number"
                  },
                  {
                      "type": 1,
                      "name": "Set Default"
                  }
              ],
              "portsOut": [
                  {
                      "type": 2,
                      "name": "Children"
                  },
                  {
                      "type": 0,
                      "name": "Red",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Green",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Blue",
                      "subType": "number"
                  },
                  {
                      "type": 5,
                      "name": "Hex"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "Link",
                      "text": "Either a link to the sidebar or sidebar group"
                  },
                  {
                      "name": "Text",
                      "text": "The label text"
                  },
                  {
                      "name": "Default",
                      "text": "The default color (as 6 or 7 digit hex color), e.g. \"#ff0000\""
                  },
                  {
                      "name": "Children",
                      "text": "Here you can connect other sidebar ops"
                  },
                  {
                      "name": "Red",
                      "text": "The red amount from the color picker, in range `[0..1]`"
                  },
                  {
                      "name": "Green",
                      "text": "The green amount from the color picker, in range `[0..1]`"
                  },
                  {
                      "name": "Blue",
                      "text": "The blue amount from the color picker, in range `[0..1]`"
                  }
              ]
          },
          "hasExample": true,
          "libs": [
              "colorrick.js"
          ],
          "youtubeids": [],
          "created": 1629365132838,
          "exampleProjectId": "8-XQ5d",
          "shortName": "ColorPicker_v3",
          "hasScreenshot": true,
          "namespace": "Ops.Sidebar",
          "shortNameDisplay": "ColorPicker",
          "version": 3,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Sidebar.ColorPicker",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Sidebar.ColorPicker_v2",
                  "versionString": "_v2",
                  "version": 2
              },
              {
                  "name": "Ops.Sidebar.ColorPicker_v3",
                  "versionString": "_v3",
                  "version": 3
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Sidebar.DisplayValue_v2",
          "content": "",
          "attachmentFiles": [],
          "summary": "display a value or string",
          "id": "3dd9927e-0d34-4442-8a8a-0ab843aee6e3",
          "layout": {
              "portsIn": [
                  {
                      "type": 2,
                      "name": "link"
                  },
                  {
                      "type": 5,
                      "name": "Text"
                  },
                  {
                      "type": 5,
                      "name": "Value"
                  }
              ],
              "portsOut": [
                  {
                      "type": 2,
                      "name": "childs"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1591883446091,
          "exampleProjectId": "aDgYX5",
          "shortName": "DisplayValue_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Sidebar",
          "shortNameDisplay": "DisplayValue",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Sidebar.DisplayValue",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Sidebar.DisplayValue_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Sidebar.DropDown_v2",
          "content": "<p>Use a dropdown if you want to select one value out of many, e.g. <code>Circle</code> with options <code>Circle, Rectangle, Triangle</code>. To enter the values you can use <a href=\"/op/Ops.Array.ParseArray\" target=\"_blank\">Ops.Array.ParseArray</a>.</p>\n",
          "attachmentFiles": [],
          "summary": "Shows a drop-down (select) element in the sidebar",
          "id": "7b3f93d6-4de1-41fd-aa26-e74c8285c662",
          "layout": {
              "portsIn": [
                  {
                      "type": 2,
                      "name": "Link"
                  },
                  {
                      "type": 5,
                      "name": "Text"
                  },
                  {
                      "type": 3,
                      "name": "Values"
                  },
                  {
                      "type": 5,
                      "name": "Default",
                      "uititle": "Input"
                  },
                  {
                      "type": 0,
                      "name": "Grey Out",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Visible",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Lines",
                      "subType": "integer"
                  },
                  {
                      "type": 1,
                      "name": "Set Default"
                  }
              ],
              "portsOut": [
                  {
                      "type": 2,
                      "name": "Children"
                  },
                  {
                      "type": 5,
                      "name": "Result"
                  },
                  {
                      "type": 0,
                      "name": "Index",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "tim",
          "docs": {
              "ports": [
                  {
                      "name": "Values",
                      "text": "Array of options, use Ops.Array.ParseArray to enter manually"
                  }
              ]
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1579692865849,
          "exampleProjectId": "0wKJ5d",
          "shortName": "DropDown_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Sidebar",
          "shortNameDisplay": "DropDown",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Sidebar.DropDown",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Sidebar.DropDown_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Sidebar.Group",
          "content": "<p>To organize your sidebar controls and content, it helps grouping them into collapsable tabs with the Group operator. To add specific elements to the group, connect them into the &quot;childs&quot; port.</p>\n",
          "attachmentFiles": [],
          "summary": "organize sidebar elements into groups",
          "id": "86ea2333-b51c-48ed-94c2-8b7b6e9ff34c",
          "layout": {
              "portsIn": [
                  {
                      "type": 2,
                      "name": "link"
                  },
                  {
                      "type": 5,
                      "name": "Text"
                  },
                  {
                      "type": 0,
                      "name": "Show Title",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Default Minimized",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Visible",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 2,
                      "name": "next"
                  },
                  {
                      "type": 2,
                      "name": "childs"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1518205018582,
          "exampleProjectId": "",
          "shortName": "Group",
          "hasScreenshot": false,
          "namespace": "Ops.Sidebar",
          "shortNameDisplay": "Group",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Sidebar.Group",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Sidebar.Incrementor_v3",
          "content": "<p>exposes a &quot;plus&quot; and &quot;minus&quot; button to the sidebar and given max/min/stepsize increments or decrements the current value by the stepsize.</p>\n<p>if given an array min/max/stepsize are being ignored and the buttons cycle through the array elements one by one.</p>\n",
          "attachmentFiles": [],
          "summary": "steps through numerical or array values one by one",
          "id": "0e4d8dcd-d4b2-4fd3-a714-b92cd0a73415",
          "layout": {
              "portsIn": [
                  {
                      "type": 2,
                      "name": "link"
                  },
                  {
                      "type": 5,
                      "name": "Label"
                  },
                  {
                      "type": 0,
                      "name": "min",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "max",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "stepsize",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Default",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Grey Out",
                      "subType": "boolean"
                  },
                  {
                      "type": 1,
                      "name": "Increment",
                      "group": "Trigger"
                  },
                  {
                      "type": 1,
                      "name": "Decrement",
                      "group": "Trigger"
                  },
                  {
                      "type": 1,
                      "name": "Set Default"
                  },
                  {
                      "type": 1,
                      "name": "Reset"
                  }
              ],
              "portsOut": [
                  {
                      "type": 2,
                      "name": "childs"
                  },
                  {
                      "type": 0,
                      "name": "value",
                      "subType": "number"
                  },
                  {
                      "type": 1,
                      "name": "Changed"
                  }
              ]
          },
          "authorName": "stephan",
          "docs": {
              "ports": [
                  {
                      "name": "link",
                      "text": "link to sidebar"
                  },
                  {
                      "name": "Label",
                      "text": "the label on the sidebar"
                  },
                  {
                      "name": "min",
                      "text": "minimum value while decrementing"
                  },
                  {
                      "name": "max",
                      "text": "maximum value while incrementing"
                  },
                  {
                      "name": "stepsize",
                      "text": "size of each \"step\" (increment and decrement)"
                  },
                  {
                      "name": "childs",
                      "text": "link to sidebar"
                  },
                  {
                      "name": "value",
                      "text": "the current value"
                  }
              ]
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1731001128199,
          "exampleProjectId": "DLV0n6",
          "shortName": "Incrementor_v3",
          "hasScreenshot": true,
          "namespace": "Ops.Sidebar",
          "shortNameDisplay": "Incrementor",
          "version": 3,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Sidebar.Incrementor",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Sidebar.Incrementor_v2",
                  "versionString": "_v2",
                  "version": 2
              },
              {
                  "name": "Ops.Sidebar.Incrementor_v3",
                  "versionString": "_v3",
                  "version": 3
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Sidebar.LocalFileToDataUrl",
          "content": "<p>Let the user select a file from their local harddrive. The file is not loaded to any server, it is just loaded in to memory.\nYou can connect the dataUrl output to a texture op to load an image as a texture in cables.</p>\n<p>Internally it uses an <code>&amp;lt;input type=&quot;file&quot;/&amp;gt;</code> , the way standard html file select </p>\n<h3>Accept Parameter</h3>\n<ul>\n<li>A valid case-insensitive filename extension, starting with a period (&quot;.&quot;) character. For example: <code>.jpg</code>, <code>.pdf</code>, or <code>.doc</code></li>\n<li>Multiple extensions seperated by comma, like <code>.png,.jpg</code></li>\n<li>A valid MIME type string, with no extensions.</li>\n<li>The string <code>audio/*</code> meaning &quot;any audio file&quot;.</li>\n<li>The string <code>video/*</code> meaning &quot;any video file&quot;.</li>\n<li>The string <code>image/*</code> meaning &quot;any image file&quot;.</li>\n</ul>\n",
          "attachmentFiles": [],
          "summary": "load a local file and output as data url",
          "id": "c99d271e-aa5e-4a9d-a4d3-4c5137c189e8",
          "layout": {
              "portsIn": [
                  {
                      "type": "2",
                      "name": "link"
                  },
                  {
                      "type": "5",
                      "name": "Text"
                  },
                  {
                      "type": "5",
                      "name": "Button Text"
                  },
                  {
                      "type": "5",
                      "name": "Accept Files"
                  },
                  {
                      "type": "0",
                      "name": "Allow Multiple Files",
                      "subType": "boolean"
                  },
                  {
                      "type": "0",
                      "name": "Id",
                      "subType": "string"
                  },
                  {
                      "type": "0",
                      "name": "Visible",
                      "subType": "boolean"
                  },
                  {
                      "type": "0",
                      "name": "Grey Out",
                      "subType": "boolean"
                  },
                  {
                      "type": "1",
                      "name": "Show Dialog"
                  },
                  {
                      "type": "1",
                      "name": "Reset"
                  }
              ],
              "portsOut": [
                  {
                      "type": "2",
                      "name": "childs"
                  },
                  {
                      "type": "5",
                      "name": "Data URL"
                  },
                  {
                      "type": "5",
                      "name": "Filename"
                  },
                  {
                      "type": "2",
                      "name": "File Object"
                  },
                  {
                      "type": "0",
                      "name": "Num Files",
                      "subType": "number"
                  },
                  {
                      "type": "3",
                      "name": "Data URLs"
                  },
                  {
                      "type": "3",
                      "name": "Filenames"
                  },
                  {
                      "type": "1",
                      "name": "File Changed"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "File Object",
                      "text": "File Select Button now shows Filename when a file was selected"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1597831902795,
          "exampleProjectId": "a0V6xn",
          "shortName": "LocalFileToDataUrl",
          "hasScreenshot": true,
          "namespace": "Ops.Sidebar",
          "shortNameDisplay": "LocalFileToDataUrl",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Sidebar.LocalFileToDataUrl",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Sidebar.NumberInput_v2",
          "content": "<p>In most cases to enter numbers using the <a href=\"/op/Ops.Sidebar.Slider\" target=\"_blank\">Ops.Sidebar.Slider</a> op is recommended, in some cases you want to enter numbers by hand tho (e.g. when the numbers are not in a specific range).</p>\n",
          "attachmentFiles": [],
          "summary": "Enter a number in the sidebar",
          "id": "c4f3f1d7-de07-4c06-921e-32baeef4fc68",
          "layout": {
              "portsIn": [
                  {
                      "type": 2,
                      "name": "Link"
                  },
                  {
                      "type": 5,
                      "name": "Text"
                  },
                  {
                      "type": 0,
                      "name": "Input",
                      "subType": "number"
                  },
                  {
                      "type": 1,
                      "name": "Set Default"
                  }
              ],
              "portsOut": [
                  {
                      "type": 2,
                      "name": "Children"
                  },
                  {
                      "type": 0,
                      "name": "Result",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "tim",
          "docs": {
              "ports": [
                  {
                      "name": "Link",
                      "text": "Link to previous sidebar ops"
                  },
                  {
                      "name": "Text",
                      "text": "The text label next to the input"
                  },
                  {
                      "name": "Input",
                      "text": "Same as the input value in the sidebar, use this to set the value programmatically"
                  },
                  {
                      "name": "Set Default",
                      "text": "When triggered the input value will be stored as default value"
                  },
                  {
                      "name": "Children",
                      "text": "Link to next sidebar ops"
                  },
                  {
                      "name": "Result",
                      "text": "The number"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1591883272677,
          "exampleProjectId": "aDgYX5",
          "shortName": "NumberInput_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Sidebar",
          "shortNameDisplay": "NumberInput",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Sidebar.NumberInput",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Sidebar.NumberInput_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Sidebar.Presets_v2",
          "content": "",
          "attachmentFiles": [],
          "summary": "manage sidebar presets",
          "id": "9ef53cbc-f47b-4631-92f1-470bd40c2866",
          "layout": {
              "portsIn": [
                  {
                      "type": 2,
                      "name": "link"
                  },
                  {
                      "type": 5,
                      "name": "Text"
                  },
                  {
                      "type": 1,
                      "name": "Add Preset"
                  },
                  {
                      "type": 1,
                      "name": "Update current Preset"
                  },
                  {
                      "type": 5,
                      "name": "Preset Title 0"
                  },
                  {
                      "type": 2,
                      "name": "Preset 0"
                  },
                  {
                      "type": 5,
                      "name": "Preset Title 1"
                  },
                  {
                      "type": 2,
                      "name": "Preset 1"
                  },
                  {
                      "type": 5,
                      "name": "Preset Title 2"
                  },
                  {
                      "type": 2,
                      "name": "Preset 2"
                  },
                  {
                      "type": 5,
                      "name": "Preset Title 3"
                  },
                  {
                      "type": 2,
                      "name": "Preset 3"
                  },
                  {
                      "type": 5,
                      "name": "Preset Title 4"
                  },
                  {
                      "type": 2,
                      "name": "Preset 4"
                  },
                  {
                      "type": 5,
                      "name": "Preset Title 5"
                  },
                  {
                      "type": 2,
                      "name": "Preset 5"
                  },
                  {
                      "type": 5,
                      "name": "Preset Title 6"
                  },
                  {
                      "type": 2,
                      "name": "Preset 6"
                  },
                  {
                      "type": 5,
                      "name": "Preset Title 7"
                  },
                  {
                      "type": 2,
                      "name": "Preset 7"
                  }
              ],
              "portsOut": [
                  {
                      "type": 2,
                      "name": "Children"
                  },
                  {
                      "type": 0,
                      "name": "Index",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1591882841418,
          "exampleProjectId": "",
          "shortName": "Presets_v2",
          "hasScreenshot": false,
          "namespace": "Ops.Sidebar",
          "shortNameDisplay": "Presets",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Sidebar.Presets",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Sidebar.Presets_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Sidebar.SideBarImage",
          "content": "",
          "attachmentFiles": [],
          "summary": "Display an image in the sidebar",
          "id": "5ab7b4b8-ae22-4694-9bbd-9c8bffcc98c4",
          "layout": {
              "portsIn": [
                  {
                      "type": 2,
                      "name": "link"
                  },
                  {
                      "type": 5,
                      "name": "File"
                  }
              ],
              "portsOut": [
                  {
                      "type": 2,
                      "name": "childs"
                  },
                  {
                      "type": 2,
                      "name": "Image Element",
                      "objType": "element"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1672827995772,
          "exampleProjectId": "nLvdby",
          "shortName": "SideBarImage",
          "hasScreenshot": true,
          "namespace": "Ops.Sidebar",
          "shortNameDisplay": "SideBarImage",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Sidebar.SideBarImage",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Sidebar.SideBarStyle",
          "content": "",
          "attachmentFiles": [],
          "summary": "adjust appearance of sidebar",
          "id": "87d78a59-c8d4-4269-a3f8-af273741aae4",
          "layout": {
              "portsIn": [
                  {
                      "type": 2,
                      "name": "link"
                  },
                  {
                      "type": 0,
                      "name": "Width",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Round Corners",
                      "subType": "number"
                  },
                  {
                      "type": 5,
                      "name": "Special Color"
                  }
              ],
              "portsOut": [
                  {
                      "type": 2,
                      "name": "childs"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1622529549185,
          "exampleProjectId": "o1fXgI",
          "shortName": "SideBarStyle",
          "hasScreenshot": true,
          "namespace": "Ops.Sidebar",
          "shortNameDisplay": "SideBarStyle",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Sidebar.SideBarStyle",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Sidebar.SideBarSwitch",
          "content": "",
          "attachmentFiles": [],
          "summary": "add tabs or switchbar to a sidebar",
          "id": "ebc8c92c-5fa6-4598-a9c6-b8e12f22f7c2",
          "layout": {
              "portsIn": [
                  {
                      "type": 2,
                      "name": "link"
                  },
                  {
                      "type": 3,
                      "name": "Names"
                  },
                  {
                      "type": 0,
                      "name": "Style index",
                      "values": [
                          "Tabs",
                          "Switch"
                      ],
                      "subType": "integer"
                  },
                  {
                      "type": 5,
                      "name": "Text"
                  },
                  {
                      "type": 0,
                      "name": "Input",
                      "subType": "integer"
                  },
                  {
                      "type": 1,
                      "name": "Set Default",
                      "group": "Default Item"
                  },
                  {
                      "type": 0,
                      "name": "Grey Out",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Default",
                      "group": "Default Item",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 2,
                      "name": "childs"
                  },
                  {
                      "type": 0,
                      "name": "Index",
                      "subType": "number"
                  },
                  {
                      "type": 5,
                      "name": "String"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1622527754652,
          "exampleProjectId": "7uuz6D",
          "shortName": "SideBarSwitch",
          "hasScreenshot": true,
          "namespace": "Ops.Sidebar",
          "shortNameDisplay": "SideBarSwitch",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Sidebar.SideBarSwitch",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Sidebar.Sidebar",
          "content": "",
          "attachmentFiles": [
              "att_style.css"
          ],
          "summary": "Sidebar overlay to control values",
          "id": "5a681c35-78ce-4cb3-9858-bc79c34c6819",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "Visible",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Opacity",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Default Minimized",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Minimized Opacity",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Show undo button",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Show Minimize",
                      "subType": "boolean"
                  },
                  {
                      "type": 5,
                      "name": "Title"
                  },
                  {
                      "type": 0,
                      "name": "Side",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Default CSS",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 2,
                      "name": "childs",
                      "uititle": "Children"
                  },
                  {
                      "type": 0,
                      "name": "Opfened",
                      "uititle": "Opened",
                      "subType": "boolean"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "Visible",
                      "text": "hide sidebar competely"
                  },
                  {
                      "name": "Opacity",
                      "text": "opacity when opened"
                  },
                  {
                      "name": "Default Minimized",
                      "text": "start with minimized sidebar"
                  },
                  {
                      "name": "Minimized Opacity",
                      "text": "opacity when minimized"
                  },
                  {
                      "name": "Show undo button",
                      "text": "show undo button on top of sidebar"
                  },
                  {
                      "name": "Title",
                      "text": "the title"
                  },
                  {
                      "name": "Side",
                      "text": "switch left/right side of screen"
                  },
                  {
                      "name": "childs",
                      "text": "attach sidebar ops here"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [
              "cpRVswVdvI0"
          ],
          "created": 1518203773098,
          "exampleProjectId": "aDgYX5",
          "shortName": "Sidebar",
          "hasScreenshot": true,
          "namespace": "Ops.Sidebar",
          "shortNameDisplay": "Sidebar",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Sidebar.Sidebar",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Sidebar.SidebarDateTime",
          "content": "<p>This will show the default html date/datetime picker of your browser</p>\n<p>The min/max and default value port inputs need to be provided in the following formats: <code>2017-06-01</code> for date , and <code>2017-06-01T08:30</code> for datetime-local</p>\n",
          "attachmentFiles": [],
          "summary": "date or datetime picker in the sidebar",
          "id": "24019675-1b22-451f-bb23-ddf552620b34",
          "layout": {
              "portsIn": [
                  {
                      "type": 2,
                      "name": "Link"
                  },
                  {
                      "type": 5,
                      "name": "Text"
                  },
                  {
                      "type": 5,
                      "name": "Default"
                  },
                  {
                      "type": 5,
                      "name": "Min"
                  },
                  {
                      "type": 5,
                      "name": "Max"
                  },
                  {
                      "type": 0,
                      "name": "Type index",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Grey Out",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Visible",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 2,
                      "name": "Children"
                  },
                  {
                      "type": 5,
                      "name": "Result"
                  },
                  {
                      "type": 0,
                      "name": "Focus",
                      "subType": "boolean"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1720431466542,
          "exampleProjectId": "Bkzmci",
          "shortName": "SidebarDateTime",
          "hasScreenshot": true,
          "namespace": "Ops.Sidebar",
          "shortNameDisplay": "SidebarDateTime",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Sidebar.SidebarDateTime",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Sidebar.SidebarText_v3",
          "content": "",
          "attachmentFiles": [],
          "summary": "Display text in the sidebar",
          "id": "c00eef25-67d6-4fa3-9921-cbf533078a54",
          "layout": {
              "portsIn": [
                  {
                      "type": 2,
                      "name": "link"
                  },
                  {
                      "type": 5,
                      "name": "Text"
                  },
                  {
                      "type": 5,
                      "name": "Id"
                  }
              ],
              "portsOut": [
                  {
                      "type": 2,
                      "name": "childs"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "Text",
                      "text": "The text you want to show in the sidebar"
                  }
              ]
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1731925146981,
          "exampleProjectId": "Ut4y8i",
          "shortName": "SidebarText_v3",
          "hasScreenshot": true,
          "namespace": "Ops.Sidebar",
          "shortNameDisplay": "SidebarText",
          "version": 3,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Sidebar.SidebarText",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Sidebar.SidebarText_v2",
                  "versionString": "_v2",
                  "version": 2
              },
              {
                  "name": "Ops.Sidebar.SidebarText_v3",
                  "versionString": "_v3",
                  "version": 3
              }
          ],
          "allowEdit": false,
          "usedInProject": true
      },
      {
          "name": "Ops.Sidebar.SidebarVariables",
          "content": "",
          "attachmentFiles": [],
          "summary": "show values of all variables in a sidebar",
          "id": "55e502d6-0360-41aa-9c84-deb9f9e0be24",
          "layout": {
              "portsIn": [
                  {
                      "type": "2",
                      "name": "link"
                  },
                  {
                      "type": "0",
                      "name": "Id",
                      "subType": "string"
                  },
                  {
                      "type": "1",
                      "name": "update"
                  }
              ],
              "portsOut": [
                  {
                      "type": "2",
                      "name": "childs"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1562067587433,
          "exampleProjectId": "H2kYgL",
          "shortName": "SidebarVariables",
          "hasScreenshot": true,
          "namespace": "Ops.Sidebar",
          "shortNameDisplay": "SidebarVariables",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Sidebar.SidebarVariables",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false,
          "usedInProject": true
      },
      {
          "name": "Ops.Sidebar.Slider_v3",
          "content": "",
          "attachmentFiles": [],
          "summary": "Sidebar slider element (range)",
          "id": "74730122-5cba-4d0d-b610-df334ec6220a",
          "layout": {
              "portsIn": [
                  {
                      "type": 2,
                      "name": "link"
                  },
                  {
                      "type": 5,
                      "name": "Text"
                  },
                  {
                      "type": 0,
                      "name": "Min",
                      "group": "Range",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Max",
                      "group": "Range",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Step",
                      "group": "Range",
                      "subType": "number"
                  },
                  {
                      "type": 5,
                      "name": "Suffix"
                  },
                  {
                      "type": 0,
                      "name": "Grey Out",
                      "group": "Display",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Visible",
                      "group": "Display",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Input",
                      "subType": "number"
                  },
                  {
                      "type": 1,
                      "name": "Set Default"
                  },
                  {
                      "type": 1,
                      "name": "Reset"
                  }
              ],
              "portsOut": [
                  {
                      "type": 2,
                      "name": "childs"
                  },
                  {
                      "type": 0,
                      "name": "Result",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [
              "cpRVswVdvI0"
          ],
          "created": 1591882533704,
          "exampleProjectId": "aDgYX5",
          "shortName": "Slider_v3",
          "hasScreenshot": true,
          "namespace": "Ops.Sidebar",
          "shortNameDisplay": "Slider",
          "version": 3,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Sidebar.Slider",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Sidebar.Slider_v2",
                  "versionString": "_v2",
                  "version": 2
              },
              {
                  "name": "Ops.Sidebar.Slider_v3",
                  "versionString": "_v3",
                  "version": 3
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Sidebar.TextInput_v2",
          "content": "<p>Let’s you enter a string in the sidebar, which you can then e.g. render in your patch</p>\n",
          "attachmentFiles": [],
          "summary": "Get a string from an sidebar input field",
          "id": "6538a190-e73c-451b-964e-d010ee267aa9",
          "layout": {
              "portsIn": [
                  {
                      "type": 2,
                      "name": "Link"
                  },
                  {
                      "type": 5,
                      "name": "Text"
                  },
                  {
                      "type": 5,
                      "name": "Default"
                  },
                  {
                      "type": 5,
                      "name": "Placeholder"
                  },
                  {
                      "type": 0,
                      "name": "Type index",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "TextArea",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Grey Out",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Visible",
                      "subType": "boolean"
                  },
                  {
                      "type": 1,
                      "name": "Clear"
                  }
              ],
              "portsOut": [
                  {
                      "type": 2,
                      "name": "Children"
                  },
                  {
                      "type": 5,
                      "name": "Result"
                  },
                  {
                      "type": 0,
                      "name": "Focus",
                      "subType": "boolean"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "Link",
                      "text": "Where to attach the sidebar item to (Sidebar / Sidebar Group)"
                  },
                  {
                      "name": "Text",
                      "text": "The text label"
                  },
                  {
                      "name": "Default",
                      "text": "The default text in the input field"
                  },
                  {
                      "name": "TextArea",
                      "text": "Enables a multi line input field"
                  },
                  {
                      "name": "Grey Out",
                      "text": "Grey out text input area"
                  },
                  {
                      "name": "Visible",
                      "text": "Disable visibility for text input field"
                  },
                  {
                      "name": "Children",
                      "text": "In case you want to add other Sidebar items below"
                  },
                  {
                      "name": "Result",
                      "text": "The text which was entered in the input field"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1570714614732,
          "exampleProjectId": "wa-KH-",
          "shortName": "TextInput_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Sidebar",
          "shortNameDisplay": "TextInput",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Sidebar.TextInput",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Sidebar.TextInput_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Sidebar.Toggle_v4",
          "content": "",
          "attachmentFiles": [],
          "summary": "sidebar boolean toggle/switch element",
          "id": "247f5aaf-6438-4a37-9649-4c0fe9cc78c9",
          "layout": {
              "portsIn": [
                  {
                      "type": 2,
                      "name": "link"
                  },
                  {
                      "type": 5,
                      "name": "Text"
                  },
                  {
                      "type": 0,
                      "name": "Input",
                      "subType": "boolean"
                  },
                  {
                      "type": 1,
                      "name": "Set Default"
                  },
                  {
                      "type": 0,
                      "name": "Grey Out",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Visible",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 2,
                      "name": "childs"
                  },
                  {
                      "type": 0,
                      "name": "Value",
                      "subType": "boolean"
                  },
                  {
                      "type": 1,
                      "name": "Toggled"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1715690442820,
          "exampleProjectId": "aDgYX5",
          "shortName": "Toggle_v4",
          "hasScreenshot": true,
          "namespace": "Ops.Sidebar",
          "shortNameDisplay": "Toggle",
          "version": 4,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Sidebar.Toggle",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Sidebar.Toggle_v2",
                  "versionString": "_v2",
                  "version": 2
              },
              {
                  "name": "Ops.Sidebar.Toggle_v3",
                  "versionString": "_v3",
                  "version": 3
              },
              {
                  "name": "Ops.Sidebar.Toggle_v4",
                  "versionString": "_v4",
                  "version": 4
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Sidebar.XYPad",
          "content": "",
          "attachmentFiles": [],
          "summary": "2d coordinate input element",
          "id": "84f3d05f-0991-4721-88cb-66776b16a094",
          "layout": {
              "portsIn": [
                  {
                      "type": 2,
                      "name": "Link"
                  },
                  {
                      "type": 5,
                      "name": "Text"
                  },
                  {
                      "type": 0,
                      "name": "Range index",
                      "values": [
                          "0-1",
                          "-1-1"
                      ],
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Input X",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Input Y",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Flip X",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Flip Y",
                      "subType": "boolean"
                  },
                  {
                      "type": 1,
                      "name": "Set Default"
                  },
                  {
                      "type": 0,
                      "name": "Visible",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 2,
                      "name": "Children"
                  },
                  {
                      "type": 0,
                      "name": "X",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Y",
                      "subType": "number"
                  },
                  {
                      "type": 2,
                      "name": "HTML Element",
                      "objType": "element"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "Link",
                      "text": "Either a link to the sidebar or sidebar group"
                  },
                  {
                      "name": "Text",
                      "text": "The label text"
                  },
                  {
                      "name": "Children",
                      "text": "Here you can connect other sidebar ops"
                  }
              ]
          },
          "hasExample": true,
          "libs": [
              "colorrick.js"
          ],
          "youtubeids": [],
          "created": 1629451477333,
          "exampleProjectId": "0NF2FL",
          "shortName": "XYPad",
          "hasScreenshot": true,
          "namespace": "Ops.Sidebar",
          "shortNameDisplay": "XYPad",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Sidebar.XYPad",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.String.AddLineBreaks_v2",
          "content": "<p>Specify number of characters for the length of you line of words and break up your string into multiple lines.</p>\n",
          "attachmentFiles": [],
          "summary": "Insert a line break in a string of words",
          "id": "a9a23551-fabb-4014-8d25-4278d729ea5a",
          "layout": {
              "portsIn": [
                  {
                      "type": 5,
                      "name": "String"
                  },
                  {
                      "type": 0,
                      "name": "Max Characters per Line",
                      "subType": "integer"
                  }
              ],
              "portsOut": [
                  {
                      "type": 5,
                      "name": "Result"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1676113556748,
          "exampleProjectId": "4f-D16",
          "shortName": "AddLineBreaks_v2",
          "hasScreenshot": true,
          "namespace": "Ops.String",
          "shortNameDisplay": "AddLineBreaks",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.String.AddLineBreaks",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.String.AddLineBreaks_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "namespaceTitle": "Ops.String",
          "namespaceSummary": "",
          "allowEdit": false,
          "usedInProject": true
      },
      {
          "name": "Ops.String.ArrayContainsString",
          "content": "",
          "attachmentFiles": [],
          "summary": "Check if an array contains a string which can also be a number (find,search,indexOf)",
          "id": "bace9c9b-5e96-4a82-9bcd-02e316afb9de",
          "layout": {
              "portsIn": [
                  {
                      "type": 3,
                      "name": "Array"
                  },
                  {
                      "type": 5,
                      "name": "SearchValue"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "Found",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Index",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "Array",
                      "text": "Array to search through"
                  },
                  {
                      "name": "SearchValue",
                      "text": "value to find"
                  },
                  {
                      "name": "Found",
                      "text": "outputs a boolean if found"
                  },
                  {
                      "name": "Index",
                      "text": "index in array that string was found at"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1591695070465,
          "exampleProjectId": "VuK4ve",
          "shortName": "ArrayContainsString",
          "hasScreenshot": true,
          "namespace": "Ops.String",
          "shortNameDisplay": "ArrayContainsString",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.String.ArrayContainsString",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.String.ArrayOfStrings",
          "content": "",
          "attachmentFiles": [],
          "summary": "Create an array of strings and optionally attach index-number",
          "id": "846f9998-1c05-4757-8011-21020ed01c6d",
          "layout": {
              "portsIn": [
                  {
                      "type": 5,
                      "name": "String"
                  },
                  {
                      "type": 0,
                      "name": "Length",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Attach Number",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 3,
                      "name": "Array"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1647500932771,
          "exampleProjectId": "haeXx3",
          "shortName": "ArrayOfStrings",
          "hasScreenshot": true,
          "namespace": "Ops.String",
          "shortNameDisplay": "ArrayOfStrings",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.String.ArrayOfStrings",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.String.Base64.Base64Decode_v2",
          "content": "",
          "attachmentFiles": [],
          "summary": "decode a string to base64",
          "id": "4986a1d8-390f-48ee-aff4-c4257ddb480a",
          "layout": {
              "portsIn": [
                  {
                      "type": 5,
                      "name": "String"
                  }
              ],
              "portsOut": [
                  {
                      "type": 5,
                      "name": "Result"
                  }
              ]
          },
          "authorName": "pandur",
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1613114969150,
          "exampleProjectId": "",
          "shortName": "Base64Decode_v2",
          "hasScreenshot": false,
          "namespace": "Ops.String.Base64",
          "shortNameDisplay": "Base64Decode",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.String.Base64.Base64Decode",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.String.Base64.Base64Decode_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "namespaceTitle": "Ops.String.Base64",
          "namespaceSummary": "",
          "allowEdit": false
      },
      {
          "name": "Ops.String.Base64.Base64Encode_v3",
          "content": "",
          "attachmentFiles": [],
          "summary": "encode a string to base64",
          "id": "4b30d030-68ec-4baa-bbdd-8fd4479b396c",
          "layout": {
              "portsIn": [
                  {
                      "type": 5,
                      "name": "String"
                  },
                  {
                      "type": 5,
                      "name": "MimeType"
                  }
              ],
              "portsOut": [
                  {
                      "type": 5,
                      "name": "Result"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "String",
                      "text": "the input string"
                  },
                  {
                      "name": "Result",
                      "text": "base64 output"
                  }
              ]
          },
          "license": "MIT",
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1724403805191,
          "exampleProjectId": "",
          "shortName": "Base64Encode_v3",
          "hasScreenshot": false,
          "namespace": "Ops.String.Base64",
          "shortNameDisplay": "Base64Encode",
          "version": 3,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.String.Base64.Base64Encode",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.String.Base64.Base64Encode_v2",
                  "versionString": "_v2",
                  "version": 2
              },
              {
                  "name": "Ops.String.Base64.Base64Encode_v3",
                  "versionString": "_v3",
                  "version": 3
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.String.Base64.DownloadBase64File",
          "content": "",
          "attachmentFiles": [],
          "summary": "trigger a download of a base64 binary file",
          "id": "7f601f11-6d44-4c0a-842a-51b4fa8ccd6b",
          "layout": {
              "portsIn": [
                  {
                      "type": 5,
                      "name": "Data URL"
                  },
                  {
                      "type": 5,
                      "name": "Filename"
                  },
                  {
                      "type": 1,
                      "name": "Download"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1712065810638,
          "exampleProjectId": "jE9zO8",
          "shortName": "DownloadBase64File",
          "hasScreenshot": true,
          "namespace": "Ops.String.Base64",
          "shortNameDisplay": "DownloadBase64File",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.String.Base64.DownloadBase64File",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.String.CharacterRotate",
          "content": "",
          "attachmentFiles": [],
          "summary": "String rotate characters like a split-flap display",
          "id": "9dcc7ad1-c790-4c9d-9f2a-a902bd8d6cc8",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Update"
                  },
                  {
                      "type": 1,
                      "name": "Reset"
                  },
                  {
                      "type": 5,
                      "name": "Text"
                  },
                  {
                      "type": 0,
                      "name": "Random Seed",
                      "subType": "number"
                  },
                  {
                      "type": 5,
                      "name": "Characters"
                  }
              ],
              "portsOut": [
                  {
                      "type": 5,
                      "name": "Result"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1569957602895,
          "exampleProjectId": "-IuM8S",
          "shortName": "CharacterRotate",
          "hasScreenshot": true,
          "namespace": "Ops.String",
          "shortNameDisplay": "CharacterRotate",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.String.CharacterRotate",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.String.ConcatMultiPort",
          "content": "",
          "attachmentFiles": [],
          "summary": "concatinate/join multiple string inputs",
          "id": "02215044-0767-46e9-8a70-5277362f2077",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "Seperator index",
                      "values": [
                          "None",
                          "LineBreak",
                          "Space",
                          ",",
                          "/"
                      ],
                      "subType": "integer"
                  },
                  {
                      "type": 5,
                      "name": "Strings_0",
                      "longPort": 2,
                      "group": "Strings"
                  },
                  {
                      "type": 5,
                      "name": "Strings_1",
                      "uititle": "add port",
                      "group": "Strings"
                  }
              ],
              "portsOut": [
                  {
                      "type": 5,
                      "name": "String"
                  },
                  {
                      "type": 0,
                      "name": "Num Strings",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1713864159070,
          "exampleProjectId": "PBHPrh",
          "shortName": "ConcatMultiPort",
          "hasScreenshot": true,
          "namespace": "Ops.String",
          "shortNameDisplay": "ConcatMultiPort",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.String.ConcatMultiPort",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.String.ConcatMulti_v2",
          "content": "<p>Joins/merges multiple strings together.\nSpaces and line breaks can be added to the end of each string.</p>\n",
          "attachmentFiles": [],
          "summary": "Joins multiple strings together",
          "id": "bc110e48-812d-489d-b1b3-b09c644c6982",
          "layout": {
              "portsIn": [
                  {
                      "type": 5,
                      "name": "string 0"
                  },
                  {
                      "type": 5,
                      "name": "string 1"
                  },
                  {
                      "type": 5,
                      "name": "string 2"
                  },
                  {
                      "type": 5,
                      "name": "string 3"
                  },
                  {
                      "type": 5,
                      "name": "string 4"
                  },
                  {
                      "type": 5,
                      "name": "string 5"
                  },
                  {
                      "type": 5,
                      "name": "string 6"
                  },
                  {
                      "type": 5,
                      "name": "string 7"
                  }
              ],
              "portsOut": [
                  {
                      "type": 5,
                      "name": "concat string"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "add spaces",
                      "text": "Adds a space to the end of each string"
                  },
                  {
                      "name": "new lines",
                      "text": "Adds a line break to the end of each string"
                  },
                  {
                      "name": "string 0",
                      "text": "String 0 in"
                  },
                  {
                      "name": "string 1",
                      "text": "String 1 in"
                  },
                  {
                      "name": "string 2",
                      "text": "String 2 in"
                  },
                  {
                      "name": "string 3",
                      "text": "String 3 in"
                  },
                  {
                      "name": "string 4",
                      "text": "String 4 in"
                  },
                  {
                      "name": "string 5",
                      "text": "String 5 in"
                  },
                  {
                      "name": "string 6",
                      "text": "String 6 in"
                  },
                  {
                      "name": "string 7",
                      "text": "String 7 in"
                  },
                  {
                      "name": "concat string",
                      "text": "Merged strings out"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1652941595204,
          "exampleProjectId": "DNW-QJ",
          "shortName": "ConcatMulti_v2",
          "hasScreenshot": true,
          "namespace": "Ops.String",
          "shortNameDisplay": "ConcatMulti",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.String.ConcatMulti",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.String.ConcatMulti_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.String.Concat_v2",
          "content": "",
          "attachmentFiles": [],
          "summary": "Joins two strings together",
          "id": "a52722aa-0ca9-402c-a844-b7e98a6c6e60",
          "layout": {
              "portsIn": [
                  {
                      "type": 5,
                      "name": "string1"
                  },
                  {
                      "type": 5,
                      "name": "string2"
                  },
                  {
                      "type": 0,
                      "name": "New Line",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Active",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 5,
                      "name": "result"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1541808162771,
          "exampleProjectId": "a8qVz6",
          "shortName": "Concat_v2",
          "hasScreenshot": true,
          "namespace": "Ops.String",
          "shortNameDisplay": "Concat",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.String.Concat",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.String.Concat_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.String.CopyToClipboard",
          "content": "",
          "attachmentFiles": [],
          "summary": "Copy string to clipboard on trigger",
          "id": "283c7eef-680b-45f2-880a-5d9f0762854b",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Copy"
                  },
                  {
                      "type": 5,
                      "name": "String"
                  }
              ],
              "portsOut": []
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1649944786277,
          "exampleProjectId": "Rquam4",
          "caniusequery": "writetext",
          "shortName": "CopyToClipboard",
          "hasScreenshot": true,
          "namespace": "Ops.String",
          "shortNameDisplay": "CopyToClipboard",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.String.CopyToClipboard",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.String.DelayStringSimple",
          "content": "",
          "attachmentFiles": [],
          "summary": "delay the output of a string by n seconds",
          "id": "0e3c0986-071e-4c98-be84-7f17306490c6",
          "layout": {
              "portsIn": [
                  {
                      "type": 5,
                      "name": "Value"
                  },
                  {
                      "type": 0,
                      "name": "Delay",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 5,
                      "name": "Out Value"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1619627499494,
          "exampleProjectId": "kqtJkE",
          "shortName": "DelayStringSimple",
          "hasScreenshot": true,
          "namespace": "Ops.String",
          "shortNameDisplay": "DelayStringSimple",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.String.DelayStringSimple",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.String.File.FileInput_v2",
          "content": "",
          "attachmentFiles": [],
          "summary": "get URL of a file",
          "id": "3f20a79f-a35f-4a4d-b2f3-c46973a4531f",
          "layout": {
              "portsIn": [
                  {
                      "type": 5,
                      "name": "File"
                  }
              ],
              "portsOut": [
                  {
                      "type": 5,
                      "name": "URL"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1605452818981,
          "exampleProjectId": "",
          "shortName": "FileInput_v2",
          "hasScreenshot": false,
          "namespace": "Ops.String.File",
          "shortNameDisplay": "FileInput",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.String.File.FileInput",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.String.File.FileInput_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "namespaceTitle": "Ops.String.File",
          "namespaceSummary": "",
          "allowEdit": false
      },
      {
          "name": "Ops.String.File.SwitchFile_v2",
          "content": "<p>handy if you just want to load one specific file into memory. the texture will only be loaded when the file is switched. </p>\n",
          "attachmentFiles": [],
          "summary": "switch between filenames",
          "id": "250c8d79-2b83-419f-8c23-910d95936f2c",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "Index",
                      "subType": "integer"
                  },
                  {
                      "type": 5,
                      "name": "File 0"
                  },
                  {
                      "type": 5,
                      "name": "File 1"
                  },
                  {
                      "type": 5,
                      "name": "File 2"
                  },
                  {
                      "type": 5,
                      "name": "File 3"
                  },
                  {
                      "type": 5,
                      "name": "File 4"
                  },
                  {
                      "type": 5,
                      "name": "File 5"
                  },
                  {
                      "type": 5,
                      "name": "File 6"
                  },
                  {
                      "type": 5,
                      "name": "File 7"
                  },
                  {
                      "type": 5,
                      "name": "File 8"
                  },
                  {
                      "type": 5,
                      "name": "File 9"
                  },
                  {
                      "type": 5,
                      "name": "File 10"
                  },
                  {
                      "type": 5,
                      "name": "File 11"
                  },
                  {
                      "type": 5,
                      "name": "File 12"
                  },
                  {
                      "type": 5,
                      "name": "File 13"
                  },
                  {
                      "type": 5,
                      "name": "File 14"
                  },
                  {
                      "type": 5,
                      "name": "File 15"
                  }
              ],
              "portsOut": [
                  {
                      "type": 5,
                      "name": "Result"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [
              "TdHgjqOLpnM"
          ],
          "created": 1615474741499,
          "exampleProjectId": "unutii",
          "shortName": "SwitchFile_v2",
          "hasScreenshot": true,
          "namespace": "Ops.String.File",
          "shortNameDisplay": "SwitchFile",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.String.File.SwitchFile",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.String.File.SwitchFile_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.String.FilterValidString",
          "content": "<p>invalid strings will be ignored and not outputed</p>\n",
          "attachmentFiles": [],
          "summary": "filter valid strings (not null,undefined or empty)",
          "id": "a522235d-f220-46ea-bc26-13a5b20ec8c6",
          "layout": {
              "portsIn": [
                  {
                      "type": 5,
                      "name": "String"
                  },
                  {
                      "type": 0,
                      "name": "Invalid if null",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Invalid if undefined",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Invalid if empty",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Invalid if 0",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 5,
                      "name": "Last Valid String"
                  },
                  {
                      "type": 0,
                      "name": "Is Valid",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1584353798919,
          "exampleProjectId": "",
          "shortName": "FilterValidString",
          "hasScreenshot": false,
          "namespace": "Ops.String",
          "shortNameDisplay": "FilterValidString",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.String.FilterValidString",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.String.FreezeString",
          "content": "",
          "attachmentFiles": [],
          "summary": "capture the current input and copy it to the output, even after a reload",
          "id": "9ae2598f-8b5a-4749-aff3-a507c9957225",
          "layout": {
              "portsIn": [
                  {
                      "type": 5,
                      "name": "String"
                  },
                  {
                      "type": 1,
                      "name": "Button"
                  }
              ],
              "portsOut": [
                  {
                      "type": 5,
                      "name": "Frozen String"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "String",
                      "text": "current input value"
                  },
                  {
                      "name": "Button",
                      "text": "freeze the output value"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1643831677411,
          "exampleProjectId": "MuPepX",
          "shortName": "FreezeString",
          "hasScreenshot": true,
          "namespace": "Ops.String",
          "shortNameDisplay": "FreezeString",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.String.FreezeString",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.String.GateString",
          "content": "<p>Will only a String to to be output if the the pass through parameter evaluates to true</p>\n",
          "attachmentFiles": [],
          "summary": "Output string if pass through is true",
          "id": "0ce14933-2d91-4381-9d82-2304aae22c0e",
          "layout": {
              "portsIn": [
                  {
                      "type": 5,
                      "name": "String In"
                  },
                  {
                      "type": 0,
                      "name": "Pass Through",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "When False index",
                      "values": [
                          "keep last string",
                          "custom"
                      ],
                      "subType": "integer"
                  },
                  {
                      "type": 5,
                      "name": "Custom Value"
                  }
              ],
              "portsOut": [
                  {
                      "type": 5,
                      "name": "String Out"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "String In",
                      "text": "String in"
                  },
                  {
                      "name": "Pass Through",
                      "text": "Opens or closes the gate"
                  },
                  {
                      "name": "String Out",
                      "text": "String output if pass through is true"
                  }
              ]
          },
          "hasExample": false,
          "libs": [],
          "youtubeids": [
              "gT1jXP5As9A"
          ],
          "created": 1550903947060,
          "exampleProjectId": "",
          "shortName": "GateString",
          "hasScreenshot": false,
          "namespace": "Ops.String",
          "shortNameDisplay": "GateString",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.String.GateString",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.String.HandleBarsHtml",
          "content": "<p><a href=\"https://handlebarsjs.com/\">https://handlebarsjs.com/</a></p>\n",
          "attachmentFiles": [],
          "summary": "string conversion using handlebars template engine",
          "id": "66de24c3-da6f-458b-b160-151953bbbc3d",
          "layout": {
              "portsIn": [
                  {
                      "type": 5,
                      "name": "Template"
                  },
                  {
                      "type": 2,
                      "name": "Data"
                  }
              ],
              "portsOut": [
                  {
                      "type": 5,
                      "name": "Result"
                  },
                  {
                      "type": 5,
                      "name": "Errors"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [
              "/assets/65f96a07c4f63abf487f326b/handlebars-v4.7.8.js"
          ],
          "youtubeids": [],
          "created": 1710844489983,
          "exampleProjectId": "TKQIs7",
          "shortName": "HandleBarsHtml",
          "hasScreenshot": true,
          "namespace": "Ops.String",
          "shortNameDisplay": "HandleBarsHtml",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.String.HandleBarsHtml",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.String.LeftPad_v2",
          "content": "<p>also see <a href=\"/op/Ops.String.RightPad\" target=\"_blank\">Ops.String.RightPad</a></p>\n",
          "attachmentFiles": [],
          "summary": "create a fixed length string from a number 1 -> 0001",
          "id": "da8aba9f-9e9c-4fca-87c9-2726b6e101e2",
          "layout": {
              "portsIn": [
                  {
                      "type": 5,
                      "name": "Value"
                  },
                  {
                      "type": 5,
                      "name": "Char"
                  },
                  {
                      "type": 0,
                      "name": "Num",
                      "subType": "integer"
                  }
              ],
              "portsOut": [
                  {
                      "type": 5,
                      "name": "String"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1608735356297,
          "exampleProjectId": "8LJxz7",
          "shortName": "LeftPad_v2",
          "hasScreenshot": true,
          "namespace": "Ops.String",
          "shortNameDisplay": "LeftPad",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.String.LeftPad",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.String.LeftPad_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "allowEdit": false,
          "usedInProject": true
      },
      {
          "name": "Ops.String.LimitLineBreaks_v2",
          "content": "<pre><code>1\n2\n3\n4\n</code></pre>\n<p>set num Lines: 3 , result will be:</p>\n<pre><code>1\n2\n3\n</code></pre>\n",
          "attachmentFiles": [],
          "summary": "Limit number of lines in a string",
          "id": "fcf0f2a3-42db-485c-8c0b-15c5eb1f18c7",
          "layout": {
              "portsIn": [
                  {
                      "type": 5,
                      "name": "String"
                  },
                  {
                      "type": 0,
                      "name": "Num Lines",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Reverse",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Force Num Lines",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 5,
                      "name": "Result"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "String",
                      "text": "String input"
                  },
                  {
                      "name": "Num Lines",
                      "text": "Number of lines to display"
                  },
                  {
                      "name": "Reverse",
                      "text": "reverse lines"
                  },
                  {
                      "name": "Result",
                      "text": "String out"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1580144520884,
          "exampleProjectId": "ZCUND-",
          "shortName": "LimitLineBreaks_v2",
          "hasScreenshot": true,
          "namespace": "Ops.String",
          "shortNameDisplay": "LimitLineBreaks",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.String.LimitLineBreaks",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.String.LimitLineBreaks_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "allowEdit": false,
          "usedInProject": true
      },
      {
          "name": "Ops.String.LineBreaksHtml",
          "content": "",
          "attachmentFiles": [],
          "summary": "Convert linebreaks to html breaks",
          "id": "bac20d9b-15c2-424b-9b6b-fd0a9af14f48",
          "layout": {
              "portsIn": [
                  {
                      "type": "5",
                      "name": "String"
                  },
                  {
                      "type": "0",
                      "name": "Add Num Breaks",
                      "subType": "integer"
                  }
              ],
              "portsOut": [
                  {
                      "type": "5",
                      "name": "HTML"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1584356265847,
          "exampleProjectId": "M0BG16",
          "shortName": "LineBreaksHtml",
          "hasScreenshot": true,
          "namespace": "Ops.String",
          "shortNameDisplay": "LineBreaksHtml",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.String.LineBreaksHtml",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.String.LoremIpsum",
          "content": "<p>&quot;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris pretium tempor enim, sit amet elementum ex sodales eu. Nulla porttitor, ante vel condimentum volutpat, nisi est faucibus enim, sed pulvinar arcu justo eget eros. Vivamus blandit ex et ipsum ornare bibendum.\nProin rutrum nisl est, eu pellentesque enim fermentum vel. Praesent tempor eget ligula sed lacinia. Curabitur at interdum nibh. Mauris porta ultricies eros, eu varius nisi.\\nMaecenas quis sapien eget eros luctus lacinia in quis turpis. Fusce luctus, nibh ac dictum elementum, turpis libero tincidunt nulla, a facilisis nulla erat scelerisque felis. In hac habitasse platea dictumst.\nVestibulum cursus malesuada diam ut laoreet. Interdum et malesuada fames ac ante ipsum primis in faucibus. Pellentesque venenatis arcu leo, ut ornare nunc ultrices a. Curabitur pellentesque odio ac est aliquet porta. Morbi metus felis, ornare vitae dictum sit amet, elementum sed dolor. Duis quis commodo dolor. </p>\n",
          "attachmentFiles": [],
          "summary": "Lorem ipsum dolor sit amet",
          "id": "c19ebc53-82d5-429c-a6cc-ff350a2c5d3e",
          "layout": {
              "portsOut": [
                  {
                      "type": "5",
                      "name": "String"
                  },
                  {
                      "type": "5",
                      "name": "HTML String"
                  },
                  {
                      "type": "3",
                      "name": "Array"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1583504975920,
          "exampleProjectId": "4f-D16",
          "shortName": "LoremIpsum",
          "hasScreenshot": true,
          "namespace": "Ops.String",
          "shortNameDisplay": "LoremIpsum",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.String.LoremIpsum",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.String.Lowercase_v2",
          "content": "",
          "attachmentFiles": [],
          "summary": "convert all characters to small letters",
          "id": "bff9c3d9-e63a-46d2-a59f-932c715aceab",
          "layout": {
              "portsIn": [
                  {
                      "type": "5",
                      "name": "String"
                  }
              ],
              "portsOut": [
                  {
                      "type": "5",
                      "name": "Result"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1541835195546,
          "exampleProjectId": "a8qVz6",
          "shortName": "Lowercase_v2",
          "hasScreenshot": true,
          "namespace": "Ops.String",
          "shortNameDisplay": "Lowercase",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.String.Lowercase",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.String.Lowercase_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.String.Md5",
          "content": "<p>MD5 is a cryptographic hashing algorithm. By Inputing data, it will output a certain string, called a hash. Any time the same data is run through the operator on any computer, you get this same number.\nIt makes comparing files or long content easy and fast, without comparing each single byte.</p>\n",
          "attachmentFiles": [],
          "summary": "Create a md5 hash of a string",
          "id": "cfa03ee3-81c5-4c58-9365-e60181b38b3e",
          "layout": {
              "portsIn": [
                  {
                      "type": 5,
                      "name": "String"
                  }
              ],
              "portsOut": [
                  {
                      "type": 5,
                      "name": "MD5 Hash"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1708377272378,
          "exampleProjectId": "IyC0O8",
          "shortName": "Md5",
          "hasScreenshot": true,
          "namespace": "Ops.String",
          "shortNameDisplay": "Md5",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.String.Md5",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.String.NumTotalLineBreaks",
          "content": "",
          "attachmentFiles": [],
          "summary": "Count number of line breaks in a string",
          "id": "76a958cd-def3-40e5-ab2b-c08a3325d9cb",
          "layout": {
              "portsIn": [
                  {
                      "type": 5,
                      "name": "String"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "Total Lines",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1570109660426,
          "exampleProjectId": "lkDCeT",
          "shortName": "NumTotalLineBreaks",
          "hasScreenshot": true,
          "namespace": "Ops.String",
          "shortNameDisplay": "NumTotalLineBreaks",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.String.NumTotalLineBreaks",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.String.NumberFormatter",
          "content": "<p>Wrapped standard Javascript function toLocaleString.</p>\n<p>Outputs a formated representation of the input number, can work with currencies, use the browser locale or use a custom one. Numbers will be rounded to </p>\n<p>See doc here: <a href=\"https://www.w3schools.com/jsref/jsref_tolocalestring_number.asp\">https://www.w3schools.com/jsref/jsref_tolocalestring_number.asp</a></p>\n",
          "attachmentFiles": [],
          "summary": "Format a number to a string in the given locale and format",
          "id": "fb2ac304-5c36-419c-ba71-cdf43aed8a53",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "Input Number",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Locale index",
                      "values": [
                          "browser",
                          "custom"
                      ],
                      "subType": "integer"
                  },
                  {
                      "type": 5,
                      "name": "Locale string"
                  },
                  {
                      "type": 0,
                      "name": "Style index",
                      "values": [
                          "decimal",
                          "currency",
                          "percent"
                      ],
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Minimum Integer Digits",
                      "group": "Format",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Minimum Fraction Digits",
                      "group": "Format",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Maximum Fraction Digits",
                      "group": "Format",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Minimum Significant Digits",
                      "group": "Significant Digits",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Maximum Significant Digits",
                      "group": "Significant Digits",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Use Grouping",
                      "subType": "boolean"
                  },
                  {
                      "type": 5,
                      "name": "Currency Name",
                      "group": "Currency"
                  },
                  {
                      "type": 0,
                      "name": "Currency Display index",
                      "values": [
                          "symbol",
                          "code",
                          "name"
                      ],
                      "group": "Currency",
                      "subType": "integer"
                  }
              ],
              "portsOut": [
                  {
                      "type": 5,
                      "name": "Formatted Number"
                  },
                  {
                      "type": 0,
                      "name": "Has error",
                      "subType": "boolean"
                  }
              ]
          },
          "authorName": "kikohs",
          "docs": {
              "ports": [
                  {
                      "name": "Locale string",
                      "text": "A string with a BCP 47 language tag"
                  },
                  {
                      "name": "Style index",
                      "text": "The formatting style to use"
                  },
                  {
                      "name": "Minimum Integer Digits",
                      "text": "The minimum number of integer digits to use. Possible values are from 1 to 21"
                  },
                  {
                      "name": "Minimum Fraction Digits",
                      "text": "The minimum number of fraction digits to use. Possible values are from 0 to 20"
                  },
                  {
                      "name": "Maximum Fraction Digits",
                      "text": "The maximum number of fraction digits to use. Possible values are from 0 to 20"
                  },
                  {
                      "name": "Minimum Significant Digits",
                      "text": "The maximum number of significant digits to use. Possible values are from 1 to 21"
                  },
                  {
                      "name": "Maximum Significant Digits",
                      "text": "The minimum number of significant digits to use. Possible values are from 1 to 21"
                  },
                  {
                      "name": "Use Grouping",
                      "text": "Whether to use grouping separators, such as thousands separators."
                  },
                  {
                      "name": "Currency Name",
                      "text": "The currency to use in currency formatting. Possible values are the ISO 4217 currency codes."
                  },
                  {
                      "name": "Currency Display index",
                      "text": "How to display the currency in currency formatting"
                  }
              ]
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1647614687158,
          "exampleProjectId": "-h-Rx3",
          "caniusequery": "Date%20toLocaleString",
          "shortName": "NumberFormatter",
          "hasScreenshot": true,
          "namespace": "Ops.String",
          "shortNameDisplay": "NumberFormatter",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.String.NumberFormatter",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.String.NumberSwitchByString",
          "content": "",
          "attachmentFiles": [],
          "summary": "associate numbers by strings",
          "id": "bb3f53ab-c4ad-4c07-81df-d9ca7ee976f2",
          "layout": {
              "portsIn": [
                  {
                      "type": 5,
                      "name": "String"
                  },
                  {
                      "type": 5,
                      "name": "String 1"
                  },
                  {
                      "type": 0,
                      "name": "Number 1",
                      "subType": "number"
                  },
                  {
                      "type": 5,
                      "name": "String 2"
                  },
                  {
                      "type": 0,
                      "name": "Number 2",
                      "subType": "number"
                  },
                  {
                      "type": 5,
                      "name": "String 3"
                  },
                  {
                      "type": 0,
                      "name": "Number 3",
                      "subType": "number"
                  },
                  {
                      "type": 5,
                      "name": "String 4"
                  },
                  {
                      "type": 0,
                      "name": "Number 4",
                      "subType": "number"
                  },
                  {
                      "type": 5,
                      "name": "String 5"
                  },
                  {
                      "type": 0,
                      "name": "Number 5",
                      "subType": "number"
                  },
                  {
                      "type": 5,
                      "name": "String 6"
                  },
                  {
                      "type": 0,
                      "name": "Number 6",
                      "subType": "number"
                  },
                  {
                      "type": 5,
                      "name": "String 7"
                  },
                  {
                      "type": 0,
                      "name": "Number 7",
                      "subType": "number"
                  },
                  {
                      "type": 5,
                      "name": "String 8"
                  },
                  {
                      "type": 0,
                      "name": "Number 8",
                      "subType": "number"
                  },
                  {
                      "type": 5,
                      "name": "String 9"
                  },
                  {
                      "type": 0,
                      "name": "Number 9",
                      "subType": "number"
                  },
                  {
                      "type": 5,
                      "name": "String 10"
                  },
                  {
                      "type": 0,
                      "name": "Number 10",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "Result",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1621872601628,
          "exampleProjectId": "CWSBeE",
          "shortName": "NumberSwitchByString",
          "hasScreenshot": true,
          "namespace": "Ops.String",
          "shortNameDisplay": "NumberSwitchByString",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.String.NumberSwitchByString",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.String.NumberToString_v2",
          "content": "",
          "attachmentFiles": [],
          "summary": "Convert a number to a string",
          "id": "5c6d375a-82db-4366-8013-93f56b4061a9",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "Number",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Decimal Places",
                      "subType": "integer"
                  }
              ],
              "portsOut": [
                  {
                      "type": 5,
                      "name": "Result"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1541808319391,
          "exampleProjectId": "fo6nci",
          "shortName": "NumberToString_v2",
          "hasScreenshot": true,
          "namespace": "Ops.String",
          "shortNameDisplay": "NumberToString",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.String.NumberToString",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.String.NumberToString_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.String.OrString",
          "content": "",
          "attachmentFiles": [],
          "summary": "outputs the first valid string",
          "id": "6b7f9561-6faf-4df7-ac3b-64235dded700",
          "layout": {
              "portsIn": [
                  {
                      "type": "5",
                      "name": "String 1"
                  },
                  {
                      "type": "5",
                      "name": "String 2"
                  },
                  {
                      "type": "5",
                      "name": "String 3"
                  },
                  {
                      "type": "5",
                      "name": "String 4"
                  },
                  {
                      "type": "5",
                      "name": "String 5"
                  },
                  {
                      "type": "5",
                      "name": "String 6"
                  },
                  {
                      "type": "5",
                      "name": "String 7"
                  },
                  {
                      "type": "5",
                      "name": "String 8"
                  }
              ],
              "portsOut": [
                  {
                      "type": "5",
                      "name": "Result"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1587710105864,
          "exampleProjectId": "",
          "shortName": "OrString",
          "hasScreenshot": false,
          "namespace": "Ops.String",
          "shortNameDisplay": "OrString",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.String.OrString",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.String.ParseInt_v2",
          "content": "",
          "attachmentFiles": [],
          "summary": "Parse a string to a integer number / string to number",
          "id": "6d208424-daf2-4a2b-874f-daac406c1f66",
          "layout": {
              "portsIn": [
                  {
                      "type": 5,
                      "name": "String"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "Number",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1541835302748,
          "exampleProjectId": "",
          "shortName": "ParseInt_v2",
          "hasScreenshot": false,
          "namespace": "Ops.String",
          "shortNameDisplay": "ParseInt",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.String.ParseInt",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.String.ParseInt_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.String.RandomString_v3",
          "content": "",
          "attachmentFiles": [],
          "summary": "Generate a random string of given characters",
          "id": "d2374316-90b1-4f50-bdb6-0d7296bbea75",
          "layout": {
              "portsIn": [
                  {
                      "type": 5,
                      "name": "chars"
                  },
                  {
                      "type": 0,
                      "name": "Length",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Seed",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 5,
                      "name": "Result"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1709282901310,
          "exampleProjectId": "HqmXN8",
          "shortName": "RandomString_v3",
          "hasScreenshot": true,
          "namespace": "Ops.String",
          "shortNameDisplay": "RandomString",
          "version": 3,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.String.RandomString",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.String.RandomString_v2",
                  "versionString": "_v2",
                  "version": 2
              },
              {
                  "name": "Ops.String.RandomString_v3",
                  "versionString": "_v3",
                  "version": 3
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.String.RightPadNumber_v2",
          "content": "",
          "attachmentFiles": [],
          "summary": "Converts a number to a string with num decimal places, adds 0's",
          "id": "dfbb4d58-1557-421b-8f2d-fdd0e74f8c43",
          "layout": {
              "portsIn": [
                  {
                      "type": "0",
                      "name": "Value",
                      "subType": "number"
                  },
                  {
                      "type": "0",
                      "name": "Num",
                      "subType": "integer"
                  }
              ],
              "portsOut": [
                  {
                      "type": "5",
                      "name": "String"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1562581795547,
          "exampleProjectId": "ps8ZHq",
          "shortName": "RightPadNumber_v2",
          "hasScreenshot": true,
          "namespace": "Ops.String",
          "shortNameDisplay": "RightPadNumber",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.String.RightPadNumber",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.String.RightPadNumber_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.String.RightPad_v2",
          "content": "<p>e.g. <code>1.1</code> can become <code>1.10</code></p>\n<p>see <a href=\"/op/Ops.String.LeftPad\" target=\"_blank\">Ops.String.LeftPad</a></p>\n",
          "attachmentFiles": [],
          "summary": "create a string with a fixed length filling the space with a character",
          "id": "b10c1bcb-c6aa-4238-bcba-bb9f33a2febf",
          "layout": {
              "portsIn": [
                  {
                      "type": 5,
                      "name": "Value"
                  },
                  {
                      "type": 5,
                      "name": "Char"
                  },
                  {
                      "type": 0,
                      "name": "Num",
                      "subType": "integer"
                  }
              ],
              "portsOut": [
                  {
                      "type": 5,
                      "name": "String"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1543065617794,
          "exampleProjectId": "8LJxz7",
          "shortName": "RightPad_v2",
          "hasScreenshot": true,
          "namespace": "Ops.String",
          "shortNameDisplay": "RightPad",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.String.RightPad",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.String.RightPad_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.String.RouteString",
          "content": "<p>If no string is plugged into the default string port then the output is an empty string &quot;&quot;</p>\n",
          "attachmentFiles": [],
          "summary": "Route a string to an output port",
          "id": "9998ff83-335b-40cd-aa0e-4cae558cb551",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "Index",
                      "subType": "integer"
                  },
                  {
                      "type": 5,
                      "name": "String in"
                  },
                  {
                      "type": 5,
                      "name": "Default string"
                  },
                  {
                      "type": 0,
                      "name": "Set inactive to default",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 5,
                      "name": "Index 0 string"
                  },
                  {
                      "type": 5,
                      "name": "Index 1 string"
                  },
                  {
                      "type": 5,
                      "name": "Index 2 string"
                  },
                  {
                      "type": 5,
                      "name": "Index 3 string"
                  },
                  {
                      "type": 5,
                      "name": "Index 4 string"
                  },
                  {
                      "type": 5,
                      "name": "Index 5 string"
                  },
                  {
                      "type": 5,
                      "name": "Index 6 string"
                  },
                  {
                      "type": 5,
                      "name": "Index 7 string"
                  },
                  {
                      "type": 5,
                      "name": "Index 8 string"
                  },
                  {
                      "type": 5,
                      "name": "Index 9 string"
                  }
              ]
          },
          "authorName": "andro",
          "docs": {
              "ports": [
                  {
                      "name": "Index",
                      "text": "Index of string port out to send string to"
                  },
                  {
                      "name": "String in",
                      "text": "String to route"
                  },
                  {
                      "name": "Default string",
                      "text": "The string which goes out of all other ports"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1587983344507,
          "exampleProjectId": "WDoBX8",
          "shortName": "RouteString",
          "hasScreenshot": true,
          "namespace": "Ops.String",
          "shortNameDisplay": "RouteString",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.String.RouteString",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.String.SaveTextFile",
          "content": "<p>make your browser download a textfile containing the input-string on trigger</p>\n",
          "attachmentFiles": [],
          "summary": "download a textfile containing the input string",
          "id": "ef5929f0-8163-460b-9042-6f20f4f7150b",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Download"
                  },
                  {
                      "type": 5,
                      "name": "Filename"
                  },
                  {
                      "type": 5,
                      "name": "Content String"
                  }
              ],
              "portsOut": []
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "Download",
                      "text": "download file every time triggered"
                  },
                  {
                      "name": "Filename",
                      "text": "the filename of the downloaded file"
                  },
                  {
                      "name": "Content String",
                      "text": "the files contents"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1640422030685,
          "exampleProjectId": "mxybpX",
          "shortName": "SaveTextFile",
          "hasScreenshot": true,
          "namespace": "Ops.String",
          "shortNameDisplay": "SaveTextFile",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.String.SaveTextFile",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.String.SequenceStrings",
          "content": "",
          "attachmentFiles": [],
          "summary": "control order and flow of strings",
          "id": "ee0459bd-3dc1-4b32-b6c1-01f98d06eebd",
          "layout": {
              "portsIn": [
                  {
                      "type": 5,
                      "name": "String 0"
                  },
                  {
                      "type": 5,
                      "name": "String 1"
                  },
                  {
                      "type": 5,
                      "name": "String 2"
                  },
                  {
                      "type": 5,
                      "name": "String 3"
                  },
                  {
                      "type": 5,
                      "name": "String 4"
                  },
                  {
                      "type": 5,
                      "name": "String 5"
                  },
                  {
                      "type": 5,
                      "name": "String 6"
                  },
                  {
                      "type": 5,
                      "name": "String 7"
                  },
                  {
                      "type": 5,
                      "name": "String 8"
                  },
                  {
                      "type": 5,
                      "name": "String 9"
                  },
                  {
                      "type": 5,
                      "name": "String 10"
                  },
                  {
                      "type": 5,
                      "name": "String 11"
                  },
                  {
                      "type": 5,
                      "name": "String 12"
                  },
                  {
                      "type": 5,
                      "name": "String 13"
                  },
                  {
                      "type": 5,
                      "name": "String 14"
                  },
                  {
                      "type": 5,
                      "name": "String 15"
                  }
              ],
              "portsOut": [
                  {
                      "type": 5,
                      "name": "Output 0"
                  },
                  {
                      "type": 5,
                      "name": "Output 1"
                  },
                  {
                      "type": 5,
                      "name": "Output 2"
                  },
                  {
                      "type": 5,
                      "name": "Output 3"
                  },
                  {
                      "type": 5,
                      "name": "Output 4"
                  },
                  {
                      "type": 5,
                      "name": "Output 5"
                  },
                  {
                      "type": 5,
                      "name": "Output 6"
                  },
                  {
                      "type": 5,
                      "name": "Output 7"
                  },
                  {
                      "type": 5,
                      "name": "Output 8"
                  },
                  {
                      "type": 5,
                      "name": "Output 9"
                  },
                  {
                      "type": 5,
                      "name": "Output 10"
                  },
                  {
                      "type": 5,
                      "name": "Output 11"
                  },
                  {
                      "type": 5,
                      "name": "Output 12"
                  },
                  {
                      "type": 5,
                      "name": "Output 13"
                  },
                  {
                      "type": 5,
                      "name": "Output 14"
                  },
                  {
                      "type": 5,
                      "name": "Output 15"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1595235285099,
          "exampleProjectId": "",
          "shortName": "SequenceStrings",
          "hasScreenshot": false,
          "namespace": "Ops.String",
          "shortNameDisplay": "SequenceStrings",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.String.SequenceStrings",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.String.StartsWith",
          "content": "<p>outputs true if the string begins with search string</p>\n",
          "attachmentFiles": [],
          "summary": "does a string starts with another string?",
          "id": "d82e0376-2ff2-4557-b8fa-48c31f27d3ab",
          "layout": {
              "portsIn": [
                  {
                      "type": 5,
                      "name": "String"
                  },
                  {
                      "type": 5,
                      "name": "Search"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "Starts with",
                      "subType": "boolean"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1711550484127,
          "exampleProjectId": "Hht1O8",
          "shortName": "StartsWith",
          "hasScreenshot": true,
          "namespace": "Ops.String",
          "shortNameDisplay": "StartsWith",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.String.StartsWith",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.String.StringCompose_v3",
          "content": "",
          "attachmentFiles": [],
          "summary": "Combine multiple Values to a new String",
          "id": "6afea9f4-728d-4f3c-9e75-62ddc1448bf0",
          "layout": {
              "portsIn": [
                  {
                      "type": "5",
                      "name": "Format"
                  },
                  {
                      "type": "5",
                      "name": "String A"
                  },
                  {
                      "type": "5",
                      "name": "String B"
                  },
                  {
                      "type": "5",
                      "name": "String C"
                  },
                  {
                      "type": "5",
                      "name": "String D"
                  },
                  {
                      "type": "5",
                      "name": "String E"
                  },
                  {
                      "type": "5",
                      "name": "String F"
                  }
              ],
              "portsOut": [
                  {
                      "type": "5",
                      "name": "Result"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1550741239052,
          "exampleProjectId": "U4M4J5",
          "shortName": "StringCompose_v3",
          "hasScreenshot": false,
          "namespace": "Ops.String",
          "shortNameDisplay": "StringCompose",
          "version": 3,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.String.StringCompose",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.String.StringCompose_v2",
                  "versionString": "_v2",
                  "version": 2
              },
              {
                  "name": "Ops.String.StringCompose_v3",
                  "versionString": "_v3",
                  "version": 3
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.String.StringContains_v2",
          "content": "",
          "attachmentFiles": [],
          "summary": "check if string contains another string (find,search,indexOf)",
          "id": "2ca3e5d7-e6b4-46a7-8381-3fe1ad8b6879",
          "layout": {
              "portsIn": [
                  {
                      "type": 5,
                      "name": "String"
                  },
                  {
                      "type": 5,
                      "name": "SearchValue"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "Found",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Index",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1541835918050,
          "exampleProjectId": "",
          "shortName": "StringContains_v2",
          "hasScreenshot": false,
          "namespace": "Ops.String",
          "shortNameDisplay": "StringContains",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.String.StringContains",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.String.StringContains_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.String.StringEditor",
          "content": "<p>Pressing the edit button allows a user to open a text editor which can then  be output as a string.\nthe following syntax modes are available:</p>\n<ul>\n<li>Text</li>\n<li>GLSL</li>\n<li>CSS</li>\n</ul>\n",
          "attachmentFiles": [],
          "summary": "string text editor",
          "id": "6468b7c1-f63e-4db4-b809-4b203d27ead3",
          "layout": {
              "portsIn": [
                  {
                      "type": 5,
                      "name": "value"
                  },
                  {
                      "type": 0,
                      "name": "Syntax index",
                      "subType": "integer"
                  }
              ],
              "portsOut": [
                  {
                      "type": 5,
                      "name": "Result"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "value",
                      "text": "Not an input port, press edit to open the text editor"
                  },
                  {
                      "name": "Result",
                      "text": "String output"
                  }
              ]
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1557742505295,
          "exampleProjectId": "Jhvn8i",
          "shortName": "StringEditor",
          "hasScreenshot": true,
          "namespace": "Ops.String",
          "shortNameDisplay": "StringEditor",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.String.StringEditor",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.String.StringEquals",
          "content": "",
          "attachmentFiles": [],
          "summary": "check if content of two strings is the same",
          "id": "ef15195a-760b-4ac5-9630-322b0ba7b722",
          "layout": {
              "portsIn": [
                  {
                      "type": 5,
                      "name": "String 1"
                  },
                  {
                      "type": 5,
                      "name": "String 2"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "Result",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1559919723187,
          "exampleProjectId": "Nx2zci",
          "shortName": "StringEquals",
          "hasScreenshot": true,
          "namespace": "Ops.String",
          "shortNameDisplay": "StringEquals",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.String.StringEquals",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.String.StringGetLineNumAtIndex",
          "content": "",
          "attachmentFiles": [],
          "summary": "output the line number at the character index",
          "id": "20e3a5aa-c75e-4300-ba5a-7200e4845c83",
          "layout": {
              "portsIn": [
                  {
                      "type": 5,
                      "name": "String"
                  },
                  {
                      "type": 0,
                      "name": "Index",
                      "subType": "integer"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "Line",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Found",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1675780546477,
          "exampleProjectId": "",
          "shortName": "StringGetLineNumAtIndex",
          "hasScreenshot": false,
          "namespace": "Ops.String",
          "shortNameDisplay": "StringGetLineNumAtIndex",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.String.StringGetLineNumAtIndex",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.String.StringIterator_v2",
          "content": "",
          "attachmentFiles": [],
          "summary": "iterate over every character of a string",
          "id": "2def6fdb-de39-4f56-9818-05b7a302583c",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Exec"
                  },
                  {
                      "type": 5,
                      "name": "String"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  },
                  {
                      "type": 5,
                      "name": "Character"
                  },
                  {
                      "type": 0,
                      "name": "Index",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Length",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1543065812320,
          "exampleProjectId": "",
          "shortName": "StringIterator_v2",
          "hasScreenshot": false,
          "namespace": "Ops.String",
          "shortNameDisplay": "StringIterator",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.String.StringIterator",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.String.StringIterator_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.String.StringLength_v2",
          "content": "",
          "attachmentFiles": [],
          "summary": "number of characters in a string",
          "id": "aa47bb8b-d5d7-4175-b217-ab0157d3365d",
          "layout": {
              "portsIn": [
                  {
                      "type": 5,
                      "name": "String"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "Result",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1541806753392,
          "exampleProjectId": "v9GLji",
          "shortName": "StringLength_v2",
          "hasScreenshot": true,
          "namespace": "Ops.String",
          "shortNameDisplay": "StringLength",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.String.StringLength",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.String.StringLength_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "allowEdit": false,
          "usedInProject": true
      },
      {
          "name": "Ops.String.StringReplace",
          "content": "<p>This operator uses the JavaScript function replace() with a regex syntax. Usually you can simply type an alpha numeric string, but if you want to get fancy or need to replace a character such as a period, you will need to format your string replace according to the Regular Expression syntax ( <a href=\"https://en.wikipedia.org/wiki/Regular_expression\">https://en.wikipedia.org/wiki/Regular_expression</a> ).</p>\n<p>For example, replacing a period with a blank space would require you to seek &quot;.&quot; and replace with a &quot; &quot;</p>\n",
          "attachmentFiles": [],
          "summary": "replace occurrences of a string with another string",
          "id": "4a053e7a-6b00-4e71-bd51-90cdb190994c",
          "layout": {
              "portsIn": [
                  {
                      "type": 5,
                      "name": "String"
                  },
                  {
                      "type": 5,
                      "name": "Search For"
                  },
                  {
                      "type": 5,
                      "name": "Replace"
                  },
                  {
                      "type": 0,
                      "name": "Replace What index",
                      "subType": "integer"
                  }
              ],
              "portsOut": [
                  {
                      "type": 5,
                      "name": "Result"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "String",
                      "text": "incoming string"
                  },
                  {
                      "name": "Search For",
                      "text": "find a string or character"
                  },
                  {
                      "name": "Replace",
                      "text": "replace with this string"
                  },
                  {
                      "name": "Replace What index",
                      "text": "ALL(0) or First(1) occurrence "
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1620204809070,
          "exampleProjectId": "q0iLkE",
          "shortName": "StringReplace",
          "hasScreenshot": true,
          "namespace": "Ops.String",
          "shortNameDisplay": "StringReplace",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.String.StringReplace",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.String.StringSortLines",
          "content": "",
          "attachmentFiles": [],
          "summary": "sort each line of a string alphabetically ",
          "id": "f851f199-3da9-4eaf-976b-21a7bf3f10c4",
          "layout": {
              "portsIn": [
                  {
                      "type": 5,
                      "name": "String"
                  },
                  {
                      "type": 0,
                      "name": "Reverse",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 5,
                      "name": "Result"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1711548913182,
          "exampleProjectId": "MMS2O8",
          "shortName": "StringSortLines",
          "hasScreenshot": true,
          "namespace": "Ops.String",
          "shortNameDisplay": "StringSortLines",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.String.StringSortLines",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.String.StringSwitchByString",
          "content": "",
          "attachmentFiles": [],
          "summary": "Switch between multiple strings by a string index",
          "id": "625418c2-dcbc-4eea-9ec6-6c3033e6630b",
          "layout": {
              "portsIn": [
                  {
                      "type": 5,
                      "name": "String"
                  },
                  {
                      "type": 5,
                      "name": "Default"
                  },
                  {
                      "type": 5,
                      "name": "String 1"
                  },
                  {
                      "type": 5,
                      "name": "Result String 1"
                  },
                  {
                      "type": 5,
                      "name": "String 2"
                  },
                  {
                      "type": 5,
                      "name": "Result String 2"
                  },
                  {
                      "type": 5,
                      "name": "String 3"
                  },
                  {
                      "type": 5,
                      "name": "Result String 3"
                  },
                  {
                      "type": 5,
                      "name": "String 4"
                  },
                  {
                      "type": 5,
                      "name": "Result String 4"
                  },
                  {
                      "type": 5,
                      "name": "String 5"
                  },
                  {
                      "type": 5,
                      "name": "Result String 5"
                  },
                  {
                      "type": 5,
                      "name": "String 6"
                  },
                  {
                      "type": 5,
                      "name": "Result String 6"
                  },
                  {
                      "type": 5,
                      "name": "String 7"
                  },
                  {
                      "type": 5,
                      "name": "Result String 7"
                  },
                  {
                      "type": 5,
                      "name": "String 8"
                  },
                  {
                      "type": 5,
                      "name": "Result String 8"
                  },
                  {
                      "type": 5,
                      "name": "String 9"
                  },
                  {
                      "type": 5,
                      "name": "Result String 9"
                  },
                  {
                      "type": 5,
                      "name": "String 10"
                  },
                  {
                      "type": 5,
                      "name": "Result String 10"
                  }
              ],
              "portsOut": [
                  {
                      "type": 5,
                      "name": "Result"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1711546783755,
          "exampleProjectId": "",
          "shortName": "StringSwitchByString",
          "hasScreenshot": false,
          "namespace": "Ops.String",
          "shortNameDisplay": "StringSwitchByString",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.String.StringSwitchByString",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.String.StringToNumber",
          "content": "",
          "attachmentFiles": [],
          "summary": "Parses a string and returns a floating point number / string to number",
          "id": "fa36a56b-a64d-4269-9a9e-addc16493006",
          "layout": {
              "portsIn": [
                  {
                      "type": 5,
                      "name": "String"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "Number",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Not a number",
                      "subType": "boolean"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1541835372873,
          "exampleProjectId": "XMEwci",
          "shortName": "StringToNumber",
          "hasScreenshot": true,
          "namespace": "Ops.String",
          "shortNameDisplay": "StringToNumber",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.String.StringToNumber",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.String.StringTrim_v2",
          "content": "",
          "attachmentFiles": [],
          "summary": "Remove whitespace from both ends of a string",
          "id": "a9aed302-328a-4d33-bd3f-27e3e6690b9e",
          "layout": {
              "portsIn": [
                  {
                      "type": "5",
                      "name": "String"
                  }
              ],
              "portsOut": [
                  {
                      "type": "5",
                      "name": "Result"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1543054004912,
          "exampleProjectId": "Ddmsii",
          "shortName": "StringTrim_v2",
          "hasScreenshot": true,
          "namespace": "Ops.String",
          "shortNameDisplay": "StringTrim",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.String.StringTrim",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.String.StringTrim_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.String.String_v2",
          "content": "<p>The output port will mirror the input port.</p>\n",
          "attachmentFiles": [],
          "summary": "String input/output ",
          "id": "d697ff82-74fd-4f31-8f54-295bc64e713d",
          "layout": {
              "portsIn": [
                  {
                      "type": 5,
                      "name": "value"
                  }
              ],
              "portsOut": [
                  {
                      "type": 5,
                      "name": "String"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1541806036665,
          "exampleProjectId": "FXRsii",
          "shortName": "String_v2",
          "hasScreenshot": true,
          "namespace": "Ops.String",
          "shortNameDisplay": "String",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.String.String",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.String.String_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.String.StringsToArrayMultiPort",
          "content": "",
          "attachmentFiles": [],
          "summary": "create an array from multiple string input ports",
          "id": "57e733ba-0506-4564-a271-68d60cf6c58f",
          "layout": {
              "portsIn": [
                  {
                      "type": 5,
                      "name": "Strings_0",
                      "group": "Strings"
                  },
                  {
                      "type": 5,
                      "name": "Strings_1",
                      "uititle": "add port",
                      "group": "Strings"
                  }
              ],
              "portsOut": [
                  {
                      "type": 3,
                      "name": "Result"
                  },
                  {
                      "type": 0,
                      "name": "Num Values",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1716817549722,
          "exampleProjectId": "oBPhsh",
          "shortName": "StringsToArrayMultiPort",
          "hasScreenshot": true,
          "namespace": "Ops.String",
          "shortNameDisplay": "StringsToArrayMultiPort",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.String.StringsToArrayMultiPort",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.String.StripHtml",
          "content": "",
          "attachmentFiles": [],
          "summary": "remove html tags from a string",
          "id": "8a868fc7-363f-4221-9789-67ffe5830e36",
          "layout": {
              "portsIn": [
                  {
                      "type": "5",
                      "name": "String"
                  }
              ],
              "portsOut": [
                  {
                      "type": "5",
                      "name": "Result"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1593242178355,
          "exampleProjectId": "5NsMve",
          "shortName": "StripHtml",
          "hasScreenshot": true,
          "namespace": "Ops.String",
          "shortNameDisplay": "StripHtml",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.String.StripHtml",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.String.SubString_v2",
          "content": "",
          "attachmentFiles": [],
          "summary": "Subset of a string between one index and another",
          "id": "6e994ba8-01d1-4da6-98b4-af7e822a2e6c",
          "layout": {
              "portsIn": [
                  {
                      "type": 5,
                      "name": "String"
                  },
                  {
                      "type": 0,
                      "name": "Start",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "End",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "End of string",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 5,
                      "name": "Result"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1541835679396,
          "exampleProjectId": "FvIvci",
          "shortName": "SubString_v2",
          "hasScreenshot": true,
          "namespace": "Ops.String",
          "shortNameDisplay": "SubString",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.String.SubString",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.String.SubString_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.String.SwitchString",
          "content": "",
          "attachmentFiles": [],
          "summary": "Switch between multiple strings with an index",
          "id": "2a7a0c68-f7c9-4249-b19a-d2de5cb4862c",
          "layout": {
              "portsIn": [
                  {
                      "type": "0",
                      "name": "Index",
                      "subType": "integer"
                  },
                  {
                      "type": "5",
                      "name": "String 0"
                  },
                  {
                      "type": "5",
                      "name": "String 1"
                  },
                  {
                      "type": "5",
                      "name": "String 2"
                  },
                  {
                      "type": "5",
                      "name": "String 3"
                  },
                  {
                      "type": "5",
                      "name": "String 4"
                  },
                  {
                      "type": "5",
                      "name": "String 5"
                  },
                  {
                      "type": "5",
                      "name": "String 6"
                  },
                  {
                      "type": "5",
                      "name": "String 7"
                  },
                  {
                      "type": "5",
                      "name": "String 8"
                  },
                  {
                      "type": "5",
                      "name": "String 9"
                  }
              ],
              "portsOut": [
                  {
                      "type": "5",
                      "name": "Result"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "Index",
                      "text": "Index number determines which string is passed through"
                  },
                  {
                      "name": "String 0",
                      "text": "String 0 in"
                  },
                  {
                      "name": "String 1",
                      "text": "String 1 in"
                  },
                  {
                      "name": "String 2",
                      "text": "String 2 in"
                  },
                  {
                      "name": "String 3",
                      "text": "String 3 in"
                  },
                  {
                      "name": "String 4",
                      "text": "String 4 in"
                  },
                  {
                      "name": "String 5",
                      "text": "String 5 in"
                  },
                  {
                      "name": "String 6",
                      "text": "String 6 in"
                  },
                  {
                      "name": "String 7",
                      "text": "String 7 in"
                  },
                  {
                      "name": "String 8",
                      "text": "String 8 in"
                  },
                  {
                      "name": "String 9",
                      "text": "String 9 in"
                  },
                  {
                      "name": "Result",
                      "text": "Selected string output"
                  }
              ]
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [
              "TdHgjqOLpnM"
          ],
          "created": 1550903403285,
          "exampleProjectId": "2uRAci",
          "shortName": "SwitchString",
          "hasScreenshot": true,
          "namespace": "Ops.String",
          "shortNameDisplay": "SwitchString",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.String.SwitchString",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.String.SwitchStringMultiPort",
          "content": "",
          "attachmentFiles": [],
          "summary": "switch between multiple string inputs",
          "id": "cf8a883f-cf09-44a6-ba1c-7f9c1220b618",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "Index",
                      "subType": "integer"
                  },
                  {
                      "type": 5,
                      "name": "Strings_0",
                      "group": "Strings"
                  },
                  {
                      "type": 5,
                      "name": "Strings_1",
                      "uititle": "add port",
                      "group": "Strings"
                  }
              ],
              "portsOut": [
                  {
                      "type": 5,
                      "name": "String"
                  },
                  {
                      "type": 0,
                      "name": "Num Values",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1716884678361,
          "exampleProjectId": "TwZ1sh",
          "shortName": "SwitchStringMultiPort",
          "hasScreenshot": true,
          "namespace": "Ops.String",
          "shortNameDisplay": "SwitchStringMultiPort",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.String.SwitchStringMultiPort",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.String.UUID",
          "content": "",
          "attachmentFiles": [],
          "summary": "outputs a unique identifier string",
          "id": "0285022c-846a-43d4-8656-35ba3b5e03a6",
          "layout": {
              "portsIn": [
                  {
                      "type": "1",
                      "name": "Generate"
                  }
              ],
              "portsOut": [
                  {
                      "type": "5",
                      "name": "Id"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1598536817651,
          "exampleProjectId": "ryYQwn",
          "shortName": "UUID",
          "hasScreenshot": true,
          "namespace": "Ops.String",
          "shortNameDisplay": "UUID",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.String.UUID",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.String.Uppercase_v2",
          "content": "",
          "attachmentFiles": [],
          "summary": "Convert all characters in a string to upperase",
          "id": "3f7e6ede-63b6-4262-9dcd-176b43374c4d",
          "layout": {
              "portsIn": [
                  {
                      "type": 5,
                      "name": "String"
                  }
              ],
              "portsOut": [
                  {
                      "type": 5,
                      "name": "Result"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1543065730037,
          "exampleProjectId": "a8qVz6",
          "shortName": "Uppercase_v2",
          "hasScreenshot": false,
          "namespace": "Ops.String",
          "shortNameDisplay": "Uppercase",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.String.Uppercase_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Templates.ExampleVizOp",
          "content": "",
          "attachmentFiles": [],
          "summary": "example how to code a viz layer op",
          "id": "08f3a509-1cad-4dfc-961c-2bd925e066dd",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "Number",
                      "subType": "number"
                  }
              ],
              "portsOut": []
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1655384346929,
          "exampleProjectId": "",
          "shortName": "ExampleVizOp",
          "hasScreenshot": false,
          "namespace": "Ops.Templates",
          "shortNameDisplay": "ExampleVizOp",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Templates.ExampleVizOp",
                  "versionString": "",
                  "version": 0
              }
          ],
          "namespaceTitle": "Ops.Templates",
          "namespaceSummary": "",
          "allowEdit": false
      },
      {
          "name": "Ops.Templates.MinimalMaterial",
          "content": "<p>Colors all subsequent objects yellow, can be useful to quickly highlight and identify objects (debugging).</p>\n",
          "attachmentFiles": [
              "att_shader.frag",
              "att_shader.vert"
          ],
          "summary": "Material Example Template",
          "id": "2df1b492-6a97-4064-b939-ff926d4414d0",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "render"
                  },
                  {
                      "type": 0,
                      "name": "Red",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "trigger"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "render",
                      "text": "Sets the material for all subsequent objects"
                  },
                  {
                      "name": "trigger",
                      "text": "Triggers the next op"
                  }
              ]
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1519816748888,
          "exampleProjectId": "aySyci",
          "shortName": "MinimalMaterial",
          "hasScreenshot": true,
          "namespace": "Ops.Templates",
          "shortNameDisplay": "MinimalMaterial",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Templates.MinimalMaterial",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Templates.PortsArrayExample",
          "content": "",
          "attachmentFiles": [],
          "summary": "Is a template for creating Array ports",
          "id": "c31a7377-0eca-476e-8146-c2d9b8d3b908",
          "layout": {
              "portsIn": [
                  {
                      "type": 3,
                      "name": "Array in"
                  }
              ],
              "portsOut": [
                  {
                      "type": 3,
                      "name": "Array out"
                  }
              ]
          },
          "authorName": "andro",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1537183143150,
          "exampleProjectId": "rWJICn",
          "shortName": "PortsArrayExample",
          "hasScreenshot": true,
          "namespace": "Ops.Templates",
          "shortNameDisplay": "PortsArrayExample",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Templates.PortsArrayExample",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Templates.PortsBooleanExample",
          "content": "",
          "attachmentFiles": [],
          "summary": "Is a template for creating Boolean ports",
          "id": "a21cd004-5cdf-4da2-8866-d1372497c3ff",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "Boolean in",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "Boolean out",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "andro",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1537272426333,
          "exampleProjectId": "rWJICn",
          "shortName": "PortsBooleanExample",
          "hasScreenshot": true,
          "namespace": "Ops.Templates",
          "shortNameDisplay": "PortsBooleanExample",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Templates.PortsBooleanExample",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Templates.PortsObjectExample",
          "content": "",
          "attachmentFiles": [],
          "summary": "Is a template for creating Object ports",
          "id": "d7f414bf-804f-4c1a-987f-dfdbb3d80e27",
          "layout": {
              "portsIn": [
                  {
                      "type": 2,
                      "name": "Object in"
                  }
              ],
              "portsOut": [
                  {
                      "type": 2,
                      "name": "Object Out"
                  }
              ]
          },
          "authorName": "andro",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1537191826097,
          "exampleProjectId": "rWJICn",
          "shortName": "PortsObjectExample",
          "hasScreenshot": true,
          "namespace": "Ops.Templates",
          "shortNameDisplay": "PortsObjectExample",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Templates.PortsObjectExample",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Templates.PortsStringExample",
          "content": "",
          "attachmentFiles": [],
          "summary": "Is a template for creating String ports",
          "id": "3d387694-022f-431f-b25e-636c6d666518",
          "layout": {
              "portsIn": [
                  {
                      "type": "5",
                      "name": "String in"
                  }
              ],
              "portsOut": [
                  {
                      "type": "5",
                      "name": "String out"
                  }
              ]
          },
          "authorName": "andro",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1537174067400,
          "exampleProjectId": "rWJICn",
          "shortName": "PortsStringExample",
          "hasScreenshot": true,
          "namespace": "Ops.Templates",
          "shortNameDisplay": "PortsStringExample",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Templates.PortsStringExample",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Templates.PortsTriggerExample",
          "content": "",
          "attachmentFiles": [],
          "summary": "Is a template for creating Trigger ports",
          "id": "10728b97-ea46-4491-bb66-e6ad01289001",
          "layout": {
              "portsIn": [
                  {
                      "type": "1",
                      "name": "Trigger In"
                  },
                  {
                      "type": "1",
                      "name": "Press me"
                  }
              ],
              "portsOut": [
                  {
                      "type": "1",
                      "name": "Trigger out"
                  }
              ]
          },
          "authorName": "andro",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1537174673069,
          "exampleProjectId": "rWJICn",
          "shortName": "PortsTriggerExample",
          "hasScreenshot": true,
          "namespace": "Ops.Templates",
          "shortNameDisplay": "PortsTriggerExample",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Templates.PortsTriggerExample",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Templates.PortsValueExample",
          "content": "",
          "attachmentFiles": [],
          "summary": "Is a template for creating Value ports",
          "id": "362a1c2f-c4e8-41eb-944b-d16c73a8d27b",
          "layout": {
              "portsIn": [
                  {
                      "type": "0",
                      "name": "Number in ",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": "0",
                      "name": "Value out",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "andro",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1537174432415,
          "exampleProjectId": "rWJICn",
          "shortName": "PortsValueExample",
          "hasScreenshot": true,
          "namespace": "Ops.Templates",
          "shortNameDisplay": "PortsValueExample",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Templates.PortsValueExample",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Templates.ShaderEffectExample",
          "content": "<p>a shaderEffect extends the current shader/material by its own functions</p>\n",
          "attachmentFiles": [
              "att_shaderEffectExample_body.frag",
              "att_shaderEffectExample_body.vert",
              "att_shaderEffectExample_head.frag",
              "att_shaderEffectExample_head.vert"
          ],
          "summary": "shader effect example template",
          "id": "a0df10ce-7ae5-49a4-83df-6afc1f5a3f3a",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Render"
                  },
                  {
                      "type": 0,
                      "name": "Width",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1537260020630,
          "exampleProjectId": "",
          "shortName": "ShaderEffectExample",
          "hasScreenshot": false,
          "namespace": "Ops.Templates",
          "shortNameDisplay": "ShaderEffectExample",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Templates.ShaderEffectExample",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Templates.UiTestOp",
          "content": "",
          "attachmentFiles": [],
          "summary": "UI indicators example op",
          "id": "14fb5b5b-2a4e-419d-a15b-f20d41cf663b",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "Loading Task",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Loading",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Warning",
                      "group": "Warnings",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Error",
                      "group": "Warnings",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Hint",
                      "group": "Warnings",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Not Working",
                      "group": "Warnings",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Slider",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Gradient",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Resizable",
                      "subType": "boolean"
                  },
                  {
                      "type": 1,
                      "name": "trigger"
                  },
                  {
                      "type": 0,
                      "name": "greyout",
                      "group": "Greyout",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "this will greyout",
                      "group": "Greyout",
                      "subType": "number"
                  },
                  {
                      "type": 1,
                      "name": "op.log()",
                      "group": "Logging"
                  },
                  {
                      "type": 1,
                      "name": "op.logWarn()",
                      "group": "Logging"
                  },
                  {
                      "type": 1,
                      "name": "op.logError()",
                      "group": "Logging"
                  },
                  {
                      "type": 1,
                      "name": "Open Prompt",
                      "group": "Modal"
                  },
                  {
                      "type": 1,
                      "name": "Open Modal",
                      "group": "Modal"
                  },
                  {
                      "type": 1,
                      "name": "Open new Tab"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "Something",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1596026347078,
          "exampleProjectId": "RUUacI",
          "shortName": "UiTestOp",
          "hasScreenshot": true,
          "namespace": "Ops.Templates",
          "shortNameDisplay": "UiTestOp",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Templates.UiTestOp",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.TimeLine.AutoPlay",
          "content": "",
          "attachmentFiles": [],
          "summary": "Automatically starts the timeline playback when opening patch",
          "id": "6069e8fe-6cf5-4be6-be38-4d46056ec9f7",
          "layout": {},
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1518592471557,
          "exampleProjectId": "",
          "shortName": "AutoPlay",
          "hasScreenshot": false,
          "namespace": "Ops.TimeLine",
          "shortNameDisplay": "AutoPlay",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.TimeLine.AutoPlay",
                  "versionString": "",
                  "version": 0
              }
          ],
          "namespaceTitle": "Ops.TimeLine",
          "namespaceSummary": "",
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.TimeLine.DemoPrerender",
          "content": "<p>This op records &quot;heavy events&quot;, that cause frame drops at runtime (uploading data to gpu/resizing of textures/compiling shaders).\nThe process prerendering jumps to the timeline-time of those events and renders the state of the patch at that time, so those &quot;heavy events&quot; already happen in the loading/prerendering state and can be visualized with a progress bar</p>\n<h3>how to record &quot;heavy events&quot;</h3>\n<ol start=\"0\">\n<li>if the patch/timing changed a log click &quot;clear&quot; to remove all previous recorded events</li>\n<li>select prerender op, activate &quot;record events&quot; and save the patch</li>\n<li>reload the patch and wait for the demo play and finish and save the patch</li>\n<li>&quot;Num Events&quot; should show the number of detected events.</li>\n<li>it may be necessary to repeat step 2 a few times, until all huge spikes at scene changes in the performance op graph are gone...</li>\n<li>uncheck &quot;record events&quot; and save patch again</li>\n</ol>\n",
          "attachmentFiles": [],
          "summary": "Prerenderer based on timeline progress",
          "id": "962ea9e5-39ee-448c-9a2b-b71ceee47c11",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Render"
                  },
                  {
                      "type": 3,
                      "name": "Manual Timestamps"
                  },
                  {
                      "type": 0,
                      "name": "Record Events",
                      "subType": "boolean"
                  },
                  {
                      "type": 1,
                      "name": "Reset"
                  },
                  {
                      "type": 1,
                      "name": "Clear"
                  },
                  {
                      "type": 0,
                      "name": "ReRender on Resize",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  },
                  {
                      "type": 1,
                      "name": "Prerendered Frame"
                  },
                  {
                      "type": 0,
                      "name": "Progress",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Num Events",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1616274683648,
          "exampleProjectId": "sewM2h",
          "shortName": "DemoPrerender",
          "hasScreenshot": true,
          "namespace": "Ops.TimeLine",
          "shortNameDisplay": "DemoPrerender",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.TimeLine.DemoPrerender",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.TimeLine.GotoFrame",
          "content": "",
          "attachmentFiles": [],
          "summary": "jump to a key in the timeline",
          "id": "5ff97165-b16c-46cc-8ce5-119fddccf1a3",
          "layout": {
              "portsIn": [
                  {
                      "type": "0",
                      "name": "Frame"
                  }
              ]
          },
          "authorName": "pandur",
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1512039802861,
          "exampleProjectId": "",
          "shortName": "GotoFrame",
          "hasScreenshot": false,
          "namespace": "Ops.TimeLine",
          "shortNameDisplay": "GotoFrame",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.TimeLine.GotoFrame",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.TimeLine.PreRender",
          "content": "<p>You can use this for demos to reduce framedrops - prerender your scenes while showing a loading bar.\nShaders are precompiled at loading time / assets are parsed and ready to use.</p>\n",
          "attachmentFiles": [],
          "summary": "Render the patch at certain times ",
          "id": "294efbca-f2b6-46fa-8b28-0530d6b9f9c8",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Render"
                  },
                  {
                      "type": 0,
                      "name": "Max Time",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Step",
                      "subType": "integer"
                  },
                  {
                      "type": 1,
                      "name": "Reset"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  },
                  {
                      "type": 1,
                      "name": "Render Progress"
                  },
                  {
                      "type": 1,
                      "name": "Done"
                  },
                  {
                      "type": 0,
                      "name": "Progress",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "kb_",
          "docs": {
              "ports": []
          },
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1605646492467,
          "exampleProjectId": "",
          "shortName": "PreRender",
          "hasScreenshot": false,
          "namespace": "Ops.TimeLine",
          "shortNameDisplay": "PreRender",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.TimeLine.PreRender",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.TimeLine.TimeLineControls",
          "content": "",
          "attachmentFiles": [],
          "summary": "use position and play pause state of cables timeline",
          "id": "53cb7b1a-56c7-405f-b427-12db78fbfd2f",
          "layout": {
              "portsIn": [],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "Play/Stop",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "time",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1519814509715,
          "exampleProjectId": "",
          "shortName": "TimeLineControls",
          "hasScreenshot": false,
          "namespace": "Ops.TimeLine",
          "shortNameDisplay": "TimeLineControls",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.TimeLine.TimeLineControls",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.TimeLine.TimeLineFrame",
          "content": "",
          "attachmentFiles": [],
          "summary": "Returns the current frame number of the timeline",
          "id": "a6c66f1f-2102-4b68-882b-afd25a4da538",
          "layout": {
              "portsOut": [
                  {
                      "type": "0",
                      "name": "time"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1512035664875,
          "exampleProjectId": "",
          "shortName": "TimeLineFrame",
          "hasScreenshot": false,
          "namespace": "Ops.TimeLine",
          "shortNameDisplay": "TimeLineFrame",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.TimeLine.TimeLineFrame",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.TimeLine.TimeLineLength",
          "content": "",
          "attachmentFiles": [],
          "summary": "current set length of the timeline",
          "id": "c8aee7f4-ad53-406d-b7fe-527bf271c088",
          "layout": {
              "portsIn": [],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "Length",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1668774377580,
          "exampleProjectId": "qSMdck",
          "shortName": "TimeLineLength",
          "hasScreenshot": true,
          "namespace": "Ops.TimeLine",
          "shortNameDisplay": "TimeLineLength",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.TimeLine.TimeLineLength",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.TimeLine.TimeLineLoop",
          "content": "<p>Let timeline restart after it reaches <code>Duration</code>.</p>\n",
          "attachmentFiles": [],
          "summary": "Automatic rewind of timeline at a certain time",
          "id": "e450a850-7311-48b5-abfc-07ec1fea3b8e",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Execute"
                  },
                  {
                      "type": 0,
                      "name": "duration",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "trigger"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "Execute",
                      "text": "Executes the op"
                  },
                  {
                      "name": "duration",
                      "text": "How long the loop should be (in seconds)"
                  },
                  {
                      "name": "trigger",
                      "text": "Triggers the next op"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1511161201893,
          "exampleProjectId": "GbEqL-",
          "shortName": "TimeLineLoop",
          "hasScreenshot": true,
          "namespace": "Ops.TimeLine",
          "shortNameDisplay": "TimeLineLoop",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.TimeLine.TimeLineLoop",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.TimeLine.TimeLineOverwrite",
          "content": "",
          "attachmentFiles": [],
          "summary": "overwrite timeline time value",
          "id": "f0492ba2-5009-4a9a-bfd9-8a03633df31c",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "exe"
                  },
                  {
                      "type": 0,
                      "name": "new time",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "trigger"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1519811205999,
          "exampleProjectId": "",
          "shortName": "TimeLineOverwrite",
          "hasScreenshot": false,
          "namespace": "Ops.TimeLine",
          "shortNameDisplay": "TimeLineOverwrite",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.TimeLine.TimeLineOverwrite",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.TimeLine.TimeLinePlay",
          "content": "",
          "attachmentFiles": [],
          "summary": "start timeline",
          "id": "fc75b841-a55f-4474-8746-61218588598d",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Play"
                  },
                  {
                      "type": 1,
                      "name": "Pause"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1504850778646,
          "exampleProjectId": "3F6DOe",
          "shortName": "TimeLinePlay",
          "hasScreenshot": true,
          "namespace": "Ops.TimeLine",
          "shortNameDisplay": "TimeLinePlay",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.TimeLine.TimeLinePlay",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.TimeLine.TimeLinePlayer",
          "content": "<p>This op allows complete control over the timeline and gives information such as current position.\nFrame number out is based upon 30 FPS.\nUse this with the  <a href=\"/op/Ops.WebAudio.MediaPlayer\" target=\"_blank\">Ops.WebAudio.MediaPlayer</a> op for accurate audio playback of a track. </p>\n",
          "attachmentFiles": [],
          "summary": "Player controls for the timeline",
          "id": "97e57613-6a51-41cf-9de5-fe3dbc2c69b2",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Play"
                  },
                  {
                      "type": 1,
                      "name": "Pause"
                  },
                  {
                      "type": 1,
                      "name": "rewind"
                  },
                  {
                      "type": 0,
                      "name": "Set current time",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "play trigger"
                  },
                  {
                      "type": 1,
                      "name": "pause trigger"
                  },
                  {
                      "type": 1,
                      "name": "rewind trigger"
                  },
                  {
                      "type": 0,
                      "name": "is Playing",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "set time (seconds)",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "current time",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "current frame",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "andro",
          "docs": {
              "ports": [
                  {
                      "name": "Play",
                      "text": "Trigger to start timeline"
                  },
                  {
                      "name": "Pause",
                      "text": "Trigger to pause timeline - pressing play again resumes from this point"
                  },
                  {
                      "name": "rewind",
                      "text": "Rewind to 0"
                  },
                  {
                      "name": "Set current time",
                      "text": "Set current time - press play to jump to this number"
                  },
                  {
                      "name": "play trigger",
                      "text": "Trigger out when play has been triggered"
                  },
                  {
                      "name": "pause trigger",
                      "text": "Trigger out when pause has been triggered"
                  },
                  {
                      "name": "rewind trigger",
                      "text": "Trigger out when rewind has been triggered"
                  },
                  {
                      "name": "is Playing",
                      "text": "Is true when timeline is playing else false"
                  },
                  {
                      "name": "set time (seconds)",
                      "text": "number that time was set to"
                  },
                  {
                      "name": "current time",
                      "text": "Current time in seconds1"
                  },
                  {
                      "name": "current frame",
                      "text": "Current time in frames (30fps)"
                  }
              ]
          },
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1566304281410,
          "exampleProjectId": "",
          "shortName": "TimeLinePlayer",
          "hasScreenshot": false,
          "namespace": "Ops.TimeLine",
          "shortNameDisplay": "TimeLinePlayer",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.TimeLine.TimeLinePlayer",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false,
          "usedInProject": true
      },
      {
          "name": "Ops.TimeLine.TimeLineRewind",
          "content": "",
          "attachmentFiles": [],
          "summary": "set time of timeline to 0 (rewind, restart)",
          "id": "d3408604-858c-4226-8d4c-1ef669956f35",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "exe"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1511161157222,
          "exampleProjectId": "3F6DOe",
          "shortName": "TimeLineRewind",
          "hasScreenshot": true,
          "namespace": "Ops.TimeLine",
          "shortNameDisplay": "TimeLineRewind",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.TimeLine.TimeLineRewind",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.TimeLine.TimeLineSetTime",
          "content": "",
          "attachmentFiles": [],
          "summary": "set current time of timeline",
          "id": "c65f3975-0901-4252-b040-f21f9b144d70",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Update"
                  },
                  {
                      "type": 0,
                      "name": "Time",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1576832794203,
          "exampleProjectId": "3F6DOe",
          "shortName": "TimeLineSetTime",
          "hasScreenshot": true,
          "namespace": "Ops.TimeLine",
          "shortNameDisplay": "TimeLineSetTime",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.TimeLine.TimeLineSetTime",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.TimeLine.TimeLineTime",
          "content": "",
          "attachmentFiles": [],
          "summary": "Returns the current time of the timeline",
          "id": "3ab26f26-a12a-4c48-9411-20591a5f569d",
          "layout": {
              "portsIn": [],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "time",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "time",
                      "text": "The current time of the timeline (in seconds)"
                  }
              ]
          },
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1541051831546,
          "exampleProjectId": "",
          "shortName": "TimeLineTime",
          "hasScreenshot": false,
          "namespace": "Ops.TimeLine",
          "shortNameDisplay": "TimeLineTime",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.TimeLine.TimeLineTime",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.TimeLine.TimeLineTogglePlay",
          "content": "",
          "attachmentFiles": [],
          "summary": "toggle between timeline playing and being paused",
          "id": "930c6f38-9271-4021-a58b-14dcfc5763b2",
          "layout": {
              "portsIn": [
                  {
                      "type": "0",
                      "name": "Play",
                      "subType": "boolean"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1564783928413,
          "exampleProjectId": "",
          "shortName": "TimeLineTogglePlay",
          "hasScreenshot": false,
          "namespace": "Ops.TimeLine",
          "shortNameDisplay": "TimeLineTogglePlay",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.TimeLine.TimeLineTogglePlay",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.TimeLine.TimelineValue",
          "content": "<p>Allows you to animate a simple value for use with other ops. Use the timeline to keyframe the animation and attach the output to another op you wish to animate. Useful for reusing values or using a single timeline to animated multiple ops.</p>\n<p>To sync with other animations, be sure to use <a href=\"/op/Ops.TimeLine.TimeLineTime\" target=\"_blank\">Ops.TimeLine.TimeLineTime</a> .\nYou can also use other ways to animate the time value to playback your keyframes but this is not recommended at the moment.</p>\n",
          "attachmentFiles": [],
          "summary": "Animate and get value at \"time\" of timeline",
          "id": "c5f260da-c8e3-4890-a37e-937d49b9da7d",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "Time",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Value",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Unit index",
                      "subType": "integer"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "Result",
                      "subType": "number"
                  },
                  {
                      "type": 3,
                      "name": "Anim Array"
                  },
                  {
                      "type": 0,
                      "name": "Anim Finished",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "Value",
                      "text": "value at \"time\" in the op's animated timeline"
                  },
                  {
                      "name": "Unit",
                      "text": "interpret Time parameter as Seconds or Frames"
                  },
                  {
                      "name": "Anim Array",
                      "text": "all keys in timeline as array2x [time,value,time,value,time,value]"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1519128795735,
          "exampleProjectId": "xAg8P6",
          "shortName": "TimelineValue",
          "hasScreenshot": true,
          "namespace": "Ops.TimeLine",
          "shortNameDisplay": "TimelineValue",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.TimeLine.TimelineValue",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Trigger.DelayedTrigger",
          "content": "",
          "attachmentFiles": [],
          "summary": "delay triggering next port by x seconds",
          "id": "f4ff66b0-8500-46f7-9117-832aea0c2750",
          "layout": {
              "portsIn": [
                  {
                      "type": "1",
                      "name": "exe"
                  },
                  {
                      "type": "0",
                      "name": "delay",
                      "subType": "number"
                  },
                  {
                      "type": "1",
                      "name": "Cancel"
                  }
              ],
              "portsOut": [
                  {
                      "type": "1",
                      "name": "next"
                  },
                  {
                      "type": "0",
                      "name": "Delaying",
                      "subType": "boolean"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1558014639272,
          "exampleProjectId": "VgtMji",
          "shortName": "DelayedTrigger",
          "hasScreenshot": true,
          "namespace": "Ops.Trigger",
          "shortNameDisplay": "DelayedTrigger",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Trigger.DelayedTrigger",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false,
          "namespaceTitle": "Ops.Trigger",
          "namespaceSummary": ""
      },
      {
          "name": "Ops.Trigger.GateTrigger",
          "content": "",
          "attachmentFiles": [],
          "summary": "Allows a trigger to pass only if the gate is open",
          "id": "65e8b8a2-ba13-485f-883a-2bcf377989da",
          "layout": {
              "portsIn": [
                  {
                      "type": "1",
                      "name": "Execute"
                  },
                  {
                      "type": "0",
                      "name": "Pass Through",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": "1",
                      "name": "Trigger out"
                  }
              ]
          },
          "authorName": "andro",
          "docs": {
              "ports": [
                  {
                      "name": "Pass Through",
                      "text": "When true trigger passes through"
                  },
                  {
                      "name": "Execute",
                      "text": "Trigger in "
                  },
                  {
                      "name": "Trigger out",
                      "text": "Trigger out"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [
              "gT1jXP5As9A"
          ],
          "created": 1564999639713,
          "exampleProjectId": "xotJAH",
          "shortName": "GateTrigger",
          "hasScreenshot": true,
          "namespace": "Ops.Trigger",
          "shortNameDisplay": "GateTrigger",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Trigger.GateTrigger",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Trigger.Interval",
          "content": "<p>Starts a timer which triggers every x milliseconds.\nDo not use this in animations you want to record</p>\n",
          "attachmentFiles": [],
          "summary": "Timed Trigger every x ms",
          "id": "3e9bae10-38af-4e36-9fcc-35faeeaf57f8",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "interval",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Active",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "trigger"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "interval",
                      "text": "Number of milliseconds to trigger"
                  },
                  {
                      "name": "Active",
                      "text": "If the interval is active or not"
                  },
                  {
                      "name": "trigger",
                      "text": "Triggers every x milliseconds"
                  }
              ]
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1512035668333,
          "exampleProjectId": "ZdvX7i",
          "shortName": "Interval",
          "hasScreenshot": true,
          "namespace": "Ops.Trigger",
          "shortNameDisplay": "Interval",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Trigger.Interval",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Trigger.IsTriggered",
          "content": "<p>can be used to check if a branch of ops is being triggered in the last frame.</p>\n<p>(the result has a delay of one frame)</p>\n",
          "attachmentFiles": [],
          "summary": "outputs true if being triggered last frame",
          "id": "7c96fee9-4c2f-45e1-a41b-096b06d286b8",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Trigger"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  },
                  {
                      "type": 0,
                      "name": "Was Triggered",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1585045179419,
          "exampleProjectId": "kmXCm6",
          "shortName": "IsTriggered",
          "hasScreenshot": true,
          "namespace": "Ops.Trigger",
          "shortNameDisplay": "IsTriggered",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Trigger.IsTriggered",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Trigger.NthTrigger_v2",
          "content": "<p>Helpful when you want to slow things down. Makes sure only every nth trigger <em>gets through</em>. E.g. when <code>Nth</code> is <code>3</code> every 3rd trigger gets through, the others not. </p>\n",
          "attachmentFiles": [],
          "summary": "Lets a trigger through every nth time (trigger limiter)",
          "id": "ea43c184-5842-4aa1-b298-5db4515cbed0",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Execute"
                  },
                  {
                      "type": 0,
                      "name": "Nth",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  }
              ]
          },
          "authorName": "tim",
          "docs": {
              "ports": [
                  {
                      "name": "Execute",
                      "text": "Executes the op"
                  },
                  {
                      "name": "Nth",
                      "text": "How often the trigger should be let through"
                  },
                  {
                      "name": "Next",
                      "text": "The limited trigger"
                  }
              ]
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1525282533444,
          "exampleProjectId": "cnVqii",
          "shortName": "NthTrigger_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Trigger",
          "shortNameDisplay": "NthTrigger",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Trigger.NthTrigger",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Trigger.NthTrigger_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Trigger.NumberByTrigger",
          "content": "<p>Outputs the last number of the input port which was triggered, so e.g. if input port <code>2</code> was triggered last, <code>Result</code> will be <code>2</code>.</p>\n",
          "attachmentFiles": [],
          "summary": "Outputs the last number of the input port which was triggered",
          "id": "43ed1123-1312-4383-b843-27b8ec540c09",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "0"
                  },
                  {
                      "type": 1,
                      "name": "1"
                  },
                  {
                      "type": 1,
                      "name": "2"
                  },
                  {
                      "type": 1,
                      "name": "3"
                  },
                  {
                      "type": 1,
                      "name": "4"
                  },
                  {
                      "type": 1,
                      "name": "5"
                  },
                  {
                      "type": 1,
                      "name": "6"
                  },
                  {
                      "type": 1,
                      "name": "7"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "number",
                      "subType": "number"
                  },
                  {
                      "type": 1,
                      "name": "Triggered"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "number",
                      "text": "The input-port which was triggered last"
                  }
              ]
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1519814609448,
          "exampleProjectId": "kzTxsh",
          "shortName": "NumberByTrigger",
          "hasScreenshot": true,
          "namespace": "Ops.Trigger",
          "shortNameDisplay": "NumberByTrigger",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Trigger.NumberByTrigger",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false,
          "usedInProject": true
      },
      {
          "name": "Ops.Trigger.NumberByTriggerMultiPort",
          "content": "",
          "attachmentFiles": [],
          "summary": "output a number by triggering an index port ",
          "id": "683d3ab1-4d85-4f71-ae19-e21f4c8e9110",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Trigger_0",
                      "group": "Trigger"
                  },
                  {
                      "type": 1,
                      "name": "Trigger_1",
                      "uititle": "add port",
                      "group": "Trigger"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  },
                  {
                      "type": 0,
                      "name": "Number Triggered",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1716804979760,
          "exampleProjectId": "ubuysh",
          "shortName": "NumberByTriggerMultiPort",
          "hasScreenshot": true,
          "namespace": "Ops.Trigger",
          "shortNameDisplay": "NumberByTriggerMultiPort",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Trigger.NumberByTriggerMultiPort",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Trigger.ProbabilityTrigger",
          "content": "<p>This op triggers based on a given probability.</p>\n<p>An example:</p>\n<p>If you set the probability to 0.8, there is an 80% chance that the left output will be triggered and a 20% chance that it won&#39;t (and instead, the right output will be triggered).</p>\n<p>If you set the probability to 0, only the right output will be triggered.\nIf you set the probability to 1, only the left output will be triggered.</p>\n",
          "attachmentFiles": [],
          "summary": "trigger by chance",
          "id": "69436c67-eab0-4829-b0dc-d7bfd863a116",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Trigger In"
                  },
                  {
                      "type": 0,
                      "name": "Probability",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Trigger Output"
                  },
                  {
                      "type": 1,
                      "name": "Inverse Trigger Output"
                  }
              ]
          },
          "authorName": "simod",
          "docs": {
              "ports": [
                  {
                      "name": "Trigger In",
                      "text": "trigger input"
                  },
                  {
                      "name": "Probability",
                      "text": "probability of trigger being passed to first trigger output (0 = trigger only passed to inverse output, 1 = trigger always"
                  },
                  {
                      "name": "Trigger Output",
                      "text": "triggers when probability criteria is met"
                  },
                  {
                      "name": "Inverse Trigger Output",
                      "text": "triggers when probability criteria is not met"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1613400346155,
          "exampleProjectId": "I61CCu",
          "shortName": "ProbabilityTrigger",
          "hasScreenshot": true,
          "namespace": "Ops.Trigger",
          "shortNameDisplay": "ProbabilityTrigger",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Trigger.ProbabilityTrigger",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Trigger.RandomTrigger",
          "content": "",
          "attachmentFiles": [],
          "summary": "randomly trigger output ports",
          "id": "3996175e-0424-407b-bcff-a7b4791d75df",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Render"
                  },
                  {
                      "type": 0,
                      "name": "Num Times",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Seed",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Only Once",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "Index",
                      "subType": "number"
                  },
                  {
                      "type": 1,
                      "name": "trigger 0"
                  },
                  {
                      "type": 1,
                      "name": "trigger 1"
                  },
                  {
                      "type": 1,
                      "name": "trigger 2"
                  },
                  {
                      "type": 1,
                      "name": "trigger 3"
                  },
                  {
                      "type": 1,
                      "name": "trigger 4"
                  },
                  {
                      "type": 1,
                      "name": "trigger 5"
                  },
                  {
                      "type": 1,
                      "name": "trigger 6"
                  },
                  {
                      "type": 1,
                      "name": "trigger 7"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "Num Times",
                      "text": "how many random ports will be triggered"
                  },
                  {
                      "name": "Only Once",
                      "text": "every output is max triggered once"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1519832323481,
          "exampleProjectId": "3P54t7",
          "shortName": "RandomTrigger",
          "hasScreenshot": true,
          "namespace": "Ops.Trigger",
          "shortNameDisplay": "RandomTrigger",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Trigger.RandomTrigger",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Trigger.Repeat2d",
          "content": "<p>Imagine a <a href=\"/op/Ops.Trigger.Repeat\" target=\"_blank\">Ops.Trigger.Repeat</a> connected to a <a href=\"/op/Ops.Trigger.Repeat\" target=\"_blank\">Ops.Trigger.Repeat</a>, or a for loop inside a for loop. This loop is especially useful for drawing a matrix of objects.</p>\n",
          "attachmentFiles": [],
          "summary": "Triggers all ops underneath Num X * Num Y times",
          "id": "79934693-5887-4173-8b48-3e3a18fcf225",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "exe"
                  },
                  {
                      "type": 0,
                      "name": "num x",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "num y",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "mul",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "center",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "trigger"
                  },
                  {
                      "type": 0,
                      "name": "x",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "y",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "index",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "total iterations",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "exe",
                      "text": "Executes the loop"
                  },
                  {
                      "name": "num x",
                      "text": "Number of times executed on the X axis"
                  },
                  {
                      "name": "num y",
                      "text": "Number of times executed on the Y axis"
                  },
                  {
                      "name": "mul",
                      "text": "Multiplies the `X` and `Y`values, makes it easier e.g. to use the outputs directly in a Ops.Gl.Matrix.Transform"
                  },
                  {
                      "name": "center",
                      "text": "Centers `X` and `Y` around the origin `(0/0)`"
                  },
                  {
                      "name": "trigger",
                      "text": "Trigger for each iteration of the loop"
                  },
                  {
                      "name": "x",
                      "text": "The X value for the current iteration"
                  },
                  {
                      "name": "y",
                      "text": "The Y value for the current iteration"
                  },
                  {
                      "name": "index",
                      "text": "Current index. If you have a 5x5 repeater, this value goes from 0 to (including) 24"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1511163188763,
          "exampleProjectId": "lPZfgg",
          "shortName": "Repeat2d",
          "hasScreenshot": true,
          "namespace": "Ops.Trigger",
          "shortNameDisplay": "Repeat2d",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Trigger.Repeat2d",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Trigger.Repeat_v2",
          "content": "<p>All ops connected to the <code>Trigger</code> port will be triggered <code>Num</code> times.</p>\n<p>this op works like a classic for loop</p>\n<p>e.g:</p>\n<p>num is 5 </p>\n<p>direction <code>forward</code>: the index will go from 0 to 4 <code>0,1,2,3,4</code></p>\n<p>direction <code>backward</code>: the index will go from 4 to 0 <code>4,3,2,1,0</code></p>\n",
          "attachmentFiles": [],
          "summary": "Triggers all ops below x times (for loop / while)",
          "id": "a4deea80-db97-478f-ad1a-5ee30f2f47cc",
          "layout": {
              "portsIn": [
                  {
                      "type": "1",
                      "name": "Execute"
                  },
                  {
                      "type": "0",
                      "name": "Repeats",
                      "subType": "integer"
                  },
                  {
                      "type": "0",
                      "name": "Direction index",
                      "subType": "integer"
                  }
              ],
              "portsOut": [
                  {
                      "type": "1",
                      "name": "Next"
                  },
                  {
                      "type": "0",
                      "name": "index",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "Repeats",
                      "text": "How often the loop should be executed"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [
              "jiOLZaMUH78",
              "DW9U5tv1GHM"
          ],
          "created": 1572343026896,
          "exampleProjectId": "VFAfgg",
          "shortName": "Repeat_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Trigger",
          "shortNameDisplay": "Repeat",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Trigger.Repeat",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Trigger.Repeat_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Trigger.RouteTrigger",
          "content": "",
          "attachmentFiles": [],
          "summary": "Triggers one of the out ports - value index switch case (was SwitchTrigger)",
          "id": "44ceb5d8-b040-4722-b189-a6fb8172517d",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Execute"
                  },
                  {
                      "type": 0,
                      "name": "Switch Value",
                      "subType": "integer"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next Trigger"
                  },
                  {
                      "type": 0,
                      "name": "Switched Value",
                      "subType": "number"
                  },
                  {
                      "type": 1,
                      "name": "Trigger 0"
                  },
                  {
                      "type": 1,
                      "name": "Trigger 1"
                  },
                  {
                      "type": 1,
                      "name": "Trigger 2"
                  },
                  {
                      "type": 1,
                      "name": "Trigger 3"
                  },
                  {
                      "type": 1,
                      "name": "Trigger 4"
                  },
                  {
                      "type": 1,
                      "name": "Trigger 5"
                  },
                  {
                      "type": 1,
                      "name": "Trigger 6"
                  },
                  {
                      "type": 1,
                      "name": "Trigger 7"
                  },
                  {
                      "type": 1,
                      "name": "Trigger 8"
                  },
                  {
                      "type": 1,
                      "name": "Trigger 9"
                  },
                  {
                      "type": 1,
                      "name": "Trigger 10"
                  },
                  {
                      "type": 1,
                      "name": "Trigger 11"
                  },
                  {
                      "type": 1,
                      "name": "Trigger 12"
                  },
                  {
                      "type": 1,
                      "name": "Trigger 13"
                  },
                  {
                      "type": 1,
                      "name": "Trigger 14"
                  },
                  {
                      "type": 1,
                      "name": "Trigger 15"
                  },
                  {
                      "type": 1,
                      "name": "Trigger 16"
                  },
                  {
                      "type": 1,
                      "name": "Trigger 17"
                  },
                  {
                      "type": 1,
                      "name": "Trigger 18"
                  },
                  {
                      "type": 1,
                      "name": "Trigger 19"
                  },
                  {
                      "type": 1,
                      "name": "Trigger 20"
                  },
                  {
                      "type": 1,
                      "name": "Trigger 21"
                  },
                  {
                      "type": 1,
                      "name": "Trigger 22"
                  },
                  {
                      "type": 1,
                      "name": "Trigger 23"
                  },
                  {
                      "type": 1,
                      "name": "Default Trigger"
                  },
                  {
                      "type": 0,
                      "name": "Highest Index",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "tim",
          "docs": {
              "ports": [
                  {
                      "name": "Default Trigger",
                      "text": "This port is triggered when a Switched Value is out of range"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [
              "TdHgjqOLpnM"
          ],
          "created": 1514899883548,
          "exampleProjectId": "DzH9S5",
          "shortName": "RouteTrigger",
          "hasScreenshot": true,
          "namespace": "Ops.Trigger",
          "shortNameDisplay": "RouteTrigger",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Trigger.RouteTrigger",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Trigger.RouteTriggerAnimated",
          "content": "",
          "attachmentFiles": [
              "att_inc_gen_ports.js",
              "att_ports.json",
              "att_subpatch_json"
          ],
          "summary": "animated switching between things",
          "id": "563afe75-045b-4c49-b58d-5f4ea4d0e807",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "ip34w2ny0",
                      "uititle": "Index",
                      "subType": "integer"
                  },
                  {
                      "type": 1,
                      "name": "wiikdxo89",
                      "uititle": "exe"
                  },
                  {
                      "type": 0,
                      "name": "s0ddunhhz",
                      "uititle": "Duration",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "4gu5lv66h",
                      "uititle": "Out Value",
                      "subType": "number"
                  },
                  {
                      "type": 1,
                      "name": "qutsn94pc",
                      "uititle": "Trigger 0"
                  },
                  {
                      "type": 1,
                      "name": "8xpkgorjm",
                      "uititle": "Trigger 1"
                  },
                  {
                      "type": 1,
                      "name": "hvyzlh9o8",
                      "uititle": "Trigger 2"
                  },
                  {
                      "type": 1,
                      "name": "367wv95xd",
                      "uititle": "Trigger 3"
                  },
                  {
                      "type": 1,
                      "name": "7ju3j2fy0",
                      "uititle": "Trigger 4"
                  },
                  {
                      "type": 1,
                      "name": "t8dvyjuoq",
                      "uititle": "Trigger 5"
                  },
                  {
                      "type": 1,
                      "name": "72naih78e",
                      "uititle": "Trigger 6"
                  },
                  {
                      "type": 1,
                      "name": "0s04tm21u",
                      "uititle": "Trigger 7"
                  },
                  {
                      "type": 1,
                      "name": "93jpxulns",
                      "uititle": "Trigger 8"
                  },
                  {
                      "type": 1,
                      "name": "a0w7orgi8",
                      "uititle": "Trigger 9"
                  },
                  {
                      "type": 1,
                      "name": "r8h4qx4z8",
                      "uititle": "Trigger 10"
                  },
                  {
                      "type": 1,
                      "name": "cr80a86xi",
                      "uititle": "Trigger 11"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1708612895052,
          "exampleProjectId": "pUtH15",
          "coreLibs": [
              "subpatchop"
          ],
          "shortName": "RouteTriggerAnimated",
          "hasScreenshot": true,
          "namespace": "Ops.Trigger",
          "shortNameDisplay": "RouteTriggerAnimated",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Trigger.RouteTriggerAnimated",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false,
          "usedInProject": true
      },
      {
          "name": "Ops.Trigger.RouteTriggerMultiPort",
          "content": "",
          "attachmentFiles": [],
          "summary": "Triggers one of the output ports - value index switch case",
          "id": "e9cfc6a0-c764-435c-aa98-c6e8f30729d6",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Execute"
                  },
                  {
                      "type": 0,
                      "name": "Switch Value",
                      "subType": "integer"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "Total Connections",
                      "subType": "number"
                  },
                  {
                      "type": 1,
                      "name": "Trigger_0"
                  },
                  {
                      "type": 1,
                      "name": "Trigger_1",
                      "uititle": "add port"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1716471364124,
          "exampleProjectId": "NxGysh",
          "shortName": "RouteTriggerMultiPort",
          "hasScreenshot": true,
          "namespace": "Ops.Trigger",
          "shortNameDisplay": "RouteTriggerMultiPort",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Trigger.RouteTriggerMultiPort",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false,
          "usedInProject": true
      },
      {
          "name": "Ops.Trigger.RouteTriggerString_v2",
          "content": "",
          "attachmentFiles": [],
          "summary": "route trigger output by string",
          "id": "13bdac27-5da7-4311-890b-6a7e49d72040",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Execute"
                  },
                  {
                      "type": 5,
                      "name": "Switch Value"
                  },
                  {
                      "type": 5,
                      "name": "String 0"
                  },
                  {
                      "type": 5,
                      "name": "String 1"
                  },
                  {
                      "type": 5,
                      "name": "String 2"
                  },
                  {
                      "type": 5,
                      "name": "String 3"
                  },
                  {
                      "type": 5,
                      "name": "String 4"
                  },
                  {
                      "type": 5,
                      "name": "String 5"
                  },
                  {
                      "type": 5,
                      "name": "String 6"
                  },
                  {
                      "type": 5,
                      "name": "String 7"
                  },
                  {
                      "type": 5,
                      "name": "String 8"
                  },
                  {
                      "type": 5,
                      "name": "String 9"
                  },
                  {
                      "type": 5,
                      "name": "String 10"
                  },
                  {
                      "type": 5,
                      "name": "String 11"
                  },
                  {
                      "type": 5,
                      "name": "String 12"
                  },
                  {
                      "type": 5,
                      "name": "String 13"
                  },
                  {
                      "type": 5,
                      "name": "String 14"
                  },
                  {
                      "type": 5,
                      "name": "String 15"
                  },
                  {
                      "type": 5,
                      "name": "String 16"
                  },
                  {
                      "type": 5,
                      "name": "String 17"
                  },
                  {
                      "type": 5,
                      "name": "String 18"
                  },
                  {
                      "type": 5,
                      "name": "String 19"
                  },
                  {
                      "type": 5,
                      "name": "String 20"
                  },
                  {
                      "type": 5,
                      "name": "String 21"
                  },
                  {
                      "type": 5,
                      "name": "String 22"
                  },
                  {
                      "type": 5,
                      "name": "String 23"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next Trigger"
                  },
                  {
                      "type": 0,
                      "name": "Switched Index",
                      "subType": "number"
                  },
                  {
                      "type": 1,
                      "name": "Trigger 0"
                  },
                  {
                      "type": 1,
                      "name": "Trigger 1"
                  },
                  {
                      "type": 1,
                      "name": "Trigger 2"
                  },
                  {
                      "type": 1,
                      "name": "Trigger 3"
                  },
                  {
                      "type": 1,
                      "name": "Trigger 4"
                  },
                  {
                      "type": 1,
                      "name": "Trigger 5"
                  },
                  {
                      "type": 1,
                      "name": "Trigger 6"
                  },
                  {
                      "type": 1,
                      "name": "Trigger 7"
                  },
                  {
                      "type": 1,
                      "name": "Trigger 8"
                  },
                  {
                      "type": 1,
                      "name": "Trigger 9"
                  },
                  {
                      "type": 1,
                      "name": "Trigger 10"
                  },
                  {
                      "type": 1,
                      "name": "Trigger 11"
                  },
                  {
                      "type": 1,
                      "name": "Trigger 12"
                  },
                  {
                      "type": 1,
                      "name": "Trigger 13"
                  },
                  {
                      "type": 1,
                      "name": "Trigger 14"
                  },
                  {
                      "type": 1,
                      "name": "Trigger 15"
                  },
                  {
                      "type": 1,
                      "name": "Trigger 16"
                  },
                  {
                      "type": 1,
                      "name": "Trigger 17"
                  },
                  {
                      "type": 1,
                      "name": "Trigger 18"
                  },
                  {
                      "type": 1,
                      "name": "Trigger 19"
                  },
                  {
                      "type": 1,
                      "name": "Trigger 20"
                  },
                  {
                      "type": 1,
                      "name": "Trigger 21"
                  },
                  {
                      "type": 1,
                      "name": "Trigger 22"
                  },
                  {
                      "type": 1,
                      "name": "Trigger 23"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1700757356299,
          "exampleProjectId": "8uTjhI",
          "shortName": "RouteTriggerString_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Trigger",
          "shortNameDisplay": "RouteTriggerString",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Trigger.RouteTriggerString",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Trigger.RouteTriggerString_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Trigger.Sequence",
          "content": "",
          "attachmentFiles": [],
          "summary": "control the order of execution/triggering",
          "id": "a466bc1f-06e9-4595-8849-bffb9fe22f99",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "exe"
                  },
                  {
                      "type": 1,
                      "name": "exe 0"
                  },
                  {
                      "type": 1,
                      "name": "exe 1"
                  },
                  {
                      "type": 1,
                      "name": "exe 2"
                  },
                  {
                      "type": 1,
                      "name": "exe 3"
                  },
                  {
                      "type": 1,
                      "name": "exe 4"
                  },
                  {
                      "type": 1,
                      "name": "exe 5"
                  },
                  {
                      "type": 1,
                      "name": "exe 6"
                  },
                  {
                      "type": 1,
                      "name": "exe 7"
                  },
                  {
                      "type": 1,
                      "name": "exe 8"
                  },
                  {
                      "type": 1,
                      "name": "exe 9"
                  },
                  {
                      "type": 1,
                      "name": "exe 10"
                  },
                  {
                      "type": 1,
                      "name": "exe 11"
                  },
                  {
                      "type": 1,
                      "name": "exe 12"
                  },
                  {
                      "type": 1,
                      "name": "exe 13"
                  },
                  {
                      "type": 1,
                      "name": "exe 14"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "trigger 0"
                  },
                  {
                      "type": 1,
                      "name": "trigger 1"
                  },
                  {
                      "type": 1,
                      "name": "trigger 2"
                  },
                  {
                      "type": 1,
                      "name": "trigger 3"
                  },
                  {
                      "type": 1,
                      "name": "trigger 4"
                  },
                  {
                      "type": 1,
                      "name": "trigger 5"
                  },
                  {
                      "type": 1,
                      "name": "trigger 6"
                  },
                  {
                      "type": 1,
                      "name": "trigger 7"
                  },
                  {
                      "type": 1,
                      "name": "trigger 8"
                  },
                  {
                      "type": 1,
                      "name": "trigger 9"
                  },
                  {
                      "type": 1,
                      "name": "trigger 10"
                  },
                  {
                      "type": 1,
                      "name": "trigger 11"
                  },
                  {
                      "type": 1,
                      "name": "trigger 12"
                  },
                  {
                      "type": 1,
                      "name": "trigger 13"
                  },
                  {
                      "type": 1,
                      "name": "trigger 14"
                  },
                  {
                      "type": 1,
                      "name": "trigger 15"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [
              "1PtJG-Plz4Y"
          ],
          "created": 1511171612134,
          "exampleProjectId": "0bQrii",
          "shortName": "Sequence",
          "hasScreenshot": true,
          "namespace": "Ops.Trigger",
          "shortNameDisplay": "Sequence",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Trigger.Sequence",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Trigger.SequenceMultiPort",
          "content": "",
          "attachmentFiles": [],
          "summary": "sequence trigger",
          "id": "be066ff6-85e2-408a-9570-59fb7abff7b2",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Input_0",
                      "group": "Input"
                  },
                  {
                      "type": 1,
                      "name": "Input_1",
                      "uititle": "add port",
                      "group": "Input"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Output_0"
                  },
                  {
                      "type": 1,
                      "name": "Output_1",
                      "uititle": "add port"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1716814979202,
          "exampleProjectId": "F5L0sh",
          "shortName": "SequenceMultiPort",
          "hasScreenshot": true,
          "namespace": "Ops.Trigger",
          "shortNameDisplay": "SequenceMultiPort",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Trigger.SequenceMultiPort",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Trigger.SwitchTrigger",
          "content": "",
          "attachmentFiles": [],
          "summary": "route input triggers by index to one output",
          "id": "aee29293-0c4f-404d-b724-484bbb57361e",
          "layout": {
              "portsIn": [
                  {
                      "type": "0",
                      "name": "Trigger Index",
                      "subType": "integer"
                  },
                  {
                      "type": "1",
                      "name": "Trigger in 0"
                  },
                  {
                      "type": "1",
                      "name": "Trigger in 1"
                  },
                  {
                      "type": "1",
                      "name": "Trigger in 2"
                  },
                  {
                      "type": "1",
                      "name": "Trigger in 3"
                  },
                  {
                      "type": "1",
                      "name": "Trigger in 4"
                  },
                  {
                      "type": "1",
                      "name": "Trigger in 5"
                  },
                  {
                      "type": "1",
                      "name": "Trigger in 6"
                  },
                  {
                      "type": "1",
                      "name": "Trigger in 7"
                  },
                  {
                      "type": "1",
                      "name": "Trigger in 8"
                  },
                  {
                      "type": "1",
                      "name": "Trigger in 9"
                  },
                  {
                      "type": "1",
                      "name": "Trigger in 10"
                  },
                  {
                      "type": "1",
                      "name": "Trigger in 11"
                  },
                  {
                      "type": "1",
                      "name": "Trigger in 12"
                  },
                  {
                      "type": "1",
                      "name": "Trigger in 13"
                  },
                  {
                      "type": "1",
                      "name": "Trigger in 14"
                  },
                  {
                      "type": "1",
                      "name": "Trigger in 15"
                  }
              ],
              "portsOut": [
                  {
                      "type": "1",
                      "name": "Trigger out"
                  }
              ]
          },
          "authorName": "andro",
          "docs": {
              "ports": [
                  {
                      "name": "Trigger Index",
                      "text": "index to be used"
                  },
                  {
                      "name": "Trigger in 0",
                      "text": "trigger input 0"
                  },
                  {
                      "name": "Trigger in 1",
                      "text": "trigger input 1"
                  },
                  {
                      "name": "Trigger in 2",
                      "text": "trigger input 2"
                  },
                  {
                      "name": "Trigger in 3",
                      "text": "trigger input 3"
                  },
                  {
                      "name": "Trigger in 4",
                      "text": "trigger input 4"
                  },
                  {
                      "name": "Trigger in 5",
                      "text": "trigger input 5"
                  },
                  {
                      "name": "Trigger in 6",
                      "text": "trigger input 6"
                  },
                  {
                      "name": "Trigger in 7",
                      "text": "trigger input 7"
                  },
                  {
                      "name": "Trigger in 8",
                      "text": "trigger input 8"
                  },
                  {
                      "name": "Trigger in 9",
                      "text": "trigger input 9"
                  },
                  {
                      "name": "Trigger in 10",
                      "text": "trigger input 10"
                  },
                  {
                      "name": "Trigger in 11",
                      "text": "trigger input 11"
                  },
                  {
                      "name": "Trigger in 12",
                      "text": "trigger input 12"
                  },
                  {
                      "name": "Trigger in 13",
                      "text": "trigger input 13"
                  },
                  {
                      "name": "Trigger in 14",
                      "text": "trigger input 14"
                  },
                  {
                      "name": "Trigger in 15",
                      "text": "trigger input 15"
                  },
                  {
                      "name": "Trigger out",
                      "text": "trigger output"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [
              "TdHgjqOLpnM"
          ],
          "created": 1600442978422,
          "exampleProjectId": "upF4rn",
          "shortName": "SwitchTrigger",
          "hasScreenshot": true,
          "namespace": "Ops.Trigger",
          "shortNameDisplay": "SwitchTrigger",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Trigger.SwitchTrigger",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Trigger.Threshold",
          "content": "<p>This op will send one trigger out if the threshold has been crossed\nbut will not send another until the incoming inValue\ndrops below the threshold and go&#39;s above it again</p>\n",
          "attachmentFiles": [],
          "summary": "Triggers only once when threshold is crossed",
          "id": "ef0891db-6053-42ba-b7d5-29c7cf6d8208",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "Input",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Threshold",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Output"
                  }
              ]
          },
          "authorName": "andro",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1536324321936,
          "exampleProjectId": "pG-Mwq",
          "shortName": "Threshold",
          "hasScreenshot": true,
          "namespace": "Ops.Trigger",
          "shortNameDisplay": "Threshold",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Trigger.Threshold",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Trigger.TimeSinceTrigger",
          "content": "<p>Time elapsed since last trigger</p>\n",
          "attachmentFiles": [],
          "summary": "Get the time since last trigger",
          "id": "df54103f-5ef6-4a4f-adcf-dddc005132f8",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "exe"
                  },
                  {
                      "type": 1,
                      "name": "trigger"
                  },
                  {
                      "type": 1,
                      "name": "reset"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "next"
                  },
                  {
                      "type": 0,
                      "name": "time",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1511163009162,
          "exampleProjectId": "fCN_98",
          "shortName": "TimeSinceTrigger",
          "hasScreenshot": true,
          "namespace": "Ops.Trigger",
          "shortNameDisplay": "TimeSinceTrigger",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Trigger.TimeSinceTrigger",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Trigger.TimedSequence",
          "content": "<p>... can be also used together with a running animation input (like <a href=\"/op/ops.Anim.Bang\" target=\"_blank\">ops.Anim.Bang</a>) to do animated transitions between different scenes: <a href=\"https://cables.gl/p/o4_6Bo\">https://cables.gl/p/o4_6Bo</a></p>\n",
          "attachmentFiles": [],
          "summary": "timed switching of trigger",
          "id": "73c892c9-3e81-4ddc-952a-fbe6bf00ef2c",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "exe"
                  },
                  {
                      "type": 0,
                      "name": "current",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "overwriteTime",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "ignoreInSubPatch",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "triggerAlways"
                  },
                  {
                      "type": 3,
                      "name": "Names"
                  },
                  {
                      "type": 0,
                      "name": "currentKeyTime",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Current",
                      "subType": "number"
                  },
                  {
                      "type": 1,
                      "name": "trigger 0"
                  },
                  {
                      "type": 1,
                      "name": "trigger 1"
                  },
                  {
                      "type": 1,
                      "name": "trigger 2"
                  },
                  {
                      "type": 1,
                      "name": "trigger 3"
                  },
                  {
                      "type": 1,
                      "name": "trigger 4"
                  },
                  {
                      "type": 1,
                      "name": "trigger 5"
                  },
                  {
                      "type": 1,
                      "name": "trigger 6"
                  },
                  {
                      "type": 1,
                      "name": "trigger 7"
                  },
                  {
                      "type": 1,
                      "name": "trigger 8"
                  },
                  {
                      "type": 1,
                      "name": "trigger 9"
                  },
                  {
                      "type": 1,
                      "name": "trigger 10"
                  },
                  {
                      "type": 1,
                      "name": "trigger 11"
                  },
                  {
                      "type": 1,
                      "name": "trigger 12"
                  },
                  {
                      "type": 1,
                      "name": "trigger 13"
                  },
                  {
                      "type": 1,
                      "name": "trigger 14"
                  },
                  {
                      "type": 1,
                      "name": "trigger 15"
                  },
                  {
                      "type": 1,
                      "name": "trigger 16"
                  },
                  {
                      "type": 1,
                      "name": "trigger 17"
                  },
                  {
                      "type": 1,
                      "name": "trigger 18"
                  },
                  {
                      "type": 1,
                      "name": "trigger 19"
                  },
                  {
                      "type": 1,
                      "name": "trigger 20"
                  },
                  {
                      "type": 1,
                      "name": "trigger 21"
                  },
                  {
                      "type": 1,
                      "name": "trigger 22"
                  },
                  {
                      "type": 1,
                      "name": "trigger 23"
                  },
                  {
                      "type": 1,
                      "name": "trigger 24"
                  },
                  {
                      "type": 1,
                      "name": "trigger 25"
                  },
                  {
                      "type": 1,
                      "name": "trigger 26"
                  },
                  {
                      "type": 1,
                      "name": "trigger 27"
                  },
                  {
                      "type": 1,
                      "name": "trigger 28"
                  },
                  {
                      "type": 1,
                      "name": "trigger 29"
                  },
                  {
                      "type": 1,
                      "name": "trigger 30"
                  },
                  {
                      "type": 1,
                      "name": "trigger 31"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1516308627269,
          "exampleProjectId": "GbEqL-",
          "shortName": "TimedSequence",
          "hasScreenshot": true,
          "namespace": "Ops.Trigger",
          "shortNameDisplay": "TimedSequence",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Trigger.TimedSequence",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Trigger.TriggerButton",
          "content": "",
          "attachmentFiles": [],
          "summary": "simple button to trigger manually",
          "id": "21630924-39e4-4df5-9965-b9136510d156",
          "layout": {
              "portsIn": [
                  {
                      "type": "1",
                      "name": "Trigger"
                  }
              ],
              "portsOut": [
                  {
                      "type": "1",
                      "name": "Next"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1598970012440,
          "exampleProjectId": "05Arii",
          "shortName": "TriggerButton",
          "hasScreenshot": true,
          "namespace": "Ops.Trigger",
          "shortNameDisplay": "TriggerButton",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Trigger.TriggerButton",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Trigger.TriggerCounter",
          "content": "<p>Useful for e.g. for debugging when you need to know how often <code>Execute</code> has been triggered, or if it was triggered at all.</p>\n",
          "attachmentFiles": [],
          "summary": "Counts how often the port was triggered",
          "id": "e640619f-235c-4543-bbf8-b358e0283180",
          "layout": {
              "portsIn": [
                  {
                      "type": "1",
                      "name": "exe"
                  },
                  {
                      "type": "1",
                      "name": "reset"
                  }
              ],
              "portsOut": [
                  {
                      "type": "1",
                      "name": "trigger"
                  },
                  {
                      "type": "0",
                      "name": "timesTriggered",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "exe",
                      "text": "Every time `Execute` is triggered, the output port `Times Triggered` will increment.  "
                  },
                  {
                      "name": "reset",
                      "text": "Resets the counter"
                  },
                  {
                      "name": "trigger",
                      "text": "Triggers every time `Execute` is triggered"
                  },
                  {
                      "name": "timesTriggered",
                      "text": "The number of times the input port `Execute` has been triggered  "
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1516481646742,
          "exampleProjectId": "WNh8pc",
          "shortName": "TriggerCounter",
          "hasScreenshot": true,
          "namespace": "Ops.Trigger",
          "shortNameDisplay": "TriggerCounter",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Trigger.TriggerCounter",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Trigger.TriggerCounterLoop",
          "content": "<p>Increments with each trigger and loops depending on min and max loop values.\nCan also work with negative numbers.\nIf min is greater than max then it decrements instead of incrementing</p>\n<p>Use an op like TriggerLimiter to slow down the count through the loop.\nYou can also multiply the output by a very small number and use mainloop to create interesting patterns as well.</p>\n",
          "attachmentFiles": [],
          "summary": "Increments with each trigger and loops depending on min and max loop values.",
          "id": "d3356c53-e278-433f-af0b-d8327cd99a2d",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "trigger in"
                  },
                  {
                      "type": 1,
                      "name": "reset"
                  },
                  {
                      "type": 0,
                      "name": "Loop min",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Loop max",
                      "subType": "integer"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "trigger out"
                  },
                  {
                      "type": 0,
                      "name": "current count",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "andro",
          "docs": {
              "ports": [
                  {
                      "name": "trigger in",
                      "text": "Trigger in, increments or decrements the current count"
                  },
                  {
                      "name": "reset",
                      "text": "Sets current number to minimum"
                  },
                  {
                      "name": "Loop min",
                      "text": "Minimum value, loop start number"
                  },
                  {
                      "name": "Loop max",
                      "text": "Maximum value, loop end number"
                  },
                  {
                      "name": "trigger out",
                      "text": "Trigger out "
                  },
                  {
                      "name": "current count",
                      "text": "Current number in loop"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1557391819548,
          "exampleProjectId": "V8TekF",
          "shortName": "TriggerCounterLoop",
          "hasScreenshot": true,
          "namespace": "Ops.Trigger",
          "shortNameDisplay": "TriggerCounterLoop",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Trigger.TriggerCounterLoop",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Trigger.TriggerDistributeByValue",
          "content": "<p>like maprange for triggering</p>\n<p>for example:\nmax: 1, num outputs:3. will trigger 0 when value is &lt;0.33, will trigger 1 when value is between 0.33 and 0.66 ...</p>\n",
          "attachmentFiles": [],
          "summary": "triggers evenly distributed by value",
          "id": "e697380f-ac93-4d4a-9e9c-b54287773668",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "exe"
                  },
                  {
                      "type": 0,
                      "name": "number",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "max",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "num outputs",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "num",
                      "subType": "number"
                  },
                  {
                      "type": 1,
                      "name": "trigger 0"
                  },
                  {
                      "type": 1,
                      "name": "trigger 1"
                  },
                  {
                      "type": 1,
                      "name": "trigger 2"
                  },
                  {
                      "type": 1,
                      "name": "trigger 3"
                  },
                  {
                      "type": 1,
                      "name": "trigger 4"
                  },
                  {
                      "type": 1,
                      "name": "trigger 5"
                  },
                  {
                      "type": 1,
                      "name": "trigger 6"
                  },
                  {
                      "type": 1,
                      "name": "trigger 7"
                  },
                  {
                      "type": 1,
                      "name": "trigger 8"
                  },
                  {
                      "type": 1,
                      "name": "trigger 9"
                  },
                  {
                      "type": 1,
                      "name": "trigger 10"
                  },
                  {
                      "type": 1,
                      "name": "trigger 11"
                  },
                  {
                      "type": 1,
                      "name": "trigger 12"
                  },
                  {
                      "type": 1,
                      "name": "trigger 13"
                  },
                  {
                      "type": 1,
                      "name": "trigger 14"
                  },
                  {
                      "type": 1,
                      "name": "trigger 15"
                  },
                  {
                      "type": 1,
                      "name": "trigger 16"
                  },
                  {
                      "type": 1,
                      "name": "trigger 17"
                  },
                  {
                      "type": 1,
                      "name": "trigger 18"
                  },
                  {
                      "type": 1,
                      "name": "trigger 19"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "max",
                      "text": "whats the maximum value that goes into number"
                  },
                  {
                      "name": "num outputs",
                      "text": "number of output triggers to be triggered"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1517310320061,
          "exampleProjectId": "FsZFVB",
          "shortName": "TriggerDistributeByValue",
          "hasScreenshot": true,
          "namespace": "Ops.Trigger",
          "shortNameDisplay": "TriggerDistributeByValue",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Trigger.TriggerDistributeByValue",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Trigger.TriggerExtender",
          "content": "",
          "attachmentFiles": [],
          "summary": "Extends a trigger (useful in big patches for better overview)",
          "id": "7ef594f3-4907-47b0-a2d3-9854eda1679d",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Execute"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  }
              ]
          },
          "authorName": "tim",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1514976790397,
          "exampleProjectId": "mDiCq6",
          "shortName": "TriggerExtender",
          "hasScreenshot": true,
          "namespace": "Ops.Trigger",
          "shortNameDisplay": "TriggerExtender",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Trigger.TriggerExtender",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Trigger.TriggerIfDecreased",
          "content": "",
          "attachmentFiles": [],
          "summary": "trigger if a value decreases / gets smaller",
          "id": "16ec4069-3682-461e-95ff-1d86e3f44512",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "Value",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Trigger"
                  }
              ]
          },
          "authorName": "andro",
          "docs": {
              "ports": [
                  {
                      "name": "Value",
                      "text": "Value to evaluate"
                  },
                  {
                      "name": "Trigger",
                      "text": "Trigger out if value decreases"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1536260087428,
          "exampleProjectId": "AFiCfe",
          "shortName": "TriggerIfDecreased",
          "hasScreenshot": true,
          "namespace": "Ops.Trigger",
          "shortNameDisplay": "TriggerIfDecreased",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Trigger.TriggerIfDecreased",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Trigger.TriggerIfIncreased",
          "content": "",
          "attachmentFiles": [],
          "summary": "Outputs a trigger if the value of a number increases",
          "id": "bc820891-48c7-4287-9b5e-4196e192741b",
          "layout": {
              "portsIn": [
                  {
                      "type": "0",
                      "name": "Value",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": "1",
                      "name": "Trigger"
                  }
              ]
          },
          "authorName": "andro",
          "docs": {
              "ports": [
                  {
                      "name": "Value",
                      "text": "Value to evaluate"
                  },
                  {
                      "name": "Trigger",
                      "text": "Trigger out if value increases"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1595510287906,
          "exampleProjectId": "AFiCfe",
          "shortName": "TriggerIfIncreased",
          "hasScreenshot": true,
          "namespace": "Ops.Trigger",
          "shortNameDisplay": "TriggerIfIncreased",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Trigger.TriggerIfIncreased",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Trigger.TriggerLimiter",
          "content": "<p>This op is handy if you don’t know how often another op triggers and you want to make sure it does not trigger more often than x milliseconds.</p>\n",
          "attachmentFiles": [],
          "summary": "Limits how often a trigger goes through to x ms",
          "id": "47641d85-9f81-4287-8aa2-35753b0727e0",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "In Trigger"
                  },
                  {
                      "type": 0,
                      "name": "Milliseconds",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Out Trigger"
                  },
                  {
                      "type": 0,
                      "name": "Progress",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "In Trigger",
                      "text": "The trigger on which you want to make sure that it does not trigger too often"
                  },
                  {
                      "name": "Milliseconds",
                      "text": "The milliseconds between triggers, e.g. if `Milliseconds` is set to `1000` the out trigger port triggers maximally every 1000 milliseconds (1 second)."
                  },
                  {
                      "name": "Out Trigger",
                      "text": "The limited input trigger"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1558016067665,
          "exampleProjectId": "dS8EQm",
          "shortName": "TriggerLimiter",
          "hasScreenshot": true,
          "namespace": "Ops.Trigger",
          "shortNameDisplay": "TriggerLimiter",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Trigger.TriggerLimiter",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Trigger.TriggerNumber",
          "content": "<p>A very handy op for outputting a number only when triggered</p>\n",
          "attachmentFiles": [],
          "summary": "Outputs a number when triggered",
          "id": "9989b1c0-1073-4d5f-bfa0-36dd98b66e27",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Set"
                  },
                  {
                      "type": 0,
                      "name": "Number",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  },
                  {
                      "type": 0,
                      "name": "Out Value",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "Set",
                      "text": "Trigger - send out stored number"
                  },
                  {
                      "name": "Number",
                      "text": "Number to output on Trigger"
                  },
                  {
                      "name": "Out Value",
                      "text": "Number out"
                  }
              ]
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1551085774736,
          "exampleProjectId": "Qq3Y7i",
          "shortName": "TriggerNumber",
          "hasScreenshot": true,
          "namespace": "Ops.Trigger",
          "shortNameDisplay": "TriggerNumber",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Trigger.TriggerNumber",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Trigger.TriggerOnChangeArray",
          "content": "",
          "attachmentFiles": [],
          "summary": "triggers when array has changed",
          "id": "e4ddec93-4dee-422b-a402-6a0f6e469ce6",
          "layout": {
              "portsIn": [
                  {
                      "type": "3",
                      "name": "Array"
                  }
              ],
              "portsOut": [
                  {
                      "type": "1",
                      "name": "Changed"
                  },
                  {
                      "type": "3",
                      "name": "Result"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "Array",
                      "text": "Array in"
                  },
                  {
                      "name": "Changed",
                      "text": "Trigger out - happens only when something in the array has changed"
                  },
                  {
                      "name": "Result",
                      "text": "Array out"
                  }
              ]
          },
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1557471929957,
          "exampleProjectId": "",
          "shortName": "TriggerOnChangeArray",
          "hasScreenshot": false,
          "namespace": "Ops.Trigger",
          "shortNameDisplay": "TriggerOnChangeArray",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Trigger.TriggerOnChangeArray",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Trigger.TriggerOnChangeObject",
          "content": "",
          "attachmentFiles": [],
          "summary": "triggers when Object has changed",
          "id": "c7e3fa27-21e8-44ef-b176-e0e596837abb",
          "layout": {
              "portsIn": [
                  {
                      "type": "2",
                      "name": "Object"
                  }
              ],
              "portsOut": [
                  {
                      "type": "1",
                      "name": "Changed"
                  },
                  {
                      "type": "2",
                      "name": "Result"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "Object",
                      "text": "Object in"
                  },
                  {
                      "name": "Changed",
                      "text": "Trigger out - happens only when something in the Object has changed"
                  },
                  {
                      "name": "Result",
                      "text": "Object out"
                  }
              ]
          },
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1611658197625,
          "exampleProjectId": "",
          "shortName": "TriggerOnChangeObject",
          "hasScreenshot": false,
          "namespace": "Ops.Trigger",
          "shortNameDisplay": "TriggerOnChangeObject",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Trigger.TriggerOnChangeObject",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Trigger.TriggerOnChangeString",
          "content": "",
          "attachmentFiles": [],
          "summary": "triggers when string has changed",
          "id": "319d07e0-5cbe-4bc1-89fb-a934fd41b0c4",
          "layout": {
              "portsIn": [
                  {
                      "type": "5",
                      "name": "String"
                  }
              ],
              "portsOut": [
                  {
                      "type": "1",
                      "name": "Changed"
                  },
                  {
                      "type": "5",
                      "name": "Result"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "String",
                      "text": "String in"
                  },
                  {
                      "name": "Changed",
                      "text": "Trigger out - only when something in the String has changed"
                  },
                  {
                      "name": "Result",
                      "text": "String output"
                  }
              ]
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1557471953670,
          "exampleProjectId": "ohxBci",
          "shortName": "TriggerOnChangeString",
          "hasScreenshot": true,
          "namespace": "Ops.Trigger",
          "shortNameDisplay": "TriggerOnChangeString",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Trigger.TriggerOnChangeString",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Trigger.TriggerOnChangeTexture",
          "content": "",
          "attachmentFiles": [],
          "summary": "triggers when texture has changed",
          "id": "d7260ecb-d862-496a-8a26-f8165ab49dd2",
          "layout": {
              "portsIn": [
                  {
                      "type": 2,
                      "name": "Texture",
                      "objType": "texture"
                  },
                  {
                      "type": 0,
                      "name": "Ignore empty/default Texture",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Changed"
                  },
                  {
                      "type": 2,
                      "name": "Result",
                      "objType": "texture"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "Changed",
                      "text": "Trigger out - happens only when something in the array has changed"
                  },
                  {
                      "name": "Result",
                      "text": "Array out"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1611658366832,
          "exampleProjectId": "QGqQ7f",
          "shortName": "TriggerOnChangeTexture",
          "hasScreenshot": true,
          "namespace": "Ops.Trigger",
          "shortNameDisplay": "TriggerOnChangeTexture",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Trigger.TriggerOnChangeTexture",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Trigger.TriggerOnce",
          "content": "",
          "attachmentFiles": [],
          "summary": "Trigger the following children once",
          "id": "cf3544e4-e392-432b-89fd-fcfb5c974388",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Exec"
                  },
                  {
                      "type": 1,
                      "name": "Reset"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  },
                  {
                      "type": 0,
                      "name": "Was Triggered",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1518003035091,
          "exampleProjectId": "9Eiyci",
          "shortName": "TriggerOnce",
          "hasScreenshot": true,
          "namespace": "Ops.Trigger",
          "shortNameDisplay": "TriggerOnce",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Trigger.TriggerOnce",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Trigger.TriggerReceive",
          "content": "<p>This op is designed to work with the <a href=\"/op/Ops.Trigger.TriggerSend\" target=\"_blank\">Ops.Trigger.TriggerSend</a> op \nYou must assign the TriggerSend op a variable name and make sure that the this TriggerReceive op has the same variable name.\nThis makes it possible to send triggers over large patches and into subpatches which allows for much more cleaner workflow.</p>\n",
          "attachmentFiles": [],
          "summary": "Receives triggers from a TriggerSend op with the same variable name",
          "id": "0816c999-f2db-466b-9777-2814573574c5",
          "layout": {
              "portsIn": [],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Triggered"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "Triggered",
                      "text": "Trigger out"
                  }
              ]
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [
              "QZqtvPytsKE"
          ],
          "created": 1555064338485,
          "exampleProjectId": "hrXVpH",
          "shortName": "TriggerReceive",
          "hasScreenshot": true,
          "namespace": "Ops.Trigger",
          "shortNameDisplay": "TriggerReceive",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Trigger.TriggerReceive",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Trigger.TriggerReceiveFilter",
          "content": "<p>Triggers can be sent and received using TriggerSend and TriggerReceive ops.</p>\n<p>This op gets all triggers sent out from TriggerSend and triggers it&#39;s own output trigger. You can filter which triggers are relayed by using a prefix filter on the triggernames.</p>\n",
          "attachmentFiles": [],
          "summary": "receives all named trigges and relays them, optionally using a filter-prefix on the name",
          "id": "7bf9e19a-55a8-4eb4-aaeb-5a15a8d2f958",
          "layout": {
              "portsIn": [
                  {
                      "type": 5,
                      "name": "Prefix"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Trigger Out"
                  },
                  {
                      "type": 5,
                      "name": "Trigger Name"
                  }
              ]
          },
          "authorName": "stephan",
          "docs": {
              "ports": [
                  {
                      "name": "Prefix",
                      "text": "triggers with name starting with this are being relayed"
                  },
                  {
                      "name": "Trigger Out",
                      "text": "output trigger"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1612445592447,
          "exampleProjectId": "niHmJt",
          "shortName": "TriggerReceiveFilter",
          "hasScreenshot": true,
          "namespace": "Ops.Trigger",
          "shortNameDisplay": "TriggerReceiveFilter",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Trigger.TriggerReceiveFilter",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Trigger.TriggerSend",
          "content": "<p>This op is designed to work with the <a href=\"/op/Ops.Trigger.TriggerReceive\" target=\"_blank\">Ops.Trigger.TriggerReceive</a> op \nYou must assign the TriggerSend op a variable name and make sure that the other TriggerReceive op has the same variable name.\nThis makes it possible to send triggers over large patches and into subpatches which allows for much more cleaner workflow.</p>\n",
          "attachmentFiles": [],
          "summary": "Allows triggers to be sent to a TriggerReceive op with the same variable name",
          "id": "ce1eaf2b-943b-4dc0-ab5e-ee11b63c9ed0",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Trigger"
                  }
              ],
              "portsOut": []
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "Trigger",
                      "text": "Trigger in - gets sent to the matching TriggerReceive "
                  },
                  {
                      "name": "Named Trigger",
                      "text": "Variable name assigned to the op - must match the TriggerReceive "
                  }
              ]
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [
              "QZqtvPytsKE"
          ],
          "created": 1555063274095,
          "exampleProjectId": "hrXVpH",
          "shortName": "TriggerSend",
          "hasScreenshot": true,
          "namespace": "Ops.Trigger",
          "shortNameDisplay": "TriggerSend",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Trigger.TriggerSend",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Trigger.TriggerSendNamed",
          "content": "<p>This op is designed to work with the <a href=\"/op/Ops.Trigger.TriggerReceive\" target=\"_blank\">Ops.Trigger.TriggerReceive</a> op </p>\n<p>You must assign the TriggerSend op a variable name and make sure that the other TriggerReceive op has the same variable name.</p>\n<p>This makes it possible to send triggers over large patches and into subpatches which allows for much more cleaner workflow.</p>\n",
          "attachmentFiles": [],
          "summary": "Allows triggers to be sent to a TriggerReceive op with the same variable name",
          "id": "45d07cd7-bdfb-48b7-bc76-7606de5afd76",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Trigger"
                  },
                  {
                      "type": 5,
                      "name": "Named Trigger"
                  }
              ],
              "portsOut": []
          },
          "authorName": "stephan",
          "docs": {
              "ports": [
                  {
                      "name": "Trigger",
                      "text": "Trigger in - gets sent to the matching TriggerReceive "
                  },
                  {
                      "name": "Named Trigger",
                      "text": "Variable name assigned to the op - must match the TriggerReceive "
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1615984220319,
          "exampleProjectId": "Tc3pcI",
          "shortName": "TriggerSendNamed",
          "hasScreenshot": true,
          "namespace": "Ops.Trigger",
          "shortNameDisplay": "TriggerSendNamed",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Trigger.TriggerSendNamed",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Trigger.TriggerString",
          "content": "",
          "attachmentFiles": [],
          "summary": "trigger a string",
          "id": "217482b8-2ee6-4609-b7ad-4550e6aaa371",
          "layout": {
              "portsIn": [
                  {
                      "type": "1",
                      "name": "Trigger"
                  },
                  {
                      "type": "5",
                      "name": "String"
                  }
              ],
              "portsOut": [
                  {
                      "type": "1",
                      "name": "Next"
                  },
                  {
                      "type": "5",
                      "name": "Result"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "Trigger",
                      "text": "trigger to output the string"
                  },
                  {
                      "name": "String",
                      "text": "String to output on trigger"
                  },
                  {
                      "name": "Next",
                      "text": "trigger out"
                  },
                  {
                      "name": "Result",
                      "text": "String output"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1584970271852,
          "exampleProjectId": "VHsHue",
          "shortName": "TriggerString",
          "hasScreenshot": true,
          "namespace": "Ops.Trigger",
          "shortNameDisplay": "TriggerString",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Trigger.TriggerString",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Trigger.TriggersPerSecond",
          "content": "<p>Can be handy for debugging to find out how often a certain trigger port is called.</p>\n",
          "attachmentFiles": [],
          "summary": "Counts how often the port is triggered per second",
          "id": "ece2f153-eb31-4268-b0e5-8143ad2fdd81",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "exe"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "cps",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "exe",
                      "text": "Trigger in "
                  },
                  {
                      "name": "cps",
                      "text": "Calls per second – how often `Exe` is being triggered by second"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1542699364197,
          "exampleProjectId": "JCkpVJ",
          "shortName": "TriggersPerSecond",
          "hasScreenshot": true,
          "namespace": "Ops.Trigger",
          "shortNameDisplay": "TriggersPerSecond",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Trigger.TriggersPerSecond",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Trigger.ValueBecameZeroTrigger",
          "content": "<p>Compares the last value to the current one, triggers once when the current value is zero and the last one is something else.</p>\n",
          "attachmentFiles": [],
          "summary": "Triggers when the input value became zero",
          "id": "822f925c-33e8-4b8a-8a89-be5d2e358ed7",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "Value",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Became Zero Trigger"
                  }
              ]
          },
          "authorName": "tim",
          "docs": {
              "ports": [
                  {
                      "name": "Value",
                      "text": "The value to check"
                  },
                  {
                      "name": "Became Zero Trigger",
                      "text": "Triggers when `Value` became zero"
                  }
              ]
          },
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1524055401690,
          "exampleProjectId": "",
          "shortName": "ValueBecameZeroTrigger",
          "hasScreenshot": false,
          "namespace": "Ops.Trigger",
          "shortNameDisplay": "ValueBecameZeroTrigger",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Trigger.ValueBecameZeroTrigger",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Ui.Area",
          "content": "<p>The Area Operator let&#39;s you easily organize your patch into moveable and nameable areas.</p>\n<p>Use the comment field in the parameter panel to add more information for your group.</p>\n<p>Pick a color from the parameter panel to give your area some color.</p>\n<p>Dragging area while pressing alt/option will move only the area without the ops</p>\n",
          "attachmentFiles": [],
          "summary": "Organize and group your patch operators",
          "id": "38f79614-b0de-4960-8da5-2827e7f43415",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Delete"
                  }
              ],
              "portsOut": []
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [
              "-1vMiU6BcDg"
          ],
          "created": 1629721822424,
          "exampleProjectId": "ozgnnR",
          "shortName": "Area",
          "hasScreenshot": true,
          "namespace": "Ops.Ui",
          "shortNameDisplay": "Area",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Ui.Area",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false,
          "namespaceTitle": "Ops.Ui",
          "namespaceSummary": ""
      },
      {
          "name": "Ops.Ui.CablesEditorEvents",
          "content": "",
          "attachmentFiles": [],
          "summary": "Cables UI Event Triggers",
          "id": "31add1df-b4ce-486a-bbad-3291e07d8b76",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Set Changed Patch"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Saving Patch"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1632840113349,
          "exampleProjectId": "gdbdQc",
          "shortName": "CablesEditorEvents",
          "hasScreenshot": true,
          "namespace": "Ops.Ui",
          "shortNameDisplay": "CablesEditorEvents",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Ui.CablesEditorEvents",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Ui.Comment_v2",
          "content": "<p>This can be useful to document your patch. It does not have an effect on the patch itself.</p>\n",
          "attachmentFiles": [],
          "summary": "Displays a comment in the patch area",
          "id": "93492eeb-bf35-4a62-98f7-d85b0b79bfe5",
          "layout": {
              "portsIn": [],
              "portsOut": []
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1587124394269,
          "exampleProjectId": "7Tyqii",
          "shortName": "Comment_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Ui",
          "shortNameDisplay": "Comment",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Ui.Comment",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Ui.Comment_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Ui.Debug.PatchUiCoords",
          "content": "",
          "attachmentFiles": [],
          "summary": "Output the current patch coordinates",
          "id": "3d5bba7c-33cd-4948-af49-646bc71d438b",
          "layout": {
              "portsOut": [
                  {
                      "type": 0,
                      "name": "X",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Y",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1717508625222,
          "exampleProjectId": "",
          "shortName": "PatchUiCoords",
          "hasScreenshot": false,
          "namespace": "Ops.Ui.Debug",
          "shortNameDisplay": "PatchUiCoords",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Ui.Debug.PatchUiCoords",
                  "versionString": "",
                  "version": 0
              }
          ],
          "namespaceTitle": "Ops.Ui.Debug",
          "namespaceSummary": "",
          "allowEdit": false
      },
      {
          "name": "Ops.Ui.GetCablesDefaultTheme",
          "content": "",
          "attachmentFiles": [],
          "summary": "Get the default theme colors of the cables editor",
          "id": "1e3bf653-d87b-4abf-a0e8-0eb3141e5024",
          "layout": {
              "portsIn": [],
              "portsOut": [
                  {
                      "type": 2,
                      "name": "Theme"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1698253211294,
          "exampleProjectId": "Kq8Pq1",
          "shortName": "GetCablesDefaultTheme",
          "hasScreenshot": true,
          "namespace": "Ops.Ui",
          "shortNameDisplay": "GetCablesDefaultTheme",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Ui.GetCablesDefaultTheme",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Ui.PatchInput",
          "content": "<p>Do not use in your regular patch (outside of a sub-patch)!\nWhen you drag a cable to the <code>Dyn</code>-port of a <a href=\"/op/Ops.Ui.SubPatch\" target=\"_blank\">Ops.Ui.SubPatch</a> op, it will be accessible in the sub-patch for further routing. </p>\n",
          "attachmentFiles": [],
          "summary": "Helper op for sub-patches",
          "id": "e3f68bc3-892a-4c78-9974-aca25c27025d",
          "layout": {
              "portsIn": [],
              "portsOut": [
                  {
                      "type": 4,
                      "name": "create port"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1519815129219,
          "exampleProjectId": "",
          "shortName": "PatchInput",
          "hasScreenshot": false,
          "namespace": "Ops.Ui",
          "shortNameDisplay": "PatchInput",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Ui.PatchInput",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Ui.PatchOutput",
          "content": "<p>Do not use in your regular patch (outside of a sub-patch)!\nWithin your sub-patch drag a cable to the <code>Dyn</code>-port, it will then be accessible in your main patch for further routing, a port will be added on the <a href=\"/op/Ops.Ui.SubPatch\" target=\"_blank\">Ops.Ui.SubPatch</a>.</p>\n<p><strong>Currently not working…</strong></p>\n",
          "attachmentFiles": [],
          "summary": "Helper op for sub-patches",
          "id": "851b44cb-5667-4140-9800-5aeb7031f1d7",
          "layout": {
              "portsIn": [
                  {
                      "type": 4,
                      "name": "create port"
                  }
              ],
              "portsOut": []
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1519813611671,
          "exampleProjectId": "",
          "shortName": "PatchOutput",
          "hasScreenshot": false,
          "namespace": "Ops.Ui",
          "shortNameDisplay": "PatchOutput",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Ui.PatchOutput",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Ui.Routing.RouteArray",
          "content": "",
          "attachmentFiles": [],
          "summary": "Patchfield cable routing helper for array cables",
          "id": "4a560a77-dedf-4367-841b-1d9334403c41",
          "layout": {
              "portsIn": [
                  {
                      "type": 3,
                      "name": "Array In"
                  }
              ],
              "portsOut": [
                  {
                      "type": 3,
                      "name": "Array Out"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1717676691500,
          "exampleProjectId": "CLMeDg",
          "shortName": "RouteArray",
          "hasScreenshot": true,
          "namespace": "Ops.Ui.Routing",
          "shortNameDisplay": "RouteArray",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Ui.Routing.RouteArray",
                  "versionString": "",
                  "version": 0
              }
          ],
          "namespaceTitle": "Ops.Ui.Routing",
          "namespaceSummary": "",
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Ui.Routing.RouteNumber",
          "content": "",
          "attachmentFiles": [],
          "summary": "Patchfield cable routing helper for number cables",
          "id": "afff634a-b581-4449-b6f7-9ec7863c5d4d",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "value",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "result",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "value",
                      "text": "The value"
                  },
                  {
                      "name": "result",
                      "text": "Same as the input `Value`"
                  }
              ]
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1717614747783,
          "exampleProjectId": "CLMeDg",
          "shortName": "RouteNumber",
          "hasScreenshot": true,
          "namespace": "Ops.Ui.Routing",
          "shortNameDisplay": "RouteNumber",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Ui.Routing.RouteNumber",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Ui.Routing.RouteObject",
          "content": "",
          "attachmentFiles": [],
          "summary": "Patchfield cable routing helper for object cables",
          "id": "c9b14538-bcd7-4559-9f61-c0d5a96b0ba8",
          "layout": {
              "portsIn": [
                  {
                      "type": 2,
                      "name": "Array In"
                  }
              ],
              "portsOut": [
                  {
                      "type": 2,
                      "name": "Array Out",
                      "objType": "texture"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1717676916134,
          "exampleProjectId": "CLMeDg",
          "shortName": "RouteObject",
          "hasScreenshot": true,
          "namespace": "Ops.Ui.Routing",
          "shortNameDisplay": "RouteObject",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Ui.Routing.RouteObject",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Ui.Routing.RouteString",
          "content": "",
          "attachmentFiles": [],
          "summary": "Patchfield cable routing helper for string cables",
          "id": "1e697a73-44ae-418f-9e4a-4f14536132af",
          "layout": {
              "portsIn": [
                  {
                      "type": 5,
                      "name": "value"
                  }
              ],
              "portsOut": [
                  {
                      "type": 5,
                      "name": "String"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "value",
                      "text": "The value"
                  }
              ]
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1717668776791,
          "exampleProjectId": "CLMeDg",
          "shortName": "RouteString",
          "hasScreenshot": true,
          "namespace": "Ops.Ui.Routing",
          "shortNameDisplay": "RouteString",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Ui.Routing.RouteString",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Ui.Routing.RouteTrigger",
          "content": "",
          "attachmentFiles": [],
          "summary": "Routing Helper for trigger cables",
          "id": "0a2dc648-3a02-4559-b9af-cf3d47701e66",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Trigger"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1717674903319,
          "exampleProjectId": "CLMeDg",
          "shortName": "RouteTrigger",
          "hasScreenshot": true,
          "namespace": "Ops.Ui.Routing",
          "shortNameDisplay": "RouteTrigger",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Ui.Routing.RouteTrigger",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Ui.SetCablesTheme",
          "content": "",
          "attachmentFiles": [],
          "summary": "Set cables editor colors",
          "id": "da1708f5-bbf3-4b67-9636-8cea18a714f1",
          "layout": {
              "portsIn": [
                  {
                      "type": 2,
                      "name": "Theme"
                  }
              ],
              "portsOut": [
                  {
                      "type": 2,
                      "name": "Missing"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1698252867673,
          "exampleProjectId": "Kq8Pq1",
          "shortName": "SetCablesTheme",
          "hasScreenshot": true,
          "namespace": "Ops.Ui",
          "shortNameDisplay": "SetCablesTheme",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Ui.SetCablesTheme",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Ui.SubPatch",
          "content": "<p>Creates a sub-patch, so you can bundle together certain ops in a group. To define which ports of the ops should be accessible outside you have to connect ports to the dyn port, you can then use them for the inner routing of the sub-patch (via the PatchInput-op).</p>\n<p>If you want to make outputs accessible outside the sub-patch, you have to drag a cable to the dyn-port of PatchOutput.</p>\n<p>You can rename a subpatch by pressing <code>t</code> after selecting the subpatch or click the topmost title in the parameter panel of the op.</p>\n",
          "attachmentFiles": [],
          "summary": "subpatch op",
          "id": "84d9a6f0-ed7a-466d-b386-225ed9e89c60",
          "layout": {
              "portsIn": [
                  {
                      "type": 4,
                      "name": "create port"
                  },
                  {
                      "type": 0,
                      "name": "dataStr",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "patchId",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 4,
                      "name": "create port out"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1519817031982,
          "exampleProjectId": "",
          "shortName": "SubPatch",
          "hasScreenshot": false,
          "namespace": "Ops.Ui",
          "shortNameDisplay": "SubPatch",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Ui.SubPatch",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Ui.SubPatchInput",
          "content": "",
          "attachmentFiles": [],
          "summary": "",
          "id": "c4e4e933-136e-479e-8de8-0b35b75d9217",
          "layout": {
              "portsIn": [],
              "portsOut": [
                  {
                      "type": "0",
                      "name": "a1jf8yr1w",
                      "uititle": "Filter index",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1678290941769,
          "exampleProjectId": "",
          "shortName": "SubPatchInput",
          "hasScreenshot": false,
          "namespace": "Ops.Ui",
          "shortNameDisplay": "SubPatchInput",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Ui.SubPatchInput",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Ui.SubPatchOutput",
          "content": "",
          "attachmentFiles": [],
          "summary": "",
          "id": "02d45073-7936-4830-81ad-59a162febf1f",
          "layout": {
              "portsIn": [],
              "portsOut": []
          },
          "authorName": "pandur",
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1678290896829,
          "exampleProjectId": "",
          "shortName": "SubPatchOutput",
          "hasScreenshot": false,
          "namespace": "Ops.Ui",
          "shortNameDisplay": "SubPatchOutput",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Ui.SubPatchOutput",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Ui.Subpatch2Template",
          "content": "",
          "attachmentFiles": [],
          "summary": "new subpatches",
          "id": "3e5e6eb2-756a-4e5e-b157-29526cefeb7a",
          "layout": {
              "portsIn": [
                  {
                      "type": 5,
                      "name": "patchId"
                  }
              ],
              "portsOut": []
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1677081482942,
          "exampleProjectId": "",
          "coreLibs": [
              "subpatchop"
          ],
          "shortName": "Subpatch2Template",
          "hasScreenshot": false,
          "namespace": "Ops.Ui",
          "shortNameDisplay": "Subpatch2Template",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Ui.Subpatch2Template",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Ui.VizArrayChart",
          "content": "<p>Displays distribution of numerical values in an array as a graph or piechart.\nUseful for debugging.</p>\n",
          "attachmentFiles": [],
          "summary": "Displays information of the distribution of numerical values in an array",
          "id": "04ff8596-d35a-4ad5-86d6-db6a8c2ce8f0",
          "layout": {
              "portsIn": [
                  {
                      "type": 3,
                      "name": "Array Numbers"
                  },
                  {
                      "type": 3,
                      "name": "Titles"
                  }
              ],
              "portsOut": []
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "Array Numbers",
                      "text": "numerical array"
                  },
                  {
                      "name": "Titles",
                      "text": "titles for piechart and table"
                  },
                  {
                      "name": "Style index",
                      "text": "graph/piechart"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1659701445601,
          "exampleProjectId": "bPWV2f",
          "shortName": "VizArrayChart",
          "hasScreenshot": true,
          "namespace": "Ops.Ui",
          "shortNameDisplay": "VizArrayChart",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Ui.VizArrayChart",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Ui.VizArrayGraph",
          "content": "",
          "attachmentFiles": [],
          "summary": "Visualize Array as line graph",
          "id": "afc587e0-d2a9-455d-821e-325065740de1",
          "layout": {
              "portsIn": [
                  {
                      "type": 3,
                      "name": "Array Numbers"
                  },
                  {
                      "type": 0,
                      "name": "Curve",
                      "subType": "boolean"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1725286828739,
          "exampleProjectId": "gCl1ws",
          "shortName": "VizArrayGraph",
          "hasScreenshot": true,
          "namespace": "Ops.Ui",
          "shortNameDisplay": "VizArrayGraph",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Ui.VizArrayGraph",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Ui.VizArrayTable_v2",
          "content": "",
          "attachmentFiles": [],
          "summary": "Show the contents of the input array in a table in the patch, useful for debugging",
          "id": "6c3bf614-a734-4539-98cd-7a7d5bfc38c9",
          "layout": {
              "portsIn": [
                  {
                      "type": 3,
                      "name": "Array"
                  },
                  {
                      "type": 0,
                      "name": "Stride",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Scroll",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1726213889889,
          "exampleProjectId": "g8Qfq4",
          "shortName": "VizArrayTable_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Ui",
          "shortNameDisplay": "VizArrayTable",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Ui.VizArrayTable",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Ui.VizArrayTable_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Ui.VizBool",
          "content": "",
          "attachmentFiles": [],
          "summary": "Visualize the state of a boolean input in the patch, useful for debugging",
          "id": "cf194306-175b-416a-b90e-31ff2192a190",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "Boolean",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "Bool",
                      "subType": "boolean"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1649238794135,
          "exampleProjectId": "9SHiq4",
          "shortName": "VizBool",
          "hasScreenshot": true,
          "namespace": "Ops.Ui",
          "shortNameDisplay": "VizBool",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Ui.VizBool",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Ui.VizGraph",
          "content": "<p>displays a graph of all the numbers connected to the input ports over time, useful so debug animations and easings</p>\n",
          "attachmentFiles": [],
          "summary": "Displays graphs for the numbers on the input port in the patchfield",
          "id": "13c54eb4-60ef-4b9c-8425-d52a431f5c87",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "Number 1",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Number 2",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Number 3",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Number 4",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Number 5",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Number 6",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Number 7",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Number 8",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Fill Graph",
                      "subType": "boolean"
                  },
                  {
                      "type": 1,
                      "name": "Reset"
                  }
              ],
              "portsOut": []
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [
              "-1vMiU6BcDg"
          ],
          "created": 1621835195647,
          "exampleProjectId": "4D2DnR",
          "shortName": "VizGraph",
          "hasScreenshot": true,
          "namespace": "Ops.Ui",
          "shortNameDisplay": "VizGraph",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Ui.VizGraph",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Ui.VizLogger",
          "content": "",
          "attachmentFiles": [],
          "summary": "Log changes of input values line by line, use like a logfile for debugging",
          "id": "22b731fe-bc97-42fe-a550-92cf0cedb133",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "Number",
                      "subType": "number"
                  },
                  {
                      "type": 5,
                      "name": "String"
                  },
                  {
                      "type": 1,
                      "name": "Clear"
                  }
              ],
              "portsOut": []
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1645174874478,
          "exampleProjectId": "-4pkq4",
          "shortName": "VizLogger",
          "hasScreenshot": true,
          "namespace": "Ops.Ui",
          "shortNameDisplay": "VizLogger",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Ui.VizLogger",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Ui.VizNumber",
          "content": "<p>display the value of the input port on the op itself, useful for debugging</p>\n",
          "attachmentFiles": [],
          "summary": "Displays input string on the patchfield",
          "id": "2b60d12d-2884-4ad0-bda4-0caeb6882f5c",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "Number",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "Result",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [
              "-1vMiU6BcDg"
          ],
          "created": 1637676964149,
          "exampleProjectId": "gkySnR",
          "shortName": "VizNumber",
          "hasScreenshot": true,
          "namespace": "Ops.Ui",
          "shortNameDisplay": "VizNumber",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Ui.VizNumber",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Ui.VizNumberBar",
          "content": "",
          "attachmentFiles": [],
          "summary": "Visualize numbers as a bar in patch, useful for debugging",
          "id": "37575d2e-4ba6-4d2b-b00c-c503666867c5",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "Number",
                      "subType": "number"
                  }
              ],
              "portsOut": []
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1651689657343,
          "exampleProjectId": "-yFlq4",
          "shortName": "VizNumberBar",
          "hasScreenshot": true,
          "namespace": "Ops.Ui",
          "shortNameDisplay": "VizNumberBar",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Ui.VizNumberBar",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Ui.VizObject",
          "content": "",
          "attachmentFiles": [],
          "summary": "Show information about any object for patch debugging",
          "id": "d09bc53e-9f52-4872-94c7-4ef777512222",
          "layout": {
              "portsIn": [
                  {
                      "type": 2,
                      "name": "Object"
                  },
                  {
                      "type": 0,
                      "name": "ZoomText",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Line Numbers",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Experimental Stringify",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Font Size",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Scroll",
                      "subType": "number"
                  }
              ],
              "portsOut": []
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1647421072154,
          "exampleProjectId": "PKAmq4",
          "shortName": "VizObject",
          "hasScreenshot": true,
          "namespace": "Ops.Ui",
          "shortNameDisplay": "VizObject",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Ui.VizObject",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Ui.VizString",
          "content": "<p>display the value of the input port on the op itself, useful for debugging</p>\n",
          "attachmentFiles": [],
          "summary": "Displays long input string on the patchfield",
          "id": "b4c93fde-85c6-4c7e-9962-a6463a84838b",
          "layout": {
              "portsIn": [
                  {
                      "type": 5,
                      "name": "String"
                  },
                  {
                      "type": 0,
                      "name": "ZoomText",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Line Numbers",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Whitespace",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Wrap lines",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Syntax index",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Font Size",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Scroll",
                      "subType": "number"
                  }
              ],
              "portsOut": []
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1663497279735,
          "exampleProjectId": "tRmy5f",
          "shortName": "VizString",
          "hasScreenshot": true,
          "namespace": "Ops.Ui",
          "shortNameDisplay": "VizString",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Ui.VizString",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Ui.VizTexture",
          "content": "<p>small preview of the texture put into the op, useful for debugging textureeffects without rendering to the canvas</p>\n",
          "attachmentFiles": [
              "att_viztex.frag",
              "att_viztex.vert"
          ],
          "summary": "Displays texture at input port",
          "id": "4ea2d7b0-ca74-45db-962b-4d1965ac20c0",
          "layout": {
              "portsIn": [
                  {
                      "type": 2,
                      "name": "Texture In",
                      "objType": "texture"
                  },
                  {
                      "type": 0,
                      "name": "Show Info",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Visualize outside 0-1 index",
                      "values": [
                          "Off",
                          "Anim",
                          "Modulo"
                      ],
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Alpha index",
                      "values": [
                          "A",
                          "1",
                          "1-A"
                      ],
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Show Color",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "X",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Y",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 2,
                      "name": "Texture Out",
                      "objType": "texture"
                  },
                  {
                      "type": 5,
                      "name": "Info"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [
              "-1vMiU6BcDg"
          ],
          "created": 1591630325323,
          "exampleProjectId": "HOVjnR",
          "coreLibs": [
              "cgl_pixelreader"
          ],
          "shortName": "VizTexture",
          "hasScreenshot": true,
          "namespace": "Ops.Ui",
          "shortNameDisplay": "VizTexture",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Ui.VizTexture",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Ui.VizTextureTable",
          "content": "",
          "attachmentFiles": [],
          "summary": "Show pixel colors of connected texture as a table, useful for debugging",
          "id": "0e5cde34-35cd-440d-b8cd-f78e1b5b7722",
          "layout": {
              "portsIn": [
                  {
                      "type": 2,
                      "name": "Texture",
                      "objType": "texture"
                  },
                  {
                      "type": 0,
                      "name": "Row Start",
                      "subType": "integer"
                  }
              ],
              "portsOut": []
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1645188318557,
          "exampleProjectId": "kp6oq4",
          "coreLibs": [
              "cgl_pixelreader"
          ],
          "shortName": "VizTextureTable",
          "hasScreenshot": true,
          "namespace": "Ops.Ui",
          "shortNameDisplay": "VizTextureTable",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Ui.VizTextureTable",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Ui.VizTrigger",
          "content": "",
          "attachmentFiles": [],
          "summary": "Visualize triggering for debugging reasons",
          "id": "4533060f-3cd4-4572-ac78-dad0710a3f7a",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Trigger"
                  },
                  {
                      "type": 1,
                      "name": "Reset"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "Count",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1717428723104,
          "exampleProjectId": "ROKBEe",
          "shortName": "VizTrigger",
          "hasScreenshot": true,
          "namespace": "Ops.Ui",
          "shortNameDisplay": "VizTrigger",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Ui.VizTrigger",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Vars.TriggerVarGetNumber",
          "content": "",
          "attachmentFiles": [],
          "summary": "Get a number variable value at time of trigger",
          "id": "e3a43bad-3a48-4f2a-af68-3c92420a76d6",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Update"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  },
                  {
                      "type": 0,
                      "name": "Value",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [
              "sUR6b0zvuSY"
          ],
          "created": 1682433539531,
          "exampleProjectId": "yNCGmy",
          "coreLibs": [
              "vargetset"
          ],
          "shortName": "TriggerVarGetNumber",
          "hasScreenshot": true,
          "namespace": "Ops.Vars",
          "shortNameDisplay": "TriggerVarGetNumber",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Vars.TriggerVarGetNumber",
                  "versionString": "",
                  "version": 0
              }
          ],
          "namespaceTitle": "Ops.Vars",
          "namespaceSummary": "",
          "allowEdit": false
      },
      {
          "name": "Ops.Vars.TriggerVarGetString",
          "content": "",
          "attachmentFiles": [],
          "summary": "Get a string variable value at time of trigger",
          "id": "3cbe9fe4-3c32-45ca-bbcc-7d2c98c1dee5",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Update"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  },
                  {
                      "type": 5,
                      "name": "Value"
                  }
              ]
          },
          "authorName": "stephan",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [
              "sUR6b0zvuSY"
          ],
          "created": 1691137347207,
          "exampleProjectId": "elyQeG",
          "coreLibs": [
              "vargetset"
          ],
          "shortName": "TriggerVarGetString",
          "hasScreenshot": true,
          "namespace": "Ops.Vars",
          "shortNameDisplay": "TriggerVarGetString",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Vars.TriggerVarGetString",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Vars.VarGetArray_v2",
          "content": "",
          "attachmentFiles": [],
          "summary": "Get a variable array",
          "id": "afa79294-aa9c-43bc-a49a-cade000a1de5",
          "layout": {
              "portsOut": [
                  {
                      "type": "3",
                      "name": "Value"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [
              "sUR6b0zvuSY"
          ],
          "created": 1593236695284,
          "exampleProjectId": "3LkNp6",
          "coreLibs": [
              "vargetset"
          ],
          "shortName": "VarGetArray_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Vars",
          "shortNameDisplay": "VarGetArray",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Vars.VarGetArray",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Vars.VarGetArray_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Vars.VarGetNumber_v2",
          "content": "",
          "attachmentFiles": [],
          "summary": "read a variable number",
          "id": "421f5b52-c0fa-47c4-8b7a-012b9e1c864a",
          "layout": {
              "portsIn": [],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "Value",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [
              "sUR6b0zvuSY"
          ],
          "created": 1587327233386,
          "exampleProjectId": "1tfFT6",
          "coreLibs": [
              "vargetset"
          ],
          "shortName": "VarGetNumber_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Vars",
          "shortNameDisplay": "VarGetNumber",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Vars.VarGetNumber",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Vars.VarGetNumber_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "allowEdit": false,
          "usedInProject": true
      },
      {
          "name": "Ops.Vars.VarGetObject_v2",
          "content": "",
          "attachmentFiles": [],
          "summary": "Get a variable object",
          "id": "321419d9-69c7-4310-a327-93d310bc2b8e",
          "layout": {
              "portsIn": [
                  {
                      "type": "0",
                      "name": "Variable",
                      "subType": "string"
                  }
              ],
              "portsOut": [
                  {
                      "type": "2",
                      "name": "Value"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [
              "sUR6b0zvuSY"
          ],
          "created": 1593236823526,
          "exampleProjectId": "0pVTp6",
          "coreLibs": [
              "vargetset"
          ],
          "shortName": "VarGetObject_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Vars",
          "shortNameDisplay": "VarGetObject",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Vars.VarGetObject",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Vars.VarGetObject_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Vars.VarGetString",
          "content": "",
          "attachmentFiles": [],
          "summary": "String variable getter",
          "id": "3ad08cfc-bce6-4175-9746-fef2817a3b12",
          "layout": {
              "portsOut": [
                  {
                      "type": "5",
                      "name": "Value"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "Variable",
                      "text": "Variable name"
                  },
                  {
                      "name": "Value",
                      "text": "String out"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [
              "sUR6b0zvuSY"
          ],
          "created": 1556107994879,
          "exampleProjectId": "W14clJ",
          "coreLibs": [
              "vargetset"
          ],
          "shortName": "VarGetString",
          "hasScreenshot": true,
          "namespace": "Ops.Vars",
          "shortNameDisplay": "VarGetString",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Vars.VarGetString",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Vars.VarGetTexture_v2",
          "content": "<p>Use to get a texture from an assigned variable with the <a href=\"/op/Ops.Vars.VarSetTexture\" target=\"_blank\">Ops.Vars.VarSetTexture</a> op</p>\n",
          "attachmentFiles": [],
          "summary": "get a texture from a variable",
          "id": "5f8ce5fc-9787-45c9-9a83-0eebd2c6de15",
          "layout": {
              "portsIn": [
                  {
                      "type": "0",
                      "name": "Variable",
                      "subType": "string"
                  }
              ],
              "portsOut": [
                  {
                      "type": "2",
                      "name": "Value"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1593236984145,
          "exampleProjectId": "lkS998",
          "coreLibs": [
              "vargetset"
          ],
          "shortName": "VarGetTexture_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Vars",
          "shortNameDisplay": "VarGetTexture",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Vars.VarGetTexture",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Vars.VarGetTexture_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Vars.VarSetArray_v2",
          "content": "",
          "attachmentFiles": [],
          "summary": "Set a variable array",
          "id": "8088290f-45d4-4312-b4ca-184d34ca4667",
          "layout": {
              "portsIn": [
                  {
                      "type": "3",
                      "name": "Value"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1593236617821,
          "exampleProjectId": "3LkNp6",
          "coreLibs": [
              "vargetset"
          ],
          "shortName": "VarSetArray_v2",
          "hasScreenshot": false,
          "namespace": "Ops.Vars",
          "shortNameDisplay": "VarSetArray",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Vars.VarSetArray",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Vars.VarSetArray_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Vars.VarSetNumber_v2",
          "content": "<p>variables are numbers you can read anywhere in your patch without creating very long cables</p>\n<p>they can also be written and read by external scripts when embedding cables patches:</p>\n<p><a href=\"https://docs.cables.gl/dev_embed_vars/dev_embed_vars.html\">https://docs.cables.gl/dev_embed_vars/dev_embed_vars.html</a></p>\n",
          "attachmentFiles": [],
          "summary": "set a variable number",
          "id": "b5249226-6095-4828-8a1c-080654e192fa",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "Value",
                      "subType": "number"
                  }
              ],
              "portsOut": []
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [
              "sUR6b0zvuSY"
          ],
          "created": 1587021615034,
          "exampleProjectId": "1tfFT6",
          "coreLibs": [
              "vargetset"
          ],
          "shortName": "VarSetNumber_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Vars",
          "shortNameDisplay": "VarSetNumber",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Vars.VarSetNumber",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Vars.VarSetNumber_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Vars.VarSetObject_v2",
          "content": "",
          "attachmentFiles": [],
          "summary": "Set a variable object",
          "id": "c7608375-5b45-4bca-87ef-d0c5e970779a",
          "layout": {
              "portsIn": [
                  {
                      "type": 2,
                      "name": "Value"
                  }
              ],
              "portsOut": []
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [
              "sUR6b0zvuSY"
          ],
          "created": 1593236784303,
          "exampleProjectId": "0pVTp6",
          "coreLibs": [
              "vargetset"
          ],
          "shortName": "VarSetObject_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Vars",
          "shortNameDisplay": "VarSetObject",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Vars.VarSetObject",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Vars.VarSetObject_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Vars.VarSetString_v2",
          "content": "",
          "attachmentFiles": [],
          "summary": "Set string variable",
          "id": "0b4d9229-8024-4a30-9cc0-f6653942c2e4",
          "layout": {
              "portsIn": [
                  {
                      "type": "5",
                      "name": "Value"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "Variable",
                      "text": "Variable name"
                  },
                  {
                      "name": "Value",
                      "text": "String in"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [
              "sUR6b0zvuSY"
          ],
          "created": 1556107937178,
          "exampleProjectId": "W14clJ",
          "coreLibs": [
              "vargetset"
          ],
          "shortName": "VarSetString_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Vars",
          "shortNameDisplay": "VarSetString",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Vars.VarSetString",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Vars.VarSetString_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Vars.VarSetTexture_v2",
          "content": "<p>Use to assign a texture to a variable, access it with the <a href=\"/op/Ops.Vars.VarGetTexture\" target=\"_blank\">Ops.Vars.VarGetTexture</a> op</p>\n",
          "attachmentFiles": [],
          "summary": "set a texture variable",
          "id": "4fbfc71e-1429-439f-8591-ad35961252ed",
          "layout": {
              "portsIn": [
                  {
                      "type": 2,
                      "name": "Value",
                      "objType": "texture"
                  }
              ],
              "portsOut": []
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1593237012176,
          "exampleProjectId": "lkS998",
          "coreLibs": [
              "vargetset"
          ],
          "shortName": "VarSetTexture_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Vars",
          "shortNameDisplay": "VarSetTexture",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Vars.VarSetTexture",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Vars.VarSetTexture_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Vars.VarTriggerArray",
          "content": "<p>Use a trigger to change an Array Variable</p>\n",
          "attachmentFiles": [],
          "summary": "Set an array variable by a trigger",
          "id": "9fd759cf-6fcc-487e-9dd9-9c9ab6143683",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Trigger"
                  },
                  {
                      "type": 3,
                      "name": "Value"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [
              "30v_GQc6ajA"
          ],
          "created": 1614259605693,
          "exampleProjectId": "8WWthI",
          "coreLibs": [
              "vargetset"
          ],
          "shortName": "VarTriggerArray",
          "hasScreenshot": true,
          "namespace": "Ops.Vars",
          "shortNameDisplay": "VarTriggerArray",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Vars.VarTriggerArray",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Vars.VarTriggerNumber",
          "content": "",
          "attachmentFiles": [],
          "summary": "set number variable by trigger",
          "id": "2c29baf0-2af2-486d-9218-4299594ee9c1",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Trigger"
                  },
                  {
                      "type": 0,
                      "name": "Value",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [
              "30v_GQc6ajA"
          ],
          "created": 1614258999179,
          "exampleProjectId": "JEYSfE",
          "coreLibs": [
              "vargetset"
          ],
          "shortName": "VarTriggerNumber",
          "hasScreenshot": true,
          "namespace": "Ops.Vars",
          "shortNameDisplay": "VarTriggerNumber",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Vars.VarTriggerNumber",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Vars.VarTriggerObject",
          "content": "",
          "attachmentFiles": [],
          "summary": "Set an object variable by trigger",
          "id": "93939bed-e43c-48e1-aa45-0a73534bd5d6",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Trigger"
                  },
                  {
                      "type": 2,
                      "name": "Value"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "Value",
                      "text": "textures, geometry, api request returns, etc"
                  }
              ]
          },
          "hasExample": false,
          "libs": [],
          "youtubeids": [
              "30v_GQc6ajA"
          ],
          "created": 1614259627755,
          "exampleProjectId": "",
          "coreLibs": [
              "vargetset"
          ],
          "shortName": "VarTriggerObject",
          "hasScreenshot": false,
          "namespace": "Ops.Vars",
          "shortNameDisplay": "VarTriggerObject",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Vars.VarTriggerObject",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Vars.VarTriggerString",
          "content": "",
          "attachmentFiles": [],
          "summary": "set string variable by trigger",
          "id": "d75992b7-65e2-44d8-b264-320d4c5a5630",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Trigger"
                  },
                  {
                      "type": 5,
                      "name": "Value"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [
              "30v_GQc6ajA"
          ],
          "created": 1614258600444,
          "exampleProjectId": "PlLFcI",
          "coreLibs": [
              "vargetset"
          ],
          "shortName": "VarTriggerString",
          "hasScreenshot": true,
          "namespace": "Ops.Vars",
          "shortNameDisplay": "VarTriggerString",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Vars.VarTriggerString",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Vars.VarTriggerTexture",
          "content": "",
          "attachmentFiles": [],
          "summary": "Set an object variable by trigger",
          "id": "ade7c65c-0a61-4130-aebe-47221369393b",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Trigger"
                  },
                  {
                      "type": 2,
                      "name": "Value",
                      "objType": "texture"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "Value",
                      "text": "textures, geometry, api request returns, etc"
                  }
              ]
          },
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1715862839403,
          "exampleProjectId": "",
          "coreLibs": [
              "vargetset"
          ],
          "shortName": "VarTriggerTexture",
          "hasScreenshot": false,
          "namespace": "Ops.Vars",
          "shortNameDisplay": "VarTriggerTexture",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Vars.VarTriggerTexture",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Vars.VariablesAsObject",
          "content": "",
          "attachmentFiles": [],
          "summary": "outputs an object containing all variables",
          "id": "b8726368-9628-42e1-8d98-d88469c1c475",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Execute"
                  },
                  {
                      "type": 5,
                      "name": "Filter Prefix"
                  }
              ],
              "portsOut": [
                  {
                      "type": 2,
                      "name": "Result"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1598445427927,
          "exampleProjectId": "",
          "shortName": "VariablesAsObject",
          "hasScreenshot": false,
          "namespace": "Ops.Vars",
          "shortNameDisplay": "VariablesAsObject",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Vars.VariablesAsObject",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.WebAudio.AnalyzerTexture_v2",
          "content": "",
          "attachmentFiles": [
              "att_default.frag",
              "att_mirror.frag"
          ],
          "summary": "Creates a spectrogram texture from an audio FFT array",
          "id": "decba955-636b-41c5-bfb8-c2506cbcabd2",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Refresh"
                  },
                  {
                      "type": 3,
                      "name": "FFT Array"
                  },
                  {
                      "type": 0,
                      "name": "Mirror Active",
                      "group": "Mirror Options",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Mirror Width",
                      "group": "Mirror Options",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Texture Size index",
                      "subType": "integer"
                  }
              ],
              "portsOut": [
                  {
                      "type": 2,
                      "name": "Texture Out",
                      "objType": "texture"
                  },
                  {
                      "type": 0,
                      "name": "Position",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "simod",
          "docs": {
              "ports": [
                  {
                      "name": "Refresh",
                      "text": "trigger input"
                  },
                  {
                      "name": "FFT Array",
                      "text": "FFT array input"
                  },
                  {
                      "name": "Mirror Active",
                      "text": "mirror the texture in the middle"
                  },
                  {
                      "name": "Mirror Width",
                      "text": "width of the mirror effect"
                  },
                  {
                      "name": "Texture Size",
                      "text": "set the texture size"
                  },
                  {
                      "name": "Texture Out",
                      "text": "texture output"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1607427491104,
          "exampleProjectId": "T_-vCp",
          "shortName": "AnalyzerTexture_v2",
          "hasScreenshot": true,
          "namespace": "Ops.WebAudio",
          "shortNameDisplay": "AnalyzerTexture",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.WebAudio.AnalyzerTexture",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.WebAudio.AnalyzerTexture_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "namespaceTitle": "Ops.WebAudio",
          "namespaceSummary": "",
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.WebAudio.AudioAnalyzer_v2",
          "content": "",
          "attachmentFiles": [],
          "summary": "Extracts FFT, RMS & Waveform data from an incoming audio signal",
          "id": "ff9bf46c-676f-4aa1-95bf-5595a6813ed7",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Trigger In",
                      "group": "Inputs"
                  },
                  {
                      "type": 2,
                      "name": "Audio In",
                      "group": "Inputs",
                      "objType": "audioNode"
                  },
                  {
                      "type": 0,
                      "name": "FFT size index",
                      "group": "FFT Options",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Smoothing",
                      "group": "FFT Options",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Min",
                      "group": "Range (in dBFS)",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Max",
                      "group": "Range (in dBFS)",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Trigger Out"
                  },
                  {
                      "type": 2,
                      "name": "Audio Out",
                      "objType": "audioNode"
                  },
                  {
                      "type": 3,
                      "name": "FFT Array"
                  },
                  {
                      "type": 3,
                      "name": "Waveform Array"
                  },
                  {
                      "type": 3,
                      "name": "Frequencies by Index Array"
                  },
                  {
                      "type": 0,
                      "name": "Array Length",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Average Volume",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Average Volume Time-Domain",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "RMS Volume",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "simod",
          "docs": {
              "ports": [
                  {
                      "name": "Trigger In",
                      "text": "trigger input"
                  },
                  {
                      "name": "Audio In",
                      "text": "audio input"
                  },
                  {
                      "name": "FFT size",
                      "text": "bin size of FFT"
                  },
                  {
                      "name": "Smoothing",
                      "text": "smoothing factor of analysis"
                  },
                  {
                      "name": "Min",
                      "text": "minimum dB value for analyzation"
                  },
                  {
                      "name": "Max",
                      "text": "maximum dB value for analyzation"
                  },
                  {
                      "name": "Trigger Out",
                      "text": "trigger output"
                  },
                  {
                      "name": "Audio Out",
                      "text": "audio output"
                  },
                  {
                      "name": "FFT Array",
                      "text": "fft analysis array output"
                  },
                  {
                      "name": "Waveform Array",
                      "text": "amplitude analysis output"
                  },
                  {
                      "name": "Frequencies by Index Array",
                      "text": "corresponding frequencies of the fft & amplitude analysis bin"
                  },
                  {
                      "name": "Array Length",
                      "text": "array length "
                  },
                  {
                      "name": "RMS Volume",
                      "text": "average volume output"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1606233766581,
          "exampleProjectId": "h2eBh-",
          "shortName": "AudioAnalyzer_v2",
          "hasScreenshot": true,
          "namespace": "Ops.WebAudio",
          "shortNameDisplay": "AudioAnalyzer",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.WebAudio.AudioAnalyzer",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.WebAudio.AudioAnalyzer_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.WebAudio.AudioBufferChannelRouter",
          "content": "<p>Routes audio input channels to different output channels by modifying the audiobuffer accordingly.</p>\n<p>Uses <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/AudioBuffer/copyToChannel\">copyToChannel</a> to copy/move data from one channel to another.</p>\n<p>Output channel number can be an offset. This will, for example, move both stereo channels to output channel 3 and 4 if set to 2. </p>\n<p>Channel numbers are zero-based, ususal order is L, R, SL, SR, C, LFE, ... check your soundcard settings to see how hardware-outputs are mapped to channels.</p>\n",
          "attachmentFiles": [],
          "summary": "Route audio from one input channel to any output channel",
          "id": "646f2c46-a802-47c6-8b41-8feea8749ccc",
          "layout": {
              "portsIn": [
                  {
                      "type": 2,
                      "name": "Audio Buffer",
                      "objType": "audioBuffer"
                  },
                  {
                      "type": 0,
                      "name": "Channel In",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Channel Out",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Clear Others",
                      "group": "Mode",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Channel Offset",
                      "group": "Mode",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 2,
                      "name": "Audio Buffer Out",
                      "objType": "audioBuffer"
                  },
                  {
                      "type": 0,
                      "name": "Output Channels",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "stephan",
          "docs": {
              "ports": [
                  {
                      "name": "Channel In",
                      "text": "zero-based input chanel to route"
                  },
                  {
                      "name": "Channel Out",
                      "text": "zero-based target output channel"
                  },
                  {
                      "name": "Clear Others",
                      "text": "fill all other channels with empty data/silence"
                  },
                  {
                      "name": "Channel Offset",
                      "text": "offset input signal by x channels and keep all input channels"
                  },
                  {
                      "name": "Output Channels",
                      "text": "maximum number of output channels supported by the soundcard"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1702653521834,
          "exampleProjectId": "KlCyYN",
          "shortName": "AudioBufferChannelRouter",
          "hasScreenshot": true,
          "namespace": "Ops.WebAudio",
          "shortNameDisplay": "AudioBufferChannelRouter",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.WebAudio.AudioBufferChannelRouter",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.WebAudio.AudioBufferPlayer_v2",
          "content": "<p>Typically connected to a <a href=\"/op/Ops.WebAudio.AudioBuffer\" target=\"_blank\">Ops.WebAudio.AudioBuffer</a>, which holds the sample / audio file.\nIn contrast to the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/AudioBufferSourceNode\">Web Audio AudioBufferSourceNode</a>, which can only play back an AudioBuffer once, this op can play back multiple times (every time the playback finished a new <code>AudioBufferSourceNode</code> is being created internally). </p>\n",
          "attachmentFiles": [],
          "summary": "Play back audio data stored in an AudioBuffer",
          "id": "3abd0dbb-eeee-4c65-ae31-b8bc2345e2d5",
          "layout": {
              "portsIn": [
                  {
                      "type": 2,
                      "name": "Audio Buffer",
                      "objType": "audioBuffer"
                  },
                  {
                      "type": 0,
                      "name": "Start / Stop",
                      "group": "Playback Controls",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Loop",
                      "group": "Playback Controls",
                      "subType": "boolean"
                  },
                  {
                      "type": 1,
                      "name": "Restart",
                      "group": "Playback Controls"
                  },
                  {
                      "type": 0,
                      "name": "Offset",
                      "group": "Time Controls",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Playback Rate",
                      "group": "Miscellaneous",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Detune",
                      "group": "Miscellaneous",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 2,
                      "name": "Audio Out",
                      "objType": "audioNode"
                  },
                  {
                      "type": 0,
                      "name": "Is Playing",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Loading",
                      "subType": "boolean"
                  }
              ]
          },
          "authorName": "simod",
          "docs": {
              "ports": [
                  {
                      "name": "Audio Buffer",
                      "text": "The audio buffer (typically from an audio file) which contains the audio data. In most cases you need to create a `AudioBuffer` op to load your audio sample and connect it to this port."
                  },
                  {
                      "name": "Start / Stop",
                      "text": "When set the playback is started"
                  },
                  {
                      "name": "Loop",
                      "text": "Weather or not the playback should start from the beginning once the end has been reached. Please note that some browsers have problems doing a perfect loop with certain file types. If you e.g. use an MP3-file as `AudioBuffer` Google Chrome might produce a slight gap between the loops. Ogg-files sometimes work better."
                  },
                  {
                      "name": "Restart",
                      "text": "trigger to restart the playback"
                  },
                  {
                      "name": "Offset",
                      "text": "Shifts the playback position"
                  },
                  {
                      "name": "Playback Rate",
                      "text": "How fast / slow the audio should be played back, `1` is normal speed, `2` double speed, `0.5` half speed."
                  },
                  {
                      "name": "Detune",
                      "text": "How much the sound should be detuned in [cents](https://en.wikipedia.org/wiki/Cent_(music)). `-100` means one semitone lower, `100` one semitone higher, `1200` is one octave higher (`12 * 100`)."
                  },
                  {
                      "name": "Audio Out",
                      "text": "The audio out object"
                  },
                  {
                      "name": "Is Playing",
                      "text": "returns true if audio file is playing, false if not"
                  },
                  {
                      "name": "Loading",
                      "text": "true if currently loading an audio source"
                  }
              ]
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1605544848510,
          "exampleProjectId": "5PFIfu",
          "shortName": "AudioBufferPlayer_v2",
          "hasScreenshot": true,
          "namespace": "Ops.WebAudio",
          "shortNameDisplay": "AudioBufferPlayer",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.WebAudio.AudioBufferPlayer",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.WebAudio.AudioBufferPlayer_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.WebAudio.AudioBufferToSplineArray",
          "content": "",
          "attachmentFiles": [],
          "summary": "Outputs the waveform of an audio file as a spline array",
          "id": "0a573407-f1af-4580-ba37-1604108151bd",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Render"
                  },
                  {
                      "type": 2,
                      "name": "Audio Buffer",
                      "objType": "audioBuffer"
                  },
                  {
                      "type": 0,
                      "name": "Width",
                      "group": "Waveform Settings",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Height",
                      "group": "Waveform Settings",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Samples Per Pixel",
                      "group": "Waveform Settings",
                      "subType": "integer"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  },
                  {
                      "type": 3,
                      "name": "Array Out"
                  }
              ]
          },
          "authorName": "simod",
          "docs": {
              "ports": [
                  {
                      "name": "Render",
                      "text": "Renders the waveform and triggers `Next` when done"
                  },
                  {
                      "name": "Audio Buffer",
                      "text": "Connect this to an Ops.WebAudio.AudioBuffer op, which loads and holds an audio sample"
                  },
                  {
                      "name": "Width",
                      "text": "The width of the waveform"
                  },
                  {
                      "name": "Height",
                      "text": "The height of the waveform"
                  },
                  {
                      "name": "Samples Per Pixel",
                      "text": "Controls how detailled the waveform is, the smaller the value the more detail and the wider the output. "
                  },
                  {
                      "name": "Next",
                      "text": "Called after `Render` was called, triggers the next op"
                  },
                  {
                      "name": "Array Out",
                      "text": "spline array output"
                  }
              ]
          },
          "hasExample": true,
          "libs": [
              "webaudio-peaks.js"
          ],
          "youtubeids": [],
          "created": 1607357476215,
          "exampleProjectId": "OcOVBp",
          "shortName": "AudioBufferToSplineArray",
          "hasScreenshot": true,
          "namespace": "Ops.WebAudio",
          "shortNameDisplay": "AudioBufferToSplineArray",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.WebAudio.AudioBufferToSplineArray",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.WebAudio.AudioBuffer_v2",
          "content": "",
          "attachmentFiles": [],
          "summary": "Holds an audio file / sample in a buffer ",
          "id": "5f1d6a2f-1c04-4744-b0fb-910825beceee",
          "layout": {
              "portsIn": [
                  {
                      "type": 5,
                      "name": "URL"
                  },
                  {
                      "type": 0,
                      "name": "Create Loading Task",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 2,
                      "name": "Audio Buffer",
                      "objType": "audioBuffer"
                  },
                  {
                      "type": 0,
                      "name": "Finished Loading",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Sample Rate",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Length",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Duration",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Number of Channels",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "isLoading",
                      "subType": "boolean"
                  }
              ]
          },
          "authorName": "tim",
          "docs": {
              "ports": [
                  {
                      "name": "URL",
                      "text": "The audio file to load. Mostly you will drag an audio file into the cables window and select it via the file-chooser in the op parameter view. Depending on the browser you use (or user who will see / hear your exported patch) only certain file types can be played back. MP3 seems to be the best supported audio format. It is also possible to pass a data URL (from a local file) to the buffer."
                  },
                  {
                      "name": "Audio Buffer",
                      "text": "The loaded audio buffer, can be connected to e.g. AudioBufferPlayer"
                  },
                  {
                      "name": "Finished Loading",
                      "text": "True when the file is loaded"
                  },
                  {
                      "name": "Sample Rate",
                      "text": "Samples per second of the PCM data stored in the buffer."
                  },
                  {
                      "name": "Length",
                      "text": "Length of the buffer, in sample-frames, of the PCM data stored in the buffer."
                  },
                  {
                      "name": "Duration",
                      "text": "Duration, in seconds, of the PCM data stored in the buffer"
                  },
                  {
                      "name": "Number of Channels",
                      "text": "How many channels the audio file contains, 2 is stereo, 1 is mono"
                  },
                  {
                      "name": "isLoading",
                      "text": "indicates if buffer is currently loading"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1599661049643,
          "exampleProjectId": "xEL0rn",
          "shortName": "AudioBuffer_v2",
          "hasScreenshot": true,
          "namespace": "Ops.WebAudio",
          "shortNameDisplay": "AudioBuffer",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.WebAudio.AudioBuffer",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.WebAudio.AudioBuffer_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.WebAudio.AudioPanner",
          "content": "",
          "attachmentFiles": [],
          "summary": "stereo pan an audio signal from left to right",
          "id": "313ebceb-fa16-4400-aa2b-20859614c7c6",
          "layout": {
              "portsIn": [
                  {
                      "type": 2,
                      "name": "audio in",
                      "objType": "audioNode"
                  },
                  {
                      "type": 0,
                      "name": "Pan",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 2,
                      "name": "audio out",
                      "objType": "audioNode"
                  }
              ]
          },
          "authorName": "simod",
          "docs": {
              "ports": [
                  {
                      "name": "audio in",
                      "text": "audio input"
                  },
                  {
                      "name": "Pan",
                      "text": "audio pan position from -1 to 1"
                  },
                  {
                      "name": "audio out",
                      "text": "panned audio out"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1601997494173,
          "exampleProjectId": "iNue_j",
          "shortName": "AudioPanner",
          "hasScreenshot": true,
          "namespace": "Ops.WebAudio",
          "shortNameDisplay": "AudioPanner",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.WebAudio.AudioPanner",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.WebAudio.AudioRecorder",
          "content": "<p>This op let&#39;s you record any webaudio stream in your patch.</p>\n<p>How to use:</p>\n<ol>\n<li>Connect audio to the input</li>\n<li>Click/Trigger &quot;Start Recording&quot;</li>\n<li>Record as long as you want</li>\n<li>Click/Trigger &quot;Stop Recording&quot;</li>\n<li>The recorded audio will be processed</li>\n<li>To playback the recorded loop, connect the &quot;Recorded Out&quot; output and click &quot;Start Playback&quot;</li>\n<li>To download, click &quot;Download .wav file&quot;</li>\n<li>To stop playback, click &quot;Stop Playback&quot;</li>\n<li>If you want to delete what you recorded, press &quot;Clear Buffer&quot;</li>\n</ol>\n<p>The AudioRecorder has 5 states:</p>\n<p>&quot;idling&quot; - there is nothing in the recording buffer, nothing is playing back\n&quot;recording&quot; - the recorder is currently recording\n&quot;processing&quot; - the recorder is currently processing the recorded audio\n&quot;ready&quot; - the recorder is ready to play back/download\n&quot;playing&quot;  - the recorder is currently playing back the recorded audio</p>\n",
          "attachmentFiles": [
              "att_inc_mediarecorder.js",
              "att_waveencoder.js"
          ],
          "summary": "record, playback and download audio",
          "id": "b4d46521-a8f8-4d54-abdb-98f1bfb80edd",
          "layout": {
              "portsIn": [
                  {
                      "type": 2,
                      "name": "Audio In",
                      "objType": "audioNode"
                  },
                  {
                      "type": 1,
                      "name": "Start Recording",
                      "group": "Recording"
                  },
                  {
                      "type": 1,
                      "name": "Stop Recording",
                      "group": "Recording"
                  },
                  {
                      "type": 0,
                      "name": "Input Gain",
                      "group": "Recording",
                      "subType": "number"
                  },
                  {
                      "type": 1,
                      "name": "Start Playback",
                      "group": "Playback"
                  },
                  {
                      "type": 1,
                      "name": "Stop Playback",
                      "group": "Playback"
                  },
                  {
                      "type": 1,
                      "name": "Clear Buffer",
                      "group": "Playback"
                  },
                  {
                      "type": 0,
                      "name": "Playback Gain",
                      "group": "Playback",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Loop Playback",
                      "group": "Playback",
                      "subType": "boolean"
                  },
                  {
                      "type": 1,
                      "name": "Download .wav File"
                  }
              ],
              "portsOut": [
                  {
                      "type": 2,
                      "name": "Audio Out",
                      "objType": "audioNode"
                  },
                  {
                      "type": 2,
                      "name": "Recorded Audio Out",
                      "objType": "audioNode"
                  },
                  {
                      "type": 0,
                      "name": "Is Recording",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Is Playing Back",
                      "subType": "boolean"
                  },
                  {
                      "type": 5,
                      "name": "State"
                  },
                  {
                      "type": 2,
                      "name": "AudioBuffer Out",
                      "objType": "audioBuffer"
                  },
                  {
                      "type": 5,
                      "name": "Data URL"
                  }
              ]
          },
          "authorName": "simod",
          "docs": {
              "ports": [
                  {
                      "name": "Audio In",
                      "text": "audio input"
                  },
                  {
                      "name": "Start Recording",
                      "text": "click/trigger to start recording"
                  },
                  {
                      "name": "Stop Recording",
                      "text": "click/trigger to stop recording"
                  },
                  {
                      "name": "Input Gain",
                      "text": "volume of incoming audio"
                  },
                  {
                      "name": "Start Playback",
                      "text": "click/trigger to start playback"
                  },
                  {
                      "name": "Stop Playback",
                      "text": "click/trigger to stop playback"
                  },
                  {
                      "name": "Clear Buffer",
                      "text": "click/trigger to clear buffer (revert to \"idling\" state)"
                  },
                  {
                      "name": "Playback Gain",
                      "text": "volume of recorded audio playback"
                  },
                  {
                      "name": "Loop Playback",
                      "text": "check to loop the playback of the recorded audio"
                  },
                  {
                      "name": "Download .wav File",
                      "text": "click/trigger to download the recorded file"
                  },
                  {
                      "name": "Audio Out",
                      "text": "audio output, pass through for incoming signal"
                  },
                  {
                      "name": "Recorded Audio Out",
                      "text": "output of the recorded audio"
                  },
                  {
                      "name": "Is Recording",
                      "text": "true if currently recording"
                  },
                  {
                      "name": "Is Playing Back",
                      "text": "true if currently playing back"
                  },
                  {
                      "name": "State",
                      "text": "one of 5 states: \"idling\", \"recording\", \"processing\", \"ready\", \"playing\""
                  },
                  {
                      "name": "AudioBuffer Out",
                      "text": "audiobuffer output"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1614686502999,
          "exampleProjectId": "nEKhbI",
          "shortName": "AudioRecorder",
          "hasScreenshot": true,
          "namespace": "Ops.WebAudio",
          "shortNameDisplay": "AudioRecorder",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.WebAudio.AudioRecorder",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.WebAudio.BiquadFilter_v2",
          "content": "<p>The BiquadFilterNode represents a simple low-order filter. It can represent different kinds of filters, tone control devices, and graphic equalizers.</p>\n",
          "attachmentFiles": [],
          "summary": "Different kinds of audio filters",
          "id": "a7b30545-6db3-47b5-8ffc-f659accd0eb6",
          "layout": {
              "portsIn": [
                  {
                      "type": 2,
                      "name": "Audio In",
                      "objType": "audioNode"
                  },
                  {
                      "type": 0,
                      "name": "Type index",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Frequency",
                      "group": "Filter Settings",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Q",
                      "group": "Filter Settings",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Gain",
                      "group": "Filter Settings",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Detune",
                      "group": "Detune (in cents)",
                      "subType": "integer"
                  },
                  {
                      "type": 3,
                      "name": "Frequency Array",
                      "group": "Filter Response Input"
                  }
              ],
              "portsOut": [
                  {
                      "type": 2,
                      "name": "Audio Out",
                      "objType": "audioNode"
                  },
                  {
                      "type": 3,
                      "name": "Magnitude Response Array"
                  },
                  {
                      "type": 3,
                      "name": "Phase Response Array"
                  },
                  {
                      "type": 0,
                      "name": "Response Arrays Length",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "simod",
          "docs": {
              "ports": [
                  {
                      "name": "Audio In",
                      "text": "The audio signal you want to apply the filter to"
                  },
                  {
                      "name": "Type",
                      "text": "filter type"
                  },
                  {
                      "name": "frequency",
                      "text": "A frequency in the current filtering algorithm measured in hertz (Hz)."
                  },
                  {
                      "name": "q",
                      "text": "Q-factor / quality-factor, see [Wikipedia](http://en.wikipedia.org/wiki/Q_factor)"
                  },
                  {
                      "name": "gain",
                      "text": "How loud the audio output should be, `1` = normal (unchanged), `0` = not audible"
                  },
                  {
                      "name": "detune",
                      "text": "Representing detuning of the frequency in [cents](https://en.wikipedia.org/wiki/Cent_(music))."
                  },
                  {
                      "name": "Frequency Array",
                      "text": "put in an array of frequencies of which you want the filters response for"
                  },
                  {
                      "name": "Audio Out",
                      "text": "filtered audio output"
                  },
                  {
                      "name": "Magnitude Response Array",
                      "text": "magnitude response array out"
                  },
                  {
                      "name": "Phase Response Array",
                      "text": "phase response array out"
                  },
                  {
                      "name": "Response Arrays Length",
                      "text": "length of the arrays"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1606733542269,
          "exampleProjectId": "nhyACp",
          "shortName": "BiquadFilter_v2",
          "hasScreenshot": true,
          "namespace": "Ops.WebAudio",
          "shortNameDisplay": "BiquadFilter",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.WebAudio.BiquadFilter",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.WebAudio.BiquadFilter_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.WebAudio.ClockSequencer",
          "content": "",
          "attachmentFiles": [
              "att_worker.js"
          ],
          "summary": "send bpm based triggers like a clocked trigger sequencer / clock divider",
          "id": "7994c33f-d4ca-455b-af72-83dcbf5ae83f",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "BPM",
                      "subType": "integer"
                  },
                  {
                      "type": 1,
                      "name": "Start"
                  },
                  {
                      "type": 1,
                      "name": "Stop"
                  },
                  {
                      "type": 1,
                      "name": "Reset"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "1/1 Note Trigger"
                  },
                  {
                      "type": 1,
                      "name": "1/2 Note Trigger"
                  },
                  {
                      "type": 1,
                      "name": "1/4 Note Trigger"
                  },
                  {
                      "type": 1,
                      "name": "1/8 Note Trigger"
                  },
                  {
                      "type": 1,
                      "name": "1/16 Note Trigger"
                  },
                  {
                      "type": 1,
                      "name": "1/32 Note Trigger"
                  },
                  {
                      "type": 1,
                      "name": "1/64 Note Trigger"
                  },
                  {
                      "type": 1,
                      "name": "1/1 Triplet Note Trigger"
                  },
                  {
                      "type": 1,
                      "name": "1/2 Triplet Note Trigger"
                  },
                  {
                      "type": 1,
                      "name": "1/4 Triplet Note Trigger"
                  },
                  {
                      "type": 1,
                      "name": "1/8 Triplet Note Trigger"
                  },
                  {
                      "type": 1,
                      "name": "1/16 Triplet Note Trigger"
                  },
                  {
                      "type": 1,
                      "name": "1/32 Triplet Note Trigger"
                  },
                  {
                      "type": 1,
                      "name": "1/64 Triplet Note Trigger"
                  },
                  {
                      "type": 1,
                      "name": "1/1 Dotted Note Trigger"
                  },
                  {
                      "type": 1,
                      "name": "1/2 Dotted Note Trigger"
                  },
                  {
                      "type": 1,
                      "name": "1/4 Dotted Note Trigger"
                  },
                  {
                      "type": 1,
                      "name": "1/8 Dotted Note Trigger"
                  },
                  {
                      "type": 1,
                      "name": "1/16 Dotted Note Trigger"
                  },
                  {
                      "type": 1,
                      "name": "1/32 Dotted Note Trigger"
                  },
                  {
                      "type": 1,
                      "name": "1/64 Dotted Note Trigger"
                  },
                  {
                      "type": 0,
                      "name": "Sequencer Running",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "BPM Out",
                      "subType": "number"
                  },
                  {
                      "type": 1,
                      "name": "Start Out"
                  },
                  {
                      "type": 1,
                      "name": "Stop Out"
                  },
                  {
                      "type": 1,
                      "name": "Reset Out"
                  }
              ]
          },
          "authorName": "simod",
          "docs": {
              "ports": [
                  {
                      "name": "BPM",
                      "text": "beats per minute (tempo)"
                  },
                  {
                      "name": "Start",
                      "text": "starts the sequencer"
                  },
                  {
                      "name": "Stop",
                      "text": "stops the sequencer"
                  },
                  {
                      "name": "Reset",
                      "text": "resets the sequencer "
                  },
                  {
                      "name": "1/1 Note Trigger",
                      "text": "triggers every full note"
                  },
                  {
                      "name": "1/2 Note Trigger",
                      "text": "triggers every half note"
                  },
                  {
                      "name": "1/4 Note Trigger",
                      "text": "triggers every quarter note"
                  },
                  {
                      "name": "1/8 Note Trigger",
                      "text": "triggers every eigth note note"
                  },
                  {
                      "name": "1/16 Note Trigger",
                      "text": "triggers every sixteenth note"
                  },
                  {
                      "name": "1/32 Note Trigger",
                      "text": "triggers every thirty-second note"
                  },
                  {
                      "name": "1/64 Note Trigger",
                      "text": "triggers every sixty-fourth note"
                  },
                  {
                      "name": "1/1 Triplet Note Trigger",
                      "text": "triggers every full note triplet "
                  },
                  {
                      "name": "1/2 Triplet Note Trigger",
                      "text": "triggers every half note triplet"
                  },
                  {
                      "name": "1/4 Triplet Note Trigger",
                      "text": "triggers every quarter note triplet"
                  },
                  {
                      "name": "1/8 Triplet Note Trigger",
                      "text": "triggers every eigth note triplet"
                  },
                  {
                      "name": "1/16 Triplet Note Trigger",
                      "text": "triggers every sixteenth note triplet"
                  },
                  {
                      "name": "1/32 Triplet Note Trigger",
                      "text": "triggers every thirty-second note triplet"
                  },
                  {
                      "name": "1/64 Triplet Note Trigger",
                      "text": "triggers every sixty-fourth note triplet"
                  },
                  {
                      "name": "1/1 Dotted Note Trigger",
                      "text": "triggers every full note + half note (3 half notes)"
                  },
                  {
                      "name": "1/2 Dotted Note Trigger",
                      "text": "triggers every half note + quarter note (3 quarter notes)"
                  },
                  {
                      "name": "1/4 Dotted Note Trigger",
                      "text": "triggers every quarter note + eigth note (3 eigth notes)"
                  },
                  {
                      "name": "1/8 Dotted Note Trigger",
                      "text": "triggers every eigth note + sixteenth note (3 sixteenth notes)"
                  },
                  {
                      "name": "1/16 Dotted Note Trigger",
                      "text": "triggers every sixteenth note + thirty-second note (3 thirty-second notes)"
                  },
                  {
                      "name": "1/32 Dotted Note Trigger",
                      "text": "triggers every thirty-second note + sixty-fourth note (3 sixty-fourth notes)"
                  },
                  {
                      "name": "1/64 Dotted Note Trigger",
                      "text": "triggers every 3 1/128 notes (single tick)"
                  },
                  {
                      "name": "Sequencer Running",
                      "text": "outputs true if the sequencer is currently running, falls else"
                  },
                  {
                      "name": "BPM Out",
                      "text": "outputs the set bpm value"
                  },
                  {
                      "name": "Start Out",
                      "text": "triggers when started"
                  },
                  {
                      "name": "Stop Out",
                      "text": "triggers when stopped"
                  },
                  {
                      "name": "Reset Out",
                      "text": "triggers when reset"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1612888673498,
          "exampleProjectId": "J8Uccu",
          "shortName": "ClockSequencer",
          "hasScreenshot": true,
          "namespace": "Ops.WebAudio",
          "shortNameDisplay": "ClockSequencer",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.WebAudio.ClockSequencer",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.WebAudio.ClockSequencerPattern",
          "content": "<p>This op allows you to create trigger patterns in conjuction with the ParseArray op.</p>\n<p>If your array contains a 0, the step containing it will not pass a trigger through.</p>\n<p>If you do not pass an array, triggers will be passed through.</p>\n<p>An example:\nIf you choose a step size of 6 and use an array that looks like this <code>[1, 0, 0, 0.5, 0, 0]</code>, every third step will be triggered. Step number 0 will output a &quot;Sequenced Value&quot; of <code>1</code>, where as step number 3 will output a value of <code>0.5</code>. These values can be used to modulate parameters, e.g.: using it to control the volume of a sequenced sound. Please refer to the example for a musical use case.</p>\n",
          "attachmentFiles": [],
          "summary": "sequence triggers by defining a pattern (like a drum machine)",
          "id": "3b9b9ff5-4c25-42e3-9897-262b11c9cb94",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Clock Trigger Input"
                  },
                  {
                      "type": 3,
                      "name": "Sequence Array"
                  },
                  {
                      "type": 0,
                      "name": "Steps index",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Steps",
                      "subType": "string"
                  },
                  {
                      "type": 1,
                      "name": "Reset"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Sequence Trigger Output"
                  },
                  {
                      "type": 0,
                      "name": "Sequenced Value",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Current Step",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "simod",
          "docs": {
              "ports": [
                  {
                      "name": "Clock Trigger Input",
                      "text": "trigger input"
                  },
                  {
                      "name": "Sequence Array",
                      "text": "pattern to be sequenced in array form. 0 does not trigger. e.g.: [1, 0, 1, 0] triggers every 1st and 3rd trigger"
                  },
                  {
                      "name": "Steps",
                      "text": "number of steps until pattern is repeated"
                  },
                  {
                      "name": "Reset",
                      "text": "restarts the sequence if triggered"
                  },
                  {
                      "name": "Sequence Trigger Output",
                      "text": "output trigger"
                  },
                  {
                      "name": "Sequenced Value",
                      "text": "the current step value on trigger"
                  },
                  {
                      "name": "Current Step",
                      "text": "the index of the step"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1612889557426,
          "exampleProjectId": "KM0Dgu",
          "shortName": "ClockSequencerPattern",
          "hasScreenshot": true,
          "namespace": "Ops.WebAudio",
          "shortNameDisplay": "ClockSequencerPattern",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.WebAudio.ClockSequencerPattern",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.WebAudio.Convolver_v2",
          "content": "<p>The ConvolverNode interface is an AudioNode that performs a Linear Convolution on a given AudioBuffer, often used to achieve a reverb effect.</p>\n<p>For free impulse responses check out <a href=\"http://www.openairlib.net/\">Open AIR Library</a>.</p>\n",
          "attachmentFiles": [],
          "summary": "Audio reverb using an impulse response (sample)",
          "id": "63c619be-2256-4bbe-a83f-36b2bb6faa52",
          "layout": {
              "portsIn": [
                  {
                      "type": 2,
                      "name": "Audio In",
                      "objType": "audioNode"
                  },
                  {
                      "type": 5,
                      "name": "Impulse Response",
                      "group": "IR Options"
                  },
                  {
                      "type": 0,
                      "name": "Normalize",
                      "group": "IR Options",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "IR Gain",
                      "group": "IR Options",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Predelay (MS)",
                      "group": "IR Options",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Dry/Wet",
                      "group": "Output",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Output Gain",
                      "group": "Output",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 2,
                      "name": "Audio Out",
                      "objType": "audioNode"
                  },
                  {
                      "type": 2,
                      "name": "Wet Out",
                      "objType": "audioNode"
                  }
              ]
          },
          "authorName": "simod",
          "docs": {
              "ports": [
                  {
                      "name": "Audio In",
                      "text": "audio input"
                  },
                  {
                      "name": "Impulse Response",
                      "text": "impulse response file"
                  },
                  {
                      "name": "Normalize",
                      "text": "wether the IR file should be normalized, its good to leave it on to avoid clipping"
                  },
                  {
                      "name": "IR Gain",
                      "text": "gain of the audio input going into the convolution"
                  },
                  {
                      "name": "Predelay (MS)",
                      "text": "delay incoming signal into convolver in miliseconds"
                  },
                  {
                      "name": "Dry/Wet",
                      "text": "dry wet control - 0 no reverb - 1 full"
                  },
                  {
                      "name": "Output Gain",
                      "text": "output volume"
                  },
                  {
                      "name": "Audio Out",
                      "text": "audio output"
                  },
                  {
                      "name": "Wet Out",
                      "text": "wet signal only audio output"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1607959999477,
          "exampleProjectId": "WlLDwp",
          "shortName": "Convolver_v2",
          "hasScreenshot": true,
          "namespace": "Ops.WebAudio",
          "shortNameDisplay": "Convolver",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.WebAudio.Convolver",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.WebAudio.Convolver_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.WebAudio.CutFilter",
          "content": "",
          "attachmentFiles": [],
          "summary": "dj style filter (lowpass and highpass)",
          "id": "de1f1d82-49b3-47e3-840e-2ab75ffc0045",
          "layout": {
              "portsIn": [
                  {
                      "type": 2,
                      "name": "Audio In",
                      "objType": "audioNode"
                  },
                  {
                      "type": 0,
                      "name": "Highpass active ",
                      "group": "Highpass / Lowcut",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Highpass Slope (in dB) index",
                      "subType": "integer"
                  },
                  {
                      "type": 5,
                      "name": "Highpass Slope (in dB)",
                      "group": "Highpass / Lowcut"
                  },
                  {
                      "type": 0,
                      "name": "Low Frequency",
                      "group": "Highpass / Lowcut",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Low Q",
                      "group": "Highpass / Lowcut",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Lowpass active ",
                      "group": "Lowpass / Highcut",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Lowpass Slope (in dB) index",
                      "subType": "integer"
                  },
                  {
                      "type": 5,
                      "name": "Lowpass Slope (in dB)",
                      "group": "Lowpass / Highcut"
                  },
                  {
                      "type": 0,
                      "name": "High Frequency",
                      "group": "Lowpass / Highcut",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "High Q",
                      "group": "Lowpass / Highcut",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 2,
                      "name": "Audio Out",
                      "objType": "audioNode"
                  }
              ]
          },
          "authorName": "simod",
          "docs": {
              "ports": [
                  {
                      "name": "Audio In",
                      "text": "audio input"
                  },
                  {
                      "name": "Highpass active ",
                      "text": "check if you want a highpass to be applied to the signal"
                  },
                  {
                      "name": "Highpass Slope (in dB)",
                      "text": "slope of the highpass: the higher the slope, the harder the cut at specified frequency"
                  },
                  {
                      "name": "Low Frequency",
                      "text": "frequency of the low band"
                  },
                  {
                      "name": "Low Q",
                      "text": "q factor of the low band"
                  },
                  {
                      "name": "Lowpass active ",
                      "text": "check if you want a lowpass to be applied to the signal"
                  },
                  {
                      "name": "Lowpass Slope (in dB)",
                      "text": "slope of the lowpass: the higher the slope, the harder the cut at specified frequency"
                  },
                  {
                      "name": "High Frequency",
                      "text": "frequency of the high band"
                  },
                  {
                      "name": "High Q",
                      "text": "q factor of the high band"
                  },
                  {
                      "name": "Audio Out",
                      "text": "filtered audio output"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1606840411979,
          "exampleProjectId": "6SsZxp",
          "shortName": "CutFilter",
          "hasScreenshot": true,
          "namespace": "Ops.WebAudio",
          "shortNameDisplay": "CutFilter",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.WebAudio.CutFilter",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.WebAudio.Delay",
          "content": "",
          "attachmentFiles": [],
          "summary": "add a delay effect to an audio stream",
          "id": "60a557be-109a-494d-aba7-fcc61bbad033",
          "layout": {
              "portsIn": [
                  {
                      "type": 2,
                      "name": "Audio In",
                      "objType": "audioNode"
                  },
                  {
                      "type": 0,
                      "name": "Dry/Wet",
                      "group": "Main Controls",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Feedback",
                      "group": "Main Controls",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Delay Time (MS)",
                      "group": "Main Controls",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Delay Shift (MS)",
                      "group": "Main Controls",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "BPM based delay time",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "BPM",
                      "group": "Synced Controls",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Delay Time (note value)  index",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Use Filter & Modulation",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Highpass Frequency",
                      "group": "Filters & Modulation",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Highpass Q",
                      "group": "Filters & Modulation",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Lowpass Frequency",
                      "group": "Filters & Modulation",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Lowpass Q",
                      "group": "Filters & Modulation",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "LFO Speed (Hz) ",
                      "group": "Filters & Modulation",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "LFO Intensity",
                      "group": "Filters & Modulation",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "LFO Waveform index",
                      "subType": "integer"
                  }
              ],
              "portsOut": [
                  {
                      "type": 2,
                      "name": "Mix Out",
                      "objType": "audioNode"
                  },
                  {
                      "type": 2,
                      "name": "Wet Out",
                      "objType": "audioNode"
                  }
              ]
          },
          "authorName": "simod",
          "docs": {
              "ports": [
                  {
                      "name": "Audio In",
                      "text": "audio input"
                  },
                  {
                      "name": "Dry/Wet",
                      "text": "dry wet control"
                  },
                  {
                      "name": "Feedback",
                      "text": "number of repeats"
                  },
                  {
                      "name": "Delay Time (MS)",
                      "text": "delay time in miliseconds, deactivated when bpm based delay time is selected"
                  },
                  {
                      "name": "Delay Shift (MS)",
                      "text": "shifts the delaytime the given amount of miliseconds (negative numbers are also possible)"
                  },
                  {
                      "name": "BPM based delay time",
                      "text": "check to activate bpm synced delay"
                  },
                  {
                      "name": "BPM",
                      "text": "beats per minute, the tempo"
                  },
                  {
                      "name": "Delay Time (note value) ",
                      "text": "choose a note value as a delay time"
                  },
                  {
                      "name": "Use Filter & Modulation",
                      "text": "check to use filters in the delay path and delay time modulation"
                  },
                  {
                      "name": "Highpass Frequency",
                      "text": " frequency of the highpass filter"
                  },
                  {
                      "name": "Highpass Q",
                      "text": "Q value of the highpass filter"
                  },
                  {
                      "name": "Lowpass Frequency",
                      "text": "frequency of the lowpass filter"
                  },
                  {
                      "name": "Lowpass Q",
                      "text": "Q value of the lowpass filter"
                  },
                  {
                      "name": "LFO Speed (Hz) ",
                      "text": "modulation speed in hertz"
                  },
                  {
                      "name": "LFO Intensity",
                      "text": "intensity of the delay time modulation"
                  },
                  {
                      "name": "LFO Waveform index",
                      "text": "choose between two different waveforms: sine & triangle"
                  },
                  {
                      "name": "Mix Out",
                      "text": "mixed audio output"
                  },
                  {
                      "name": "Wet Out",
                      "text": "delay only output"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1612782886892,
          "exampleProjectId": "IUjXgu",
          "shortName": "Delay",
          "hasScreenshot": true,
          "namespace": "Ops.WebAudio",
          "shortNameDisplay": "Delay",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.WebAudio.Delay",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false,
          "usedInProject": true
      },
      {
          "name": "Ops.WebAudio.FFTAreaAverage_v3",
          "content": "",
          "attachmentFiles": [],
          "summary": "get average value in an area of a fft audio analysis buffer",
          "id": "e936b0bb-4ece-469d-aa93-6b3c4136c20b",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Refresh"
                  },
                  {
                      "type": 3,
                      "name": "FFT Array"
                  },
                  {
                      "type": 0,
                      "name": "X Position",
                      "group": "Area Settings",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Y Position",
                      "group": "Area Settings",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Width",
                      "group": "Area Settings",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Height",
                      "group": "Area Settings",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Create Texture",
                      "group": "Texture Settings",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Texture Size index",
                      "values": [
                          "128",
                          "256",
                          "512",
                          "1024",
                          "2048"
                      ],
                      "group": "Texture Settings",
                      "subType": "integer"
                  }
              ],
              "portsOut": [
                  {
                      "type": 2,
                      "name": "Texture Out",
                      "objType": "texture"
                  },
                  {
                      "type": 0,
                      "name": "Area Average Volume",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "Refresh",
                      "text": "trigger input"
                  },
                  {
                      "name": "FFT Array",
                      "text": "FFT array input"
                  },
                  {
                      "name": "X Position",
                      "text": "x position of area to scan"
                  },
                  {
                      "name": "Y Position",
                      "text": "y position of area to scan"
                  },
                  {
                      "name": "Width",
                      "text": "width of the rectangle"
                  },
                  {
                      "name": "Height",
                      "text": "height of the rectangle"
                  },
                  {
                      "name": "Create Texture",
                      "text": "check to create texture"
                  },
                  {
                      "name": "Texture Out",
                      "text": "texture output"
                  },
                  {
                      "name": "Area Average Volume",
                      "text": "average volume of the scanned area"
                  }
              ]
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1730989031417,
          "exampleProjectId": "F6Fhyp",
          "shortName": "FFTAreaAverage_v3",
          "hasScreenshot": true,
          "namespace": "Ops.WebAudio",
          "shortNameDisplay": "FFTAreaAverage",
          "version": 3,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.WebAudio.FFTAreaAverage",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.WebAudio.FFTAreaAverage_v2",
                  "versionString": "_v2",
                  "version": 2
              },
              {
                  "name": "Ops.WebAudio.FFTAreaAverage_v3",
                  "versionString": "_v3",
                  "version": 3
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.WebAudio.Gain",
          "content": "<p>The <code>Gain</code>-op can be used to make an audio signal more silent.</p>\n<p>The GainNode interface represents a change in volume. It is an AudioNode audio-processing module that causes a given gain to be applied to the input data before its propagation to the output. A GainNode always has exactly one input and one output, both with the same number of channels.</p>\n",
          "attachmentFiles": [],
          "summary": "Changes the gain / volume",
          "id": "29402bba-48ee-4f28-94f0-bdc345e6bb67",
          "layout": {
              "portsIn": [
                  {
                      "type": 2,
                      "name": "audio in",
                      "objType": "audioNode"
                  },
                  {
                      "type": 0,
                      "name": "gain",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Mute",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 2,
                      "name": "audio out",
                      "objType": "audioNode"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "audio in",
                      "text": "The audio signal you want to make more silent / louder"
                  },
                  {
                      "name": "gain",
                      "text": "Amount of gain to apply, `0` = not audible, `1` = output will be as loud as the input signal, everything bigger than `1` will make the audio signal louder."
                  },
                  {
                      "name": "Mute",
                      "text": "check to mute the signal"
                  },
                  {
                      "name": "audio out",
                      "text": "Audio output which contains the the input signal with the gain applied, can be connected to the Ops.WebAudio.Output op e.g."
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1542058207488,
          "exampleProjectId": "JeKgDp",
          "shortName": "Gain",
          "hasScreenshot": true,
          "namespace": "Ops.WebAudio",
          "shortNameDisplay": "Gain",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.WebAudio.Gain",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.WebAudio.KeyPiano",
          "content": "<p>Can be used to generate notes based on keyboard presses together with the <code>KeyLearn</code>-op. For every note the keyboard key can be defined in the corresponding <code>KeyLearn-op</code>, so e.g. you would add a <code>KeyLearn</code>-op, press its <code>learn</code>-button to store e.g. the key code for the key <code>c</code> and then you need to connect its <code>on press</code>-port with the <code>c note on</code>-port of <code>KeyPiano</code>. Please note that key-presses are only detected in the preview window by default (click inside to set the focus).<br>Currently only one key can be played simultaneously.</p>\n<p>The <code>Note On</code> / <code>Note Off</code> can be connected to a <a href=\"/op/Ops.Devices.Keyboard.KeyPressLearn\" target=\"_blank\">Ops.Devices.Keyboard.KeyPressLearn</a> op.</p>\n",
          "attachmentFiles": [],
          "summary": "Generates notes based on key presses",
          "id": "9f7d2411-ed87-45be-95a7-e6759d51582d",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "c note on"
                  },
                  {
                      "type": 1,
                      "name": "c note off"
                  },
                  {
                      "type": 1,
                      "name": "cis note on"
                  },
                  {
                      "type": 1,
                      "name": "cis note off"
                  },
                  {
                      "type": 1,
                      "name": "d note on"
                  },
                  {
                      "type": 1,
                      "name": "d note off"
                  },
                  {
                      "type": 1,
                      "name": "dis note on"
                  },
                  {
                      "type": 1,
                      "name": "dis note off"
                  },
                  {
                      "type": 1,
                      "name": "e note on"
                  },
                  {
                      "type": 1,
                      "name": "e note off"
                  },
                  {
                      "type": 1,
                      "name": "f note on"
                  },
                  {
                      "type": 1,
                      "name": "f note off"
                  },
                  {
                      "type": 1,
                      "name": "fis note on"
                  },
                  {
                      "type": 1,
                      "name": "fis note off"
                  },
                  {
                      "type": 1,
                      "name": "g note on"
                  },
                  {
                      "type": 1,
                      "name": "g note off"
                  },
                  {
                      "type": 1,
                      "name": "gis note ons"
                  },
                  {
                      "type": 1,
                      "name": "gis note off"
                  },
                  {
                      "type": 1,
                      "name": "a note on"
                  },
                  {
                      "type": 1,
                      "name": "a note off"
                  },
                  {
                      "type": 1,
                      "name": "ais note on"
                  },
                  {
                      "type": 1,
                      "name": "ais note off"
                  },
                  {
                      "type": 1,
                      "name": "b note on"
                  },
                  {
                      "type": 1,
                      "name": "b note off"
                  },
                  {
                      "type": 0,
                      "name": "octave",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "frequency",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "is pressed",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "tim",
          "docs": {
              "ports": [
                  {
                      "name": "octave",
                      "text": "The currently active octave – `1` is the lowest, `7` the highest. `[1-7]`"
                  },
                  {
                      "name": "frequency",
                      "text": "The note frequency of the last pressed / released key in *Hz*, e.g. `440` for `A4` (middle A). This port can be connected to the `frequency`-port of an `oscillator`-op e.g.."
                  },
                  {
                      "name": "is pressed",
                      "text": "If one of the keys is currently pressed: `1.0`, if no key is pressed: `0.0`.   Can e.g. be connected to a `Gain` node, to control the volume of a Web Audio op."
                  }
              ]
          },
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1666259306772,
          "exampleProjectId": "",
          "shortName": "KeyPiano",
          "hasScreenshot": false,
          "namespace": "Ops.WebAudio",
          "shortNameDisplay": "KeyPiano",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.WebAudio.KeyPiano",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.WebAudio.MicrophoneIn_v2",
          "content": "<p>Needs a user interaction to be enabled, check the example file</p>\n",
          "attachmentFiles": [],
          "summary": "Access to the microphone and/or audio input devices",
          "id": "cbfbbffd-a5a8-4b21-bcb5-5d031cc5e11a",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "Audio Input index",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Volume",
                      "group": "Volume Settings",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Mute",
                      "group": "Volume Settings",
                      "subType": "boolean"
                  },
                  {
                      "type": 1,
                      "name": "Start"
                  }
              ],
              "portsOut": [
                  {
                      "type": 2,
                      "name": "Audio Out",
                      "objType": "audioNode"
                  },
                  {
                      "type": 0,
                      "name": "Listening",
                      "subType": "boolean"
                  },
                  {
                      "type": 3,
                      "name": "List of Input Devices"
                  }
              ]
          },
          "authorName": "simod",
          "docs": {
              "ports": [
                  {
                      "name": "Start",
                      "text": "Trigger in to activate microphone"
                  },
                  {
                      "name": "Audio Input",
                      "text": "list of audio input devices"
                  },
                  {
                      "name": "Volume",
                      "text": "volume of the microphone"
                  },
                  {
                      "name": "Mute",
                      "text": "check to mute the microphone"
                  },
                  {
                      "name": "Audio Out",
                      "text": "audio signal"
                  },
                  {
                      "name": "Listening",
                      "text": "Is true when microphone is on & capturing input"
                  },
                  {
                      "name": "List of Input Devices",
                      "text": "string array of all availible audio input devices"
                  }
              ]
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1606307812024,
          "exampleProjectId": "xjHACp",
          "shortName": "MicrophoneIn_v2",
          "hasScreenshot": true,
          "namespace": "Ops.WebAudio",
          "shortNameDisplay": "MicrophoneIn",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.WebAudio.MicrophoneIn",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.WebAudio.MicrophoneIn_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "allowEdit": false,
          "usedInProject": true
      },
      {
          "name": "Ops.WebAudio.MidiValueToFrequency",
          "content": "",
          "attachmentFiles": [],
          "summary": "Converts a midi value to a frequency",
          "id": "751c0067-e015-4f73-90b1-2d265b6e6d72",
          "layout": {
              "portsIn": [
                  {
                      "type": "0",
                      "name": "MIDI Value"
                  },
                  {
                      "type": "0",
                      "name": "Tuning"
                  }
              ],
              "portsOut": [
                  {
                      "type": "0",
                      "name": "Frequency"
                  }
              ]
          },
          "authorName": "tim",
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "exampleProjectId": "",
          "shortName": "MidiValueToFrequency",
          "hasScreenshot": false,
          "namespace": "Ops.WebAudio",
          "shortNameDisplay": "MidiValueToFrequency",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.WebAudio.MidiValueToFrequency",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.WebAudio.Mixer",
          "content": "<p>Connector-op, which makes it possible to combine multiple audio signals into one and change their volume.</p>\n",
          "attachmentFiles": [],
          "summary": "Mix audio signals together",
          "id": "363980dc-39b8-4690-8b8d-bff954f65d49",
          "layout": {
              "portsIn": [
                  {
                      "type": 2,
                      "name": "Audio In 0",
                      "group": "Audio Inputs",
                      "objType": "audioNode"
                  },
                  {
                      "type": 2,
                      "name": "Audio In 1",
                      "group": "Audio Inputs",
                      "objType": "audioNode"
                  },
                  {
                      "type": 2,
                      "name": "Audio In 2",
                      "group": "Audio Inputs",
                      "objType": "audioNode"
                  },
                  {
                      "type": 2,
                      "name": "Audio In 3",
                      "group": "Audio Inputs",
                      "objType": "audioNode"
                  },
                  {
                      "type": 2,
                      "name": "Audio In 4",
                      "group": "Audio Inputs",
                      "objType": "audioNode"
                  },
                  {
                      "type": 2,
                      "name": "Audio In 5",
                      "group": "Audio Inputs",
                      "objType": "audioNode"
                  },
                  {
                      "type": 2,
                      "name": "Audio In 6",
                      "group": "Audio Inputs",
                      "objType": "audioNode"
                  },
                  {
                      "type": 2,
                      "name": "Audio In 7",
                      "group": "Audio Inputs",
                      "objType": "audioNode"
                  },
                  {
                      "type": 0,
                      "name": "In 0 Gain",
                      "group": "Input",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "In 1 Gain",
                      "group": "Input",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "In 2 Gain",
                      "group": "Input",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "In 3 Gain",
                      "group": "Input",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "In 4 Gain",
                      "group": "Input",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "In 5 Gain",
                      "group": "Input",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "In 6 Gain",
                      "group": "Input",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "In 7 Gain",
                      "group": "Input",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "In 0 Pan",
                      "group": "Panning",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "In 1 Pan",
                      "group": "Panning",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "In 2 Pan",
                      "group": "Panning",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "In 3 Pan",
                      "group": "Panning",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "In 4 Pan",
                      "group": "Panning",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "In 5 Pan",
                      "group": "Panning",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "In 6 Pan",
                      "group": "Panning",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "In 7 Pan",
                      "group": "Panning",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Output Gain",
                      "group": "Output ",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 2,
                      "name": "Audio Out",
                      "objType": "audioNode"
                  }
              ]
          },
          "authorName": "simod",
          "docs": {
              "ports": [
                  {
                      "name": "Audio In 0",
                      "text": "audio 0 input"
                  },
                  {
                      "name": "Audio In 1",
                      "text": "audio 1 input"
                  },
                  {
                      "name": "Audio In 2",
                      "text": "audio 2 input"
                  },
                  {
                      "name": "Audio In 3",
                      "text": "audio 3 input"
                  },
                  {
                      "name": "Audio In 4",
                      "text": "audio 4 input"
                  },
                  {
                      "name": "Audio In 5",
                      "text": "audio 5 input"
                  },
                  {
                      "name": "Audio In 6",
                      "text": "audio 6 input"
                  },
                  {
                      "name": "Audio In 7",
                      "text": "audio 7 input"
                  },
                  {
                      "name": "In 0 Gain",
                      "text": "audio 0 input volume"
                  },
                  {
                      "name": "In 1 Gain",
                      "text": "audio 1 input volume"
                  },
                  {
                      "name": "In 2 Gain",
                      "text": "audio 2 input volume"
                  },
                  {
                      "name": "In 3 Gain",
                      "text": "audio 3 input volume"
                  },
                  {
                      "name": "In 4 Gain",
                      "text": "audio 4 input volume"
                  },
                  {
                      "name": "In 5 Gain",
                      "text": "audio 5 input volume"
                  },
                  {
                      "name": "In 6 Gain",
                      "text": "audio 6 input volume"
                  },
                  {
                      "name": "In 7 Gain",
                      "text": "audio 7 input volume"
                  },
                  {
                      "name": "In 0 Pan",
                      "text": "audio 0 input pan"
                  },
                  {
                      "name": "In 1 Pan",
                      "text": "audio 1 input pan"
                  },
                  {
                      "name": "In 2 Pan",
                      "text": "audio 2 input pan"
                  },
                  {
                      "name": "In 3 Pan",
                      "text": "audio 3 input pan"
                  },
                  {
                      "name": "In 4 Pan",
                      "text": "audio 4 input pan"
                  },
                  {
                      "name": "In 5 Pan",
                      "text": "audio 5 input pan"
                  },
                  {
                      "name": "In 6 Pan",
                      "text": "audio 6 input pan"
                  },
                  {
                      "name": "In 7 Pan",
                      "text": "audio 7 input pan"
                  },
                  {
                      "name": "Output Gain",
                      "text": "output volume"
                  },
                  {
                      "name": "Audio Out",
                      "text": "audio output"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1605633000662,
          "exampleProjectId": "J7YdCp",
          "shortName": "Mixer",
          "hasScreenshot": true,
          "namespace": "Ops.WebAudio",
          "shortNameDisplay": "Mixer",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.WebAudio.Mixer",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.WebAudio.MusicalScales",
          "content": "",
          "attachmentFiles": [],
          "summary": "Outputs a musical scale array (major, minor, ...) as strings, steps and midi notes",
          "id": "9e8c08d9-8c9a-4cff-8e5b-05c72d1f8522",
          "layout": {
              "portsIn": [
                  {
                      "type": 0,
                      "name": "Root Note index",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Root Note",
                      "group": "Scale Settings",
                      "subType": "string"
                  },
                  {
                      "type": 0,
                      "name": "Scale Type index",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Scale Type",
                      "group": "Scale Settings",
                      "subType": "string"
                  },
                  {
                      "type": 0,
                      "name": "Include Upper Root Note",
                      "group": "Scale Settings",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Octave",
                      "group": "Scale Settings",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Append Octave To Names",
                      "group": "Scale Settings",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 3,
                      "name": "Note Names Array"
                  },
                  {
                      "type": 3,
                      "name": "Note Step Number Array"
                  },
                  {
                      "type": 3,
                      "name": "Midi Note Array"
                  },
                  {
                      "type": 5,
                      "name": "Current Scale"
                  }
              ]
          },
          "authorName": "simod",
          "docs": {
              "ports": [
                  {
                      "name": "Root Note index",
                      "text": "root note of the scale"
                  },
                  {
                      "name": "Root Note",
                      "text": "root note of the scale"
                  },
                  {
                      "name": "Scale Type index",
                      "text": "the scale to use"
                  },
                  {
                      "name": "Scale Type",
                      "text": "the scale to use"
                  },
                  {
                      "name": "Include Upper Root Note",
                      "text": "if true includes the root note in a higher octave"
                  },
                  {
                      "name": "Octave",
                      "text": "the octave of the scale (only for string & midi note outputs)"
                  },
                  {
                      "name": "Append Octave To Names",
                      "text": "if true, octave number is appended to output strings"
                  },
                  {
                      "name": "Note Names Array",
                      "text": "notes as an array of strings"
                  },
                  {
                      "name": "Note Step Number Array",
                      "text": "steps of the scale"
                  },
                  {
                      "name": "Midi Note Array",
                      "text": "midi note numbers of the scale"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1612791835720,
          "exampleProjectId": "8Ekchu",
          "shortName": "MusicalScales",
          "hasScreenshot": true,
          "namespace": "Ops.WebAudio",
          "shortNameDisplay": "MusicalScales",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.WebAudio.MusicalScales",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.WebAudio.Output_v2",
          "content": "<p>This should be the end-op in your Web Audio patch. This is one of the most important ops when working with Web Audio – without it you don’t hear anything.</p>\n",
          "attachmentFiles": [],
          "summary": "Sends an audio signal to your speakers",
          "id": "90b95403-b0c4-4980-ab3b-b6c354771c81",
          "layout": {
              "portsIn": [
                  {
                      "type": 2,
                      "name": "Audio In",
                      "objType": "audioNode"
                  },
                  {
                      "type": 0,
                      "name": "Volume",
                      "group": "Volume Settings",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Mute",
                      "group": "Volume Settings",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Show Audio Suspended Button",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "Current Volume",
                      "subType": "number"
                  },
                  {
                      "type": 5,
                      "name": "Context State"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "Audio In",
                      "text": "The audio signal to send to the speakers"
                  },
                  {
                      "name": "Volume",
                      "text": "How loud"
                  },
                  {
                      "name": "Mute",
                      "text": "Mutes the input"
                  }
              ]
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1606754727180,
          "exampleProjectId": "teZhCp",
          "coreLibs": [
              "interactionneededbutton"
          ],
          "shortName": "Output_v2",
          "hasScreenshot": true,
          "namespace": "Ops.WebAudio",
          "shortNameDisplay": "Output",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.WebAudio.Output",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.WebAudio.Output_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.WebAudio.ThreeBandEqualizer",
          "content": "<p>This op is 3 biquad filters in one. It is heavily inspired by Ableton&#39;s EQ3. </p>\n",
          "attachmentFiles": [],
          "summary": "3 filters in one - an eq to quickly process an audio signal",
          "id": "eb875ed3-335b-4709-82ab-3d6514ae2ae6",
          "layout": {
              "portsIn": [
                  {
                      "type": 2,
                      "name": "Audio In",
                      "objType": "audioNode"
                  },
                  {
                      "type": 0,
                      "name": "Low Filter Type index",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Low Filter Type",
                      "group": "Low",
                      "subType": "string"
                  },
                  {
                      "type": 0,
                      "name": "Low Frequency",
                      "group": "Low",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Low Q",
                      "group": "Low",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Low Gain",
                      "group": "Low",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Mid Filter Type index",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Mid Filter Type",
                      "group": "Mid",
                      "subType": "string"
                  },
                  {
                      "type": 0,
                      "name": "Mid Frequency",
                      "group": "Mid",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Mid Q",
                      "group": "Mid",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Mid Gain",
                      "group": "Mid",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "High Filter Type index",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "High Filter Type",
                      "group": "High",
                      "subType": "string"
                  },
                  {
                      "type": 0,
                      "name": "High Frequency",
                      "group": "High",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "High Q",
                      "group": "High",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "High Gain",
                      "group": "High",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 2,
                      "name": "Audio Out",
                      "objType": "audioNode"
                  }
              ]
          },
          "authorName": "simod",
          "docs": {
              "ports": [
                  {
                      "name": "Audio In",
                      "text": "audio input"
                  },
                  {
                      "name": "Low Filter Type",
                      "text": "filter type for the low band"
                  },
                  {
                      "name": "Low Frequency",
                      "text": "filter frequency for the low band"
                  },
                  {
                      "name": "Low Q",
                      "text": "filter q for the low band"
                  },
                  {
                      "name": "Low Gain",
                      "text": "filter gain for the low band"
                  },
                  {
                      "name": "Mid Filter Type",
                      "text": "filter type for the mid band"
                  },
                  {
                      "name": "Mid Frequency",
                      "text": "filter frequency for the mid band"
                  },
                  {
                      "name": "Mid Q",
                      "text": "filter q for the mid band"
                  },
                  {
                      "name": "Mid Gain",
                      "text": "filter gain for the mid band"
                  },
                  {
                      "name": "High Filter Type",
                      "text": "filter type for the high band"
                  },
                  {
                      "name": "High Frequency",
                      "text": "filter frequency for the high band"
                  },
                  {
                      "name": "High Q",
                      "text": "filter q for the high band"
                  },
                  {
                      "name": "High Gain",
                      "text": "filter gain for the high band"
                  },
                  {
                      "name": "Audio Out",
                      "text": "filtered audio out"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1606833404053,
          "exampleProjectId": "tD2Vxp",
          "shortName": "ThreeBandEqualizer",
          "hasScreenshot": true,
          "namespace": "Ops.WebAudio",
          "shortNameDisplay": "ThreeBandEqualizer",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.WebAudio.ThreeBandEqualizer",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.WebAudio.WaveformMesh",
          "content": "",
          "attachmentFiles": [],
          "summary": "Outputs the waveform of an audio file as a geometry",
          "id": "9f61a958-90b1-46df-a893-de48a5844583",
          "layout": {
              "portsIn": [
                  {
                      "type": 1,
                      "name": "Render"
                  },
                  {
                      "type": 2,
                      "name": "Audio Buffer",
                      "objType": "audioBuffer"
                  },
                  {
                      "type": 0,
                      "name": "Render Active",
                      "group": "Render Options",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Show bottom half",
                      "group": "Render Options",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Center Origin",
                      "group": "Render Options",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Width",
                      "group": "Waveform Settings",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Samples Per Pixel",
                      "group": "Waveform Settings",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Calculate Tex Coords",
                      "group": "Mesh Options",
                      "subType": "boolean"
                  }
              ],
              "portsOut": [
                  {
                      "type": 1,
                      "name": "Next"
                  },
                  {
                      "type": 2,
                      "name": "Geometry",
                      "objType": "geometry"
                  }
              ]
          },
          "authorName": "simod",
          "docs": {
              "ports": [
                  {
                      "name": "Render",
                      "text": "Renders the waveform and triggers `Next` when done"
                  },
                  {
                      "name": "Audio Buffer",
                      "text": "Connect this to an Ops.WebAudio.AudioBuffer op, which loads and holds an audio sample"
                  },
                  {
                      "name": "Render Active",
                      "text": "if true mesh is rendered"
                  },
                  {
                      "name": "Show bottom half",
                      "text": "When enabled the top half of the waveform will be mirrored, when disabled only the upper half is drawn"
                  },
                  {
                      "name": "Center Origin",
                      "text": "When enabled the waveform will be centered around the origin, e.g. useful when using `OrbitControls` and rotating around the origin. When disabled the waveform will start at the origin."
                  },
                  {
                      "name": "Width",
                      "text": "The width of the waveform"
                  },
                  {
                      "name": "Samples Per Pixel",
                      "text": "Controls how detailled the waveform is, the smaller the value the more detail and the wider the output. "
                  },
                  {
                      "name": "Calculate Tex Coords",
                      "text": "check to calculate texture coordinates"
                  },
                  {
                      "name": "Calculate Tangents/Bitangents",
                      "text": "check to calculate tangents & bitangents"
                  },
                  {
                      "name": "Next",
                      "text": "Called after `Render` was called, triggers the next op"
                  },
                  {
                      "name": "Geometry",
                      "text": "The geometry of the waveform, can be drawn e.g. with `RenderGeometry`"
                  }
              ]
          },
          "hasExample": true,
          "libs": [
              "webaudio-peaks.js"
          ],
          "youtubeids": [],
          "created": 1607338112054,
          "exampleProjectId": "VqDkCp",
          "shortName": "WaveformMesh",
          "hasScreenshot": true,
          "namespace": "Ops.WebAudio",
          "shortNameDisplay": "WaveformMesh",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.WebAudio.WaveformMesh",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false,
          "usedInProject": true
      },
      {
          "name": "Ops.WebAudio.Waveshaper",
          "content": "<p>The default transfer function for the waveshaper is taken from <a href=\"https://stackoverflow.com/a/22313408\">https://stackoverflow.com/a/22313408</a></p>\n",
          "attachmentFiles": [],
          "summary": "add waveshaping (distortion, overdrive, fuzz) to an audio stream",
          "id": "c7c957a7-4531-4909-8721-172e568ee076",
          "layout": {
              "portsIn": [
                  {
                      "type": 2,
                      "name": "audio in",
                      "objType": "audioNode"
                  },
                  {
                      "type": 0,
                      "name": "Dry/Wet",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Oversampling index",
                      "group": "Waveshape Settings",
                      "subType": "integer"
                  },
                  {
                      "type": 0,
                      "name": "Distortion Amount",
                      "group": "Waveshape Settings",
                      "subType": "integer"
                  },
                  {
                      "type": 3,
                      "name": "Waveshape Array In",
                      "group": "Waveshape Settings"
                  },
                  {
                      "type": 0,
                      "name": "Output Gain",
                      "subType": "number"
                  }
              ],
              "portsOut": [
                  {
                      "type": 2,
                      "name": "audio out",
                      "objType": "audioNode"
                  },
                  {
                      "type": 3,
                      "name": "Curve Out"
                  },
                  {
                      "type": 0,
                      "name": "Curve Length",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "simod",
          "docs": {
              "ports": [
                  {
                      "name": "audio in",
                      "text": "audio input"
                  },
                  {
                      "name": "Dry/Wet",
                      "text": "dry wet control - 0 only dry, 1 only wet (distorted) signal"
                  },
                  {
                      "name": "Oversampling",
                      "text": "how much oversampling should be applied to the waveshaping"
                  },
                  {
                      "name": "Distortion Amount",
                      "text": "the amount of distortion (equals to the amount of sample points of the waveshaper's transfer function - more points = more distortion), inactive when waveshape array in is used"
                  },
                  {
                      "name": "Waveshape Array In",
                      "text": "array input for the waveshaper (custom distortion transfer function)"
                  },
                  {
                      "name": "audio out",
                      "text": "audio output"
                  },
                  {
                      "name": "Curve Out",
                      "text": "distortion curve array output (one-dimensional)"
                  },
                  {
                      "name": "Curve Length",
                      "text": "length of the curve array"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1618823414227,
          "exampleProjectId": "6Vl87I",
          "shortName": "Waveshaper",
          "hasScreenshot": true,
          "namespace": "Ops.WebAudio",
          "shortNameDisplay": "Waveshaper",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.WebAudio.Waveshaper",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Website.Cookie",
          "content": "",
          "attachmentFiles": [],
          "summary": "cookie of the current website as object",
          "id": "a02b3bbe-eace-4a2e-b02b-1bf1e398d78a",
          "layout": {
              "portsOut": [
                  {
                      "type": 2,
                      "name": "Cookie"
                  },
                  {
                      "type": 5,
                      "name": "Cookie String"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1505194546932,
          "exampleProjectId": "oNMzci",
          "shortName": "Cookie",
          "hasScreenshot": true,
          "namespace": "Ops.Website",
          "shortNameDisplay": "Cookie",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Website.Cookie",
                  "versionString": "",
                  "version": 0
              }
          ],
          "namespaceTitle": "Ops.Website",
          "namespaceSummary": "",
          "allowEdit": false
      },
      {
          "name": "Ops.Website.FilenameInfo",
          "content": "",
          "attachmentFiles": [],
          "summary": "information about a filename, like url protocol, suffix etc",
          "id": "0a349745-20c8-44c4-8a70-214c7ccf87e9",
          "layout": {
              "portsIn": [
                  {
                      "type": 5,
                      "name": "URL"
                  }
              ],
              "portsOut": [
                  {
                      "type": 5,
                      "name": "Protocol"
                  },
                  {
                      "type": 5,
                      "name": "Host"
                  },
                  {
                      "type": 5,
                      "name": "Full Path"
                  },
                  {
                      "type": 5,
                      "name": "Filename"
                  },
                  {
                      "type": 5,
                      "name": "basename"
                  },
                  {
                      "type": 5,
                      "name": "Suffix"
                  },
                  {
                      "type": 5,
                      "name": "Is URL"
                  },
                  {
                      "type": 5,
                      "name": "queryParams"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1593869652925,
          "exampleProjectId": "RyrLMg",
          "shortName": "FilenameInfo",
          "hasScreenshot": true,
          "namespace": "Ops.Website",
          "shortNameDisplay": "FilenameInfo",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Website.FilenameInfo",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Website.ForceHttps",
          "content": "<p>if you open the patch on <code>http://example.com</code> it will redirect the url to <code>https://example.com</code> </p>\n<p>which means the page will be reloaded</p>\n",
          "attachmentFiles": [],
          "summary": "will redirect to same URL using https protocol",
          "id": "63eb8aad-4700-4760-ac0b-ae712ac01fd7",
          "layout": {},
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": false,
          "libs": [],
          "youtubeids": [],
          "created": 1585908153315,
          "exampleProjectId": "",
          "shortName": "ForceHttps",
          "hasScreenshot": false,
          "namespace": "Ops.Website",
          "shortNameDisplay": "ForceHttps",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Website.ForceHttps",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Website.InIframe",
          "content": "",
          "attachmentFiles": [],
          "summary": "Outputs true if the patch is inside of an iframe",
          "id": "f2b35a1b-0a71-4198-af22-2cc8da0e33ef",
          "layout": {
              "portsOut": [
                  {
                      "type": 0,
                      "name": "In Iframe",
                      "subType": "boolean"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1720684108868,
          "exampleProjectId": "qWDDci",
          "shortName": "InIframe",
          "hasScreenshot": true,
          "namespace": "Ops.Website",
          "shortNameDisplay": "InIframe",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Website.InIframe",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Website.InfoURL",
          "content": "",
          "attachmentFiles": [],
          "summary": "Information about the current URL",
          "id": "e72fbd80-f9c7-4572-8b6d-a485ef474b74",
          "layout": {
              "portsIn": [],
              "portsOut": [
                  {
                      "type": 5,
                      "name": "URL"
                  },
                  {
                      "type": 5,
                      "name": "Host"
                  },
                  {
                      "type": 5,
                      "name": "Hash"
                  },
                  {
                      "type": 5,
                      "name": "Pathname"
                  },
                  {
                      "type": 5,
                      "name": "Protocol"
                  },
                  {
                      "type": 5,
                      "name": "Port"
                  },
                  {
                      "type": 1,
                      "name": "Hash Changed"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": []
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1550903110452,
          "exampleProjectId": "9UM2YG",
          "shortName": "InfoURL",
          "hasScreenshot": true,
          "namespace": "Ops.Website",
          "shortNameDisplay": "InfoURL",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Website.InfoURL",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Website.LocalStorageNumber",
          "content": "",
          "attachmentFiles": [],
          "summary": "Store and retreive a number in browser localstorage",
          "id": "2894cca0-0c06-4034-9d38-04b72afad277",
          "layout": {
              "portsIn": [
                  {
                      "type": 5,
                      "name": "Key"
                  },
                  {
                      "type": 0,
                      "name": "Number",
                      "subType": "number"
                  },
                  {
                      "type": 1,
                      "name": "Store"
                  }
              ],
              "portsOut": [
                  {
                      "type": 0,
                      "name": "Stored Number",
                      "subType": "number"
                  },
                  {
                      "type": 0,
                      "name": "Storage Support",
                      "subType": "number"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "Key",
                      "text": "storage key"
                  },
                  {
                      "name": "Number",
                      "text": "storage value"
                  },
                  {
                      "name": "Store",
                      "text": "trigger to store number"
                  },
                  {
                      "name": "Stored Number",
                      "text": "the stored value"
                  },
                  {
                      "name": "Storage Support",
                      "text": "boolean to indicate browser support for localstorage"
                  }
              ]
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1611059028808,
          "exampleProjectId": "9di48i",
          "shortName": "LocalStorageNumber",
          "hasScreenshot": true,
          "namespace": "Ops.Website",
          "shortNameDisplay": "LocalStorageNumber",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Website.LocalStorageNumber",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Website.LocalStorageString",
          "content": "",
          "attachmentFiles": [],
          "summary": "Store and retreive a string in browser localstorage",
          "id": "f908fc2e-70b6-4ca4-8afd-4302b35ff570",
          "layout": {
              "portsIn": [
                  {
                      "type": 5,
                      "name": "Key"
                  },
                  {
                      "type": 5,
                      "name": "String"
                  },
                  {
                      "type": 1,
                      "name": "Store"
                  }
              ],
              "portsOut": [
                  {
                      "type": 5,
                      "name": "Stored String"
                  },
                  {
                      "type": 0,
                      "name": "Storage Support",
                      "subType": "boolean"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "Key",
                      "text": "storage key"
                  },
                  {
                      "name": "String",
                      "text": "storage value"
                  },
                  {
                      "name": "Store",
                      "text": "trigger to store number"
                  },
                  {
                      "name": "Stored String",
                      "text": "the stored value"
                  },
                  {
                      "name": "Storage Support",
                      "text": "boolean to indicate browser support for localstorage"
                  }
              ]
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1611059280263,
          "exampleProjectId": "QKe58i",
          "shortName": "LocalStorageString",
          "hasScreenshot": true,
          "namespace": "Ops.Website",
          "shortNameDisplay": "LocalStorageString",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Website.LocalStorageString",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Website.LocationHashRoute",
          "content": "<p>this will return information about window.location.hash (the part after the #) in your url.</p>\n<p>these parts of the url can be changed without reloading the browserwindow and hence may be used to carry state.</p>\n<p>this adheres to &quot;getstring&quot; syntax for key-value-pairs. having multiple # is also allowed. if key-value-pairs are duplicated the last one in the string &quot;wins&quot;.</p>\n<p>if you define a route, only parts of the hash that match this route will be considered. use multiple ops and multiple hashes to work with urls like this: &quot;#/scene/1#/track/5&quot;.</p>\n<p>additionally you may set a route like this &quot;/scene/:number&quot; and the op will extract &quot;5711&quot; from this hash <code>#/scene/5711</code> and store it in the output object as &quot;number&quot;.</p>\n",
          "attachmentFiles": [],
          "summary": "gives updated information about window.location.hash",
          "id": "1e76f92b-1eed-4575-96e1-fcff6ed08c04",
          "layout": {
              "portsIn": [
                  {
                      "type": 5,
                      "name": "Route"
                  }
              ],
              "portsOut": [
                  {
                      "type": 2,
                      "name": "Values"
                  },
                  {
                      "type": 1,
                      "name": "Changed"
                  },
                  {
                      "type": 0,
                      "name": "Matching",
                      "subType": "boolean"
                  }
              ]
          },
          "authorName": "stephan",
          "docs": {
              "ports": [
                  {
                      "name": "Route",
                      "text": "pattern for url and variables (i.e. /scene/:id)"
                  },
                  {
                      "name": "Values",
                      "text": "an object of key-value-pairs as extracted from the hash"
                  },
                  {
                      "name": "Changed",
                      "text": "fires on change of the hash in the url"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [
              "hUdHnFtBTNU"
          ],
          "created": 1615306259654,
          "exampleProjectId": "EfiWpG",
          "shortName": "LocationHashRoute",
          "hasScreenshot": true,
          "namespace": "Ops.Website",
          "shortNameDisplay": "LocationHashRoute",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Website.LocationHashRoute",
                  "versionString": "",
                  "version": 0
              }
          ],
          "allowEdit": false
      },
      {
          "name": "Ops.Website.SetLocationHash",
          "content": "<p>allows to manipulate window.location.hash to store data in the url without reloading the page.</p>\n<p>given a hash in the first parameter, the op will simply replace the whole part behind the # in the url with the given hash.</p>\n",
          "attachmentFiles": [],
          "summary": "sets window.location.hash to the specified value(s)",
          "id": "82492357-c11d-4b76-bd57-b296d3b79b83",
          "layout": {
              "portsIn": [
                  {
                      "type": 5,
                      "name": "Hash"
                  },
                  {
                      "type": 1,
                      "name": "Update"
                  },
                  {
                      "type": 0,
                      "name": "Active",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Silent",
                      "subType": "boolean"
                  },
                  {
                      "type": 0,
                      "name": "Allow Empty",
                      "subType": "boolean"
                  }
              ],
              "portsOut": []
          },
          "authorName": "stephan",
          "docs": {
              "ports": [
                  {
                      "name": "Hash",
                      "text": "new value for window.location.hash (without the #)"
                  },
                  {
                      "name": "Active",
                      "text": "active/inactive"
                  },
                  {
                      "name": "Silent",
                      "text": "make event not trigger LocationHashRoute op"
                  },
                  {
                      "name": "Allow Empty",
                      "text": "allow for setting an empty hash, usually triggers a page reload"
                  }
              ]
          },
          "hasExample": true,
          "libs": [],
          "youtubeids": [
              "hUdHnFtBTNU"
          ],
          "created": 1617113990660,
          "exampleProjectId": "EfiWpG",
          "shortName": "SetLocationHash",
          "hasScreenshot": true,
          "namespace": "Ops.Website",
          "shortNameDisplay": "SetLocationHash",
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Website.SetLocationHash",
                  "versionString": "",
                  "version": 0
              }
          ],
          "usedInProject": true,
          "allowEdit": false
      },
      {
          "name": "Ops.Website.UrlQueryParams_v2",
          "content": "<p>You can append query parameters to your URLs, e.g. \n<code>index.html?param1=ParameterValue&amp;param2=hello</code></p>\n",
          "attachmentFiles": [],
          "summary": "Returns a URL query parameter",
          "id": "2e1b645c-c463-465d-abec-bf06ee4b970c",
          "layout": {
              "portsIn": [
                  {
                      "type": 5,
                      "name": "parameter"
                  },
                  {
                      "type": 5,
                      "name": "Default"
                  }
              ],
              "portsOut": [
                  {
                      "type": 5,
                      "name": "result"
                  }
              ]
          },
          "authorName": "pandur",
          "docs": {
              "ports": [
                  {
                      "name": "parameter",
                      "text": "The parameter (key) to get"
                  },
                  {
                      "name": "Default",
                      "text": "Default value if key does not exist"
                  },
                  {
                      "name": "result",
                      "text": "The value of the parameter, or default value if it could not be found in the URL"
                  }
              ]
          },
          "license": "MIT",
          "hasExample": true,
          "libs": [],
          "youtubeids": [],
          "created": 1559051875098,
          "exampleProjectId": "2SE58i",
          "shortName": "UrlQueryParams_v2",
          "hasScreenshot": true,
          "namespace": "Ops.Website",
          "shortNameDisplay": "UrlQueryParams",
          "version": 2,
          "hasPublicRepo": true,
          "hidden": false,
          "oldVersion": false,
          "versions": [
              {
                  "name": "Ops.Website.UrlQueryParams",
                  "versionString": "",
                  "version": 0
              },
              {
                  "name": "Ops.Website.UrlQueryParams_v2",
                  "versionString": "_v2",
                  "version": 2
              }
          ],
          "allowEdit": false
      }
  ],
  "extensions": [
      {
          "name": "Ops.Extension.AmmoPhysics",
          "summary": "",
          "shortName": "AmmoPhysics",
          "nameSpace": "Ops.Extension.AmmoPhysics",
          "shortNameDisplay": "AmmoPhysics",
          "numOps": 9,
          "ops": [
              "Ops.Extension.AmmoPhysics.AmmoBody",
              "Ops.Extension.AmmoPhysics.AmmoBodyCollision",
              "Ops.Extension.AmmoPhysics.AmmoCharacter",
              "Ops.Extension.AmmoPhysics.AmmoCharacterFpsCamera",
              "Ops.Extension.AmmoPhysics.AmmoDebugRenderer",
              "Ops.Extension.AmmoPhysics.AmmoEmitter",
              "Ops.Extension.AmmoPhysics.AmmoRaycast",
              "Ops.Extension.AmmoPhysics.AmmoWorld",
              "Ops.Extension.AmmoPhysics.GltfAmmoBodies"
          ]
      },
      {
          "name": "Ops.Extension.DetectGpu",
          "summary": "",
          "shortName": "DetectGpu",
          "nameSpace": "Ops.Extension.DetectGpu",
          "shortNameDisplay": "DetectGpu",
          "numOps": 1,
          "ops": [
              "Ops.Extension.DetectGpu.DetectGPU"
          ]
      },
      {
          "name": "Ops.Extension.ECharts",
          "summary": "Wrapper for Apache ECharts-library",
          "shortName": "ECharts",
          "nameSpace": "Ops.Extension.ECharts",
          "shortNameDisplay": "ECharts",
          "numOps": 2,
          "ops": [
              "Ops.Extension.ECharts.ECharts",
              "Ops.Extension.ECharts.EChartsEvent"
          ],
          "licence": {
              "name": "Apache License 2.0"
          }
      },
      {
          "name": "Ops.Extension.FxHash.",
          "summary": "collection of ops to use cables with fxhash nft platform",
          "shortName": "FxHash",
          "nameSpace": "Ops.Extension.FxHash",
          "shortNameDisplay": "FxHash",
          "numOps": 1,
          "ops": [
              "Ops.Extension.FxHash.FxHash"
          ],
          "description": "docs: https://cables.gl/op/Ops.Extension.FxHash.FxHash"
      },
      {
          "name": "Ops.Extension.GlParticles.",
          "summary": "",
          "shortName": "GlParticles",
          "nameSpace": "Ops.Extension.GlParticles",
          "shortNameDisplay": "GlParticles",
          "numOps": 5,
          "ops": [
              "Ops.Extension.GlParticles.Dev.NoiseVectorField_v2",
              "Ops.Extension.GlParticles.Dev.ParticleSystem_v9",
              "Ops.Extension.GlParticles.Dev.TargetedVelocity",
              "Ops.Extension.GlParticles.Dev.VelocityArea_v5",
              "Ops.Extension.GlParticles.VelocityBoundaries"
          ],
          "description": "",
          "visibility": "public"
      },
      {
          "name": "Ops.Extension.HtmlElementArray",
          "summary": "",
          "shortName": "HtmlElementArray",
          "nameSpace": "Ops.Extension.HtmlElementArray",
          "shortNameDisplay": "HtmlElementArray",
          "numOps": 3,
          "ops": [
              "Ops.Extension.HtmlElementArray.DivElements",
              "Ops.Extension.HtmlElementArray.ElementArrayCssPropertyNumber",
              "Ops.Extension.HtmlElementArray.ElementArrayCssPropertyString"
          ]
      },
      {
          "name": "Ops.Extension.LSystem",
          "summary": "",
          "shortName": "LSystem",
          "nameSpace": "Ops.Extension.LSystem",
          "shortNameDisplay": "LSystem",
          "numOps": 1,
          "ops": [
              "Ops.Extension.LSystem.Lsystem_v2"
          ]
      },
      {
          "name": "Ops.Extension.Lottie.",
          "summary": "collection of ops to work with lottie files, an animated 2d vector file format",
          "shortName": "Lottie",
          "nameSpace": "Ops.Extension.Lottie",
          "shortNameDisplay": "Lottie",
          "numOps": 2,
          "ops": [
              "Ops.Extension.Lottie.LottieSVGPlayer",
              "Ops.Extension.Lottie.LottieTexturePlayer_v2"
          ],
          "description": ""
      },
      {
          "name": "Ops.Extension.Mediapipe.",
          "summary": "camera hand facetracking body tracking with google mediapipe",
          "shortName": "Mediapipe",
          "nameSpace": "Ops.Extension.Mediapipe",
          "shortNameDisplay": "Mediapipe",
          "numOps": 7,
          "ops": [
              "Ops.Extension.Mediapipe.FaceMesh",
              "Ops.Extension.Mediapipe.MpFaceTracking",
              "Ops.Extension.Mediapipe.MpHand",
              "Ops.Extension.Mediapipe.MpHandCoordinate",
              "Ops.Extension.Mediapipe.MpHandTracking",
              "Ops.Extension.Mediapipe.MpPoseGetCoordinate",
              "Ops.Extension.Mediapipe.MpPoseTracking"
          ],
          "description": ""
      },
      {
          "name": "Ops.Extension.OpenType.",
          "summary": "load OTF & TTF fonts via OpenType library",
          "shortName": "OpenType",
          "nameSpace": "Ops.Extension.OpenType",
          "shortNameDisplay": "OpenType",
          "numOps": 2,
          "ops": [
              "Ops.Extension.OpenType.OpentypeFont",
              "Ops.Extension.OpenType.OpentypeToSvgPath"
          ],
          "description": ""
      },
      {
          "name": "Ops.Extension.Osc",
          "summary": "Use a WebSocket-Brigde to receive OSC in the browser",
          "shortName": "Osc",
          "nameSpace": "Ops.Extension.Osc",
          "shortNameDisplay": "Osc",
          "numOps": 4,
          "ops": [
              "Ops.Extension.Osc.OscArray",
              "Ops.Extension.Osc.OscMessage",
              "Ops.Extension.Osc.OscNumber",
              "Ops.Extension.Osc.OscNumbers"
          ],
          "licence": {
              "name": "MIT"
          },
          "description": "",
          "visibility": "public"
      },
      {
          "name": "Ops.Extension.ReactionDiffusion",
          "summary": "Cellular automata system as feedback loop texture",
          "shortName": "ReactionDiffusion",
          "nameSpace": "Ops.Extension.ReactionDiffusion",
          "shortNameDisplay": "ReactionDiffusion",
          "numOps": 1,
          "ops": [
              "Ops.Extension.ReactionDiffusion.ReactionDiffusionSystem_v2"
          ],
          "licence": {
              "name": "MIT"
          }
      },
      {
          "name": "Ops.Extension.SocketCluster",
          "summary": "Connect to a SocketCluster server and manage the connection",
          "shortName": "SocketCluster",
          "nameSpace": "Ops.Extension.SocketCluster",
          "shortNameDisplay": "SocketCluster",
          "numOps": 6,
          "ops": [
              "Ops.Extension.SocketCluster.SocketClusterReceiveObject",
              "Ops.Extension.SocketCluster.SocketClusterReceiveTrigger",
              "Ops.Extension.SocketCluster.SocketClusterSendObject",
              "Ops.Extension.SocketCluster.SocketClusterSendTrigger",
              "Ops.Extension.SocketCluster.SocketClusterTopicInfo",
              "Ops.Extension.SocketCluster.SocketCluster_v2"
          ],
          "licence": {
              "name": "MIT"
          }
      },
      {
          "name": "Ops.Extension.Standalone",
          "summary": "",
          "shortName": "Standalone",
          "nameSpace": "Ops.Extension.Standalone",
          "shortNameDisplay": "Standalone",
          "numOps": 23,
          "ops": [
              "Ops.Extension.Standalone.Ffmpeg",
              "Ops.Extension.Standalone.Files.CreateFile",
              "Ops.Extension.Standalone.Files.Exist",
              "Ops.Extension.Standalone.Files.FileUrlToPath",
              "Ops.Extension.Standalone.Files.Makedir",
              "Ops.Extension.Standalone.Files.OpenFileManager",
              "Ops.Extension.Standalone.Files.PathToFileUrl",
              "Ops.Extension.Standalone.Files.ReadDir",
              "Ops.Extension.Standalone.Files.ResolvePath",
              "Ops.Extension.Standalone.Files.SelectDir",
              "Ops.Extension.Standalone.Files.SelectFile",
              "Ops.Extension.Standalone.Files.Stat",
              "Ops.Extension.Standalone.Files.SystemDirs",
              "Ops.Extension.Standalone.Files.Watch",
              "Ops.Extension.Standalone.Files.WriteBinaryFileFromBase64",
              "Ops.Extension.Standalone.Files.WriteTextFile",
              "Ops.Extension.Standalone.Net.HttpServer",
              "Ops.Extension.Standalone.Net.HttpServerResponse",
              "Ops.Extension.Standalone.Net.IpAddress",
              "Ops.Extension.Standalone.Net.Osc",
              "Ops.Extension.Standalone.Net.OscSend",
              "Ops.Extension.Standalone.Net.Osc_v2",
              "Ops.Extension.Standalone.Net.ReadTextFile"
          ]
      },
      {
          "name": "Ops.Extension.SuperShapes",
          "summary": "",
          "shortName": "SuperShapes",
          "nameSpace": "Ops.Extension.SuperShapes",
          "shortNameDisplay": "SuperShapes",
          "numOps": 2,
          "ops": [
              "Ops.Extension.SuperShapes.SuperShapesCpu",
              "Ops.Extension.SuperShapes.SuperShapesGpu"
          ]
      },
      {
          "name": "Ops.Extension.TeachableMachines",
          "summary": "Teachable Machines library by Google",
          "shortName": "TeachableMachines",
          "nameSpace": "Ops.Extension.TeachableMachines",
          "shortNameDisplay": "TeachableMachines",
          "numOps": 3,
          "ops": [
              "Ops.Extension.TeachableMachines.AudioClassifier",
              "Ops.Extension.TeachableMachines.ImageClassifier_v2",
              "Ops.Extension.TeachableMachines.PoseDetection_v2"
          ],
          "licence": {
              "name": "Apache License 2.0"
          }
      },
      {
          "name": "Ops.Extension.Trackingjs.",
          "summary": "trackingjs library: A modern approach for Computer Vision on the web",
          "shortName": "Trackingjs",
          "nameSpace": "Ops.Extension.Trackingjs",
          "shortNameDisplay": "Trackingjs",
          "numOps": 1,
          "ops": [
              "Ops.Extension.Trackingjs.TrackWebcamColor"
          ],
          "description": ""
      },
      {
          "name": "Ops.Extension.Voice.",
          "summary": "text to speech and speech recognition ops",
          "shortName": "Voice",
          "nameSpace": "Ops.Extension.Voice",
          "shortNameDisplay": "Voice",
          "numOps": 2,
          "ops": [
              "Ops.Extension.Voice.Say_v2",
              "Ops.Extension.Voice.SpeechRecognition"
          ],
          "description": ""
      }
  ],
  "teamNamespaces": [],
  "libs": [
      "ammo.js",
      "ammo.wasm.js",
      "artoolkit.js",
      "artoolkit_wasm.js",
      "artoolkit_worker.js",
      "bodymovin.js",
      "cannon.js",
      "chroma.js",
      "clmtrackr.js",
      "colorrick.js",
      "d3.js",
      "draco_decoder.js",
      "draco_decoder_wasm.js",
      "draco_wasm_wrapper.js",
      "earcut.js",
      "echarts.js",
      "exrloader.js",
      "fflate.js",
      "fuse.js",
      "glsltokenizer.js",
      "hammer.js",
      "hashids.js",
      "iwanthue.js",
      "jeelizFaceFilter.js",
      "jeelizGlanceTracker.js",
      "jeelizPupillometry.js",
      "jszip.js",
      "lottie.js",
      "lottie_canvas.min.js",
      "lottie_svg.js",
      "marked.js",
      "meyda.js",
      "ml5.js",
      "moment-with-locales.js",
      "moment.js",
      "moment_with_timezones.js",
      "mp_camera_utils.js",
      "mp_face.js",
      "mp_hands.js",
      "mp_pose.js",
      "mqttws31-min.js",
      "navigo.js",
      "opentype.js",
      "p5.js",
      "pako.js",
      "perlin.js",
      "platform.js",
      "posenet-tfjs.js",
      "posenet.js",
      "qrcode.js",
      "resemble.js",
      "rhill-voronoi-core.js",
      "socket.io.min.js",
      "socketcluster-client.js",
      "start-audio-context.js",
      "teachablemachine_tf_speech_image_pose.js",
      "tess2.js",
      "tone.js",
      "tracking.js",
      "twitterFetcher_min.js",
      "webaudio-peaks.js",
      "webvr-polyfill.js",
      "whammy.js"
  ],
  "coreLibs": [
      "ammodebugdrawer",
      "ammoworld",
      "cgl_branchprofiler",
      "cgl_copytexture",
      "cgl_cubemapframebuffer",
      "cgl_deprecatedMeshFeedback",
      "cgl_deprecatedjson3d",
      "cgl_light",
      "cgl_pixelreader",
      "cgl_rendertargets",
      "cgl_shadergraph",
      "cgl_shadermodifier",
      "cgl_texturemath",
      "cgl_wireframes",
      "cgp_shadermodifier",
      "interactionneededbutton",
      "plan",
      "standalone_electron",
      "subpatchop",
      "vargetset"
  ]
}
